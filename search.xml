<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Butterfly主题美化之路</title>
    <url>/posts/23d5be7c/</url>
    <content><![CDATA[
Butterfly主题美化之路
以下内容摘自Butterfly - A Simple and Card UI Design theme for Hexo
安装主题
在hexo根目录下执行
gitee（适合中国大陆）
git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly
github（建议先用这个）
git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly

升级方法：在主题目录下，运行git pull

也可以用npm方法安装
npm install hexo-theme-butterfly

升级方法：在 Hexo 根目录下，运行 npm update hexo-theme-butterfly

应用主题
在hexo根目录写下的_config.yml有个theme：修改为以下
theme: butterfly
如果你没有 pug 以及 stylus 的渲染器，请下载安装：
npm install hexo-renderer-pug hexo-renderer-stylus hexo-butterfly-extjs --save 
Front-matter
Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。
Page Front-matter 用于 配置页面
Post Front-matter 用于 配置文章页

如果标注的参数，可根据自己需要添加，不用全部都写在 markdown 里 可选


Page Front-matter

---title:date:updated:type:comments:description:keywords:top_img:mathjax:katex:aside:aplayer:highlight_shrink:random:limit:  type:  value:---



参数
解释




title
【必需】页面标题


date
【必需】页面创建日期


type
【必需】标签、分类和友情链接三个页面需要配置


updated
【可选】页面更新日期


description
【可选】页面描述


keywords
【可选】页面关键词


comments
【可选】显示页面评论模块 （默认 true）


top_img
【可选】页面顶部图片


mathjax
【可选】显示 mathjax （当设置 mathjax 的 per_page： false 时，才需要配置，默认 false）


katex
【可选】显示 katex （当设置 katex 的 per_page： false 时，才需要配置，默认 false）


aside
【可选】显示侧边栏 （默认 true）


aplayer
【可选】在需要的页面加载 aplayer 的 js 和 css，请参考文章下面的 配置音樂


highlight_shrink
【可选】配置代码框是否展开 （true/false） （默认为设置中 highlight_shrink 的配置）


random
【可选】配置友情链接是否随机排序（默认为 false）


limit
【可选】配置说显示数量


limit.type
【可选】配置说显示数量的类型 （date 或者 num）


limit.value
【可选】配置说显示数量的值




Post Front-matter

---title:date:updated:tags:categories:keywords:description:top_img:comments:cover:toc:toc_number:toc_style_simple:copyright:copyright_author:copyright_author_href:copyright_url:copyright_info:mathjax:katex:aplayer:highlight_shrink:aside:abcjs:---



写法
解释




title
【必需】文章标题


date
【必需】页面创建日期


updated
【可选】页面更新日期


description
【可选】页面描述


tags
【可选】文章标签


keywords
【可选】页面关键词


top_img
【可选】页面顶部图片


categories
【可选】文章分类


cover
【可选】文章缩略图（如果没有设置 top_img，文章页顶部将显示缩略图，可设为 false/图片地址/留空）


comments
【可选】显示文章评论模块（默认 true）


toc
【可选】显示文章 TOC（默认为设置中 toc 的 enable 配置）


toc_number
【可选】显示 toc_number（默认为设置中 toc 的 number 配置）


toc_style_simple
【可选】显示 toc 简洁模式


copyright
【可选】显示文章版权模块（默认为设置中 post_copyright 的 enable 配置）


copyright_author
【可选】文章版权模块的文章作者


copyright_author_href
【可选】文章版权模块的链接文章作者


copyright_url
【可选】文章版权模块的链接文章链接


copyright_info
【可选】文章版权模块的文字版权声明


mathjax
【可选】显示 mathjax（当设置 mathjax 的 per_page： false 时，才需要配置，默认 false ）


katex
【可选】显示 katex （当设置 katex 的 per_page： false 时，才需要配置，默认 false ）


aplayer
【可选】在需要的页面加载 aplayer 的 js 和 css，请参考文章下面的 配置音乐


highlight_shrink
【可选】配置代码框是否展开（true/false）（默认为设置中 highlight_shrink 的配置）


aside
【可选】显示侧边栏 （默认 true）


abcjs
【可选】加载 abcjs （当设置 abcjs 的 per_page： false 时，才需要配置，默认 false ）



标签页

标签页文件名不一定是 tags， 例子中的 tags 只是一个示例
记得添加 type: &quot;tags&quot;



前往你的 Hexo 的根目录


输入 hexo new page tags


你会找到 这个文件source/tags/index.md


修改此文档 ：


---title: 标签date: 2018-01-05 00:00:00type: &quot;tags&quot;orderby: randomorder: 1---




参数
解释




type
【必须】页面类型，必须为 tags


orderby
【可选】排序方式 ：random - 随机排序 / name - 标签名字排序 / length - 标签数量排序


order
【可选】排序次序： 1（升序），-1（降序）



分类页

分类页文件名不一定是 categories， 例子中的 categories 只是一个示例
记得添加 type: &quot;categories&quot;


前往你的 Hexo 的根目录
输入 hexo new page categories
你会找到 这个文件source/categories/index.md
修改此文档 ：

---title: 分类date: 2024-11-05 12:44:54type: &quot;categories&quot;---

友情链接

友情链接页文件名不一定是 link， 例子中的 link 只是一个示例
记得添加 type: &quot;link&quot;


前往你的 Hexo 的根目录
输入 hexo new page link
你会找到 这个文件source/link/index.md
修改此文档 ：

---title: 友情链接date: 2024-11-05 12:47:52type: &quot;link&quot;---
在 Hexo 根目录中的 （如果没有 _data 文件夹，请自行创建），创建一个文件 source/_data/link.yml
- class_name: 友情链接  class_desc: 那些人，那些事  link_list:    - name: Hexo      link: https://hexo.io/zh-tw/      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg      descr: 快速、簡單且強大的網誌框架- class_name: 网站  class_desc: 值得推荐的网站  link_list:    - name: 严千屹      link: https://blog.qianyios.top/      avatar: https://blog.qianyios.top/img/fluid.png      descr: 博客
404页面
# A simple 404 pageerror_404:  enable: false  subtitle: &#x27;页面不存在&#x27;  background: /img/error-page.png
配置文件速读
# --------------------------------------# Hexo Butterfly Theme Configuration# If you have any questions, please refer to the documentation# Chinese: https://butterfly.js.org/# English: https://butterfly.js.org/en/# --------------------------------------# --------------------------------------# Navigation Settings# --------------------------------------nav:  # 导航栏 Logo 图片  logo:  # 是否显示标题  display_title: true  # 是否固定导航栏  fixed: falsemenu:  # 首页: / || fas fa-home  # 列表||fas fa-list:  #   音乐: /music/ || fas fa-music  #   电影: /movies/ || fas fa-video  首页: / || fas fa-home  标签: /tags/ || fas fa-tags  分类: /categories/ || fas fa-folder-open  友链: /link/ || fas fa-link  列表 || fas fa-list || hide:    音乐: /music/ || fas fa-music    电影: /movies/ || fas fa-video# --------------------------------------# Code Blocks Settings# --------------------------------------code_blocks:  # 代码块主题: darker / pale night / light / ocean / false  theme: light  # 是否使用 Mac 风格  macStyle: true  # 代码块高度限制（单位: px）  height_limit: 200  # 是否自动换行  word_wrap: false  # 工具栏  # 是否显示复制按钮  copy: true  # 是否显示语言标籤  language: true  # true: 收缩代码块 | false: 展开代码块 | none: 展开代码块并隐藏按钮  shrink: false  # 是否显示全屏显示代码块按钮  fullpage: false# 社交媒体链接# 格式:#   icon: 链接 || 描述 || 颜色social:  # fab fa-github: https://github.com/xxxxx || Github || &#x27;#24292e&#x27;  # fas fa-envelope: mailto:xxxxxx@gmail.com || Email || &#x27;#4a7dbe&#x27;# --------------------------------------# 图片设置# --------------------------------------# 网站的 favicon 图标favicon: https://blog.qianyios.top/img/fluid.png# 头像设置avatar:# 头像图片链接  img: https://blog.qianyios.top/img/fluid.png  # 是否启用头像效果  effect: true# 禁用所有横幅图片disable_top_img: true# 如果页面未设置横幅，则显示默认的横幅图片default_top_img:# 主页的横幅图片index_img:# 归档页的横幅图片archive_img:# 注意: 是标籤页（单个标籤），不是标籤页面（所有标籤）tag_img:# 标籤页的横幅图片，可以为每个标籤设置横幅图片# 格式:#  - 标籤名: 图片链接tag_per_img:# 注意: 是分类页（单个分类），不是分类页面（所有分类）category_img:# 分类页的横幅图片，可以为每个分类设置横幅图片# 格式:#  - 分类名: 图片链接# Format:#  - category name: xxxxxcategory_per_img:# 页脚的背景图片footer_img: false# 网站背景# 可以设置为颜色或图片# 图片格式: url(http://xxxxxx.com/xxx.jpg)background:# 封面设置cover:  # 是否禁用封面  index_enable: true  aside_enable: true  archives_enable: true  # 当未设置封面时，显示默认封面  default_cover:    # - xxx.jpg# 替换损坏的图片error_img:# 友链页面的错误图片  flink: /img/friend_404.gif# 文章页面的错误图片  post_page: /img/404.jpg# 简单的 404 页面error_404:  # 是否启用 404 页面  enable: false  # 404 页面的副标题  subtitle: &#x27;页面不存在！&#x27;  # 404 页面的卡片背景图片  background: /img/error-page.png# 文章元数据设置post_meta:  # 主页页面  page:    # 日期类型: created / updated / both    date_type: created    # 日期格式: date / relative    date_format: date    # 是否显示分类    categories: true    # 是否显示标籤    tags: false    # 是否显示文字标籤    label: true  # 文章页面  post:    # 元数据位置: left / center    position: left    # 日期类型: created / updated / both    date_type: both    # 日期格式: date / relative    date_format: date    categories: true    tags: true    label: true# --------------------------------------# 首页设置# --------------------------------------# 首页头图的设置# 默认: 头图全屏，站点信息在中间# 站点信息的位置，例如: 300px/300em/300rem/10%index_site_info_top:# 头图的高度，例如: 300px/300em/300remindex_top_img_height:# 首页的副标题设置subtitle:  # 是否启用副标题  enable: false  # 是否启用打字机效果  effect: true  # 自定义 typed.js  # https://github.com/mattboldt/typed.js/#customization  typed_option:  # 来源 - 调用第三方服务 API（仅限中文）  # 它将首先显示来源，然后显示副标题内容  # 选择: false/1/2/3  # false - 禁用此功能  # 1 - hitokoto.cn  # 2 - yijuzhan.com  # 3 - jinrishici.com  source: false  # 如果关闭打字机效果，副标题将仅显示 sub 的第一行内容  sub:#首页上的文章布局# 1：封面在左边，信息在右边# 2：封面在右边，信息在左边# 3：封面和信息在左右交替# 4：封面在上面，信息在下面# 5：信息显示在封面上# 6：砌体布局——覆盖在顶部，信息在底部# 7：砌体布局-信息显示在封面上index_layout: 3# 在首页显示文章简介# 1: 描述# 2: 两者（如果存在描述，将显示描述，否则显示自动摘要）# 3: 自动摘要（默认）# false: 不显示文章简介index_post_content:  method: 1  # If you set method to 2 or 3, the length need to config  length: 500# --------------------------------------# 文章设置# --------------------------------------toc:# 是否在文章中显示目录  post: true# 是否在文章中显示目录  page: false# 是否显示目录编号  number: true# 是否默认展开目录  expand: false  # 是否使用简洁风格（仅适用于文章）  style_simple: false    # 是否显示滚动百分比  scroll_percent: truepost_copyright:# 是否启用版权声明  enable: true  # 是否进行文章 URL 解码  decode: false  # 作者链接  author_href: https://blog.qianyios.top  license: CC BY-NC-SA 4.0  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/# 赞助/打赏reward:# 是否启用打赏  enable: false  # 打赏案例文本  text:  QR_code:    # - img: /img/wechat.jpg    #   link:    #   text: wechat    # - img: /img/alipay.jpg    #   link:    #   text: alipay# 文章编辑# 轻鬆在线浏览和编辑博客源代码post_edit:# 是否启用在线编辑  enable: false  # url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/  url:# 相关文章related_post:# 是否显示相关文章  enable: false  # 显示的文章数量  limit: 6  # Choose: created / updated  date_type: created# 选择: 1 / 2 / false# 1: “下一篇文章”将链接到旧文章# 2: “下一篇文章”将链接到新文章# false: 禁用分页post_pagination: 1# 显示文章过期通知noticeOutdate:  # 是否启用过期通知  enable: true  # Style: simple / flat  style: flat  # 多少天后显示通知  limit_day: 365  # Position: top / bottom  position: top  message_prev: 已经过了  message_next: 天自上次更新，文章内容可能已过时。# --------------------------------------# 页脚设置# --------------------------------------footer:  owner:    enable: true    since: 2024  # 自定义文本  custom_text: 严千屹博客  # Copyright of theme and framework  copyright: true# --------------------------------------# 侧边栏设置# --------------------------------------aside:# 是否启用侧边栏  enable: true  # 是否默认隐藏侧边栏  hide: false  # 是否在右下角显示隐藏侧边栏的按钮  button: true  # 移动设备上是否启用侧边栏  mobile: true   # 侧边栏位置：left / right  position: right  display:    # 归档页面是否显示侧边栏    archive: true    # 标籤页面是否显示侧边栏    tag: true    # 分类页面是否显示侧边栏    category: true  card_author:  # 是否显示作者信息卡片    enable: true    # 作者描述    description:    button:    # 是否显示按钮      enable: false      icon: fab fa-github      text: Follow Me      link: https://github.com/xxxxxx  card_announcement:  # 是否显示公告卡片    enable: true    # 公告内容    content: 鄙人初耕运维门道，华为云计算hcip证书获得者，往后深耕Linux，docker，k8s运维。  card_recent_post:  # 是否显示最近文章卡片    enable: true    # 显示文章数量，0 表示显示所有    limit: 5      # 排序方式：date / updated    sort: date    sort_order:  card_newest_comments:  # 是否显示最新评论卡片    enable: false    sort_order:    # 显示评论数量    limit: 6     # 单位：分钟，保存数据到 localStorage    storage: 10     # 是否显示头像    avatar: true  card_categories:   # 是否显示分类卡片    enable: true    # 显示分类数量，0 表示显示所有    limit: 8    # Choose: none / true / false    expand: none    sort_order:  card_tags:  # 是否显示标籤卡片    enable: true    # 显示标籤数量，0 表示显示所有    limit: 40    # 是否启用颜色    color: false    # 标籤排序方式：random/name/length    orderby: random    # 排序顺序：1 表示升序，-1 表示降序    order: 1    sort_order:  card_archives:      # 是否显示归档卡片    enable: true    # 归档类型：monthly / yearly    type: monthly    # 日期格式，例如：YYYY年MM月    format: MMMM YYYY    # 排序顺序：1 表示升序，-1 表示降序    order: -1    # 显示归档数量，0 表示显示所有    limit: 8    sort_order:  card_post_series:  # 是否显示系列文章卡片    enable: true    # 标题显示系列名称    series_title: false    # 排序方式：title 或 date    orderBy: &#x27;date&#x27;    # 排序顺序：1 表示升序，-1 表示降序    order: -1  card_webinfo:  # 是否显示网站信息卡片    enable: true    # 是否显示文章数量    post_count: true    # 是否显示最后推送日期    last_push_date: true    sort_order:    # 发佈日期与当前日期的时间差    # 格式：Month/Day/Year Time 或 Year/Month/Day Time    # 如果不启用此功能，请留空    runtime_date:# --------------------------------------# 右下角按钮设置# --------------------------------------# 右下角按钮与底部的距离（默认单位：px）rightside_bottom:# 简繁转换设置translate:# 是否启用简繁转换  enable: false  # 按钮文本  default: 繁  # 网站语言（1 - 繁体中文 / 2 - 简体中文）  defaultEncoding: 2  # 转换延迟  translateDelay: 0  # 按钮在简体中文时的文本  msgToTraditionalChinese: &#x27;繁&#x27;  # 按钮在繁体中文时的文本  msgToSimplifiedChinese: &#x27;簡&#x27;#閲读模式readmode: true# 暗黑模式设置darkmode:# 是否启用暗黑模式  enable: true  # 切换暗黑/明亮模式的按钮  button: true  # 是否自动切换暗黑/明亮模式  # autoChangeMode: 1  跟随系统设置，如果系统不支持暗黑模式，则在晚上 6 点到早上 6 点之间切换暗黑模式  # autoChangeMode: 2  在晚上 6 点到早上 6 点之间切换暗黑模式  # autoChangeMode: false  不自动切换  autoChangeMode: false  # 设置明亮模式时间，值在 0 到 24 之间。如果未设置，默认值为 6 和 18   start:  end:# 在返回顶部按钮中显示滚动百分比rightside_scroll_percent: false# 不要修改以下设置，除非你知道它们的工作原理# 选择：readmode,translate,darkmode,hideAside,toc,chat,comment# 不要重複相同的值rightside_item_order:# 是否启用右侧项目顺序  enable: false  # 隐藏的默认项目：readmode,translate,darkmode,hideAside  hide:  # 显示的默认项目：toc,chat,comment  show:# --------------------------------------# 全局设置# --------------------------------------# 锚点设置anchor:  # 滚动时，URL 将根据标题 ID 更新  auto_update: false # 点击标题滚动并更新锚点  click_to_scroll: false# 图片标题photofigcaption: false# 複制设置copy:# 是否启用複制功能  enable: true  # 在複制的内容后添加版权信息  copyright:    enable: true    # 当複制字符数超过 limit_count 时添加版权信息    limit_count: 150# 需要安装 hexo-wordcount 插件wordcount:# 是否启用字数统计  enable: true  # 在文章元信息中显示字数统计  post_wordcount: true  # 在文章元信息中显示閲读时间  min2read: true  # 在侧边栏网站信息中显示总字数  total_wordcount: true# 不蒜子 PV / UV 统计busuanzi:  site_uv: true  site_pv: true  page_pv: true# --------------------------------------# 数学公式设置# --------------------------------------# 关于 per_page# 如果设置为 true，将在每个页面加载 mathjax/katex 脚本# 如果设置为 false，将根据你的设置加载 mathjax/katex 脚本（在页面的 front-matter 中添加 &#x27;mathjax: true&#x27; 或者 &#x27;katex: true&#x27;）math:  # 选择：mathjax, katex  # 如果不需要数学公式，保持为空  use:  per_page: true  hide_scrollbar: false  mathjax:    # 启用上下文菜单    enableMenu: true    # 选择：all / ams / none，这控制是否对公式编号以及如何编号    tags: none  katex:    # 启用複制 KaTeX 公式    copy_tex: false# --------------------------------------# 搜索设置# --------------------------------------search:  # 选择：algolia_search / local_search / docsearch  # 如果不需要搜索功能，保持为空  use:  placeholder:  # Algolia 搜索  algolia_search:    # 每页搜索结果数量    hitsPerPage: 6  # 本地搜索  local_search:    # 页面加载时预加载搜索数据    preload: false    # 每篇文章显示的顶部 n 个搜索结果，设置为 -1 显示所有结果    top_n_per_article: 1    # 将 HTML 字符串反转义为可读内容    unescape: false    CDN:  # Docsearch  # https://docsearch.algolia.com/  docsearch:    appId:    apiKey:    indexName:    option:# --------------------------------------# 分享系统# --------------------------------------share:  # 选择：sharejs / addtoany  # 如果不需要分享功能，保持为空  use: sharejs  # Share.js  # https://github.com/overtrue/share.js  sharejs:    sites: facebook,twitter,wechat,weibo,qq  # AddToAny  # https://www.addtoany.com/  addtoany:    item: facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link# --------------------------------------# 评论系统# --------------------------------------comments:  # 最多两个评论系统，第一个将作为默认显示  # 如果不需要评论功能，保持为空  # 选择：Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk  # 两个评论系统的格式：Disqus,Waline  use:  # 按钮旁边显示评论系统名称  text: true  # 懒加载：评论系统将在评论元素进入浏览器视口时加载  # 如果设置为 true，评论计数将无效  lazyload: false  # 在文章顶部图片中显示评论计数  count: false  # 在主页显示评论计数  card_post_count: false# Disqus# https://disqus.com/disqus:  shortname:  # For newest comments widget  apikey:# Alternative Disqus - Render comments with Disqus API# https://github.com/SukkaW/DisqusJSdisqusjs:  shortname:  apikey:  option:# Livere# https://www.livere.com/livere:  uid:# Gitalk# https://github.com/gitalk/gitalkgitalk:  client_id:  client_secret:  repo:  owner:  admin:  option:# Valine# https://valine.js.orgvaline:  appId:  appKey:  avatar: monsterid  # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)  serverURLs:  bg:  # Use Valine visitor count as the page view count  visitor: false  option:# Waline - A simple comment system with backend support fork from Valine# https://waline.js.org/waline:  serverURL:  bg:  # Use Waline pageview count as the page view count  pageview: false  option:# Utterances# https://utteranc.es/utterances:  repo:  # Issue Mapping: pathname/url/title/og:title  issue_term: pathname  # Theme: github-light/github-dark/github-dark-orange/icy-dark/dark-blue/photon-dark  light_theme: github-light  dark_theme: photon-dark  js:  option:# Facebook Comments Plugin# https://developers.facebook.com/docs/plugins/comments/facebook_comments:  app_id:  # optional  user_id:  pageSize: 10  # Choose: social / time / reverse_time  order_by: social  lang: en_US# Twikoo# https://github.com/imaegoo/twikootwikoo:  envId:  region:  # Use Twikoo visitor count as the page view count  visitor: false  option:# Giscus# https://giscus.app/giscus:  repo:  repo_id:  category_id:  light_theme: light  dark_theme: dark  js:  option:# Remark42# https://remark42.com/docs/configuration/frontend/remark42:  host:  siteId:  option:# Artalk# https://artalk.js.org/guide/frontend/config.htmlartalk:  server:  site:  # Use Artalk visitor count as the page view count  visitor: false  option:# --------------------------------------# 聊天服务配置# --------------------------------------chat:  # 聊天服务类型，可选值：chatra/tidio/crisp，如果不需要聊天功能则留空  use:   # 推荐使用聊天按钮，会在网站右下角创建一个按钮，并隐藏原始按钮  rightside_button: false  # 原始聊天按钮在向上滚动时显示，向下滚动时隐藏  button_hide_show: false# https://chatra.io/chatra:  id:# https://www.tidio.com/tidio:  public_key:# https://crisp.chat/en/crisp:  website_id:# --------------------------------------# 分析服务配置# --------------------------------------# https://tongji.baidu.com/web/welcome/loginbaidu_analytics:# https://analytics.google.com/analytics/web/google_analytics:# https://www.cloudflare.com/zh-tw/web-analytics/cloudflare_analytics:# https://clarity.microsoft.com/microsoft_clarity:# https://umami.is/umami_analytics:  enable: false  # For self-hosted setups, configure the hostname of the Umami instance  serverURL:  website_id:  option:  UV_PV:    site_uv: false    site_pv: false    page_pv: false    # Umami Cloud (API key) / self-hosted Umami (token)    token:# --------------------------------------# 广告配置# --------------------------------------# Google Adsensegoogle_adsense:  enable: false  auto_ads: true  js: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js  client:  enable_page_level_ads: true# Insert ads manually# Leave it empty if you don&#x27;t need adsad:  # Insert ads in the index (every three posts)  index:  # Insert ads in aside  aside:  # Insert ads in the post (before pagination)  post:# --------------------------------------# 站点验证配置# --------------------------------------site_verification:  # - name: google-site-verification  #   content: xxxxxx  # - name: baidu-site-verification  #   content: xxxxxxx# --------------------------------------# 美化 / 效果# --------------------------------------# 主题颜色自定义# 注意：颜色值必须用双引号，如 &quot;#000&quot;，否则可能会导致错误！# 主题颜色配置# theme_color:#   是否启用主题颜色#   enable: true#   主颜色#   main: &quot;#49B1F5&quot;#   分页器颜色#   paginator: &quot;#00c4b6&quot;#   按钮悬停颜色#   button_hover: &quot;#FF7242&quot;#   文本选择颜色#   text_selection: &quot;#00c4b6&quot;#   链接颜色#   link_color: &quot;#99a9bf&quot;#   元数据颜色#   meta_color: &quot;#858585&quot;#   水平线颜色#   hr_color: &quot;#A4D8FA&quot;#   代码前景色#   code_foreground: &quot;#F47466&quot;#   代码背景色#   code_background: &quot;rgba(27, 31, 35, .05)&quot;#   目录颜色#   toc_color: &quot;#00c4b6&quot;#   引用块填充颜色#   blockquote_padding_color: &quot;#49b1f5&quot;#   引用块背景颜色#   blockquote_background_color: &quot;#49b1f5&quot;#   滚动条颜色#   scrollbar_color: &quot;#49b1f5&quot;#   浅色模式下的主题颜色#   meta_theme_color_light: &quot;ffffff&quot;#   深色模式下的主题颜色#   meta_theme_color_dark: &quot;#0d0d0d&quot;# 分类和标籤页面的用户界面设置# 选择：index - 与主页 UI 相同 / default - 与归档 UI 相同# 留空或设置为 indexcategory_ui:tag_ui:# Rounded corners for UI elementsrounded_corners_ui: true# 拉伸行使每行宽度相等text_align_justify: false# 为页眉和页脚添加遮罩mask:  header: true  footer: true# 加载动画preloader:  enable: false  # 资源  # 1. 全屏加载  # 2. 进度条  source: 1  # pace theme (see https://codebyzach.github.io/pace/)  pace_css_url:# 页面过渡效果enter_transitions: true# 默认显示模式 - light (默认) / darkdisplay_mode: light# 美化文章内容的配置beautify:  # 是否启用美化  enable: false  # 指定美化的范围 (site 或 post)  field: post  # 指定标题前缀图标，如 &#x27;\f0c1&#x27;  title-prefix-icon:  # 指定标题前缀图标的颜色，如 &#x27;#F47466&#x27;  title-prefix-icon-color:# 全局字体设置# 除非您知道它们的工作原理，否则不要修改以下设置font:  global_font_size:  code_font_size:  font_family:  code_font_family:# 网站标题和副标题的字体设置blog_title_font:  font_link:  font_family:# 分隔符图标的设置hr_icon:# 是否启用分隔符图标  enable: true  # Font Awesome 图标的 unicode 值，如 &#x27;\3423&#x27;  icon:  icon_top:# 打字机效果# https://github.com/disjukr/activate-power-modeactivate_power_mode:  # 是否启用打字机效果  enable: false  # 是否启用彩色效果  colorful: true  # 是否启用震动效果  shake: true  # 是否在移动设备上启用  mobile: false# 背景效果# --------------------------------------# canvas_ribbon# 参见: https://github.com/hustcc/ribbon.jscanvas_ribbon:  # 是否启用 canvas_ribbon  enable: false  # ribbon 的大小  size: 150  # ribbon 的不透明度 (0 ~ 1)  alpha: 0.6  zIndex: -1  # 是否点击更改颜色  click_to_change: false  # 是否在移动设备上启用  mobile: false# Fluttering Ribboncanvas_fluttering_ribbon:  enable: false  mobile: false# canvas_nest# https://github.com/hustcc/canvas-nest.jscanvas_nest:  # 是否启用 canvas_nest  enable: true  # 线条颜色，默认: &#x27;0,0,0&#x27;; RGB 值: (R,G,B).(注意: 使用 &#x27;,&#x27; 分隔.)  color: &#x27;0,0,255&#x27;  # 线条的不透明度 (0~1)  opacity: 0.7  # 背景的 z-index 属性  zIndex: -1  # 线条数量  count: 99  # 是否在移动设备上启用  mobile: false# 鼠标点击效果: 烟花fireworks:  # 是否启用烟花效果  enable: true  zIndex: 9999  # 是否在移动设备上启用  mobile: false# 鼠标点击效果: 心形符号click_heart:  # 是否启用心形符号效果  enable: false  # 是否在移动设备上启用  mobile: false# 鼠标点击效果: 文字clickShowText:  # 是否启用文字效果  enable: false  text:    # - I    # - LOVE    # - YOU  fontSize: 15px  # 是否随机显示文字  random: false  # 是否在移动设备上启用  mobile: false# --------------------------------------# Lightbox Settings# --------------------------------------# Choose: fancybox / medium_zoom# https://github.com/francoischalifour/medium-zoom# https://fancyapps.com/fancybox/# Leave it empty if you don&#x27;t need lightboxlightbox:# --------------------------------------# 标籤外挂设置# --------------------------------------# 系列series:# 是否启用系列  enable: false  # 按标题或日期排序  orderBy: &#x27;title&#x27;  # 排序顺序：1 表示升序，-1 表示降序  order: 1  number: true# ABCJS - ABC 音乐符号插件# https://github.com/paulrosen/abcjsabcjs:  enable: false  per_page: true# Mermaid# https://github.com/mermaid-js/mermaidmermaid:  enable: false  # Write Mermaid diagrams using code blocks  code_write: false  # built-in themes: default / forest / dark / neutral  theme:    light: default    dark: dark# chartjs# see https://www.chartjs.org/docs/latest/chartjs:  enable: false  # Do not modify unless you understand how they work.  # The default settings are only used when the MD syntax is not specified.  # General font color for the chart  fontColor:    light: &#x27;rgba(0, 0, 0, 0.8)&#x27;    dark: &#x27;rgba(255, 255, 255, 0.8)&#x27;  # General border color for the chart  borderColor:    light: &#x27;rgba(0, 0, 0, 0.1)&#x27;    dark: &#x27;rgba(255, 255, 255, 0.2)&#x27;  # Background color for scale labels on radar and polar area charts  scale_ticks_backdropColor:    light: &#x27;transparent&#x27;    dark: &#x27;transparent&#x27;# Note - Bootstrap Calloutnote:  # Note tag style values:  #  - simple    bs-callout old alert style. Default.  #  - modern    bs-callout new (v2-v3) alert style.  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.  #  - disabled  disable all CSS styles import of note tag.  style: flat  icons: true  border_radius: 3  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).  # Offset also applied to label tag variables. This option can work with disabled note tag.  light_bg_offset: 0# --------------------------------------# 其他设置# --------------------------------------# https://github.com/MoOx/pjaxpjax:# 是否启用 pjax  enable: false # 排除指定页面不使用 pjax，如 &#x27;/music/&#x27;  exclude:    # - /xxxxxx/# 注入 CSS 和脚本 (aplayer/meting)aplayerInject:# 是否启用注入  enable: false  # 是否每页启用  per_page: true# Snackbar - Toast Notification# https://github.com/polonel/SnackBar# position: top-left / top-center / top-right / bottom-left / bottom-center / bottom-rightsnackbar:  enable: false  position: bottom-left  # The background color of Toast Notification in light mode and dark mode  bg_light: &#x27;#49b1f5&#x27;  bg_dark: &#x27;#1f1f1f&#x27;# Instant.page# https://instant.page/instantpage: false# Pangu - 在中文字符和英文字符之间插入空格# https://github.com/vinta/pangu.jspangu:  enable: false  # Specify the field to use pangu (site or post)  field: site# Lazyload# https://github.com/verlok/vanilla-lazyloadlazyload:  enable: false  # Specify the field to use lazyload (site or post)  field: site  placeholder:  blur: false# PWA# See https://github.com/JLHwung/hexo-offline# ---------------pwa:  enable: false  manifest:  apple_touch_icon:  favicon_32_32:  favicon_16_16:  mask_icon:# Open graph meta tags# https://hexo.io/docs/helpers#open-graphOpen_Graph_meta:  enable: true  option:    # twitter_card:    # twitter_image:    # twitter_id:    # twitter_site:    # google_plus:    # fb_admins:    # fb_app_id:# Add the vendor prefixes to ensure compatibilitycss_prefix: true# Inject# 插入代码到 head（在 &#x27;&lt;/head&gt;&#x27; 标籤之前）和底部（在 &#x27;&lt;/body&gt;&#x27; 标籤之前）inject:  head:    # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;    - &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;  bottom:    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;# CDN 设置# 除非你知道它们的工作原理，否则不要修改以下设置CDN:  # 内部和第三方脚本的 CDN 提供商  # 两者的选项：local/jsdelivr/unpkg/cdnjs/custom  # 注意： Dev 版本只能使用 &#x27;local&#x27; 作为内部脚本  # 注意：将第三方脚本设置为 &#x27;local&#x27; 时，需要安装 hexo-butterfly-extjs  internal_provider: local  third_party_provider: local  # 是否在 URL 中添加版本号，true 或 false  version: false  # 自定义格式  # 例如：https://cdn.staticfile.org/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;min_cdnjs_file&#125;  custom_format:  option:    # abcjs_basic_js:    # activate_power_mode:    # algolia_js:    # algolia_search:    # aplayer_css:    # aplayer_js:    # artalk_css:    # artalk_js:    # blueimp_md5:    # busuanzi:    # canvas_fluttering_ribbon:    # canvas_nest:    # canvas_ribbon:    # chartjs:    # click_heart:    # clickShowText:    # disqusjs:    # disqusjs_css:    # docsearch_css:    # docsearch_js:    # egjs_infinitegrid:    # fancybox:    # fancybox_css:    # fireworks:    # fontawesome:    # gitalk:    # gitalk_css:    # giscus:    # instantpage:    # instantsearch:    # katex:    # katex_copytex:    # lazyload:    # local_search:    # main:    # main_css:    # mathjax:    # medium_zoom:    # mermaid:    # meting_js:    # pangu:    # prismjs_autoloader:    # prismjs_js:    # prismjs_lineNumber_js:    # pjax:    # sharejs:    # sharejs_css:    # snackbar:    # snackbar_css:    # translate:    # twikoo:    # typed:    # utils:    # valine:    # waline_css:    # waline_js:
语言
修改 Hexo 根目录下的配置文件 _config.yml
默认语言是 en
主题支持

default(en)
zh-CN （简体中文）
zh-TW （台湾繁体中文）
zh-HK （香港繁体中文）
ja （日语）
ko（韩语）


导航
参数设置
nav:  # 导航栏 Logo 图片  logo:  # 是否显示标题  display_title: true  # 是否固定导航栏  fixed: false
目录
导航的文字可自行更改：
格式：名字: 路径 || 图标名
例如：
menu:首页: / || fas fa-home时间轴: /archives/ || fas fa-archive标签: /tags/ || fas fa-tags分类: /categories/ || fas fa-folder-open清单||fa fa-heartbeat:照片: /Gallery/ || fas fa-images友链: /link/ || fas fa-link关于: /about/ || fas fa-heart列表||fas fa-list:  音乐: /music/ || fas fa-music  电影: /movies/ || fas fa-video
默认子目录是展开的，如果你想要隐藏，在子目录里添加hide:
列表 || fas fa-list || hide:  音乐: /music/ || fas fa-music  电影: /movies/ || fas fa-video
我的目录：
menu:  首页: / || fas fa-home  标签: /tags/ || fas fa-tags  分类: /categories/ || fas fa-folder-open  友链: /link/ || fas fa-link  列表 || fas fa-list || hide:    音乐: /music/ || fas fa-music    电影: /movies/ || fas fa-video
代码高亮
Highlight.js 是用 JavaScript 编写的语法高亮工具。它适用于 浏览器以及服务器上。它几乎可以与任何 标记，不依赖于任何其他框架，并且具有自动语言 检波。
#卸载默认的高亮插件npm uninstall  hexo-prism-plugin通过 NPM 包安装Highlight.js npm install highlight.jshexo clean &amp;&amp; hexo g &amp;&amp; hexo s
评论系统
我用的是twikoo（vercel部署）免费
具体配置可参考 云函数部署 | Twikoo 文档
twikoo:  envId: https://填写vercel部署好的域名，建议自定义域名  region:  # Use Twikoo visitor count as the page view count  visitor: false  option:
文章加密
npm install --save hexo-blog-encrypt
在文章开头添加passwd
---title: Hello Worldpassword: hello#密码就是hellowrong_pass_message: &#x27;抱歉, 这个密码看着不太对, 请再试试.&#x27;wrong_hash_message: &#x27;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.&#x27;message: 前往关于页联系本人---
能否成功加密有个前提条件，访问网站的协议要是https，所以你要给你的网站添加ssl证书即可，没有添加的即使输入密码也没有效果，解锁不了的

文章自动编号
我是自己加了一个hexo-theme-butterfly\source\css\my.css添加了以下内容。
/*文章编号*//* 让 h1 触发重置 h2-h6 的计数 */.post-content h1 &#123;    counter-reset: main-section !important;  /* 关键：确保每个 h1 重新开始 h2 计数 */&#125;/* h2 作为主要编号（1. 2. 3.）*/.post-content h2 &#123;    counter-increment: main-section !important;    counter-reset: sub-section !important;&#125;.post-content h2::before &#123;    content: counter(main-section) &quot;. &quot; !important;&#125;/* h3 作为次级编号（1.1 1.2 2.1 2.2） */.post-content h3 &#123;    counter-increment: sub-section !important;    counter-reset: sub-sub-section !important;&#125;.post-content h3::before &#123;    content: counter(main-section) &quot;.&quot; counter(sub-section) &quot;. &quot; !important;&#125;/* h4 三级编号（1.1.1 2.1.1） */.post-content h4 &#123;    counter-increment: sub-sub-section !important;    counter-reset: sub-sub-sub-section !important;&#125;.post-content h4::before &#123;    content: counter(main-section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(sub-sub-section) &quot;. &quot; !important;&#125;/* h5 四级编号（1.1.1.1 2.1.1.1） */.post-content h5 &#123;    counter-increment: sub-sub-sub-section !important;    counter-reset: sub-sub-sub-sub-section !important;&#125;.post-content h5::before &#123;    content: counter(main-section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(sub-sub-section) &quot;.&quot; counter(sub-sub-sub-section) &quot;. &quot; !important;&#125;/* h6 五级编号（1.1.1.1.1 2.1.1.1.1） */.post-content h6 &#123;    counter-increment: sub-sub-sub-sub-section !important;&#125;.post-content h6::before &#123;    content: counter(main-section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(sub-sub-section) &quot;.&quot; counter(sub-sub-sub-section) &quot;.&quot; counter(sub-sub-sub-sub-section) &quot;. &quot; !important;&#125;/* 设置标题之间的间距 */.post-content h2 &#123; margin: 40px 0; &#125;.post-content h3 &#123; margin: 30px 0; &#125;.post-content h4 &#123; margin: 20px 0; &#125;.post-content h5 &#123; margin: 15px 0; &#125;.post-content h6 &#123; margin: 10px 0; &#125;/*侧边栏开始编号*//* 初始化 toc-level-2 的计数器 */.toc &#123;    counter-reset: toc-section;&#125;/* 让 toc-level-2 作为编号的起点 */.toc .toc-level-2 &#123;    counter-reset: toc-subsection; /* 每个 toc-level-2 开始新的子计数 */    counter-increment: toc-section; /* 增加一级计数 */&#125;/* 在链接前面添加编号 */.toc .toc-level-2 &gt; a::before &#123;    content: counter(toc-section) &quot;.&quot;;    font-weight: bold;    margin-right: 5px;&#125;/* toc-level-3 开始二级编号 */.toc .toc-level-3 &#123;    counter-reset: toc-subsubsection;    counter-increment: toc-subsection;&#125;.toc .toc-level-3 &gt; a::before &#123;    content: counter(toc-section) &quot;.&quot; counter(toc-subsection) &quot;.&quot;;    font-weight: bold;    margin-right: 5px;&#125;/* toc-level-4 开始三级编号 */.toc .toc-level-4 &#123;    counter-increment: toc-subsubsection;&#125;.toc .toc-level-4 &gt; a::before &#123;    content: counter(toc-section) &quot;.&quot; counter(toc-subsection) &quot;.&quot; counter(toc-subsubsection) &quot;.&quot;;    font-weight: bold;    margin-right: 5px;&#125;/* 隐藏主题自带的编号 */.toc .toc-number &#123;    display: none;&#125;span.toc-text &#123;    margin-left: -10px;&#125;
效果图

支持KaTeX数学公式和下标
上下标支持：
Hexo 需要使用 Markdown 渲染引擎将 md 文件渲染成 html 文件，Hexo 默认使用 hexo-renderer-marked，可以换成 hexo-renderer-markdown-it。
hexo-renderer-markdown-it 拥有更好的性能，而且可以通过插件扩展功能，如：上标、下标、引用注脚、emoji、KaTex 公式、多维表格等等。
先卸载 Hexo 默认引擎
npm un hexo-renderer-marked --save
安装 markdown-it 引擎
npm i hexo-renderer-markdown-it --save
在站点配置文件 _config.yml 中增加以下配置
markdown:  markdown:  preset: &#x27;default&#x27;  render:    html: true    xhtmlOut: false    langPrefix: &#x27;language-&#x27;    breaks: true    linkify: true    typographer: true    quotes: &#x27;“”‘’&#x27;  enable_rules:  disable_rules:  plugins:    - &#x27;markdown-it-footnote&#x27;    - &#x27;markdown-it-ins&#x27;    - &#x27;markdown-it-mark&#x27;    - &#x27;markdown-it-sub&#x27;    - &#x27;markdown-it-sup&#x27;  images:    lazyload: false    prepend_root: false    post_asset: true
配置中的 typographer: true 的作用是显示特殊格式字符写法：(c) (C) (r) (R) (tm) (TM) (p) (P) +-效果：© © ® ® ™ ™ (p) (P) ±
其他用法，可以参考 markdown-it 的官方效果演示 Demo
数学公式
npm i @traptitech/markdown-it-katex --save
在站点配置文件 _config.yml 中增加以下配置
markdown_it_katex:  plugins:  - plugin:    name: &#x27;@traptitech/markdown-it-katex&#x27;    options: # see https://katex.org/docs/options.html      blockClass: &quot;math-block&quot;      strict: false      throwOnError: false      errorColor: &quot;#cc0000&quot;


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 8部署Docker</title>
    <url>/posts/51253/</url>
    <content><![CDATA[Centos 8部署Docker
基础信息



系统
ip  (NAT)
内存
硬盘




Centos 8.5
192.168.48.10
2G
40G



基本配置好可以访问互联网即可
切换阿里yum
mkdir repo.bakcp /etc/yum.repos.d/* repo.bak/rename &#x27;.repo&#x27; &#x27;.repo.bak&#x27; /etc/yum.repos.d/*.repowget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repoyum clean all &amp;&amp; yum makecachesystemctl disable --now firewalldsed -i &#x27;s/^SELINUX=.*/SELINUX=disabled/&#x27; /etc/selinux/config
安装Docker
删除旧版docker
sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine -y
安装依赖
yum install -y yum-utils device-mapper-persistent-data lvm2
添加阿里docker存储库
dnf config-manager --add-repo=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum clean all &amp;&amp; yum makecache 
安装docker软件
yum install -y --allowerasing docker-ce docker-ce-cli
启动docker服务
systemctl enable docker --now
验证是否安装成功
[root@Docker ~]# docker run hello-world#未检测到hello-world镜像Unable to find image &#x27;hello-world:latest&#x27; locally#从远程的DockerHub仓库拉取镜像latest: Pulling from library/hello-world2db29710123e: Pull completeDigest: sha256:aa0cc8055b82dc2509bed2e19b275c8f463506616377219d9642221ab53cf9feStatus: Downloaded newer image for hello-world:latest#出现下面说明docker运行成功Hello from Docker!  -------This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.    (amd64) 3. The Docker daemon created a new container from that image which runs the    executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it    to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/get-started/
安装docker compose
# 设置 Docker 镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker# 安装 Docker Composesudo curl -L &quot;https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composesudo systemctl enable docker --nowsudo systemctl restart dockersudo usermod -aG docker $USER
使用Docker创建新的镜像
检索Docker仓库中的Ubuntu镜像
[root@Docker ~]# docker search ubuntuNAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDubuntu                           Ubuntu is a Debian-based Linux operating sys…   15464     [OK]     ......
获取Ubuntu镜像
[root@Docker ~]# docker pull ubuntuUsing default tag: latestlatest: Pulling from library/ubuntu6e3729cf69e0: Pull completeDigest: sha256:27cb6e6ccef575a4698b66f5de06c7ecd61589132d5a91d098f7f3f9285415a9Status: Downloaded newer image for ubuntu:latestdocker.io/library/ubuntu:latest
查看本地Docker镜像
[root@Docker ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEubuntu        latest    6b7dfa7e8fdb   5 weeks ago     77.8MBhello-world   latest    feb5d9fea6a5   16 months ago   13.3kB

Docker镜像列表选项字段说明如下。REPOSITORY  镜像的名称TAG   		    镜像的标签IMAGE ID      镜像的IDCREATED       镜像创建时间SIZE             镜像大小

启动docker容器

使用docker run 命令可启动容器，Docker 启动时其执行过程如下。· 检查本地是否存在指定的Docker 镜像，如果不存在将从Docker仓库下载。· 使用Docker 镜像创建并启动Docker 容器。· 为Docker容器分配一个文件系统，并在只读的镜像层外面挂载一层可读写层。· 从Docker宿主机中配置的网桥接口中桥接一个虚拟接口到容器。· 从Docker 网络的地址池中分配一个IP地址给当前容器。· 执行用户指定的程序。` 执行完毕后终止容器。

创建基于本地ubuntu镜像的docker容器[root@Docker ~]# docker run -it ubuntu /bin/bashroot@136156e4c448:/#root@136156e4c448:/# exitexit[root@Docker ~]#
更新并创建Docker镜像
更新ubuntu镜像添加ping
当本地的镜像不能满足日常需求，可从已创建的容器中更新并提交镜像。最新版的ubuntu没有安装ping，本步骤将在ubuntu安装ping，并建立新的镜像#启动 ubuntu容器，每次创建容器会产生新的id（9eac21a09449）要记录好[root@Docker ~]# docker run -t -i  ubuntu:latest /bin/bashroot@9eac21a09449:/# apt updateGet:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]......root@9eac21a09449:/# ping jd.combash: ping: command not found#安装pingroot@9eac21a09449:/# apt-get install -y iputils-pingReading package lists... Doneroot@9eac21a09449:/# ping -c 2 jd.comPING jd.com (111.13.149.108) 56(84) bytes of data.64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=1 ttl=127 time=43.7 ms64 bytes from 111.13.149.108: icmp_seq=2 ttl=127 time=44.6 ms#退出root@9eac21a09449:/# exitexit#操作完成后可基于该docker容器创建新的docker镜像#创建新的docker镜像[root@Docker ~]# docker commit -m &#x27;ubuntu增加ping命令&#x27; -a &#x27;docker&#x27; 9eac21a09449 ping/ubuntu:v2sha256:7655d7758bcfa635dde3cf8064602a32ac625100a1b7763e7856ff6052c8abee[root@Docker ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEping/ubuntu   v2        7655d7758bcf   10 seconds ago   120MBubuntu        latest    6b7dfa7e8fdb   5 weeks ago      77.8MBhello-world   latest    feb5d9fea6a5   16 months ago    13.3kB#运行新创建的容器，测试ping[root@Docker ~]# docker run -it ping/ubuntu:v2 /bin/bashroot@7015378380d7:/# ping jd.com -c 3PING jd.com (111.13.149.108) 56(84) bytes of data.64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=1 ttl=127 time=44.1 ms64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=2 ttl=127 time=44.9 ms64 bytes from 111.13.149.108: icmp_seq=3 ttl=127 time=45.1 ms
使用dockerfile创建镜像
Dockerfile是由一系列命令和参数脚本构成的脚本，这些命令可在基础镜像上一次执行，最终创建一个新的Docker镜像
编辑dockerfile
[root@Docker ~]# vi /root/Dockerfile#基础镜像信息FROM ubuntu#维护者信息MAINTAINER book_user book@123.com#镜像操作指令RUN apt updateRUN apt-get install -y iputils-ping#容器启动时执行的命令CMD cd /optCMD echo &#x27;new docker&#x27; &gt; readme.txt

Dockerfile中每一个指令都会在镜像上创建一个新的镜像层，每一个指令的前缀都必须是大写的，其创建过程如下

使用docker build 命令从dockerfile文件创建镜像
[root@Docker ~]# docker build -t &quot;book/ubuntu:v3&quot; .#末尾小数点别忘了，接下来，他就会按照dockerfile文件中的命令一一执行[root@Docker ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEbook/ubuntu   v3        90bbd384b2a3   59 seconds ago   120MBping/ubuntu   v2        7655d7758bcf   17 minutes ago   120MBubuntu        latest    6b7dfa7e8fdb   5 weeks ago      77.8MBhello-world   latest    feb5d9fea6a5   16 months ago    13.3kB#删除本地的docker镜像[root@Docker ~]# docker rmi hello-worldError response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 5542ae3caafa is using its referenced image feb5d9fea6a5出现报错说明container使用到了这个images，删除镜像前需要删除基于此镜像创建的容器#查询容器列表[root@Docker ~]# docker ps -aCONTAINER ID   IMAGE            COMMAND       CREATED          STATUS                        PORTS     NAMES7015378380d7   ping/ubuntu:v2   &quot;/bin/bash&quot;   19 minutes ago   Exited (127) 15 minutes ago             nervous_lamarr37ac7bf75dbc   ping/ubuntu:v2   &quot;/bin/bash&quot;   19 minutes ago   Exited (0) 19 minutes ago               peaceful_galois9eac21a09449   ubuntu:latest    &quot;/bin/bash&quot;   32 minutes ago   Exited (130) 26 minutes ago             angry_golick136156e4c448   ubuntu           &quot;/bin/bash&quot;   34 minutes ago   Exited (130) 33 minutes ago             intelligent_proskuriakova5542ae3caafa   hello-world      &quot;/hello&quot;      46 minutes ago   Exited (0) 46 minutes ago               pensive_newton#删除容器[root@Docker ~]# docker rm 5542ae3caafa5542ae3caafa删除镜像[root@Docker ~]# docker rmi hello-worldUntagged: hello-world:latestUntagged: hello-world@sha256:aa0cc8055b82dc2509bed2e19b275c8f463506616377219d9642221ab53cf9feDeleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412Deleted: sha256:e07ee1baac5fae6a26f30cabfe54a36d3402f96afda318fe0a96cec4ca393359

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Centos 8</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible-总手册</title>
    <url>/posts/27532/</url>
    <content><![CDATA[
Ansible-总手册

Ansible三机部署
Ansible配置及相关指令
用户级ansible环境构建（小练习）
Ansible-常用模块
Ansible-playblock
Ansible-templates
Ansible-Roles
实验任务：安装httpd服务

Ansible三机部署
关于
ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。
　　ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远
程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。
主机分布



主机名
ip
系统
内存
硬盘




controller
192.168.48.100
Centos7.9
4G
100G


node01
192.168.48.101
Centos7.9
4G
100G


node02
192.168.48.102
Centos7.9
4G
100G



修改主机名
controlle
hostnamectl set-hostname controller &amp;&amp; bash
node01
hostnamectl set-hostname node01 &amp;&amp; bash
node02
hostnamectl set-hostname node02 &amp;&amp; bash
三台机加入hosts
cat &gt;&gt; /etc/hosts &lt;&lt; EOF192.168.48.100 controller192.168.48.101 node01192.168.48.102 node02EOF
设置阿里yum
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/wget -O /etc/yum.repos.d/CentOSBase.repo https://mirrors.aliyun.com/repo/Centos-7.repoyum clean all &amp;&amp; yum makecachesystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinuxsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configyum update -y
安装python
已安装可以忽略。
确保python版本&gt;=2.6
sudo yum install epel-releasesudo yum install https://centos7.iuscommunity.org/ius-release.rpmsudo yum install python27
[root@controller ~]# python --versionPython 2.7.5#有显示说明python安装成功
安装Ansible
sudo yum install epel-release ansible openssh[root@controller ~]# ansible --versionansible 2.9.27  config file = /etc/ansible/ansible.cfg  configured module search path = [u&#x27;/root/.ansible/plugins/modules&#x27;, u&#x27;/usr/share/ansible/plugins/modules&#x27;]  ansible python module location = /usr/lib/python2.7/site-packages/ansible  executable location = /usr/bin/ansible  python version = 2.7.5 (default, Oct 14 2020, 14:45:30) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]
测试
测试主机是否存活
vim /etc/ansible/hosts#在末尾添加ip192.168.48.101192.168.48.102-----------------------
ansible 192.168.48.101 -m ping -kansible 192.168.48.102 -m ping -k
如果controller没有首次进行ssh至node01-02节点，则ansible会出错，如下图：


所以我们必须先ssh至各节点，让其生成缓存信息
[root@controller ~]# ssh 192.168.48.101##输入密码[root@node01 ~]# exit[root@controller ~]# ssh 192.168.48.102##输入密码[root@node02 ~]# exit
这时我们在进行测试

SSH免密配置
ssh-keygen   （一路回车，三次）[root@controller ~]# ls -al ~/.sshtotal 12drwx------  2 root root   57 Sep  6 00:43 .dr-xr-x---. 8 root root  236 Sep  9 23:05 ..-rw-------  1 root root 1675 Sep  6 00:42 id_rsa-rw-r--r--  1 root root  397 Sep  6 00:42 id_rsa.pub-rw-r--r--  1 root root  352 Sep  6 00:35 known_hosts#有密钥文件了#将密钥文件复制到node01-02节点，实现ssh免密登入(先yes 然后输入密码即可)ssh-copy-id root@192.168.48.101ssh-copy-id root@192.168.48.102
最后我们在进行测试


Ansible配置及相关指令
ansible 程序结构
安装目录如下(yum安装)：
　　配置文件目录：/etc/ansible/
　　执行文件目录：/usr/bin/
　　Lib库依赖目录：/usr/lib/pythonX.X/site-packages/ansible/
　　Help文档目录：/usr/share/doc/ansible-X.X.X/
　　Man文档目录：/usr/share/man/man1/
ansible配置文件查找顺序
ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：


检查环境变量ANSIBLE_CONFIG指向的路径文件
(export ANSIBLE_CONFIG=/etc/ansible.cfg)；


~/.ansible.cfg，检查当前目录下的ansible.cfg配置文件；


/etc/ansible.cfg检查etc目录的配置文件。


ansible配置文件
ansible 的配置文件为/etc/ansible/ansible.cfg，ansible 有许多参数，下面我们列出一些常见的参数：
[defaults] #inventory      = /etc/ansible/hosts   //定义Inventory#library        = /usr/share/my_modules/  //自定义lib库存放目录 #remote_tmp     = ~/.ansible/tmp       //零时文件远程主机存放目录#local_tmp      = ~/.ansible/tmp       //零时文件本地存放目录#forks          = 5                    //默认开启的并发数#poll_interval  = 15                   //默认轮询时间间隔#sudo_user      = root                 //默认sudo用户#ask_sudo_pass = True                  //是否需要sudo密码#ask_pass      = True                  //是否需要密码#host_key_checking = False             //首次连接是否检查key认证#roles_path    = /etc/ansible/roles    //默认下载的Roles存放的目录#log_path = /var/log/ansible.log       //执行日志存放目录#module_name = command                 //默认执行的模块#action_plugins     = /usr/share/ansible/plugins/action //action插件存放目录#callback_plugins   = /usr/share/ansible/plugins/callback //callback插件存放目录#connection_plugins = /usr/share/ansible/plugins/connection  //connection插件存放目录#lookup_plugins     = /usr/share/ansible/plugins/lookup //lookup插件存放目录#vars_plugins       = /usr/share/ansible/plugins/vars //vars插件存放目录#filter_plugins     = /usr/share/ansible/plugins/filter //filter插件存放目录#test_plugins       = /usr/share/ansible/plugins/test //test插件存放目录#strategy_plugins   = /usr/share/ansible/plugins/strategy //strategy插件存放目录#fact_caching = memory                 //getfact缓存的主机信息存放方式#retry_files_enabled = False              #retry_files_save_path = ~/.ansible-retry  //错误重启文件存放目录
配置文件的分类与优先级
Ansible只有一个配置文件ansible.cfg，但配置文件可以存在不同的位置，并且只有一个可用 (数字代表优先级，数字越小代表优先级越高) :

配置文件选项



官网配置参考网址
Ansible Configuration Settings — Ansible Documentation

ansuble主机清单
1、 定义单独主机：	## green.example.com#	# blue.example.com#	# 192.168.100.1	# 192.168.100.102、 定义一个主机组[组名]把地址或主机名加进去	[mysql_test]	192.168.253.159	192.168.253.160	192.168.253.153
需要注意的是，这里的组成员可以使用通配符来匹配，这样对于一些标准化的管理来说就很轻松方便了。
　　我们可以根据实际情况来配置我们的主机列表，具体操作如下：
[root@server ~]# vim /etc/ansible/hosts	[web]	192.168.37.122	192.168.37.133
3、 定义嵌套组    [web-mysql]       mysql_test       web4、 定义范围化ip    172.16.[0:4].[2:254]  
ansible 常用命令

/usr/bin/ansible　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行
/usr/bin/ansible-doc 　Ansible 模块功能查看工具
/usr/bin/ansible-galaxy　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的
/usr/bin/ansible-playbook　　Ansible 定制自动化的任务集编排工具
/usr/bin/ansible-pull　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高）
/usr/bin/ansible-vault　　Ansible 文件加密工具
/usr/bin/ansible-console　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具

其中，我们比较常用的是/usr/bin/ansible和/usr/bin/ansible-playbook。
ansible 命令详解
命令的具体格式如下：
ansible &lt;host-pattern&gt; [-f forks] [-m module_name] [-a args]
也可以通过ansible -h来查看帮助，下面我们列出一些比较常用的选项，并解释其含义：

-a MODULE_ARGS　　　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等
-k，--ask-pass #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证
--ask-su-pass #ask for su password。su切换密码
-K，--ask-sudo-pass #ask for sudo password。提示密码使用sudo，sudo表示提权操作
--ask-vault-pass #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问
-B SECONDS #后台运行超时时间
-C #模拟运行环境并进行预运行，可以进行查错测试
-c CONNECTION #连接类型使用
-f FORKS #并行任务数，默认为5
-i INVENTORY #指定主机清单的路径，默认为/etc/ansible/hosts
--list-hosts #查看有哪些主机组
-m MODULE_NAME #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数
-o #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用
-S #用 su 命令
-R SU_USER #指定 su 的用户，默认为 root 用户
-s #用 sudo 命令
-U SUDO_USER #指定 sudo 到哪个用户，默认为 root 用户
-T TIMEOUT #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改
-u REMOTE_USER #远程用户，默认为 root 用户
-v #查看详细信息，同时支持-vvv，-vvvv可查看更详细信息

ansible 配置公私钥
上面我们已经提到过 ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：
#1.生成私钥[root@server ~]# ssh-keygen #2.向主机分发私钥[root@server ~]# ssh-copy-id root@192.168.48.101[root@server ~]# ssh-copy-id root@192.168.48.102
192.168.48.101为node01的ip地址
这样的话，就可以实现无密码登录，我们的实验过程也会顺畅很多。
　　注意，如果出现了一下报错：
-bash: ssh-copy-id: command not found
那么就证明我们需要安装一个包：
yum -y install openssh
把包安装上即可。
注意：先ssh 192.168.48.101和ssh 192.168.48.102各节点，生成缓存信息，才能进行主机连通性测试
ansible ping模块
主机连通性测试
我们使用ansible web -m ping命令来进行主机连通性测试，效果如下：
[root@server ~]# ansible web -m ping192.168.48.101 | SUCCESS =&gt; &#123;    &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;&#125;192.168.48.102 | SUCCESS =&gt; &#123;    &quot;changed&quot;: false,     &quot;ping&quot;: &quot;pong&quot;&#125;
这样就说明我们的主机是连通状态的。接下来的操作才可以正常进行。
用户级ansible环境构建
主机分布



主机名
ip
系统
内存
硬盘




controller
192.168.48.100
Centos7.9
4G
100G


node01
192.168.48.101
Centos7.9
4G
100G


node02
192.168.48.102
Centos7.9
4G
100G



创建student用户
三台机创建student用户
#创建student用户useradd studentpasswd student123456
controller创建student用户工作目录
#切换student用户，创建工作目录，新建ansible.cfg配置文件，验证配置文件生效。su studentcd #创建资产清单 mkdir ansiblecat &gt;&gt; /home/student/ansible/inventory &lt;&lt;EOF[servers]192.168.48.101192.168.48.102EOF
controller编辑配置文件ansible.cfg
cd ansiblecat &gt;&gt; /home/student/ansible/ansible.cfg &lt;&lt;EOF[defaults]inventory=/home/student/ansible/inventoryremote_port=22remote_user=root#指定远程用户为rootask_pass=TrueEOF
验证清单主机存活（指定root）
验证清单主机存活 ,执行命令进行测试，可以看到在每次执行ansible时都会询问连接用户的密码（相 当于-K参数）
ansible all --list[student@controller ansible]$ ansible all --listSSH password:  hosts (2):    192.168.48.101    192.168.48.102[student@controller ansible]$#成功
如果不想输入密码，那需要修改配置文件：
vi /home/student/ansible/ansible.cfg······ask_pass=False

[student@controller ansible]$ ansible all --list  hosts (2):    192.168.48.101    192.168.48.102[student@controller ansible]$#无输入密码选项
实例（指定student）
远程用户指定为普通用户（student）
[student@controller ansible]$ vim ansible.cfg[defaults]inventory=/home/student/ansible/inventoryremote_port=22remote_user=student#指定远程用户为studentask_pass=False
这时候执行ping会报错
ansible all -m ping


这时候我们要配置免密登入（这里的密钥是student用户的，和root不一样，不会覆盖root用户的，这是在student用户下执行的命令）
[student@controller ansible]$ ssh-keygen#回车三次[student@controller ansible]$ ssh-copy-id student@192.168.48.101#输入yes和node1的root密码[student@controller ansible]$ ssh-copy-id student@192.168.48.102#输入yes和node2的root密码
这是执行ping命令
ansible all -m ping

测试提取文件
这个普通用户（student）并不能执行所有的操作，比如ansible以student身份登录，执行（ls /root）发普通用户没有权限，
ansible all -m shell -a &quot;ls /root&quot;

解决这个问题就需要提权：sudo 提权
在受控主机(node01、node02)上执行visudo（配置 /etc/sudoers）
node01机子
[root@node01 ~]# visudo

node02机子
[root@node02 ~]# visudo

或者(node01和node02执行以下指令)
cat &gt;&gt;/etc/sudoers.d/student &lt;&lt; EOF student          ALL=(ALL)        NOPASSWD: ALLEOF
在控制主机（controller）上(student用户)修改ansible.cfg配置文件提权
[student@controller ansible]$ vim ansible.cfg[defaults]inventory=/home/student/ansible/inventoryremote_port=22remote_user=studentask_pass=False[privilege_escalation]become=Truebecome_method=sudobecome_user=rootbecome_ask_pass=False

验证
ansible all -m shell -a &quot;ls /root&quot;

#在控制节点的student经过sudo提权之后可以读取/root目录了
Ansible-常用模块
command模块
linux命令，不支持管道、重定向等，不建议使用
ansible all -m command -a &quot;pwd&quot;ansible all -m command -a &quot;ls&quot;ansible all -m command -a &quot;cat /etc/passwd |grep student&quot; #这个不能正常使用 ansible all -m command -a &quot;echo bb &gt;&gt;/tmp/testansible&quot;ansible all -m command -a &quot;cat /tmp/testansible&quot;
#重定向也无法正常使用
课堂练习：
使用command命令查询各主机磁盘状态、查询内存状态
ansible all -m command -a &quot;df -h&quot;ansible all -m command -a &quot;free -m&quot;
shell模块
支持管道、重定向等，常用模块
ansible all -m shell -a &quot;cat /etc/passwd | grep student&quot; #支持管道ansible all -m shell -a &quot;echo bb &gt;&gt;/tmp/testansible&quot;ansible all -m shell -a &quot;cat /tmp/testansible&quot;
#支持重定向
课堂练习：
使用shell模块查看selinux状态
ansible all -m shell -a &quot;getenforce&quot;
通过shell模块批量关闭selinux
临时关闭：ansible all -m shell -a &quot;setenforce 0&quot;永久关闭：ansible all -m shell -a &quot;sed -ri &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config&quot;ansible all -m shell -a &quot;reboot&quot;
文件模块
copy模块
从主控端复制文件到远程主机
ansible-doc copy
常用参数
src：source源路径文件/目录。即要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是 相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用&quot;/“来结尾，则只复制目录里的内容，如果没有使用”/&quot;来结尾，则包含目录在内的整个内容全部复制。
dest：destnation受管主机上的一个目标路径，即要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录（必须）
content：代替src，将本机指定内容传至远程主机并生成目标文件，相当于 echo 重定向内容到文件
mode：文件权限（chmod）
linux权限回顾

owner：文件属主（chown）
group：文件属组（chgrp）
backup：在覆盖之前将原文件备份，备份文件包含时间信息。
directory_mode： 递归地设定目录的权限，默认为系统默认权限
force： 若目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标 主机的存放位置不存在该文件时，才复制。默认为yes
使用案例


复制dir1目录及其文件到受控主机/tmp/下（无斜杠-操作整个目录）

注：关于src目录加不加/的演示
#复制dir1目录及其文件到受控主机/tmp/下su studentcd ~llmkdir ansiblecd ansible/mkdir dir1echo &quot;123&quot; &gt;dir1/file1ansible 192.168.48.101 -m copy -a &quot;src=&#x27;dir1&#x27; dest=/tmp/&quot; 

查看受控主机是否复制成功

成功

2.仅复制dir1目录下的文件（有斜杠-操作目录下的文件，不复制目录）
ansible 192.168.48.101 -m copy -a&quot;src=&#x27;dir1/&#x27; dest=/tmp/&quot;


练习

将控制主机的copyfile文件复制到受管主机的 /tmp 目录

echo &#x27;123&#x27; &gt; copyfileansible 192.168.48.101 -m copy -a &#x27;src=copyfile dest=/tmp&#x27;


直接在受管主机上生成一个指定内容的文件文件

ansible 192.168.48.101 -m copy -a &quot;content=&#x27;test copy\n&#x27; dest=/tmp/f1&quot;


在受管主机上生成指定属性和内容的文件

ansible 192.168.48.101 -m copy -a &quot;content=&#x27;test copy 2\n&#x27; dest=/tmp/f2 mode=0644 owner=student group=student&quot;


在文件覆盖前生成备份文件

ansible 192.168.48.101 -m copy -a &quot;content=&#x27;test copy 1\n&#x27; dest=/tmp/f1 backup=yes&quot;ansible 192.168.48.101 -m shell -a &quot;ls -l /tmp/f1*&quot;


script模块
在远程主机上运行ansible服务器上的脚本，优点是不需手动传送脚本至每个服务器。
其实是ansible自动传到远程主机、执行然后再删除脚本：copy+shell+delete
cat &gt;&gt; tesh.sh &lt;&lt; EOF#！/bin/bash echo helloEOFansible all -m script -a tesh.sh

执行结果显示了每台主机的执行情况。
CHANGED 表示执行过程中发生了变化，即脚本被成功执行。
rc 字段显示返回码为 0，表示执行成功。
stderr 字段显示了标准错误输出，其中包含了连接关闭的信息。
stdout 字段显示了标准输出，其中包含了脚本执行的结果，即 “hello”。
cat &gt;&gt;  ansible_ntp.sh &lt;&lt; EOF#!/bin/bashsystemctl status ntpd &gt;/dev/null 2&gt;&amp;1if [ \$? == 0 ]; then	echo &quot;ntp service has been installed&quot;	exitfiyum install -y ntp &gt;/dev/null 2&gt;&amp;1if [ \$? == 0 ]; then	systemctl start ntpd	systemctl enabled ntpd &gt;/dev/null 2&gt;&amp;1	sleep 5	ntpq -pelse	echo &quot;ntp service install failed,check network or yum&quot;fiEOF这条命令的意思就是在后台执行这个程序,并将错误输出2重定向到标准输出1,然后将标准输出1全部放 到/dev/null文件,也就是清空.所以可以看出&quot; &gt;/dev/null 2&gt;&amp;1 &quot;常用来避免shell命令或者程序等运行中有内容输出。chmod 777 ansible_ntp.shansible all -m script -a &quot;ansible_ntp.sh&quot;

fetch模块
从受管主机上，拉取文件到控制节点（目前不支持目录,可以先打包,再提取文件）
常见参数
dest：控制节点的保存路径
src：受管节点要拉取文件的路径（必须是文件，不能是目录）
flat：直接保存到目标指定位置，而不是在受管主机名下的文件路径中。
使用案例

从受管主机拉取指定文件

ansible 192.168.48.101 -m fetch -a &quot;src=/etc/hosts dest=/home/student/ansible&quot;
索取到本地目录下的文件会自动生成与目标主机的域名或IP地址的目录存放索取的文件


直接拉取受管主机文件到控制节点指定位置

flat：直接保存到目标指定位置，而不是在受管主机名下的文件路径中。
ansible 192.168.48.101 -m fetch -a &quot;src=/etc/hosts dest=/home/student/ansible/file1 flat=yes&quot;


打包目录并所有内容到控制节点指定位置

ansible 192.168.48.101 -m shell -a &#x27;pwd&#x27;ansible 192.168.48.101 -m shell -a &#x27;tar cf test.tar.gz /var/log&#x27;ansible 192.168.48.101 -m shell -a &#x27;ls -l /home/student/&#x27;ansible 192.168.48.101 -m fetch -a &quot;src=/home/student/test.tar.gz dest=/home/student/ansible/ flat=yes&quot;


file模块
file 模块可以帮助我们完成一些对文件的基本操作。比如，创建文件或目录、删除文件或目录、修改文 件权限等。
常用参数
mode： 定义文件/目录的权限,比如，如果想要将文件权限设置为&quot;rw-r-x—&quot;，则可以使用mode=650进行 设置，或者使用mode=0650，效果也是相同的。
owner： 定义文件/目录的所有者,属主对应的用户必须在远程主机中存在,否则会报错。
group： 定义文件/目录的属组,属组对应的组必须在远程主机中存在，否则会报错。
path： 必选项，定义受管主机的文件/目录的路径
recurse： 递归地设置文件的属性，只对目录有效
src： 要被链接的源文件的路径，只应用于state=hard/link的情况
dest： 被链接到的路径，只应用于state=hard/link的情况。
state： 操作方法
directory：如果目录不存在，创建目录
file：即使文件不存在，也不会被创建（只能指定已存在的文件）
touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间
link：创建软链接
hard：创建硬链接
absent：删除目录、文件或者取消链接文件，相当于rm -rf
force： 只应用于state=hard/link的情况，若需要在两种情况下强制创建软链接，一种是源文件不存在但 之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选 项：yes|no
使用案例

创建指定文件属性的空目录

ansible 192.168.48.101 -m file -a &quot;path=/tmp/dir2 state=directory owner=student group=student mode=0755&quot;ansible 192.168.48.101 -m shell -a &quot;ls -l /tmp/&quot;


创建指定文件属性的空文件

ansible 192.168.48.101 -m file -a &quot;path=/tmp/file2 state=touch owner=student group=student mode=0755&quot;ansible 192.168.48.101 -m shell -a &quot;ls -l /tmp/&quot;

注意：为何不能用state=file
file：即使文件不存在，也不会被创建（只能指定已存在的文件）
file3不存在
ansible 192.168.48.101 -m file -a &quot;path=/tmp/file3 state=file owner=student group=student mode=0755&quot;

如果指定file1（已存在）呢（将root用户属组改成student）
ansible 192.168.48.101 -m file -a &quot;path=/tmp/file1 state=file owner=student group=student mode=0755&quot;


删除目录、删除文件

ansible 192.168.48.101 -m file -a &quot;path=/tmp/dir1 state=absent&quot;ansible 192.168.48.101 -m file -a &quot;path=/tmp/file1 state=absent&quot;ansible 192.168.48.101 -m shell -a &quot;ls -l /tmp/&quot;


创建链接文件

软链接：快捷方式
file2→file1（link）
生成file1（如果已存在就忽略这步）
ansible 192.168.48.101 -m copy -a &quot;content=&#x27;123 \n&#x27; dest=/tmp/file1&quot;

生成软链接
ansible 192.168.48.101 -m file -a &quot;src=/tmp/file1 path=/tmp/file2 state=link force=true&quot;

取消软连接
ansible 192.168.48.101 -m file -a &quot;path=/tmp/file2 state=absent&quot;

硬链接：指向同一个inode
file3→file1（hard）
file3不存在
ansible 192.168.48.101 -m file -a &quot;src=/tmp/file1 path=/tmp/file3 state=hard&quot;

课堂练习
1、在/tmp/下创建目录ansiblefile,并在该文件夹下创建test.txt文件，指定属主student,赋予权限0700
ansible all -m shell -a &quot;useradd student&quot;	#创建一个用户与组ansible 192.168.48.101 -m file -a &#x27;path=/tmp/ansiblefile state=directory&#x27;ansible 192.168.48.101 -m file -a &#x27;path=/tmp/ansiblefile/test.txt state=touch owner=student mode=0700&#x27;

2、删除远程机器上的指定文件或目录(删除远程主机上的文件：/tmp/ansiblefile/test.txt
ansible 192.168.48.101 -m file -a &#x27;path=/tmp/ansiblefile/test.txt state=absent&#x27;

lineinfile模块
增加或修改文件内容（以行为单位做流式处理），该模块在自动化运维中非常重要,他可以通过正则表达 式替换指定文本;例如开启一些配置选项等可以新加一行文本,或者是删除指定的行,本命令一定认真掌握 下来.
*常见参数*
path：必须参数，远端文件路径
line：必须参数，修改后的内容（按行写入），追加
regexp：（定位）匹配正则语句,与要过滤的关键字
state：文件修改状态（present 添加生效 / absent 删除）
replace：替换文件内容
create：当文件不存在时，是否创建对应文件
backup：若文件更新时创建备份副本
insertafter：在指定位置的下一行插入（定位）
insertbefore：在指定位置的上一行插入（定位）
使用案例
假设前提：将控制节点的/etc/selinux/config文件复制到受管主机192.168.48.101，另存为/tmp/selinux文件
ansible 192.168.48.101 -m copy -a &quot;src=/etc/selinux/config dest=/tmp/selinux&quot;ansible 192.168.48.101 -m shell -a &quot;cat /tmp/selinux&quot;



修改文件内容：考虑两个问题，修改哪个部分，修改成什么内容

修改SELINUX开头的行，更新内容为：SELINUX=disabled
ansible 192.168.48.101 -m lineinfile -a &quot;path=/tmp/selinux regexp=&#x27;^SELINUX=&#x27; line=&#x27;SELINUX=disabled&#x27; &quot;ansible 192.168.48.101 -m shell -a &quot;cat /tmp/selinux&quot;

2.增加文件内容：考虑两个问题，增加什么内容，增加在哪个位置（上一行或下一行）
在SELINUX开头的行，在下一行加个注释，并且应用生效
ansible 192.168.48.101 -m lineinfile -a &quot;path=/tmp/selinux insertafter=&#x27;^SELINUX=&#x27; line=&#x27;##Disabled SELINUX&#x27; &quot;

通过正则匹配查找/tmp/selinux文本,并在文本末尾插入一行##end
ansible 192.168.48.101 -m lineinfile -a &#x27;path=/tmp/selinux regexp=&quot;EOF&quot; line=&quot;#end&quot;&#x27;

3.删除文件内容:把刚才添加的“##disabled selinux”注释去掉（删除所在行）
ansible 192.168.48.101 -m lineinfile -a &quot;path=/tmp/selinux regexp=&#x27;^##Disa&#x27; state=absent&quot;ansible 192.168.48.101 -m shell -a &quot;cat /tmp/selinux&quot;



备份文件:在SELINUX开头的行，前一行加个注释，并且生效，生成备份文件

ansible 192.168.48.101 -m lineinfile -a &quot;path=/tmp/selinux insertbefore=&#x27;^SELINUX=&#x27; line=&#x27;##Disabled SELINUX&#x27; backup=yes state=present&quot;ansible 192.168.48.101 -m shell -a &quot;ls -l /tmp/selinux*&quot;


课堂练习：
修改192.168.48.101主机的/etc/hosts文件，
1、增加内容192.168.48.102 node03,验证增加成功
ansible 192.168.48.101 -m lineinfile -a &quot;path=/etc/hosts line=&#x27;192.168.48.102 node03&#x27; &quot;ansible 192.168.48.101 -m shell -a &quot;cat /etc/hosts&quot;

2、匹配以192开头的行，修改192.168.48.102 对应的 域名为node02，验证增加成功
ansible 192.168.48.101 -m lineinfile -a &quot;path=/etc/hosts regexp=&#x27;^192&#x27; line=&#x27;192.168.48.102 node02&#x27; &quot;

3、匹配以192开头的行之前增加 192.168.48.101 node01 ，验证增加成功
ansible 192.168.48.101 -m lineinfile -a &quot;path=/etc/hosts insertbefore=&#x27;^192&#x27; line=&#x27;192.168.48.101 node01&#x27; &quot;

4、在文档结尾增加 192.168.48.100 controller
ansible 192.168.48.101 -m lineinfile -a &#x27;path=/etc/hosts regexp=&quot;EOF&quot; line=&quot;192.168.48.100 controller&quot;&#x27;

5、删除步骤1-3加入的内容
ansible 192.168.48.101 -m lineinfile -a &quot;path=/etc/hosts regexp=&#x27;^192.&#x27; state=absent&quot;ansible 192.168.48.101 -m shell -a &quot;cat /etc/hosts&quot;

软件包模块
yum模块
*常用参数*
name：软件包名称（必填）
state：
latest（更新到最新）
present（安装）
version（版本）
absent（卸载）
查看是否安装了某个服务 rpm -qa|grep httpd
*使用案例*
给node01安装httpd服务
ansible 192.168.48.101 -m yum -a &#x27;name=httpd state=present&#x27;

验证安装
ansible 192.168.48.101 -m shell -a &#x27;rpm -qa|grep httpd&#x27;
卸载 state=absent
ansible 192.168.48.101 -m yum -a &#x27;name=httpd state=absent&#x27;
更新软件state=latest
ansible 192.168.48.101 -m yum -a &#x27;name=&#x27;httpd&#x27; state=latest&#x27;
系统模块
user模块
常用参数
comment：注释信息group：主要组groups：附加组state：present/absentgenerate_ssh_key：生成SSH验证密钥name：用户名shell：Shell类型uid：UID
使用案例
1、在node1上创建用户 test_user UID=1010
ansible 192.168.48.101 -m user -a &quot;name=test_user  uid=1010 comment=&#x27;ansible_test_user&#x27; shell=/bin/bash generate_ssh_key=yes  state=present&quot;
ansible 192.168.48.101 -m shell -a &#x27;id test_user&#x27;

2、删除用户test_user（userdel test_user）
ansible 192.168.48.101 -m user -a &quot;name=test_user  state=absent force=yes&quot;ansible 192.168.48.101 -m shell -a &#x27;getent passwd |grep test_user&#x27;

group组模块
1、创建组test_group (groupadd -g 1010 test_group）
ansible 192.168.48.101 -m group -a &quot;name=test_group  gid=1010  state=present&quot;ansible 192.168.48.101 -m shell -a &#x27;getent group|grep test_group&#x27;

2、删除组test_group （groupdel test_group）
ansible 192.168.48.101 -m group -a &quot;name=test_group   state=absent&quot;ansible 192.168.48.101 -m shell -a &#x27;getent group|grep test_group&#x27;

service模块
启用/启动/停止指定的服务
常用参数
name：服务名（确定服务存在）（必选项）state：服务目标状态	（state=started/stopped/restarted/...）（必选项）enabled：是否开机启动(yes/no)
1、在node01上安装和启用httpd服务（相当于systemctl enable --now httpd）
安装
ansible 192.168.48.101 -m yum -a &#x27;name=httpd state=present&#x27;
启用
ansible 192.168.48.101 -m service -a &quot;name=httpd state=started  enabled=yes&quot;
ansible 192.168.48.101 -m shell -a &#x27;systemctl status httpd&#x27;


2、停止服务
ansible 192.168.48.101 -m service -a &#x27;name=httpd state=stopped&#x27;

3、重启服务
ansible 192.168.48.101 -m service -a &#x27;name=httpd state=restarted&#x27;

firewalld模块
常见参数
source：数据源（相当于--add-source）interface：端口（相当于--add-port）service：服务（相当于--add-service）zone：关联区域（相当于--zone）permanent：永久生效（相当于--permanent）immediate：立即生效（相当于执行了firewall-cmd --reload）state：防火墙规则状态（enabled | disabled）（必填项）rich_rule：富规则（相当于--add-rich-rule=&#x27;&#x27;）
使用案例
1、添加基本规则
在node1中将http服务进行放行，并关联到public区域中，立即生效且永久生效
ansible 192.168.48.101 -m firewalld -a &#x27;zone=public service=http permanent=yes immediate=yes state=enabled&#x27;
综合练习
（1）在node01上创建一个用户devops：
ansible node01 -m user -a &quot;name=devops state=present&quot;

（2）在node01上创建一个目录 /devops，设置所属组、权限：
ansible node01 -m file -a &quot;path=/devops state=directory owner=devops group=devops mode=0755&quot; ansible node01 -m shell -a &quot;ls -l /&quot;  

（3）安装httpd服务，设定开机自启动，验证服务状态为启动：
ansible node01 -m yum -a &quot;name=httpd state=present&quot;ansible node01 -m service -a &quot;name=httpd state=started enabled=yes&quot;


（4）创建一个文件 /devops/index.html 包含一行内容：DevOps：
ansible node01 -m copy -a &quot;content=&#x27;DevOps\n&#x27; dest=/devops/index.html&quot;

（5）创建软链接：/var/www/html/index.html 到 /devops/index.html：
ansible node01 -m file -a &quot;src=/devops/index.html dest=/var/www/html/index.html state=link force=true&quot;

（6）验证软链接：
ansible node01 -m shell -a &quot;ls -l  /var/www/html/index.html&quot;

（7）取消软链接，新建/var/www/html/index.html 文档，访问网页：
ansible node01 -m file -a &quot;path=/var/www/html/index.html state=absent&quot;ansible node01 -m copy -a &quot;content=&#x27;Hello World&#x27; dest=/var/www/html/index.html&quot;


使用浏览器访问http://192.168.48.101验证主页信息
Ansible-Playbook
介绍

playbook是由一个或多个&quot;play&quot;组成的列表
play的主要功能在于将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色。
Task实际是调用ansible的一个module，将多个play组织在一个playbook中，
即可以让它们联合起来，按事先编排的机制执行预定义的动作
Playbook采用YAML语言编写

用户通过ansible命令直接调用yml语言写好的playbook,playbook由多条play组成每条play都有一个任务(task)相对应的操作,然后调用模块modules，应用在主机清单上,通过ssh远程连接从而控制远程主机或者网络设备
YAML语法
&gt; 在单一档案中，可用连续三个连字号（---）区分多个档案。  另外，还有选择性的连续三个点号( ... )用来表示档案结尾&gt; 次行开始正常写Playbook的内容，一般建议写明该Playbook的功能&gt; 使用#号注释代码&gt; 缩进必须是统一的，不能空格和tab混用，一般缩进2个空格&gt; 缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的&gt; YAML文件内容是区别大小写的，key/value的值均需大小写敏感&gt; 多个key/value可同行写也可换行写，同行使用:分隔，同一行使用 , 逗号分隔&gt; value可以是个字符串，也可是另一个列表[]&gt; 一个完整的代码块功能需最少元素需包括 name 和 task&gt; 一个name只能包括一个task&gt; YAML中不允许在双引号中出现转义符号，所以都是以单引号来避免转义符错误&gt; 使用 | 和 &gt; 来分隔多行，实际上这只是一行。 &gt; YAML文件扩展名通常为yml或yaml
三种常见的数据交换格式

YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。序列（Sequence）里的项用&quot;-&quot;来代表，Map里的键值对（字典）用&quot;:&quot;分隔示例    name: John Smith    age: 41    gender: Male    spouse:      name: Jane Smith      age: 37      gender: Female    children:      - name: Jimmy Smith        age: 17        gender: Male      - name: Jenny Smith        age 13        gender: Female
修改vim
vim ~/.vimrcset nu       set paste    set cursorline set cursorcolumn autocmd FileType yaml setlocal ai et ts=2 sw=2 set nu       #显示行号set paste    #黏贴内容保留格式set cursorline #行定位set cursorcolumn #列定位autocmd FileType yaml setlocal ai et ts=2 sw=2 #FileType 代表文件类型,后边跟参数yaml，就是这个作用于yaml文件，编写其他文件时不起作用#ts=2是tabstop=2的缩写，表示使用2个空格自动代替tab键#et=expandtab 表示tab键的缩写#sw=2 是shiftwidth=2的缩写，表示开启自动缩进对齐，缩进宽度为2个空格#ai=auto indent   自动退格对齐\
将这段代码添加到 ~/.vimrc 文件中，以使 Vim 在启动时自动应用这些设置
playbook基础组件
一个简单的剧本模型（YAML语言）
1&gt; 缩进：用两个空格缩进
2&gt; 列表：用 -
3&gt; 字典：key: value
--- - hosts: YYY          #待操作主机集，可以不写，执行时通过 -i 调用host文件  remote_user： root  #在远端使用哪个用户执行  tasks:              #任务集（必须）  - name: task1       #只是一个文本提示，执行时会输出其中内容（例如输出Install httpd）    module1:          #真正干活的部分，其实就是前面讲过的ansible各种模块      argument1 : value1       argument2 : value2   - name: task2     module2:      argument1 : value1       argument2 : value2 ... 
解释：
Hosts：    &gt; playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。      hosts用于指定要执行指定任务的主机，须事先定义在主机清单中
remote_user:     可用于Host和task中。    也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；    此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户    - hosts: all      remote_user: root   (可省略,默认为root)  以root身份连接      tasks:    指定任务      - name: test connection        ping:          remote_user: magedu          sudo: yes           默认sudo为root          sudo_user:wang      sudo为wang
task列表和action    任务列表task:由多个动作,多个任务组合起来的,每个任务都调用的模块,一个模块一个模块执行    1&gt; play的主体部分是task list，task list中的各任务按次序逐个在hosts中指定的所有主机上执行，       即在所有主机上完成第一个任务后，再开始第二个任务    2&gt; task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。   模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致    3&gt; 每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。   如果未提供name，则action的结果将用于输出
playbook书写风格
简单案例：
编写echo.yaml文件，内容如下
vim echo.yaml---- hosts: 192.168.48.102  tasks:  - name: 输出1    shell: echo &quot;1&quot;  - name: 输出2    shell: echo &quot;2&quot;...#执行该剧本文件：ansible-playbook echo.yaml  
命令执行返回的结果:
第一行PLAY表示执行的主机或者主机组。
第二行TASK[Gathering Facts]，在 Playbook 中并没有定义，这是Ansible自带的task 收集主机的信息，此功能非常实用，后面的任务中会详细讲解。这里仅需知晓task为Ansible自带的功能，可以通过Playbook中添加 gather_facts: no 进行关闭。
下面两个task是自行编辑的task，可以发现没有返回结果，但是当出现黄色的changed时代表执行或者修改成功。changed代表前后状态发生改变,例如使用copy模块，拷贝同一个东西，第一次执行成功的时候是changed状态，第二次再执行的时候就是ok状态。ok状态代表:Ansible检查了需要更改的内容发现前后没有变化，所以直接返回ok状态，实际上 Ansible并没有去执行该操作。最后代表状态,即 Playbook的执行结果。ok表示检查了但不需要操作的任务量。failed表示执行失败的数量，changRed代表状unreachable表示不可达的主机数态更改的数量，ok+changed 才代表执行完成的任务数量。
编写playbook
vim httpd.yaml--- ##列出第一个play - name: Install httpd package and start httpd service ##标明 该play的用途   hosts: 192.168.142.101 ##指定对其运行play中任务的主机（必填项，指定多台主机可以使用分组，或者 , 分隔）   tasks: ##play的任务列表   - name: Install httpd package ##任务1的描述     yum: ##任务1调用yum模块，模块内容往下写       name: httpd ##参数1：yum模块需要使用的软件包       state: present ##参数2：安装软件包#以上任务等同于 ansible 192.168.142.101 -m yum -a &quot;name=httpd state=present&quot;   - name: Start httpd service ##任务2的描述     service: ##任务2调用服务模块       name: httpd ##参数1：service调用的服务名称       state: started ##参数2：service调用服务要达到的目标状态       enabled: yes ##参数3：调用的服务开机启动 #以上任务等同于 ansible 192.168.142.101 -m service -a &quot;name=httpd state=started enabled=yes&quot; 

运行playbook
运行playbook的方式    ansible-playbook &lt;filename.yaml&gt; ... [options]常见选项    --check -C       只检测可能会发生的改变，但不真正执行操作                      (只检查语法,如果执行过程中出现问题,-C无法检测出来)                     (执行playbook生成的文件不存在,后面的程序如果依赖这些文件,也会导致检测失败)    --list-hosts     列出运行任务的主机    --list-tags      列出tag  (列出标签)    --list-tasks     列出task (列出任务)    --limit 主机列表 只针对主机列表中的主机执行    -v -vv -vvv      显示过程示例    ansible-playbook hello.yaml --check 只检测    ansible-playbook hello.yaml --list-hosts  显示运行任务的主机    ansible-playbook hello.yaml --limit 192.168.142.101  限制主机    ansible-playbook hello.yaml --list-tasks  显示运行任务的主机
1、在ansible工作目录运行 完整剧本：httpd.yaml
执行剧本ansible-playbook playbooks/httpd.yaml验证服务ansible 192.168.142.101 -m shell -a &#x27;rpm -qa |grep httpd&#x27;ansible 192.168.142.101 -m shell -a &#x27;netstat -ntulp |grep 80&#x27;

2.提高输出的详细程度

注：通常使用 ansible-playbook -v 即可。

3.执行空运行（冒烟运行）


handlers+notify
Handlers 实际上就是一个触发器，是task列表，这些task与前述的task并没有本质上的不同,用于当关注的资源发生变化时，才会采取一定的操作。任务都有状态changed或者ok，只有在任务执行状态为change时，才执行该任务调用的handler。
Notify此action可用于在每个play的最后被触发，这样可避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作
示例1：

使用playbook安装httpd，并验证服务启动，查看httpd使用的端口

vim httpd3.yaml---- hosts: all  remote_user: root  tasks:  - name: Install httpd    yum:      name: httpd      state: present  - name: ensure apache is running    service:      name: httpd      state: started      enabled: yesansible-playbook httpd3.yamlansible all -m shell -a &#x27;systemctl status httpd&#x27;ansible all -m shell -a &#x27;netstat -tunlp|grep httpd&#x27;

在被控端（两台机）修改httpd的conf文件，监听端口改成8080

mkdir -p /root/ansible/filescp /etc/httpd/conf/httpd.conf  /root/ansible/files#如果前面httpd3运行成功，说明成功安装httpd，则httpd.conf会存在vim /root/ansible/files/httpd.conf#将Listen 80 修改为Listen 8080

修改剧本文件，增加拷贝配置文件的task，并重新执行剧本。

vim httpd4.yaml---- hosts: all  remote_user: root  tasks:     - name: Install httpd    yum:      name: httpd      state: present  - name: backup httpd.conf    shell: cp /etc/httpd/conf/httpd.conf&#123;,.bak&#125;  #备份原文件  - name: copy configure file    copy:       src: /root/ansible/files/httpd.conf       dest: /etc/httpd/conf/      backup: yes  #第二步修改了8080端口，将文件移回原处覆盖源文件  - name: ensure apache is running    service:      name: httpd      state: started      enabled: yesansible-playbook httpd4.yamlansible all -m shell -a &#x27;cat /etc/httpd/conf/httpd.conf|grep 8080&#x27;ansible all -m shell -a &#x27;systemctl status httpd&#x27;ansible all -m shell -a &#x27;netstat -tunlp|grep httpd&#x27;#发现修改配置，但没有生效，因为没有重启httpd应用

增加handlers和notify

vim httpd4.yaml---- hosts: all  remote_user: root  tasks:     - name: Install httpd    yum:      name: httpd      state: present  - name: copy configure file    copy:       src: /root/ansible/files/httpd.conf       dest: /etc/httpd/conf/      backup: yes    #调用触发列表里的 restart httpd任务，调用之后重启httpd，配置文件即刻生效    notify: restart httpd  - name: ensure apache is running    service:      name: httpd      state: started      enabled: yes#触发器列表  handlers:  - name: restart httpd    service:       name: httpd       state: restarted                ansible-playbook httpd4.yamlansible all -m shell -a &#x27;netstat -tunlp|grep httpd&#x27;发现端口是8080（即成功）
修改/root/ansible/files/httpd.conf ，将端口修改为8081，重新执行httpd4.yaml，并验证服务端口已经改变。
ansible-playbook httpd4.yamlansible all -m shell -a &#x27;netstat -tunlp|grep httpd&#x27;
发现端口变成8081，说明只有在任务执行状态为change时，才执行该任务调用的handler。
TAGS
tage: 添加标签 
可以指定某一个任务添加一个标签,添加标签以后,想执行某个动作可以做出挑选来执行,多个动作可以使用同一个标签
停止httpd服务
ansible all -m service -a &#x27;name=httpd  state=stopped&#x27;ansible all -m shell -a &#x27;ss -tln |grep :8081&#x27;
[root@controller ~]# vi httpd5.yaml---- hosts: all  remote_user: root  tasks:  - name: install httpd    yum:      name: httpd      state: present    tags: install #install标签  - name: set listen8080    shell: sed -i &quot;s/Listen 80/Listen 8080/g&quot; /etc/httpd/conf/httpd.conf    tags: set8080 #设置8080标签  - name: backup cofing    copy:      src: /etc/httpd/conf/httpd.conf      dest: /etc/httpd/conf/httpd.conf      backup: yes    notify: restart httpd    tags: backup #备份标签  - name: 配置 httpd 服务    service:      name: httpd      state: started      enabled: yes    tags: started #开启httpd服务标签  handlers:  - name: restart httpd    service:      name: httpd      state: restarted    tags: restart  #重启服务标签...
ansible-playbook -tstarted httpd5.yaml   #指定执行started 这个标签ansible all -m shell -a &#x27;ss -tln |grep :8080&#x27;ansible-playbook -t install,conf httpd.yaml   #指定执行install,backup 两个标签
管理变量

变量定义：key=value
示例：http_port=80
变量调用方式：
1&gt; 通过 调用变量，且变量名前后必须有空格，有时用&quot;&quot;才生效 (引号）
在playbook中定义
vars语句定义全局变量（该变量作用于整个Play）
vim test_vars.yaml---- name: test_var  hosts: all  vars:    username: test_user1  tasks:  - name:  create user via a variable file    user:      name: &quot;&#123;&#123; username &#125;&#125;&quot;          #冒号后面不能以&#123;开头，不然会报语法错误，需要加上引号。      state: present#创建一个test_user1的用户  ansible-playbook -v test_vars.yaml   ansible all -m shell -a &#x27;getent passwd test_user1&#x27;

执行结果：

课堂练习
通过playbook中定义用户名和组名，实现变量引用，创建用户和组。
vim var.yaml---- hosts: all  remote_user: root  vars:  - username: user1  - groupname: group1  tasks:  - name: create group    group:       name: &quot;&#123;&#123; groupname &#125;&#125;&quot;       state: present  - name: create user    user:       name: &quot;&#123;&#123; username &#125;&#125;&quot;       state: presentansible-playbook -v var.yamlansible all -m shell -a &#x27;getent passwd user1&#x27;ansible all -m shell -a &#x27;getent group group1&#x27;



开启防火墙ansible all -m shell -a &#x27;systemctl start firewalld&#x27;vim firewall.yaml---- hosts: all  remote_user: root  vars:  - http_port: 80  tasks:  - name: insert firewalld rule for httpd    firewalld:       port: &quot;&#123;&#123; http_port &#125;&#125;/tcp&quot;       permanent: true       state: enabled       immediate: yes    ansible-playbook -v firewall.yamlansible all -m shell -a &#x27;systemctl stop firewalld&#x27;ansible all -m shell -a &#x27;firewall-cmd --query-port=80/tcp&#x27;  
在独立的变量YAML文件中定义
当变量较多的时候，或者变量需要多个playbook重用的时候，可以把变量放到独立的文件中，通过关键字&quot;var_files&quot;把文件中定义的变量引用到playbook中。
vars_files 引用变量文件（只能所用于Play全局，不能在某个task中单独被引用）
vim var_file.yamlusername: test_user3vim test_var_file.yaml---- name: test_var_file  hosts: all  vars_files:  - /root/var_file.yaml  tasks:  - name:  create user via a variable file    user:      name: &quot;&#123;&#123; username &#125;&#125;&quot;      state: present...  ansible-playbook -v test_var_file.yaml  ansible all -m shell -a &#x27;getent passwd test_user3&#x27;
练习：将防火墙端口写入
将变量写进单独的配置文件中引用test_var_file.yaml---- hosts: all  remote_user: root  vars_files:  - /root/var_file.yaml  tasks:  - name: insert firewalld rule for httpd    firewalld:       port: &quot;&#123;&#123; http_port &#125;&#125;/tcp&quot;       permanent: true       state: enabled       immediate: yes...vim var_file.yamlhttp_port: 78ansible-playbook -v test_var_file.yamlansible all -m shell -a &#x27;firewall-cmd --query-port=78/tcp&#x27;  
远程主机上的系统变量（Facts事实）
ansible会通过setup模块来搜集主机的系统信息，这些搜集到的系统信息叫做Facts。

每个playbook在执行前都会默认执行setup模块，所以这些facts信息是可以以变量的形式被使用。
查看Facts变量
ansible all -m setup 能查看到node节点的所有信息ansible 192.168.48.101 -m setup |grep ansible_hostname或者可以使用filter过滤信息ansible all -m setup -a &#x27;filter=&quot;ansible_hostname&quot;&#x27;  查询主机名ansible all -m setup -a &#x27;filter=&quot;ansible_default_ipv4&quot;&#x27;  查询ipv4地址ansible all -m setup -a &quot;filter=ansible_memory_mb&quot;查询内存其他常用信息列出如下：ansible_all_ipv4_addresses：仅显示ipv4的信息。ansible_devices：仅显示磁盘设备信息。ansible_distribution：显示是什么系统，例：centos,suse等。ansible_distribution_major_version：显示是系统主版本。ansible_distribution_version：仅显示系统版本。ansible_machine：显示系统类型，例：32位，还是64位。ansible_eth0：仅显示eth0的信息。ansible_hostname：仅显示主机名。ansible_kernel：仅显示内核版本。ansible_lvm：显示lvm相关信息。ansible_memtotal_mb：显示系统总内存。ansible_memfree_mb：显示可用系统内存。ansible_memory_mb：详细显示内存情况。ansible_swaptotal_mb：显示总的swap内存。ansible_swapfree_mb：显示swap内存的可用内存。ansible_mounts：显示系统磁盘挂载情况。ansible_processor：显示cpu个数(具体显示每个cpu的型号)。ansible_processor_vcpus：显示cpu个数(只显示总的个数)。
使用Facts变量
vim var2.yaml---- hosts: all  remote_user: root  tasks:  - name: create log file    file:       name: /root/&#123;&#123; ansible_hostname &#125;&#125;       state: touchansible-playbook var2.yamlansible all -m shell -a &#x27;ls /root|grep node*&#x27;
复杂Facts变量的使用

方式1：使用中括号
&#123;&#123; ansible_date_time[&quot;date&quot;] &#125;&#125;
方式2：使用点号（推荐）
&#123;&#123; ansible_date_time.date &#125;&#125;
vim var2.yaml---- hosts: all  remote_user: root  tasks:  - name: 22    copy:      content: &quot;&#123;&#123; ansible_date_time.date &#125;&#125;&quot;      dest: /tmp/f1ansible-playbook var2.yamlansible all -m shell -a &#x27;cat /tmp/f1&#x27;
关闭Facts
搜集facts会消耗额外时间，可以在剧本中设置是否开启和关闭facts搜集。
开启gather_facts:yes，关闭gather_facts:no

在/etc/ansible/hosts(主机清单)中定义变量
普通变量：主机组中主机单独定义，优先级高于公共变量(单个主机 )
公共(组)变量：针对主机组中所有主机定义统一变量(一组主机的同一类别)
可以是主机级别或者是主机组级别的
定义主机级别变量
vim  /etc/ansible/hosts[all]192.168.48.101 username=test_user3   #主机级别变量192.168.48.102 username=test_user4  
编辑剧本文件
vim test_vars2.yaml---- name: test inventory vars  hosts: all  tasks:  - name:  create user via a variable file    user:      name: &quot;&#123;&#123; username &#125;&#125;&quot;      state: presentansible-playbook -v test_vars2.yaml  ansible all -m shell -a &#x27;getent passwd test_user3&#x27;ansible all -m shell -a &#x27;getent passwd test_user4&#x27;
主机组级别定义变量（相对于主机级别定义的变量，优先级较低）
vim  /etc/ansible/hosts[all]192.168.142.101 username=test_user3   #主机级别变量192.168.142.102   [all:vars]username=test_user5ansible-playbook -v test_vars2.yaml 发现第一台主机不变，第二台主机创建新的用户test_user5,证明主机组变量比主机变量优先级低
通过命令行指定变量
ansible-playbook -e 变量 剧本（优先级最高）ansible-playbook -v -e username=test_user10 test_vars2.yaml 

安装httpd服务
示例：test_vars3.yaml ---- hosts: all  remote_user: root  tasks:  - name: install package    yum:      name: &quot;&#123;&#123; pkname &#125;&#125;&quot;      state: present  - name: start service    service:      name: &quot;&#123;&#123; pkname &#125;&#125;&quot;      state: started      enabled: yesansible-playbook –e pkname=httpd test_vars3.yaml 
示例：test_vars3.yaml ---- hosts: all  remote_user: root  tasks:  - name: install package    yum:       name: &quot;&#123;&#123; pkname1 &#125;&#125;&quot;       state: present  - name: install package    yum:       name: &quot;&#123;&#123; pkname2 &#125;&#125;&quot;       state: present  ansible-playbook -e &#x27;pkname1=httpd pkname2=tree&#x27; -v test_vars3.yaml 
复杂变量的使用
数组
如果我们定义变量，而这些值都属于同一类型的元素，那么我们必定要用数组。
例如：
vim test_com_var.yaml---- hosts: all  vars:    user_name:    - test_user11    - test_user12    - test_user13    - test_user14  tasks:  - name: create users    user:      name: &quot;&#123;&#123; user_name[1] &#125;&#125;&quot;      state: present

验证：ansible-playbook -v test_com_var.yaml

注意：在用user模块建用户的时候，只能调用数组中的某一个值，不能全部调用，否则报错“用户名不合法”


字典（dictionary）
如果我们的变量信息中具备多种不同的元素时，采用字典。
例如：
vim test_com_var.yaml---- name: test_dict  hosts: all  vars:    user_info:      test_user20:        name: test_user20        shell: /bin/bash        comment: test_user20      test_user21:        name: test_user21        shell: /bin/bash        comment: test_user21  tasks:  - name: create users via dict    user:      name: &quot;&#123;&#123; user_info[&#x27;test_user20&#x27;][&#x27;name&#x27;] &#125;&#125;&quot;      shell: &quot;&#123;&#123; user_info[&#x27;test_user20&#x27;][&#x27;shell&#x27;] &#125;&#125;&quot;      state: present


变量引用的另一种写法：引用对象写法（python语法）

注意：以点作为分隔（引用对象）这种方式，可能会和python本身的语义引起冲突，所以不建议使用这种方式
注册变量
注册变量是指将一个任务（task）的输出结果定义到一个变量中，这个变量就可以在随后的任务中像普通变量一样使用。
很多情况下，注册变量用来收集shell的执行结果，结果中包含标准输入和标准输出。接下来使用shell模块执行命令将命令结果传入名为var_echo 的变量并使用debug进行检测。
register 的使用形如 register: varname，即 register模块后直接加变量名即可，而register这一行仅仅需要写在需要收集输出的那一行下即可。
案例：
vim test_com_var.yaml---- name: test_dict  hosts: all  vars:    user_info:      test_user20:        name: test_user20        shell: /bin/bash        comment: test_user20      test_user21:        name: test_user21        shell: /bin/bash        comment: test_user21  tasks:  - name: create users via dict    user:      name: &quot;&#123;&#123; user_info.test_user21.name &#125;&#125;&quot;      shell: &quot;&#123;&#123; user_info.test_user21.shell &#125;&#125;&quot;      state: presentansible-playbook test_com_var.yaml
执行结果如下：

修改剧本文件，加入debug模块
vim test_com_var.yaml- name: test_dict  hosts: all  vars:    user_info:      test_user20:        name: test_user20        shell: /sbin/nologin        comment: test_user20      test_user21:        name: test_user21        shell: /sbin/nologin        comment: test_user21  tasks:  - name: create users via dict    user:      name: &quot;&#123;&#123; user_info.test_user21.name &#125;&#125;&quot;      shell: &quot;&#123;&#123; user_info.test_user21.shell &#125;&#125;&quot;      state: present    register: user_result  - name: debug result of user creation    debug:      msg: &quot;&#123;&#123; user_result &#125;&#125;&quot;      ansible-playbook test_com_var.yaml
运行结果：

可以引用结果中的部分元素（user_result[‘uid’] / user_result.uid）
vim test_com_var.yaml- name: test_dict  hosts: all  vars:    user_info:      test_user20:        name: test_user20        shell: /sbin/nologin        comment: test_user20      test_user21:        name: test_user21        shell: /sbin/nologin        comment: test_user21  tasks:  - name: create users via dict    user:      name: &quot;&#123;&#123; user_info.test_user21.name &#125;&#125;&quot;      shell: &quot;&#123;&#123; user_info.test_user21.shell &#125;&#125;&quot;      state: present    register: user_result  - name: debug result of user creation    debug:      msg: &quot;&#123;&#123; user_result.uid &#125;&#125;&quot;        ansible-playbook test_com_var.yaml    
运行结果：

可以对输出结果进行迭代引用（用register存在多个变量中）
vim test_com_var.yaml---- name: test_dict  hosts: all  vars:    user_info:      test_user20:        name: test_user20        shell: /sbin/nologin        comment: test_user20      test_user21:        name: test_user21        shell: /sbin/nologin        comment: test_user21  tasks:  - name: create users via dict    user:      name: &quot;&#123;&#123; user_info.test_user21.name &#125;&#125;&quot;      shell: &quot;&#123;&#123; user_info.test_user21.shell &#125;&#125;&quot;      state: present    register: user_result  - name: debug result of user creation    debug:      msg: &quot;&#123;&#123; user_result.uid &#125;&#125;&quot;    register: shell_result    - name: debug result of shell    debug:      msg: &quot;&#123;&#123; shell_result &#125;&#125;&quot;        ansible-playbook test_com_var.yaml    

Ansible Vault（Ansible 保管箱）
作用：加密敏感的数据、密码等信息，通常情况下都是定义在变量内的敏感信息。
应用的情景：
1&gt; 加密变量文件（敏感数据、密码信息等）
2&gt; 加密证书
命令：ansible-vault
命令用法：
创建一个加密文件：
ansible-vault create sec.yaml

使用vim sec.ym或者cat sec.yaml只能看到加密后的内容

如何查看加密过的文件内容：

如何在剧本中调用加密文件
vim test_vault.yaml---- name: Create users via vault  hosts: all  vars_files:  - /root/sec.yaml  tasks:  - name: Create users    user:      name: &quot;&#123;&#123; username &#125;&#125;&quot;      state: present
执行剧本时报错

解决方法：
方法一：ansible-playbook 命令时候添加–ask-vault-pass参数
ansible-playbook --ask-vault-pass test_vault.yaml

方法二：ansible-playbook --vault-id @prompt test_vault.yaml（2.3之后使用，建议）

方法三：ansible-playbook --vault-password-file=pass.yaml  test_vault.yaml
（纯文本形式的密码存放在文件中，只能单行写一个密码，需要对该密码文件加强安全措施）
echo 123456 &gt; pass.yaml

解密

加密一个已存在的文件

重置加密文件的密码

编辑已存在的加密文件

Tips：如果我们使用加密文件保存变量、密码等敏感数据，最好采用隐藏文件来存放，增强安全性。


ansible-playbook --vault-password-file=.pass.yaml  test_vault.yaml

综合实践
编辑剧本文件实现以下功能：
0、设置主机组 all
1、设置变量 定义nginx服务端口为8081
2、关闭facts
3、调用service模块，卸载受控端的httpd
4、调用SELinux模块，关闭selinux
5、调用yum模块安装epel源
6、调用yum模块安装nginx
7、调用lineinfile模块修改nginx配置文件中的监听端口，使用自定义的服务端口变量，并将结果注册到 port_result
8、调用service模块启动nginx，并设置为开机自启动
9、调用debug模块，msg信息为port_result
10、验证受控端服务及端口
---- hosts: all  gather_facts: no  vars:     nginx_port: &quot;8081&quot;  tasks:     - name: uninstall httpd    yum:      name: httpd      state: absent  - name: stop selinux    selinux:      state: disabled  - name: install epel    yum:      name: epel-release      state: present  - name:     yum:      name: nginx      state: present  - name: set nginx_port    lineinfile:      path: /etc/nginx/nginx.conf      regexp: &quot;        listen       80;&quot;      line: &quot;        listen       &#123;&#123; nginx_port &#125;&#125;;&quot;    register: port_result     - name: start nginx    service:      name: nginx      state: started      enabled: yes  - name: debug msg    debug:      msg: &quot;&#123;&#123; port_result &#125;&#125;&quot;ansible-playbook  install_nginx.yaml -Cansible-playbook install_nginx.yaml  ansible all -m shell -a  &quot;ps aux |grep nginx &quot;  ansible all -m shell -a  &quot;netstat -lntp |grep nginx &quot; 


Ansible-templates
JINJA2语法简要介绍
Jinja2语言，支持的数据类型：
字符串：使用单引号或双引号数字：整数，浮点数列表：[item1, item2, ...]元组：(item1, item2, ...)字典：&#123;key1:value1, key2:value2, ...&#125;布尔型：true/false
支持的运算及操作：
算术运算：+, -, *, /, //, %, **比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=逻辑运算：and，or，not流表达式：For，If，When
Playbook的进阶应用
使用when实现条件判断
条件测试:如果需要根据变量、facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试。剧本中不能使用if判断，需要使用when判断。
when语句：在task后添加when子句即可使用条件测试，可以使用facts或playbook中定义的变量，支持Jinja2表达式语法
示例：
tasks:  - name: &quot;shutdown RedHat flavored systems&quot;    command: /sbin/shutdown -h now    when: ansible_os_family == &quot;RedHat&quot;  当系统属于红帽系列,执行command模块，注意：&#x27;所有变量&#x27;都可以直接在条件语句中使用，而无需使用双大括号
也可以使用多个when进行多条件判断，等效于and。
vim test_when.yml---- hosts: all  tasks:  - name: copy file    copy:      src: /etc/hosts      dest: /root/hosts_when    when: ansible_hostname is match &quot;node1&quot;		#when支持通配符ansible all --listansible-playbook  test_when.ymlansible all -m shell -a &quot;ls -l /root/hosts_when&quot;
使用with_items实现迭代
迭代：当有需要重复性执行的任务时，可以使用迭代机制
&gt; 对迭代项的引用，固定变量名为&quot;item&quot;

要在task中使用with_items给定要迭代的元素列表，
&gt; 列表格式：
字符串
字典

示例：打印1、2、3
vim test_items.yml---- name: add serveral users  gather_facts: no  hosts: all  tasks:  - name: test loop    debug:       msg: &quot;name --- &#123;&#123; item &#125;&#125;&quot; #&#123;&#123; item &#125;&#125; 系统自定义变量    with_items:   ##with_items定义&#123;&#123; item &#125;&#125; 的值和个数,      一般放到模块的末尾，与模块同一缩进级别        - one    - two    - three
示例：创建用户
vim test_items.yml---- name: add serveral users  hosts: all  tasks:  - user:      name: &quot;&#123;&#123; item  &#125;&#125;&quot;  #&#123;&#123; item &#125;&#125; 系统自定义变量      state: present    with_items:           ##with_items定义&#123;&#123; item &#125;&#125; 的值和个数,一般放到模块的末尾，与模块同一缩进级别        - testuser1    - testuser2ansible all --listansible-playbook  test_items.ymlansible all -m shell -a &quot;getent passwd testuser1&quot;上面语句的功能等同于下面的语句：- name: add user testuser1  user: name=testuser1 state=present - name: add user testuser2  user: name=testuser2 state=present 
示例：拷贝多个文件
touch /root/1.txt /root/2.txtvim test_items2.yml---- name: copy serveral files  hosts: all  tasks:  - copy:      src: /root/&#123;&#123; item  &#125;&#125;      dest: /etc/&#123;&#123; item &#125;&#125;    with_items:              - 1.txt    - 2.txtansible-playbook  test_items2.ymlansible all -m shell -a &quot;ls -l /etc/*.txt&quot;
示例：迭代字典
with_items中可以使用元素还可为hashes示例：vim test_items3.yml---- name: add several users  gather_facts: no  hosts: all  tasks:  - user:      name: &quot;&#123;&#123; item.name &#125;&#125;&quot;      state: present      groups: &quot; &#123;&#123; item.groups &#125;&#125;&quot;    with_items:    - &#123; name: &#x27;testuser3&#x27;, groups: &#x27;wheel&#x27; &#125;    - &#123; name: &#x27;testuser4&#x27;, groups: &#x27;root&#x27; &#125;ansible-playbook  test_items3.ymlansible all -m shell -a &quot;getent passwd testuser3&quot;ansible all -m shell -a &quot;id testuser3&quot;ansible all -m shell -a &quot;getent passwd testuser4&quot;ansible all -m shell -a &quot;id testuser4&quot;
课堂作业：使用with—items拷贝多个文件
要求：item列表条目为字典类型，包含src、dest、mode3个键值对，使用with_items实现多个文件的拷贝，并赋予设定的权限。
touch /root/3.txt /root/4.txtvim test_items4.yml---- name: copy several files  hosts: all  tasks:  - copy:      src: &quot;&#123;&#123; item.src &#125;&#125;&quot;      dest: &quot;&#123;&#123; item.dest &#125;&#125;&quot;      mode: &quot;&#123;&#123; item.mode &#125;&#125;&quot;    with_items:              - &#123; src: &quot;/root/3.txt&quot;, dest: &quot;/root/&quot;, mode: &quot;0644&quot; &#125;    - &#123; src: &quot;/root/4.txt&quot;, dest: &quot;/root/&quot;, mode: &quot;0644&quot; &#125;ansible-playbook  test_items4.ymlansible all -m shell -a &quot;ls -l /root/*.txt&quot;
when和with items组合使用
当when和with_items一起使用的时候，每个项都会单独被when语句处理
vim test_when_items.yml---- hosts: all  tasks:  - command: echo &#123;&#123; item &#125;&#125;    with_items: [ 1,2,3,4,5,6,8,10]    when: item &gt; 5          ansible-playbook test_when_items.yml
templates 模板
templates功能：根据模板文件动态生成对应的配置文件，命名必须以.j2结尾，支持jinja2语法。
在呈现 JINJA2模板时，文件中引用的变量和表达式被替换为对应的值。模板中使用的变量可以在 Playbook 的 vars 部分中指定。可以将受管主机的事实用作模板中的变量。
分隔符使用规范：
&#123;% EXPR %&#125;：用于表达式或逻辑（如循环、判断等）&#123;&#123; EXPR &#125;&#125;：用于向最终用户输出表达式或变量的结果。在呈现时将被替换为一个或多个值，对最终用户可见。&#123;# COMMENT #&#125;，用于注释，不会出现在最终文件中。
templates的使用场景
在实际的工作中由于每台服务器的环境配置都可能不同，但是往往很多服务的配置文件都需要根据服务器环境进行不同的配置，比如Nginx最大进程数、Redis最大内存等。
为了解决这个问题可以使用Ansible的template模块，该模块和copy模块作用基本一样，都是把管理端的文件复制到客户端主机上，但是区别在于template模块可以通过变量来获取配置值，支持多种判断、循环、逻辑运算等，而copy只能原封不动的把文件内容复制过去。
示例：httpd.conf的templates模板
创建并编辑httpd.conf.j2文件
yum -y install httpdrpm -qa httpd cp /etc/httpd/conf/httpd.conf /root/httpd.conf.j2 vim /root/httpd.conf.j2 ---------42行----------Listen &#123;&#123;port&#125;&#125; ----------95行---------ServerName &#123;&#123;domain&#125;&#125; vim /etc/ansible/hosts [websrvs]192.168.142.101 port=80 domain=www.node1.com192.168.142.102 port=81 domain=www.node2.com
卸载受控机上的httpd服务
ansible websrvs -m shell -a &#x27;yum remove -y httpd&#x27;ansible websrvs -m shell -a &#x27;yum remove -y nginx&#x27;
新建yaml文件
cd /rootvim a.yaml---- hosts: websrvs  remote_user: root  vars:  - package: httpd  - service: httpd  tasks:  - name: install service    yum:      name: &quot;&#123;&#123; package &#125;&#125;&quot;      state: latest  - name: httpd.conf    template:      src: /root/httpd.conf.j2      dest: /etc/httpd/conf/httpd.conf    notify: restart service  - name: start service    service:      name: &quot;&#123;&#123; service &#125;&#125;&quot;      state: started      enabled: true  handlers:  - name: restart service    service:      name: &quot;&#123;&#123; service &#125;&#125;&quot;      state: restarted
执行yaml文件并验证
ansible-playbook a.yaml --syntax-checkansible-playbook a.yamlansible websrvs -a &#x27;systemctl status httpd&#x27;ansible websrvs -m shell -a &#x27;ss -ntl&#x27;ansible websrvs -m shell -a &#x27;netstat -ntlp |grep httpd&#x27;ansible websrvs -m shell -a &#x27;lsof -i:80&#x27;ansible websrvs -m shell -a &#x27;lsof -i:81&#x27;
tamplates-for(循环)
语法：
&#123;% for 变量 in 列表 %&#125;&#123;&#123; 文本内容调用变量 &#125;&#125;&#123;% endfor %&#125;
示例：使用for循环遍历调用users列表变量的元素
&#123;%  for user in users %&#125;&#123;&#123;  user &#125;&#125;&#123;% endfor %&#125;
示例：yaml文件中变量的调用
编写yaml文件 jinja2_for.yml
vim jinja2_for.yml---- name: jinja2_for example  hosts: all  remote_user: root  vars:    users:    - user1    - user2  tasks:  - name: Copy template    template:       src: /root/users.j2      dest: /root/users 
编写/root/users.j2文件
vim /root/users.j2&#123;% for user in users %&#125;username: &#123;&#123; user &#125;&#125;&#123;% endfor %&#125;
执行并验证
ansible-playbook jinjia2_for.yml --syntax-checkansible-playbook jinjia2_for.ymlansible all -m shell -a &quot;cat /root/users&quot;
扩展示例：
以下示例模板使用for语句逐一运行users变量中的所有值，将user替换为各个值，但值为root时除外。
vim users.j2&#123;# for statement #&#125;&#123;% for user in users if not user ==&quot;root&quot; %&#125;User number &#123;&#123; loop.index &#125;&#125;- &#123;&#123; user &#125;&#125;&#123;% endfor %&#125;
loop.index变量扩展至循环当前所处的索引号。它在循环第一次执行时值为1，每一次迭代递增1.
ansible-playbook jinjia2_for.yml --syntax-checkansible-playbook jinjia2_for.ymlansible all -m shell -a &quot;cat /root/users&quot;
示例：事实变量的调用
编写yaml文件  jinja2_for2.yml
vim jinja2_for2.yml---- name: jinja2_for example2  hosts: all  remote_user: root  vars:    users:    - user1    - user2  tasks:  - name: Copy template    template:       src: /root/host.j2      dest: /root/hosts 
编写/root/host.j2文件
vim /root/host.j2&#123;% for host in groups[&#x27;websrvs&#x27;] %&#125;&#123;&#123; ansible_facts.default_ipv4.address &#125;&#125;&#123;&#123; ansible_facts.fqdn &#125;&#125;&#123;% endfor %&#125;
执行并验证
ansible-playbook jinjia2_for2.yml --syntax-checkansible-playbook jinjia2_for2.ymlansible websrvs -m shell -a &quot;cat /root/hosts&quot;
tamplates-if（判断）
Jinja2使用 if 语句来提供条件控制。如果满足条件，允许在文件中添加一行内容。
语法：
&#123;% if 条件 %&#125;&#123;&#123; 语句 &#125;&#125;&#123;% endif %&#125;
示例：
编写yaml文件 jinja2_if.yml
vim jinja2_if.yml---- name: jinja2_if example  hosts: websrvs  remote_user: root  tasks:  - name: Copy template    template:       src: /root/host2.j2      dest: /root/hosts2 
编辑host2.j2文件
vim /root/host2.j2&#123;% if ansible_facts.default_ipv4.address ==&#x27;192.168.142.101&#x27; %&#125;&#123;&#123; ansible_facts.default_ipv4.address &#125;&#125;&#123;&#123; ansible_facts.fqdn &#125;&#125;&#123;% endif %&#125;
执行并验证
ansible-playbook jinja2_if.yml --syntax-checkansible-playbook jinja2_if.ymlansible all -m shell -a &quot;cat /root/hosts2&quot;
综合案例：nginx templates
0、编辑主机清单，组websrvs，包含2台受控主机
1、主控端安装ngxin、拷贝nginx配置文件为nginx.conf.j2模板文件。创建nginx首页模版，命名为html.j2,引用实事变量：主机名，文件内容格式如： Welcome to 
2、编写test_template.yaml文件，要求tasks
​      1）安装epel源 2）安装nginx 3）拷贝nginx.conf.j2模板文件为受控主机的nginx配置文件4）拷贝html.j2模板文件为受控主机的nginx首页文件4）开启服务
3、校验playbook语法并执行，验证受控主机的nginx进程数\服务端口\首页
4、修改nginx.conf.j2模板文件，配置 worker_processes数量为实事变量：受控主机处理器vcpu个数的两倍，保存
5、修改test_template.yaml文件，添加notify和handlers，在配置文件变化时，重启nginx
6、校验playbook语法并执行，验证受控主机的nginx进程数
7、修改hosts文件为每台主机定义服务端口变量 第一台 8082，第二台8083
8、修改test_template.yaml文件，修改监听端口行，增加主机端口变量的引用
9、校验playbook语法并执行，验证受控主机的nginx服务端口
10、修改test_template.yaml，增加端口变量定义，端口88
11、校验playbook语法并执行，验证受控主机的nginx服务端口
1、主控端安装ngxin、拷贝nginx配置文件为nginx.conf.j2模板文件
yum install -y nginxcp /etc/nginx/nginx.conf /root/nginx.conf.j2echo &quot;welcome to &#123;&#123; ansible_hostname  &#125;&#125;&quot; &gt; html.j2ansible all -m setup |grep hostnameansible all -m setup |grep vcpu
2、创建nginx首页模版，命名为html.j2,引用实事变量：主机名
内容格式如： Welcome to 
2、编写test_template.yaml文件
vim test_template.yaml---- hosts: websrvs  remote_user: root  tasks:  - name: install epel    yum:      name: epel-release  - name: install package    yum:      name: nginx  - name: copy template    template:      src: /root/nginx.conf.j2      dest: /etc/nginx/nginx.conf  - name: copy template    template:      src: /root/html.j2      dest: /usr/share/nginx/html  - name: copy html    template:      src: /root/html.j2      dest: /usr/share/nginx/html/index.html      - name: start service    service:      name: nginx      state: started      enabled: yes
执行并验证
ansible-playbook test_template.yaml  --syntax-checkansible-playbook test_template.yaml  ansible all -m shell -a &#x27;systemctl status nginx&#x27;ansible all -m shell -a &#x27;ss -ntpl|grep nginx&#x27;#可以查看到进程，每个cpu一个ansible all -m shell -a &#x27;ps aux|grep nginx&#x27;
3、修改template文件，修改进程数为cpu内核的2倍
ansible websrvs -m setup|grep &quot;cpu&quot;vim nginx.conf.j2修改第6行worker_processes &#123;&#123; ansible_processor_vcpus*2  &#125;&#125;    #worker_processes auto
修改test_template.yaml文件，添加notify和handlers，在配置文件变化时，重启nginx
vim test_template.yaml---- hosts: websrvs  remote_user: root  tasks:  - name: install package    yum:      name: nginx  - name: copy template    template:      src: /root/nginx.conf.j2      dest: /etc/nginx/nginx.conf    notify:    - restart service  - name: copy html    template:      src: /root/html.j2      dest: /usr/share/nginx/html/index.html      - name: start service    service:      name: nginx      state: started      enabled: yes  handlers:  - name: restart service    service:      name: nginx      state: restarted
执行并验证
ansible-playbook test_template.yaml#可以查看到进程，ansible all -m shell -a &#x27;ps aux|grep nginx&#x27; #查看nginx进程数为cpu核数的2倍
检验nginx配置文件是否存在语法错误
nginx -t
nginx和httpd服务，web服务保证只有一个运行。
4、使用主机变量，修改服务端口
修改hosts文件增加端口变量
#使用主机变量#修改nginx对应的端口vim /etc/ansible/hosts[websrvs]192.168.142.101 http_port=8083192.168.142.102 http_port=8084
修改模板文件，增加端口引用
vim nginx.conf.j2修改39、40行server&#123;    listen   &#123;&#123; http_port &#125;&#125; ;    listen   [::]:&#123;&#123;  http_port  &#125;&#125; ;&#125;
执行并验证
ansible-playbook test_template.yamlansible websrvs -m shell -a &#x27;ss -ntpl|grep nginx&#x27;
5、使用playbook变量
修改test_template.yaml，增加端口信息
vim test_template.yaml---- hosts: websrvs  remote_user: root  vars：  - http_port: 88  tasks:  - name: install package    yum:      name: nginx  - name: copy template    template:      src: /root/nginx.conf.j2      dest: /etc/nginx/nginx.conf    notify:    - restart service  - name: copy html    template:      src: /root/html.j2      dest: /usr/share/nginx/html/index.html     - name: start service    service:      name: nginx      state: started      enabled: yes  handlers:  - name: restart service    service:      name: nginx      state: restarted
执行并验证
ansible-playbook test_template.yamlansible websrvs -m shell -a &#x27;ss -ntpl|grep nginx&#x27;#发现端口变成88
6、使用命令行变量
ansible-playbook -e &quot;http_port=99&quot;  test_template.yamlansible websrvs -m shell -a &#x27;ss -ntpl|grep nginx&#x27;#发现端口变成99
Roles
·由来: ansible自动化运行，基础由AD-Hoc命令来完成，在命令变多时，产生了playbook进行管理任务，简单任务使用playcook可以轻松处理，但是有复杂任务时单个playbook不可以胜任了，这时需要把多个playbook进行组合，少量用include将剧本中任务互相关联即可完成，但是playbook还在增多的情况时就不方便管理了，这时引入roles对playbook进行有效组织就十分必要了· Roles:角色，是ansible自1.2版本开始引入的新特性·目的:用于层次性，结构化地组织playbook, roles能够根据层次型结构自动装载变量、文件、任务、模块及触发器·方法: roles通过分别将放置于变量、文件、任务、模块及触发器单独的目录中，并可以便捷地include它们的一种机制·应用:角色一般用于基于主机构建服务的场景中、但也可以是用于构建守护进程等场景中
roles默认路径设置
/etc/ansible/ansible.cfgroles_path= /etc/ansible/roles
Roles各目录结构及作用
每个角色，以特定的层级目录结构进行组织roles目录结构：playbook.yml  调用角色roles/  project/ (角色名称)    tasks/    files/    vars/    templates/    handlers/    default/ 不常用，设定默认变量时使用此目录中的main.yml文件    meta/    不常用，定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件；其它文件需在此文件中通过include进行包含各目录的作用：/roles/project/ :项目名称,有以下子目录，project可以是mysql\httpd\nginx\memcached等    files/ ：存放由copy或script模块等调用的文件    templates/：template模块查找所需要模板文件的目录    tasks/：定义task,role的基本元素，至少应该包含一个名为main.yml的文件, 其定义了此角色的任务列表.             在handler中使用include包含的其它的handler文件也应该位于此目录中；    handlers/：至少应该包含一个名为main.yml的文件；用于定义此角色用到的各handler；               其它的文件需要在此文件中通过include进行包含    vars/：定义变量，至少应该包含一个名为main.yml的文件,；           其它的文件需要在此文件中通过include进行包含    meta/：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，           其它文件需在此文件中通过include进行包含, ansible1.3及其以后的版本才支持；    defaults/：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件
创建role框架
您可以使用标准Linux命令创建新角色所需的所有子目录和文件。
cd /etc/ansible/roles/mkdir  httpdcd httpdmkdir  tasks  handlers  vars  meta  defaults templates files 
或者可以运行ansible-galaxy init来创建新角色的目录结构。指定角色的名称作为命令的参数，该命令在当前工作目录中为新角色创建子目录。
cd /etc/ansible/rolesansible-galaxy init httpdtree httpd[root@controller roles]# tree httpdhttpd      #具体的⾓⾊项⽬名称，   ⽐如nginx、tomcat、php  (⾃由设置)├── defaults  #⽤于为当前⾓⾊设定默认变量，  此⽬录应当包含⼀个main.yml⽂件│   └── main.yml  #类似代码中的主函数，  进⾏统⼀管理├── files      #⽤来存放由copy模块或script模块等模块调⽤的⽂件├── handlers    #⽤于定义此⾓⾊中触发条件时执⾏的动作，  此⽬录应当包含⼀个main.yml⽂件│   └── main.yml├── meta      #⽤于定义此⾓⾊的特殊设定及其依赖关系，  此⽬录应当包含⼀个main.yml⽂件│   └── main.yml├── README.md   #说明⽂件├── tasks       #⽤于定义当前⾓⾊的任务列表，  此⽬录应当包含⼀个main.yml⽂件│   └── main.yml├── templates  #⽤来存放jinjia2模板，template模块会⾃动在此⽬录中寻找jinjia2模板⽂件├── tests   #⽤于存放测试role本⾝功能的playbook和主机定义⽂件，  在开发测试阶段⽐较常⽤ ,此⽬录应当包含⼀个main.yml⽂件和⾃⾝资源设定invetory│   ├── inventory│   └── test.yml└── vars    #⽤于定义此⾓⾊⽤到的变量，  此⽬录应当包含⼀个main.yml⽂件    └── main.yml
实验任务：安装httpd服务
原始的playbook版本
1、制作主页
echo hi &gt; index.html
2、拷贝本机httpd的配置文件为httpd.conf.j2模版，并修改
cp /etc/httpd/conf/httpd.conf  httpd.conf.j2
vim  httpd.j2   #42行 修改为
&#123;% if http_port is defined %&#125;Listen &#123;&#123; ansible_facts.default_ipv4.address &#125;&#125;:&#123;&#123; http_port &#125;&#125;&#123;% endif %&#125;
3、编写playbook文件，
创建变量http_port: 8080
执行任务：
1)安装httpd
2)拷贝主页
3)拷贝配置（做触发器）
4)防火墙放通自定义的端口
- name: firewalld configuration  firewalld:      port: &quot;&#123;&#123;  http_port &#125;&#125;/tcp&quot;    permanent: yes     immediate: yes     state: enabled  when: http_port is defined
5)开启服务
---                                                                                                                                                                           - hosts: all   remote_user: root  vars:    http_port: 8080  tasks:  - name: install httpd package    yum:      name: httpd      state: present  - name: create a web content    copy:      src: index.html      dest: /var/www/html/index.html  - name: config file    template:      src: httpd.conf.j2      dest: /etc/httpd/conf/httpd.conf    notify: restart_httpd    when: http_port is defined                                                                                                                                                  - name: firewalld configuration    firewalld:                                                                         port: &quot;&#123;&#123;  http_port &#125;&#125;/tcp&quot;      permanent: yes       immediate: yes       state: enabled    when: http_port is defined  - name: start service    service:       name: httpd       state: started       enabled: yes  handlers:  - name: restart_httpd    service:      name: httpd      state: restarted
验证端口及主页
ansible all -m shell -a “ss -tunlp|grep httpd”
任务分析：
1.配置 httpd 的时候，可能存在配置文件，配置文件可能含有变量
2.必要变量的定义
3.源码文件的定义
创建httpd角色框架
ansible-galaxy init httpd
查看目录结构
[root@controller roles]# tree httpdhttpd├── defaults│  └── main.yml├── files├── handlers│   └── main.yml├── meta│   └── main.yml├── README.md├── tasks│   └── main.yml├── templates├── tests│   ├── inventory│   └── test.yml└── vars    └── main.yml
部署完善httpd角色框架
cd roles/httpd/tasks/touch install.yml conf_template.yml service.yml index.yml   httpd_firewalld.yml
定义分任务(tasks/中存放)
vim install.yml- name: install httpd package  yum:     name: httpd    state: present     vim conf_template.yml- name: config file  template:     src: httpd.conf.j2     dest: /etc/httpd/conf/httpd.conf   notify: restart_httpd  when: http_port is defined         vim service.yml- name: start service  service:     name: httpd     state: started     enabled: yes    vim  index.yml- name: create a web content  copy:    src: index.html    dest: /var/www/html/index.htmlvim httpd_firewalld.yml- name: firewalld configuration  firewalld:    port: &quot;&#123;&#123;  http_port &#125;&#125;/tcp&quot;    permanent: yes    immediate: yes    state: enabled  when: http_port is defined
定义主任务(tasks/main.yml)
创建main.yml主控文件,调用以上单独的yml文件,main.yml定义了谁先执行谁后执行的顺序vim main.yml- include: install.yml- include: index.yml- include: conf_template.yml- include: httpd_firewalld.yml- include: service.yml
定义变量（vars/main.yml）
vim /etc/ansible/roles/httpd/vars/main.yml---#vars file for httpdhttp_port: 8080
定义首页文件（files/index.html）
cd    /etc/ansible/roles/httpd/files/vim index.html&lt;h1&gt; welcome to wd home &lt;\h1&gt;
定义模板(templates/httpd.conf.j2 )
yum -y install httpdcp /etc/httpd/conf/httpd.conf  /etc/ansible/roles/httpd/templates/httpd.conf.j2 vim templates/httpd.conf.j2将LISTEN 80 行修改为以下内容&#123;% if http_port is defined %&#125;Listen &#123;&#123; ansible_facts.default_ipv4.address &#125;&#125;:&#123;&#123; http_port &#125;&#125;&#123;% endif %&#125;
定义角色处理程序（handlers/mail.yml）
vim /etc/ansible/roles/httpd/handlers/main.yml- name: restart_httpd  service:     name: httpd     state: restarted
调用角色，配置httpd服务（roles/role_httpd.yml）
cd /etc/ansidle/rolesvim role_httpd.yml---# httpd role- name: httpd deployment  hosts: websrvs  remote_user: root        roles:       #调用角色  - httpd   
检查语法及冒烟运行
ansible-playbook role_httpd.yml -C
正式执行
ansible-playbook role_httpd.yml
验证服务
ansible all -m shell -a &quot;ss -tunlp |grep httpd&quot;curl 192.168.142.101:8080

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Ceph集群分布式集群</title>
    <url>/posts/43453/</url>
    <content><![CDATA[
Ceph集群分布式集群
本篇教程针对外部ceph集群介绍教程，如果是基于K8S内部ceph请前往基于K8S1.28.2实验rook部署ceph - 严千屹博客 (qianyios.top)
机器拓扑



主机名
ip
硬盘1
硬盘2
内存
cpu
软件
OS




ceph1
192.168.48.101
100G
100G
2G
1v
Docker 24.0.7epel最新版本ceph（reef、18.2.0）
Centos stream 9


ceph2
192.168.48.102
100G
100G
2G
1v
Docker 24.0.7epel最新版本ceph（reef、18.2.0）
Centos stream 9


ceph3
192.168.48.103
100G
100G
2G
1v
Docker 24.0.7epel最新版本ceph（reef、18.2.0）
Centos stream 9



已经测试过了，最小配置，可以满足毕设需求，后面可自行根据需要调整

基础配置
系统基础配置
配置主机名
ceph1
hostnamectl set-hostname ceph1 &amp;&amp; bash
ceph2
hostnamectl set-hostname ceph2 &amp;&amp; bash
ceph3
hostnamectl set-hostname ceph3 &amp;&amp; bash
操作节点[所有节点]
#关闭防火墙和selinuxsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0systemctl disable --now firewalld#设置时间同步yum install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sources#配置hostscat &lt;&lt; EOF &gt; /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 ceph1192.168.48.102 ceph2192.168.48.103 ceph3EOF#配置yummkdir repo.bakmv /etc/yum.repos.d/* repo.bak/cat &gt; /etc/yum.repos.d/centos9.repo&lt;&lt; &quot;EOF&quot;[BaseOS]name=Baseosbaseurl=https://mirrors.aliyun.com/centos-stream/9-stream/BaseOS/x86_64/osgpgcheck=0enabled=1[AppStream]name=AppStreambaseurl=https://mirrors.aliyun.com/centos-stream/9-stream/AppStream/x86_64/os/gpgcheck=0enabled=1[extras-common]name=extras-commonbaseurl=https://mirrors.aliyun.com/centos-stream/SIGs/9-stream/extras/x86_64/extras-common/gpgcheck=0enabled=0[ceph-reef]name=ceph-reefbaseurl=https://mirrors.aliyun.com/ceph/rpm-reef/el9/x86_64/gpgcheck=0enabled=1[epel]name=epelbaseurl=https://mirrors.aliyun.com/epel/9/Everything/x86_64/gpgcheck=0enabled=1[ceph-reef-noarch]name=ceph-reef-noarchbaseurl=https://mirrors.aliyun.com/ceph/rpm-reef/el9/noarch/gpgcheck=0enabled=1EOF# 内核参数设置：开启IP转发，允许iptables对bridge的数据进行处理 cat &lt;&lt; EOF &gt; /etc/sysctl.conf net.ipv4.ip_nonlocal_bind = 1net.ipv4.ip_forward = 1EOFcat &lt;&lt; EOF &gt; /etc/sysctl.d/ceph.conf kernel.pid_max = 4194303 vm.swappiness = 0 EOFsysctl -p#更新yum源dnf clean all &amp;&amp; dnf makecache#安装软件dnf install vim net-tools wget lsof python3 yum-utils device-mapper-persistent-data lvm2 -y
配置ssh免密
操作节点[ceph1]
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;ceph1&quot; &quot;ceph2&quot; &quot;ceph3&quot;)  #就改这个# 主机密码password=&quot;123456&quot;                    #就改这个# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
安装docker
操作节点[所有节点]
yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repodnf install -y docker-ce docker-ce-cli containerd.io docker-compose-pluginsystemctl enable --now dockermkdir -p /etc/dockertee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://pw860av8.mirror.aliyuncs.com&quot;]&#125;EOFsystemctl daemon-reloadsystemctl restart dockerdocker info
安装cephadm
操作节点[所有节点]
dnf install --assumeyes cephadmwhich cephadm
安装ceph集群
启动一个集群
操作节点[ceph1]
在 ceph1 上启动 cephadm bootstrap
cephadm bootstrap --mon-ip 192.168.48.101
上述指令会为我们完成以下工作：

创建mon
创建ssh key并且添加到 /root/.ssh/authorized_keys 文件
将集群间通信的最小配置写入/etc/ceph/ceph.conf
将client.admin管理secret密钥的副本写入/etc/ceph/ceph.client.admin.keyring。
将公用密钥的副本写入/etc/ceph/ceph.pub

执行结果如下：
框框中的是ceph页面的账号密码

访问页面并用上面的账号密码登入，就会提示你修改密码，修改成你自己的密码
https://192.168.48.101:8443/

运行ceph查看集群健康状态
[root@ceph1 ~]# ceph -sbash: ceph: command not found
这里会显示报错，我们要在所有节点需要安装ceph-common
操作节点[所有节点]
cephadm add-repo --release reefdnf install -y liburing# 安装ceph-common包dnf install -y librbd1 ceph-common# 查看ceph-common是否正常安装ceph -v
再次在ceph1查看集群健康状况
ceph -s

这里有报错提示HEALTH_WARN暂时不用管
添加ceph节点
操作节点[ceph1]
#拷贝ceph1的Ceph 集群的公钥至其他节点，以便加入集群ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph2ssh-copy-id -f -i /etc/ceph/ceph.pub root@ceph3# 添加ceph节点ceph orch host add ceph2 192.168.48.102ceph orch host add ceph3 192.168.48.103删除可以用ceph orch host rm ceph3# 查看现在的节点情况ceph orch host ls# 添加label后可以允许该节点运行ceph cli（比如cephadm shell命令）ceph orch host label add ceph2 _adminceph orch host label add ceph3 _admin# 设置 mon 节点ceph orch apply mon 3ceph orch apply mon ceph1,ceph2,ceph3# 查看 mon 详情[root@ceph1 ~]#  ceph mon dumpepoch 3fsid 233c64c8-9e76-11ee-86fc-000c2965f5d0last_changed 2023-12-19T14:13:02.000188+0000created 2023-12-19T13:56:10.829244+0000min_mon_release 18 (reef)election_strategy: 10: [v2:192.168.48.101:3300/0,v1:192.168.48.101:6789/0] mon.ceph11: [v2:192.168.48.103:3300/0,v1:192.168.48.103:6789/0] mon.ceph32: [v2:192.168.48.102:3300/0,v1:192.168.48.102:6789/0] mon.ceph2dumped monmap epoch 3# 设置 mgr 节点ceph orch apply mgr 3ceph orch apply mgr ceph1,ceph2,ceph3[root@ceph1 ~]#  ceph -s  cluster:    id:     233c64c8-9e76-11ee-86fc-000c2965f5d0    health: HEALTH_WARN            OSD count 0 &lt; osd_pool_default_size 3  services:    mon: 3 daemons, quorum ceph1,ceph3,ceph2 (age 7m)    mgr: ceph1.gtejkn(active, since 18m), standbys: ceph2.rvzimn, ceph3.pbajtu    osd: 0 osds: 0 up, 0 in  data:    pools:   0 pools, 0 pgs    objects: 0 objects, 0 B    usage:   0 B used, 0 B / 0 B avail    pgs:
添加OSD
操作节点[ceph1]

ceph orch daemon add osd ceph1:/dev/nvme0n2ceph orch daemon add osd ceph2:/dev/nvme0n2ceph orch daemon add osd ceph3:/dev/nvme0n2
查看状态
[root@ceph1 ~]# ceph -s  cluster:    id:     233c64c8-9e76-11ee-86fc-000c2965f5d0    health: HEALTH_OK  services:    mon: 3 daemons, quorum ceph1,ceph3,ceph2 (age 25m)    mgr: ceph1.gtejkn(active, since 36m), standbys: ceph2.rvzimn, ceph3.pbajtu    osd: 3 osds: 3 up (since 20s), 3 in (since 33s)  data:    pools:   1 pools, 1 pgs    objects: 2 objects, 449 KiB    usage:   81 MiB used, 300 GiB / 300 GiB avail    pgs:     1 active+clean[root@ceph1 ~]#
至此ceph集群部署成果
ceph存储的使用



存储类型
特征
应用场景
典型设备




块存储（RBD）
存储速度较快 不支持共享存储 [ReadWriteOnce]
虚拟机硬盘
硬盘 Raid


文件存储（CephFS）
存储速度慢（需经操作系统处理再转为块存储） 支持共享存储 [ReadWriteMany]
文件共享
FTP NFS


对象存储（Object）
具备块存储的读写性能和文件存储的共享特性 操作系统不能直接访问，只能通过应用程序级别的API访问
图片存储 视频存储
OSS



块存储(RBD)
配置rbd
操作节点[ceph1]
------------------------------------------------------#创建名为qianyios-rbd的存储池poolceph osd pool create qianyios-rbd 128 128 [root@ceph1 ~]# ceph osd pool create qianyios-rbd 128 128pool &#x27;qianyios-rbd&#x27; created#删除pool用这个ceph osd pool delete qianyios-rbd qianyios-rbd --yes-i-really-really-mean-it------------------------------------------------------#查看列表ceph osd pool ls[root@ceph1 ~]# ceph osd pool ls.mgrqianyios-rbd------------------------------------------------------#将类型为存储池的pool（qianyios-rbd）转换为rbd类型ceph osd pool application enable qianyios-rbd rbd[root@ceph1 ~]# ceph osd pool application enable qianyios-rbd rbdenabled application &#x27;rbd&#x27; on pool &#x27;qianyios-rbd&#x27;------------------------------------------------------#初始化qianyios-rbd存储池rbd pool init qianyios-rbd------------------------------------------------------#创建一个名为 &quot;qy-rbd-img&quot; 的 RBD 镜像，存储在 &quot;qianyios-rbd&quot; 存储池中，镜像的大小为 10GB。rbg create -p qianyios-rbd --image qy-rbd-img --size 10G或者（二选一）rbd create --size 10G qianyios-rbd/qy-rbd-img#删除镜像用这个rbd rm qianyios-rbd/qy-rbd-img------------------------------------------------------#查看创建状态rbd ls qianyios-rbdrbd info qianyios-rbd/qy-rbd-img[root@ceph1 ~]# rbd ls qianyios-rbdqy-rbd-img[root@ceph1 ~]# rbd info qianyios-rbd/qy-rbd-imgrbd image &#x27;qy-rbd-img&#x27;:        size 10 GiB in 2560 objects        order 22 (4 MiB objects)        snapshot_count: 0        id: 8589e2720f1f        block_name_prefix: rbd_data.8589e2720f1f        format: 2        features: layering, exclusive-lock, object-map, fast-diff, deep-flatten        op_features:        flags:        create_timestamp: Thu Dec 21 23:09:33 2023        access_timestamp: Thu Dec 21 23:09:33 2023        modify_timestamp: Thu Dec 21 23:09:33 2023------------------------------------------------------# 创建rbd 用户key（验证文件）#创建一个名为 &quot;qianyios-user&quot; 的客户端，并为其授予读写qianyios-rbd存储池的权限ceph auth get-or-create client.qianyios-user mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=qianyios-rbd&#x27; mgr &#x27;profile rbd pool=qianyios-rbd&#x27;# output会输出以下内容[client.qianyios-user]        key = AQDKVYRl1nZ8ARAAvhXZojmroyy+YIb9dnTGSw==ceph auth get client.qianyios-user -o /root/ceph.client.qianyios-user.keyring[root@ceph1 ~]# cat /root/ceph.client.qianyios-user.keyring[client.qianyios-user]        key = AQDKVYRl1nZ8ARAAvhXZojmroyy+YIb9dnTGSw==        caps mgr = &quot;profile rbd pool=qianyios-rbd&quot;        caps mon = &quot;profile rbd&quot;        caps osd = &quot;profile rbd pool=qianyios-rbd&quot;------------------------------------------------------
!讲解一下这个创建用户key（验证文件）


讲解：通过这个命令，会创建一个用户，并分别指定这个用户对mon、osd、mgr的权限。如果不加pool=xxx，则这个用户能管理整个守护进程。


mon的权限必须是mon ‘profile rbd’，因为Mon服务本身就是只读的，你再限制一个只读权限，脱裤子放屁。


假设你写了 osd ‘profile rbd’，则用户能管理所有pool的osd设备。


假设你写了osd ‘profile rbd pool=xxx’，则这个用户可以读写名叫xxx的pool的osd设备。


假设你写了osd ‘profile rbd-read-only pool=xxx’，则这个用户只能读取名叫xxx的pool中的osd数据，不能写入。


mgr同理，但是最好不要写mgr ‘profile rbd’，否则A池的管理员能够关闭B池的librados接口，那就糟糕了。


举例：

创建一个volumes用户，该用户对volumes池拥有读写权限

ceph auth get-or-create client.volumes mon &#x27;profile rbd&#x27; osd &#x27;profile rbd pool=volumes&#x27; mgr &#x27;profile rbd pool=volumes&#x27;

创建一个volumes用户，该用户对volumes池拥有只读权限。

ceph auth get-or-create client.volumes mon &#x27;profile rbd&#x27; osd &#x27;profile rbd-read-only pool=volumes&#x27; mgr &#x27;profile rbd pool=volumes&#x27;
客户端挂载
这里新开一台客户机centos stream 9，这个客户端可以是你的任何一台机要挂载的机子
添加yum
操作节点[test]测试机
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/cat &gt; /etc/yum.repos.d/centos9.repo&lt;&lt; &quot;EOF&quot;[BaseOS]name=Baseosbaseurl=https://mirrors.aliyun.com/centos-stream/9-stream/BaseOS/x86_64/osgpgcheck=0enabled=1[AppStream]name=AppStreambaseurl=https://mirrors.aliyun.com/centos-stream/9-stream/AppStream/x86_64/os/gpgcheck=0enabled=1[extras-common]name=extras-commonbaseurl=https://mirrors.aliyun.com/centos-stream/SIGs/9-stream/extras/x86_64/extras-common/gpgcheck=0enabled=0[ceph-reef]name=ceph-reefbaseurl=https://mirrors.aliyun.com/ceph/rpm-reef/el9/x86_64/gpgcheck=0enabled=1[epel]name=epelbaseurl=https://mirrors.aliyun.com/epel/9/Everything/x86_64/gpgcheck=0enabled=1[ceph-reef-noarch]name=ceph-reef-noarchbaseurl=https://mirrors.aliyun.com/ceph/rpm-reef/el9/noarch/gpgcheck=0enabled=1EOFdnf clean all &amp;&amp; dnf makecache
客户端安装cephadm和ceph-common
操作节点[test]测试机
dnf install -y cephadm ceph-common
拷贝ceph1的证书至客户端
把ceph1创建的ceph.client.qianyios-user.keyring 和ceph.conf复制到客户端（192.168.48.128）
scp /root/ceph.client.qianyios-user.keyring /etc/ceph/ceph.conf 192.168.48.128:/etc/ceph/

[root@test ~]# ll /etc/ceph/total 12-rw-r--r-- 1 root root 185 Dec 21 23:45 ceph.client.qianyios-user.keyring-rw-r--r-- 1 root root 283 Dec 21 23:45 ceph.conf-rw-r--r-- 1 root root  92 Dec 12 08:01 rbdmap[root@test ~]#
开始挂载
lsblk

#挂载块存储rbd map qianyios-rbd/qy-rbd-img --keyring /etc/ceph/ceph.client.qianyios-user.keyring --id qianyios-user-----/dev/rbd0-----lsblk

此时的/dev/rbd0并不能使用，我们需要格式化，并且挂载到本机
#格式化mkfs.xfs /dev/rbd0

#创建挂载点mkdir /opt/qianyios-rbdmount /dev/rbd0 /opt/qianyios-rbdecho &quot;qianyios-rbd&quot; &gt; /opt/qianyios-rbd.txtcat /opt/qianyios-rbd.txt

取消挂载
umount /opt/qianyios-rbdrbd unmap qianyios-rbd/qy-rbd-imglsblk

文件存储(CephFS)
创建cephfs
部署元数据服务器，创建一个CephFS(文件系统), 名字为qianyios-fs
ceph fs volume create qianyios-fs --placement=&quot;3 ceph1 ceph2 ceph3&quot;# 查看状态ceph fs volume lsceph orch ps --daemon-type mdsceph fs status qianyios-fsceph mds stat

设置nfs高可用
先生成nfs和nfs_ingress配置文件。其中nfs_ingress是为了nfs高可用配置的。
cat &lt;&lt;EOF &gt; nfs.yamlservice_type: nfsservice_id: nkonfsplacement:  hosts:    - ceph1    - ceph2    - ceph3spec:  port: 2048EOFcat &lt;&lt;EOF &gt;nfs_ingress.yamlservice_type: ingressservice_id: nfs.nkonfsplacement:  count: 3spec:  backend_service: nfs.nkonfs  frontend_port: 2049  monitor_port: 9001  virtual_ip: 192.168.48.200/24#高可用vipEOF
ceph orch apply -i nfs.yamlceph orch apply -i nfs_ingress.yamlceph orch ls --service_name=nfs.nkonfsceph orch ls --service_name=ingress.nfs.nkonfsceph nfs cluster lsceph nfs cluster info nkonfs

导出nfs
ceph nfs export create cephfs --cluster-id nkonfs --pseudo-path /qy-fs --fsname qianyios-fs# 查看详情ceph nfs export info nkonfs /qy-fs

客户端挂载NFS
注意：只支持 NFS v4.0+ 的协议。
由于showmount 不支持 NFS v4，纯 NFSv4又不提供其他获取导出列表的方法，只能期望挂载的时候命令不要输错了。
在客户端执行以下命令：
dnf install -y nfs-utilsmkdir /qy-fs-datamount -t nfs -o nfsvers=4.1,proto=tcp 192.168.48.200:/qy-fs /qy-fs-data

测试文件写入
tar zcf etc.tar.gz /etc #测试文件写入cp etc.tar.gz /qy-fs-data/ll /qy-fs-data/ #生成500M大文件写入dd if=/dev/zero of=/qy-fs-data/testfile bs=1M count=500#查看分区使用df -h /fsdata

对象存储(RGW)
RGW（RADOS Gateway）是Ceph存储系统的一部分，它提供了一个对象存储服务
RGW可以作为一个独立的服务运行，也可以与Ceph集群的其他组件（如OSD和MON）一起部署。
区域（zone）: 一个ceph集群可以包含多个区域，一个区域只属于一个集群，一个区域可以有多个RGW
区域组（zonegroup）：由一个或多个区域组成，包含一个主区域（master zone），其他区域称为Secondary Zone，区域组内的所有区域之间同步数据
域（realm）: 同一个或多个区域组组成，包含一个主区域组，其他都次区域组。域中的所有rados网关都从位于主区域组和主区域中的rados网关拉取配置
设置radosgw区域和用户

在所有节点部署qianyios领域和qianyios-shenzhen 区域的rgw守护程序：
操作节点[所有节点]
1.# 如果尚未创建 realm（领域），请首先创建一个名字为qianyios的 realm（领域） ：radosgw-admin realm create --rgw-realm=qianyiosradosgw-admin realm list2.# 接下来创建一个新的 zonegroup（区域组）：radosgw-admin zonegroup create --rgw-zonegroup=qianyios-shenzhen  --masterradosgw-admin zonegroup list3.#接下来创建一个 zone：radosgw-admin zone create --rgw-zonegroup=qianyios-shenzhen --rgw-zone=qianyios-shenzhen-zone1 --master#这个命令用于创建一个名为 qianyios-shenzhen-zone1 的 RadosGW 区域（Zone），并将它归属于 qianyios-shenzhen 的区域组（Zone Group）。radosgw-admin zone list4.#这个命令用于更新指定的 RadosGW 域（Realm）的周期（Period）。--rgw-realm=qianyios 参数指定要更新的 RadosGW 域的名称为 qianyiosradosgw-admin period update --rgw-realm=qianyios --commit5.#在 Ceph 集群中部署一个名为 qianyios-rgw 的 RadosGW 实例，并将其关联到指定的域（Realm）、区域组（Zone Group）和区域（Zone），并指定了存储位置。ceph orch apply rgw qianyios-rgw --realm=qianyios --zonegroup=qianyios-shenzhen --zone=qianyios-shenzhen-zone1 --placement=&quot;3 ceph1 ceph2 ceph3&quot; --port=8080#删除实例用这个ceph orch rm rgw.qianyios-rgw6.# 查看各节点 rgw 是否启动ceph orch ps --daemon-type rgw7.# 创建创建 radosgw 用户名为admin，显示名称为admin userradosgw-admin user create --uid=&quot;admin&quot; --display-name=&quot;admin user&quot;8.# 创建完成之后需要把access_key和secret_key保存下来，也可以使用下面的命令来查看radosgw-admin user info --uid=admin&quot;keys&quot;: [        &#123;            &quot;user&quot;: &quot;admin&quot;,            &quot;access_key&quot;: &quot;LAI14X0RJVJG3QGR16FP&quot;,            &quot;secret_key&quot;: &quot;t11PVzqYtEvb22ajctD0U5tCN5d0CaDPkZENiqTb&quot;        &#125;    ],
使用s3 browser点击这里访问官网下载软件，将以上access_key,secret_key填上，可以正常连接，但是没有桶，手动创建一个桶，并上传文件，正常。

此时什么都没有，创建一个桶


在桌面创建一个test文件移进去


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 9 stream</tag>
        <tag>Ceph</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBash笔记</title>
    <url>/posts/36392/</url>
    <content><![CDATA[
GitBash笔记
下载gitbash工具Git for Windows安装教程在**文末**
·官网下载 https://git-scm.com/downloads
·Windows系统直接用https://gitforwindows.org/
基本环境
定义用户名和邮箱
git config --global user.name &quot;xxx&quot;git config --global user.email &quot;xxx@xxx.xxx&quot;检查设对没有git config user.namegit config user.email
用户名，邮箱就是你绑定的邮箱
生成远程连接密钥
ssh-keygen -t rsa -C &quot;xxx@xxx.xxx&quot;查看密钥cat ~/.ssh/id_rsa.pub会有一串密密麻麻的文字，全部复制到这 生成就行了
全局使用

测试远程连接
ssh -T git@github.com
基本命令
官方给了一个较好的解释文档

git init
#初始化一个新的git仓库git init
README.MD文件
没有它会报错，如果你没准备可以用以下命令
echo &quot;# 123456&quot; &gt;&gt; README.md
README.md是一个文本文件，通常在Git项目的根目录中，用于向其他人介绍该项目的信息。其中，.md是Markdown（标记语言）的文件格式，在GitHub等网站中被广泛使用。
具体来说，README.md文件通常包含以下信息：

项目名称和描述
如何安装和运行该项目
项目的使用方法和注意事项
贡献者的信息和代码许可
项目的版本历史和最新更新内容等等。

通过编写README.md文件，可以提供给其他人一个简洁、清晰的项目概述，方便其他人快速了解和使用该项目。同时，也可以通过修改README.md文件来更新和维护项目的最新信息和文档。
在GitHub等网站中，README.md文件会被自动渲染为网页显示，因此对项目的宣传和文档编写具有重要意义。
git add
将文件添加到git仓库git add &lt;file&gt;例如 ：注意指令末尾小数点git add . #将项目的所有文件添加到仓库中
git commit
git commit -m &quot;message&quot;提交更改，并附上提交信息
git status
#查看Git仓库状态git status
git log
git log查看提交记录
git clone 

git clone https://github.com······#克隆一个Git仓库到本地
git push
#将本地的更改推送到远程仓库git push
git pull
#从远程仓库拉取最新更改git pull
git branch
#查看和管理分支git branch
git merge 
git merge#将一个分支合并到当前分支中
git stash：
#将当前的更改保存到“存储区”，以便以后再次使用git stash
git remote add  ：
#将远程仓库添加到本地Git仓库中关联本地仓库和远程仓库
实例操作
请先完成 1.基本环境的所有步骤
假设我要上传项目
GitHub建好一个新库

在本地也创建一个本地库
勾选显示隐藏的项目


右键空白处

初始化本地仓库
git init

将项目的所有文件添加到本地仓库中
git add .#注意小数点
添加README.md文件
要求当前文件下有这个文件，没有会报错
git add README.md
提交到仓库，附上信息备注
git commit -m &quot;上传测试文件&quot;

修改分支（名字自定）
git branch -M main
git branch -M main命令用于将当前分支的名称修改为main，并将所有已有分支指向新的主分支main。
将本地仓库关联到GitHub仓库
git remote add origin https://github.com/······
https的地址，如果https不行也可以换成ssh地址

拉取最新更改
git pull origin main##上传github之前pull一下,第一次创建的库没有main分支,所有第一次不用打这个，以后建议，习惯的pull以下
上传代码至GitHub远程仓库
git push -u origin main


克隆代码
###从远程库克隆
这是针对在本地的一个空的项目，要从远程库考代码下来，一般有两个步骤：
1.在本地想要克隆的文件夹下面创建GIT版本库，以及建立远程库的连接。（详细步骤可以查看前面章节内容）
####建好本地库，基础环境 初始化等步骤，最后pull一下
git initgit remote add origin https://github.com/·······git pull origin main

2.用git clone克隆远程库所在项目的代码，比如要克隆上一节的代码，用下面命令即可
git clone https://github.com/·······

更新代码
在本地仓库添加一个test2.txt


查看当前的git仓库状态

git status

更新test2.txt文件

git add test2.txt

对test2.txt文件注入备注信息

git commit -m &quot;上传test2.txt&quot;

拉取main分支最新代码

git pull origin main

push到远程main分支上

git push origin main
你也可以更新全部
git add *git commit -m &quot;上传所有文件&quot;git pull origin maingit push origin main
打开GitHub已经同步了

安装教程
建议新建一个文件夹，放git，作为安装路径


更换路径

按需自助选择


选择开始文件夹
方框内 Git 可改为其他名字，也可点击 “Browse…” 选择其他文件夹或者给&quot;Don’t create a Start Menu folder&quot; 打勾不要文件夹，点击 [next]

Git编辑器

决定初始化新项目(仓库)的主干名字

调整环境变量

选择SSH执行文件

选择HTTPS后端传输
注意：如果具有企业管理证书的组织中使用Git，就需要使用安全通道。

配置行尾符号转换

配置终端模拟器以与 Git Bash 一起使用

选择默认的 git pull 模式
git pull 就是获取最新的远程仓库分支到本地，并与本地分支合并。

选择一个凭证帮助程序

配置额外的选项
配置建议两个都选

配置实验性选择

安装完成！！

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>GitBash</tag>
      </tags>
  </entry>
  <entry>
    <title>巨完美的Docker镜像加速方案</title>
    <url>/posts/69efb119/</url>
    <content><![CDATA[
最完美的Docker镜像加速方案
注册账号
现在这注册一个账号 CNB - Cloud Native Build
创建组织

vscode安装cnb插件


创建令牌
按照上面的需要去权限进行创建令牌



cvXpcpkmqiNQA1c77TZOR5ke1EG
创建仓库
一定要是公开的

这时候这里就会读取到

开始同步
假设有个镜像，是拉取不到的
k8s.gcr.io/pause:3.1


因为镜像有标签，所以在最下面有个带标签的地址


下载成功！
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker笔记</title>
    <url>/posts/27092/</url>
    <content><![CDATA[
Docker笔记
结合Centos 8部署Docker - 严千屹博客 (qianyios.top)搭建的Docker实现本次笔记的所有内容及例子
也可以使用以下Centos7部署Docker CE 19.03实现本实验的所有例子
Centos7部署Docker CE 19.03
（2023年4月8日01点00分）当前最常用的 Docker 版本是 Docker CE 19.03。这是 Docker 社区版（Community Edition）的最新版本，它包括一些更新和新功能，如多阶段构建、Dockerfile 中的 ARG 和 FROM 指令以及与 Kubernetes 的更好集成等。另外，Docker CE 19.03 支持 Windows、MacOS 和 Linux 操作系统。
卸载旧版本
sudo yum -y remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum remove docker-ce docker-ce-cli containerd.io docker-compose docker-machine docker-swarmsudo rm /etc/yum.repos.d/docker-ce.reposudo rm -rf /var/lib/docker
安装docker
sudo yum install -y yum-utils device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.reposudo yum install docker-ce docker-ce-cli containerd.io -ysudo systemctl start dockerdocker versionsudo curl -L &quot;https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composesudo chmod +x /usr/local/bin/docker-composedocker-compose --version
Docker的常用命令
docker version		   # 显示docker的版本信息docker info			   # 显示docker的系统信息,包括镜像和容器的数量docker 命令 --help 	   # 帮助命令
镜像命令
镜像命令
docker images		# 查看所有本地的主机上的镜像-a,--al1	# 列出所有镜像-q,--quiet	# 只显示镜像的id# 解释REPOSITORY        TAG         IMAGE ID        CREATED          SIZE镜像的仓库源      镜像的标签  镜像的id        镜像的创建时间   镜像的大小
搜索命令
[root@docker ~]# docker search centosNAME    DESCRIPTION    STARS                               OFFICIAL  AUTOMATEDcentos  DEPRECATED;    The official build of CentOS.       7537      [OK]检索Docker仓库中的Ubuntu镜像
拉取镜像
[root@docker ~]# docke pull 镜像名[:tag]		#下载镜像# 如果不写tag，默认就是latest[root@docker ~]# docker pull centosUsing default tag: latestlatest: Pulling from library/centosa1d0c7532777: Pull completeDigest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177Status: Downloaded newer image for centos:latestdocker.io/library/centos:latest从docker库拉去centos镜像[root@docker ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEcentos       latest    5d0da3dc9764   18 months ago   231MB
删除镜像
docker rmi -f 镜像名/id		# 删除指定镜像docker rmi -f 镜像名1 镜像名2 镜像名3	 # 一次删除指定多个镜像docker rmi -f $(docker images -aq)		# 删除全部容器[root@docker ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED         SIZEcentos       latest    5d0da3dc9764   18 months ago   231MB[root@docker ~]# docker rmi 5d0Untagged: centos:latest。。。。。。（一般情况下 删除镜像id 只需要输入前面3个字符就行了）
查看镜像分层
[root@docker ~]# docker image inspect 镜像id
镜像资源包
curl -O http://mirrors.douxuedu.com/cloud/docker.zipunzip docker.zipdocker load &lt; 镜像名.tar例如：[root@localhost ~]# docker load &lt; docker/centos_latest.tar
容器命令
新建容器并启动
docker run [可选参数] 镜像名		# 新建容器并启动--name=Name		# 容器名字用来区分容器-d				# 后台方式运行-it				# 使用交互方式运行，进入容器查看内容-p				# 指定容器的端口-p 8080:8080-P				# 随机指定端口进入容器[root@docker ~]# docker run -it --name test centos[root@4018f9ac2f33 /]# pwd/exit         # 退出Ctrl+P+Q     # 容器不停止退出
查看容器列表
查看容器列表   （若加 -a可以查看所有容器包括为运行的）[root@docker ~]# docker ps [可选参数]CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES4018f9ac2f33   centos    &quot;/bin/bash&quot;   About a minute ago   Up About a minute             test[可选参数]-a			# 列出当前正在运行的容器+带出历史运行过的容器-n=?		# 显示最近创建的容器-q			# 只显示容器的编号
删除容器
（一般情况下 删除容器id 只需要输入前面3个字符就行了）docker rm 容器id	# 删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -fdocker rm -f $ (docker ps -aq)		# 强制删除所有的容器docker ps -a -q|xargs docker rm		# 删除所有的容器
启动和停止容器
docker start 容器id		# 启动容器docker restart 容器id		# 重启容器docker stop 容器id		# 停止当前正在运行的容器docker kill 容器id		# 强制停止当前容器
进入正在运行的容器
进入容器后开启一个新的终端，可以在里面操作docker exec -it 容器id /bin/bash进入容器正在执行的终端，不会启动新的进程docker attach 容器id
拷贝容器内的文件到主机上
docker cp 容器id:容器内路径 目的主机路径[root@docker ~]# docker exec -it 401 /bin/bash[root@4018f9ac2f33 /]# echo &quot;11&quot; &gt; test.txt[root@4018f9ac2f33 /]# cat test.txt11Ctrl+P+Q     # 容器不停止退出[root@docker ~]# docker cp 401:test.txt /root/Preparing to copy...Successfully copied 2.048kB to /root/[root@docker ~]# cat test.txt11
停止容器，将容器打包成新镜像
[root@docker ~]# docker commit [可选参数] 容器id REPOSITORY:TAG[可选参数]：-a :提交的镜像作者；-c :使用Dockerfile指令来创建镜像；-m :提交时的说明文字；-p :在commit时，将容器暂停。[root@localhost ~]# docker commit -a qianyios -m &quot;创建了test.txt&quot; 401 test/centos:v1sha256:29ffb8423a78853c5a49918c99e8d513239f9c3365cca06e1fc0027f589b7f59[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEtest/centos   v1        29ffb8423a78   3 seconds ago   233MBcentos        latest    5d0da3dc9764   18 months ago   231MB
Docker数据卷

数据卷用途：使容器内部的文件跟容器外面的文件同步
数据卷的特点:

数据卷可在容器之间共享或重用数据
卷中的更改可以直接生效
数据卷中的更改不会包含在镜像的更新中
数据卷的生命周期一直持续到没有容器使用它为止



数据卷基本命令
docker volume ls		# 查看所有挂载的数据卷docker volume inspect 卷名	# 查看数据卷所在的路径
指定路径挂载
docker run -v 主机目录:容器内目录
卷名挂载
docker run -v 卷名(不是目录了):容器内 目录
匿名挂载
docker run -v 容器内目录
数据卷权限
docker run -v 主机目录:容器内目录:ro		# ro readonly 只读docker run -v 主机目录:容器内目录:rw		# rw readwrite 可读可写# ro只能在主机上面来操作目录，容器无法操作
数据卷容器
--volumes-from 要同步文件的容器			# 实现多个容器的数据同步与共享

例子：三个MySQL同步数据

1、数据库1使用的命令
docker run -d -p 主机端口:3306 /-v /etc/mysql/conf.d -v /var/1ib/mysql /-e MYSQL_ROOT_PASSWORD=数据库密码 --name mysql01 mysql
2、数据库2使用的命令
docker run -d -p 主机端口:3306 /--volumes-from mysql01 /-e MYSQL_ROOT_PASSWORD=数据库密码 --name mysql02 mysqlCopy
3、数据库3使用的命令
docker run -d -p 主机端口:3306 /--volumes-from mysql01 /-e MYSQL_ROOT_PASSWORD=数据库密码 --name mysql03 mysql
DockerFile
DockerFile是用来构建Docker镜像的构建文件。
!注意事项

1、每个保留关键字（指令）都是必须是大写字母
2、执行从上到下顺序执行
3、#表示注释
4、每一个指令都会创建提交一个新的镜像层，并提交


DockerFile命令
FROM          # 基础镜镜像,—切从这里开始构建MAINTAINER    # 镜像的作者,姓名&lt;邮箱&gt;RUN           # 镜像构建的时候需要运行的命令ADD           # 添加内容，添加压缩包会自动解压WORKDIR		 # 镜像的工作目录VOLUME        # 挂载的目录EXPOSE        # 保留端口配置CMD			# 指定这个容器启动的时候要运行的命令,只有最后一个会生效，可被替代ENTRYPOINT    # 指定这个容器启动的时候要运行的命令,可以追加命令ONBUILD		 # 当构建一个被继承DockerFile这个时候就会运行ONBUILD 的指令。触发指令。COPY          # 类似ADD ，将我们文件拷贝到镜像中ENV           # 构建的时候设置环境变量!
用DockerFile文件创建镜像
docker build -f DockerFile文件名 -t 镜像名:版本号 .# -f指定Dockfile文件，若Dockerfile文件名就是Dockerfile，则不用-f再指定。系统则自动判定此文件是Dockerfile文件。# 最后一个是 . 一定加上
例子：
[root@docker ~]# mkdir centos[root@docker ~]# cd centos/[root@docker centos]# touch DockerFile[root@docker centos]# vi DockerFile#基础镜像信息FROM centos:latest#维护者信息MAINTAINER qianyios xiaoohu2002@163.com#镜像操作指令RUN sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*RUN sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*RUN yum install -y wgetRUN wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repoRUN yum clean all &amp;&amp; yum makecacheRUN mkdir /test RUN echo &#x27;test&#x27; &gt; /test/test.txt[root@docker centos]# docker build -f /root/centos/DockerFile -t centos-test:v1 .[root@docker centos]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED         SIZEcentos-test   v1        b1f4c91e59ee   2 minutes ago   328MB#此时已经有一个镜像了
用这个镜像创建容器，且将容器中的/test挂载到主机目录下的/opt/test
b1f是镜像id前三个字符
docker run -it -v /opt/test:/test --name test -p 80:80 b1f /bin/bashexit退出exit之后查看/opt/test是否有test.txt文件[root@docker ~]# cat /opt/test/test.txttest成功！！！
配置镜像加速器
# 设置 Docker 镜像加速器cat &gt; /etc/docker/daemon.json &lt;&lt; EOF&#123;  &quot;registry-mirrors&quot;: [    &quot;http://hub-mirror.c.163.com&quot;,    &quot;https://docker.mirrors.ustc.edu.cn/&quot;  ],  &quot;insecure-registries&quot;: [],  &quot;debug&quot;: false,  &quot;experimental&quot;: false,  &quot;features&quot;: &#123;    &quot;buildkit&quot;: true  &#125;&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker
Docker 网络
docker网络主要是解决容器联网问题，也是我们使用容器中最重要的一个环节，如果容器没有网络则无法向网络中提供服务。
网络管理命令：docker network
[root@docker ~]# docker network --helpUsage:	docker network COMMANDManage networksCommands:  connect        连接容器到网络  create          创建网络  disconnect    断开容器与网络的连接  inspect         显示一个或多个网络的详细信息  ls                 列表网络  prune           删除所有未使用的网络  rm               删除一个或多个网络
docker网络类型
创建容器的时候可以通过—network命令来指定容器的网络，网络类型有以下四种

bridge
host
none
容器网络或联盟网络

bridge
桥接网络是指容器通过桥接的方式将容器网卡桥接到宿主机的docker0网桥，然后在通过宿主机防火墙的NAT表实现与外网的联系。
宿主机docker0网桥
[root@docker ~]# ifconfig #docker0网桥docker0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255        inet6 fe80::42:c7ff:fe37:8e8  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 02:42:c7:37:08:e8  txqueuelen 0  (Ethernet)        RX packets 6618  bytes 277975 (271.4 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 8152  bytes 24675021 (23.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0.....省略了本机的网卡信息#容器网卡，每创建一个桥接网络的容器就会生成一个对应的网卡vethf75a942: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet6 fe80::9085:f5ff:fe34:77b5  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 92:85:f5:34:77:b5  txqueuelen 0  (Ethernet)        RX packets 2850  bytes 158484 (154.7 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 3397  bytes 11613136 (11.0 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0                        如果想看更清楚一下  可以使用  ip  add  show命令[root@docker ~]# ip add show4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:c7:37:08:e8 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:c7ff:fe37:8e8/64 scope link        valid_lft forever preferred_lft forever容器网卡14: vethf75a942@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default     link/ether 92:85:f5:34:77:b5 brd ff:ff:ff:ff:ff:ff link-netnsid 1    inet6 fe80::9085:f5ff:fe34:77b5/64 scope link        valid_lft forever preferred_lft forever注意：这里的vethf75a942@if13指的就是容器网卡，V代表虚拟网卡的意思，eth 以太网卡，f75a942网卡编号，if13指的是宿主机网桥(docekr0)的一个端口，对应容器的网卡编号加一。所以容器内的网卡编号应该是 eth0@if14通过在容器中执行命令  ip add show 也可以看到[root@docker ~]# docker exec a5f ip add show1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever13: eth0@if14: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever
防火墙的NAT表内容
[root@docker ~]# iptables -t nat -LChain PREROUTING (policy ACCEPT)target     prot opt source               destination         DOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCALChain INPUT (policy ACCEPT)target     prot opt source               destination         Chain OUTPUT (policy ACCEPT)target     prot opt source               destination         DOCKER     all  --  anywhere            !loopback/8           ADDRTYPE match dst-type LOCALChain POSTROUTING (policy ACCEPT)target     prot opt source               destination         MASQUERADE  all  --  172.17.0.0/16        anywhere            Chain DOCKER (2 references)target     prot opt source               destination         RETURN     all  --  anywhere             anywhere        
docker0 与容器网卡桥接
通过brctl show命令可以看到容器网卡和docker0网卡的桥接信息[root@docker ~]# brctl showbridge name	bridge id		STP enabled	interfacesdocker0		8000.0242c73708e8	no		vethf75a942
创建一个网络为bridge类型的容器，不指定默认也是这个类型
[root@docker ~]# docker run -d --network bridge --name centos1 baishuming2020/centos_nginx
host
容器和真机共用网卡及对应的端口，缺点就是同一个端口只能宿主机或者某个容器使用，其他容器不能用。
创建一个网络类型host的容器[root@docker ~]# docker run -d --network host --name centos2 baishuming2020/centos_nginx
none
容器仅有lo网卡，是一个不能联网的本地容器
创建一个网络类型为lo的容器[root@docker ~]# docker run -d --network none --name centos3 baishuming2020/centos_nginx
实现网桥网络
目的：不同的服务容器组应用不同的网桥，避免同一网络内容器太多，保持容器网络独立性。
关于新网桥联网问题：创建网桥后，宿主机会自动帮你做NAT，所以不用担心联网问题
查看网络-ls
[root@docker ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE80982d2613cd        bridge              bridge              local40c179ab420a        docker1             bridge              local04aadb7475c0        docker100           bridge              localce79e9d7525a        host                host                local8f0358469e57        none                null                localNETWORK ID     网桥ID   NAME          	 名称DRIVER        	 网络类型  SCOPE	   	   作用范围
创建网桥-create
[root@docker ~]# docker network create -d bridge --subnet 192.168.148.0/24 --gateway 192.168.148.2 a16a410e27b66ea587142d967f7dff6f36c04ced3c27116a79831412f3743aba56[root@docker ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPE6ee1e928b710        bridge              bridge              localce79e9d7525a        host                host                local6a410e27b66e        mydocker0           bridge              local8f0358469e57        none                null                local修改docker网桥名字1、修改名字[root@docker ~]# docker network rename old_name new_name2、重启docker服务[root@docker ~]# systemctl restart docker
删除未使用的网桥-prune
[root@docker ~]# docker network prune WARNING! This will remove all networks not used by at least one container.Are you sure you want to continue? [y/N] yDeleted Networks:docker1
删除某个网桥-rm
[root@docker ~]# docker network rm docker100docker100注意：不能被活动容器占用
容器连接到网桥
前提是该容器是桥接网络
docker network connect 网卡 容器[root@docker ~]# docker network connect docker1 centos1[root@docker ~]# docker exec centos1 ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)        RX packets 8  bytes 656 (656.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0发现centos1容器多了一块网卡，使用的正是docker1的网段eth1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.1.2  netmask 255.255.255.0  broadcast 192.168.1.255        ether 02:42:c0:a8:01:02  txqueuelen 0  (Ethernet)        RX packets 16  bytes 1312 (1.2 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        loop  txqueuelen 1000  (Local Loopback)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
容器断开网桥
将centos1容器的网络从docker1网桥断开[root@docker ~]# docker network disconnect docker1 centos1
常见故障
FAQ1：使用改名后的新网桥的容器可能无法解析域名
原因：没有配置新网桥的DNS
解决方法：为容器手动配置一个DNS地址即可
FAQ2：Networking will not work
[root@docker ~]# docker run -d --network docker100 --name centos4 baishuming2020/centos_nginxWARNING: IPv4 forwarding is disabled. Networking will not work.67f2c276123c993cd66b9d7a99ba22402331a13f9ea8817e57324a934896b805解决方案1、打开转发[root@docker ~]# echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt;  /usr/lib/sysctl.d/00-system.conf2、重启网络[root@docker ~]# systemctl restart network
不同主机间的容器通信
macvlan
在 Docker 中，macvlan 是众多 Docker 网络模型中的一种，并且是一种跨主机的网络模型，作为一种驱动启用，Docker macvlan 只支持 bridge 模式
#macvlan 需要一块独立的网卡来进行使用，所以我们需要新添加一块网卡docker network create -d macvlan --subnet=172.16.10.0/24 --gateway=172.16.10.1  -o parent=ens224  mtacvlan-1-o parent=网卡名称  指定用来给 macvlan 网络使用的物理网卡注意，要在所有需要运行 macvlan 的主机上执行这条命令，但是要记得更改网关的地址，避免造成IP冲突docker run -itd --network macvlan-1 centos /bin/bash
overlay
在 Docker 中，overlay 是众多 Docker 网络模型中的一种，并且是一种跨主机的全局网络模型，有一个数据库专门的来存储网络分配信息，避免 IP 冲突，同时内部还有一个小型的 DNS 我们可以直接通过主机名进行访问
consul 服务端：docker run -itd -h consul --name consul --restart=always -p 8500:8500 progrium/consul -server -bootstrap-h 				主机名–name 			容器名–restart=always 重启策略progrium/consul 镜像名称-server 		以服务节点启动-bootstrap		预期的启动节点数：自举在浏览器内输入 IP地址+端口号 可以看到 web 页面在所有主机上编辑 daemon.json 文件：&#123;&quot;hosts&quot;: [&quot;tcp://0.0.0.0:2375&quot;,&quot;unix:///var/run/docker.sock&quot;]， 监听相关端口&quot;cluster-store&quot;:&quot;consul://192.168.1.150:8500&quot;,		   集群的主机地址&quot;cluster-advertise&quot;:&quot;192.168.1.150:2375”		宣告自己的地址 &#125;重启 docker 服务创建 overlay 网络（全局网络）：一台主机上创建自动同步	docker network create -d overlay overlay-1启动容器测试：	docker run -it --name docker-1 --network=overlay-1 centos /bin/bash		docker run -it --name docker-2 --network=overlay-1 centos /bin/bash	验证：ping docker-1
常见故障
如发现各容器内分配的ip之间相互ping不通
原因：可能由于防火墙问题引起的,默认forward链是drop状态，需要打开才可以解决方案:执行下面操作，保证INPUT  FORWARD链都是ACCEPT状态清除其他规则[root@docker_node1 ~]# iptables -P INPUT ACCEPT[root@docker_node1 ~]# iptables -P FORWARD ACCEPT[root@docker_node1 ~]# iptables -F[root@docker_node1 ~]# iptables -L -n[root@docker_node2 ~]# iptables -P INPUT ACCEPT[root@docker_node2 ~]# iptables -P FORWARD ACCEPT[root@docker_node2 ~]# iptables -F[root@docker_node2 ~]# iptables -L -n
Docker私有仓库
在Docker中，当我们执行 docker pull xxx 的时候 ，它实际上是从 hub.docker.com 这个地址去查找，这就是 Docker 公司为我们提供的公共仓库。在工作中，我们不可能把企业项目 push 到公有仓库进行管理。所以为了更好的管理镜像，Docker 不仅提供了一个中央仓库，同时也允许我们搭建本地私有仓库。
docker容器镜像仓库分类：

公网仓库：docker hub
私网仓库: registry、harbor

部署步骤
拉取registry镜像
docker pull registry 
创建registry仓库容器
1、创建持久化存储，将容器镜像存储目录/var/lib/registry挂载到本地/opt/qyck下：mkdir /opt/qyck2、创建 registry 容器：docker run -itd -p 5000:5000 \-v /opt/qyck:/var/lib/registry  \--restart=always registry:latest3、查看容器是否运行[root@qyck ~]# docker psCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS         PORTS                                       NAMESd1ea79cc023f   registry:latest   &quot;/entrypoint.sh /etc…&quot;   10 seconds ago   Up 9 seconds   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   trusting_gates
测试容器应用
[root@zutuanxue_manage01 ~]# curl 192.168.48.128:5000/v2/_catalog&#123;&quot;repositories&quot;:[]&#125;显示仓库中没有任何镜像
上传镜像
测试：拉取nginx镜像
docker pull nginx[root@qyck ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED       SIZEregistry     latest    65f3b3441f04   9 days ago    24MBnginx        latest    448a08f1d2f9   2 weeks ago   142MB
设置docker仓库为registry本地仓库
#1、修改docker进程启动文件，修改其启动方式，目的是为了让通过docker配置文件启动[root@qyck ~]# sed -i.bak &#x27;/^ExecStart=/c\ExecStart=\/usr\/bin\/dockerd&#x27; /usr/lib/systemd/system/docker.service#2、设置docker 守护进程的配置文件 /etc/docker/daemon.json,默认没有该文件[root@qyck ~]# cat /etc/docker/daemon.json &#123; &quot;insecure-registries&quot;: [&quot;http://192.168.48.128:5000&quot;]&#125;insecure-registries 指定非安全的仓库地址，多个用逗号隔开#3、重启docker生效配置文件systemctl daemon-reloadsystemctl restart docker
将镜像打tag
[root@qyck ~]# docker tag nginx:latest 192.168.48.128:5000/nginx:v1[root@qyck ~]# docker imagesREPOSITORY                  TAG       IMAGE ID       CREATED       SIZE192.168.48.128:5000/nginx   v1        448a08f1d2f9   2 weeks ago   142MB
推送镜像到仓库
[root@qyck ~]# docker push 192.168.48.128:5000/nginx:v1The push refers to repository [192.168.48.128:5000/nginx]1040838fe30e: Pushed93ee76f39c97: Pushed5684be535bf1: Pushed6bc8ae8fb3cf: Pusheda29cc9587af6: Pushed8553b91047da: Pushedv1: digest: sha256:3f01b0094e21f7d55b9eb7179d01c49fdf9c3e1e3419d315b81a9e0bae1b6a90 size: 1570#2、查看上传[root@qyck ~]# curl http://192.168.48.128:5000/v2/_catalog&#123;&quot;repositories&quot;:[&quot;nginx&quot;]&#125;#查看存储文件夹[root@qyck ~]# ls /opt/qyck/docker/registry/v2/repositories/nginx
拉取镜像
在另外一台机拉取nginx镜像
#1、设置docker启动文件[root@zutuanxue_node1 ~]# sed -i.bak &#x27;/^ExecStart=/c\ExecStart=\/usr\/bin\/dockerd&#x27; /usr/lib/systemd/system/docker.service#2、设置docker配置文件[root@zutuanxue_node1 ~]# cat  /etc/docker/daemon.json &#123; &quot;insecure-registries&quot;: [&quot;http://192.168.48.128:5000&quot;]&#125;systemctl daemon-reloadsystemctl restart docker
拉取镜像
[root@qyck ~]# docker pull 192.168.48.128:5000/nginx:v1v1: Pulling from nginx9e3ea8720c6d: Pull completebf36b6466679: Pull complete15a97cf85bb8: Pull complete9c2d6be5a61d: Pull complete6b7e4a5c7c7a: Pull complete8db4caa19df8: Pull completeDigest: sha256:3f01b0094e21f7d55b9eb7179d01c49fdf9c3e1e3419d315b81a9e0bae1b6a90Status: Downloaded newer image for 192.168.48.128:5000/nginx:v1192.168.48.128:5000/nginx:v1[root@qyck ~]# docker imagesREPOSITORY                  TAG       IMAGE ID       CREATED       SIZEregistry                    latest    65f3b3441f04   9 days ago    24MB192.168.48.128:5000/nginx   v1        448a08f1d2f9   2 weeks ago   142MB
Docker学习总结
![1](…/img/Docker node/f8242ed25c3cc4a0f16a604d1d53b5f885684b49.png)
docker run 参数解析
-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-P: 随机端口映射，容器内部端口随机映射到主机的端口-p: 指定端口映射，格式为：主机(宿主)端口:容器端口-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name=&quot;nginx-lb&quot;: 为容器指定一个名称；--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h &quot;mars&quot;: 指定容器的hostname；-e username=&quot;ritchie&quot;: 设置环境变量；--env-file=[]: 从指定文件读入环境变量；--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；--link=[]: 添加链接到另一个容器；--expose=[]: 开放一个端口或一组端口；--volume , -v: 绑定一个卷
此笔记参考 开摆工作室/Docker基础精心整理

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 3.3.5部署</title>
    <url>/posts/cbb23bdb/</url>
    <content><![CDATA[
Hadoop 3.3.5部署
前情提要
本次实验采用Ubuntu 24.04LTS，自行安装
Ubuntu 24.04.02 LTS 初始化安装 | 严千屹博客
本笔记分伪分布和分布式两大块，但建议从头开始观看
文章所需资源可点击这里下载

伪分布主机拓扑




主机名
ip（NAT）
内存
硬盘




qianyios
192.168.48.128
7G
100G




分布式主机拓扑




机名
ip（NAT）
内存
硬盘




master
192.168.48.128
6G
100G


slave
192.168.48.129
6G
100G



基础初始化
简单部署一个单节点的hadoop，然后打快照，后续给伪分布和分布式做基础底座
由于本系统在Ubuntu 24.04.02 LTS 初始化安装 | 严千屹博客已经进行了设置阿里源和关闭防火墙，这里就不再赘述了
切换root用户
qianyios@qianyios:~$ su -  root密码：root@qianyios:~#
基础配置
cat &gt;init.sh&lt;&lt;&quot;EOF&quot;#!/bin/bashsed -i &#x27;s/^#*PermitRootLogin.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_configsed -i &#x27;s/^#*PasswordAuthentication.*/PasswordAuthentication yes/&#x27; /etc/ssh/sshd_configsystemctl restart ssh# 添加 hostsecho &quot;192.168.48.128 qianyios&quot; &gt;&gt; /etc/hostsecho &quot;已添加 hosts 条目。&quot;# 设置主机名hostnamectl set-hostname qianyiosecho &quot;主机名已设置为 qianyios。&quot;# 安装 sshpassapt install -y sshpass || &#123; echo &quot;安装 sshpass 失败&quot;; exit 1; &#125;echo &quot;sshpass 安装完成。&quot;# 目标主机列表hosts=(&quot;qianyios&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsaecho &quot;SSH 密钥对已生成。&quot;# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    echo &quot;正在为 $host 配置免密登录...&quot;    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot; || &#123; echo &quot;复制公钥到 $host 失败&quot;; exit 1; &#125;    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot; || &#123; echo &quot;验证免密登录失败&quot;; exit 1; &#125;donerebootEOFbash init.sh
测试免密登入
root@qianyios:~# ssh qianyiosWelcome to Ubuntu 24.04.2 LTS (GNU/Linux 6.11.0-17-generic x86_64)......Last login: Tue Feb 25 00:02:32 2025 from 127.0.0.1root@qianyios:~#
下载所需资源并解压到/root/hadoop/下，如下图

安装java环境和hadoop
cd /root/hadoopmkdir /usr/lib/jvm#安装java8tar -xf /root/hadoop/jdk-8u371-linux-x64.tar.gz  -C /usr/lib/jvmecho &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$JAVA_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilejava -version#安装hadoop3.3.5tar -zxf hadoop-3.3.5.tar.gz -C /usr/localmv /usr/local/hadoop-3.3.5/ /usr/local/hadoopecho &quot;export HADOOP_HOME=/usr/local/hadoop&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$HADOOP_HOME/bin/:\$HADOOP_HOME/sbin/:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilehadoop version
成功图

这时候关机
poweroff
打个快照，方便做分布式部署,如果你要做分布式的直接跳到4.分布式

伪分布
开机吧！
编写配置文件
编写cort-site.yaml文件
修改下面hdfs://qianyios:9000中的qianyios为你的主机名
cat &gt; /usr/local/hadoop/etc/hadoop/core-site.xml&lt;&lt; &quot;EOF&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;/name&gt;        &lt;value&gt;hdfs://qianyios:9000&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;EOF
编写hdfs-site.xml
cat &gt;/usr/local/hadoop/etc/hadoop/hdfs-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;EOF
启动hdfs服务
hadoop初始化
hdfs namenode -format
这条命令只需要运行一次，以后都不要再运行了！！！！！！
这条命令只需要运行一次，以后都不要再运行了！！！！！！
这条命令只需要运行一次，以后都不要再运行了！！！！！！

添加环境变量
echo &quot;export HDFS_NAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_DATANODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_SECONDARYNAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_RESOURCEMANAGER_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_NODEMANAGER_USER=root&quot; &gt;&gt; /etc/profilesource /etc/profile
修改hadoop配置文件
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371&quot; &gt;&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.sh
启动hadoop
#启动服务start-all.sh
#关闭服务stop-all.sh


localhost: Warning: Permanently added 'localhost' (ED25519) to the list of known hosts.

这是一个 SSH 的警告信息，表明 SSH 客户端首次连接到 localhost 时，将 localhost 的主机密钥（使用 ED25519 算法生成）添加到了 known_hosts 文件中。
这是 SSH 的正常行为，用于防止中间人攻击。每次 SSH 客户端连接到一个新主机时，都会将主机的密钥记录下来。


启动historyserver服务
#启动hadoopstart-all.shmapred --daemon start historyserver
关闭用
mapred --daemon stop historyserver
正常启动hadoop你会看到如下服务
root@qianyios:~# jps14050 NodeManager10245 JobHistoryServer13894 ResourceManager13255 NameNode13449 DataNode13673 SecondaryNameNode14606 Jps
访问网页ip:9870查看hdfs

访问网页ip:8088查看hadoop

至此伪分布hadoop就搞定了，这时候你要在你这里打上一个伪分布的快照
分布式
前情提要



机名
ip（NAT）
内存
硬盘




master
192.168.48.128
6G
100G


slave
192.168.48.129
6G
100G



由于前面不是做了一个hadoop的一个基础快照吗，这时候你就对那个基础快照进行完整克隆两个出来，分别命名为master和slave


这时候先开slave，master不要开
vim /etc/netplan/01-network-manager-all.yaml
ip改成192.168.48.129
# Let NetworkManager manage all devices on this systemnetwork:  ethernets:    ens33:      addresses: [192.168.48.129/24]      dhcp4: false      nameservers:          addresses: [192.168.48.2, 114.114.114.114]      routes:        - to: default          via: 192.168.48.2  version: 2  renderer: NetworkManager
重启网卡
netplan apply
这时候再把master开机，接着就可以进行基础操作了
基础操作
以下我会提前告诉你哪些是哪个节点要操作的命令
操作节点：=master和slave=
cat &gt;fbsnit.sh &lt;&lt;&quot;EOF&quot;#!/bin/bashif [ $# -eq 1 ];then  echo &quot;设置主机名为：$1&quot;else  echo  &quot;使用方法：sh $0 主机名&quot;  exit 2fisudo sed -i &#x27;/qianyios/d&#x27; /etc/hosts#这里你要改成你的ipgrep -q &quot;^192\.168\.48\.128\s\+master&quot; /etc/hosts || echo &quot;192.168.48.128 master&quot; &gt;&gt; /etc/hostsgrep -q &quot;^192\.168\.48\.129\s\+slave&quot; /etc/hosts || echo &quot;192.168.48.129 slave&quot; &gt;&gt; /etc/hostshostnamectl set-hostname $1#设置免密apt install -y sshpass || &#123; echo &quot;安装 sshpass 失败&quot;; exit 1; &#125;echo &quot;sshpass 安装完成。&quot;# 目标主机列表hosts=(&quot;master&quot; &quot;slave&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsaecho &quot;SSH 密钥对已生成。&quot;# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    echo &quot;正在为 $host 配置免密登录...&quot;    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot; || &#123; echo &quot;复制公钥到 $host 失败&quot;; exit 1; &#125;    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot; || &#123; echo &quot;验证免密登录失败&quot;; exit 1; &#125;donerebootEOF
#master执行这个bash fbsnit.sh master
#slave执行这个bash fbsnit.sh slave
修改配置文件
操作节点：master
1.修改workers文件
在Hadoop集群中，workers文件是一个非常重要的配置文件，它用于指定Hadoop集群中所有从节点（DataNode和TaskTracker/NodeManager）的主机名或IP地址
将slave修改成你自己的从节点的主机名
cat&gt; /usr/local/hadoop/etc/hadoop/workers &lt;&lt;&quot;EOF&quot;slaveEOF
2.修改core-site.xml
操作节点：master
将master修改成你自己的主节点的主机名


作用：配置Hadoop的核心参数，主要涉及文件系统的访问和临时目录的设置。

fs.defaultFS：指定HDFS的默认访问路径，格式为hdfs://&lt;namenode-host&gt;:&lt;port&gt;。这是Hadoop客户端访问HDFS的入口。
hadoop.tmp.dir：指定Hadoop的临时目录，用于存储运行时的临时文件。




cat&gt; /usr/local/hadoop/etc/hadoop/core-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;fs.defaultFS&lt;/name&gt;                &lt;value&gt;hdfs://master:9000&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;                &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;        &lt;/property&gt;&lt;/configuration&gt;EOF
3.修改hdfs-site.xml
操作节点：master
将master修改成你自己的主节点的主机名


作用：配置HDFS（Hadoop Distributed File System）的高级参数。

dfs.namenode.secondary.http-address：指定Secondary NameNode的HTTP地址。
dfs.replication：设置HDFS数据块的副本数量，默认为3，这里设置为1（适合单节点测试环境）。
dfs.namenode.name.dir：指定NameNode存储元数据的目录。
dfs.datanode.data.dir：指定DataNode存储数据块的目录。




cat&gt; /usr/local/hadoop/etc/hadoop/hdfs-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;                &lt;value&gt;master:50090&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.replication&lt;/name&gt;                &lt;value&gt;1&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;EOF
4.修改mapred-site.xml配置文件
操作节点：master
将master修改成你自己的主节点的主机名


作用：配置MapReduce作业的运行参数。

mapreduce.framework.name：指定MapReduce作业运行的框架（这里是YARN）。
mapreduce.jobhistory.address 和 mapreduce.jobhistory.webapp.address：指定MapReduce作业历史服务器的地址和Web界面地址。
环境变量配置：设置MapReduce作业运行时的环境变量，例如HADOOP_MAPRED_HOME。




cat&gt; /usr/local/hadoop/etc/hadoop/mapred-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;                &lt;value&gt;yarn&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;                &lt;value&gt;master:10020&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;                &lt;value&gt;master:19888&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;&lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;mapreduce.map.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;mapreduce.reduce.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;EOF
5.修改yarn-site.xml文件
操作节点：master
将master修改成你自己的主节点的主机名


作用：配置YARN（Yet Another Resource Negotiator）的参数。

yarn.resourcemanager.hostname：指定ResourceManager的主机名，用于资源管理和作业调度。
yarn.nodemanager.aux-services：启用MapReduce的Shuffle服务，这是MapReduce作业运行的必要配置。




cat&gt; /usr/local/hadoop/etc/hadoop/yarn-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;                &lt;value&gt;master&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;EOF
将上述配置拷贝到slave
操作节点：master
cd /usr/local/hadoop/etc/hadoop/scp core-site.xml slave:/usr/local/hadoop/etc/hadoop/scp hdfs-site.xml slave:/usr/local/hadoop/etc/hadoop/scp mapred-site.xml slave:/usr/local/hadoop/etc/hadoop/scp workers slave:/usr/local/hadoop/etc/hadoop/scp yarn-site.xml slave:/usr/local/hadoop/etc/hadoop/cd
这里是不用输入密码，如果提示你要输入密码，说明你前面4.2的ssh免密没做好
修改环境变量拷贝到slave
操作节点：master
echo &quot;export HDFS_NAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_DATANODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_SECONDARYNAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_RESOURCEMANAGER_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_NODEMANAGER_USER=root&quot; &gt;&gt; /etc/profilesource /etc/profilescp /etc/profile slave:/etc/profilesource /etc/profile
修改hadoop环境配置文件
操作节点：master
并将配置文件拷贝到slave
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371&quot; &gt;&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.shscp /usr/local/hadoop/etc/hadoop/hadoop-env.sh slave:/usr/local/hadoop/etc/hadoop/hadoop-env.sh
集群启动
操作节点：master
master初始化
hdfs namenode -format

启动hadoop
操作节点：master
#启动hadoopstart-all.sh
#关闭服务stop-all.sh
启动的时候如果有这些没关系

启动historyserver
操作节点：master
mapred --daemon start historyserver
关闭用
mapred --daemon stop historyserver
查看进程
两个节点说运行的服务如下
root@master:~# jps31364 ResourceManager31140 SecondaryNameNode30856 NameNode32282 Jps28046 JobHistoryServerroot@slave:~# jps6304 DataNode6444 NodeManager6605 Jps
访问hadoop页面
http://192.168.48.128:8088/

http://192.168.48.128:9870/

至此分布式hadoop集群构建成功
这时候就你要给你这两台机，打上hadoop集群部署成功的快照，以便你后期做项目不报错可以恢复
HBase
HBase 是一个面向列式存储的分布式数据库，其设计思想来源于 Google 的 BigTable 论文。HBase 底层存储基于 HDFS 实现，集群的管理基于 ZooKeeper 实现。HBase 良好的分布式架构设计为海量数据的快速存储、随机访问提供了可能，基于数据副本机制和分区机制可以轻松实现在线扩容、缩容和数据容灾，是大数据领域中 Key-Value 数据结构存储最常用的数据库方案。
本实验部署在伪分布机子上
安装
tar -xf /root/hadoop/hbase-2.5.4-bin.tar.gz -C /usr/local/mv /usr/local/hbase-2.5.4 /usr/local/hbaseecho &quot;export HBASE_HOME=/usr/local/hbase&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$PATH:\$HBASE_HOME/bin&quot; &gt;&gt; /etc/profilesource /etc/profilesed -i &quot;s/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar:\/usr\/local\/hbase\/lib\/*/g&quot; /usr/local/hbase/bin/hbasehbase version

HBase配置
文件里的qianyios要改成你的主机名,运行 HDFS NameNode 的主机名。
hbase.cluster.distributed

设置为 true 表示 HBase 以分布式模式运行。
如果设置为 false，HBase 将以单机模式运行（通常用于测试）。

HBASE_MANAGES_ZK=true

HBASE_MANAGES_ZK=true ：

表示 HBase 将启动并管理自己的嵌入式 ZooKeeper 实例。
这种模式通常用于单机环境或小型测试环境，简化了配置和管理。


HBASE_MANAGES_ZK=false ：

表示 HBase 不会启动自己的 ZooKeeper 实例，而是依赖外部独立的 ZooKeeper 集群。
这种模式适用于生产环境，推荐使用独立的 ZooKeeper 集群以提高稳定性和性能。



echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_371&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_CLASSPATH=/usr/local/hbase/conf&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_MANAGES_ZK=true&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=true&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shcat &gt;$HBASE_HOME/conf/hbase-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;hbase.rootdir&lt;/name&gt;                &lt;value&gt;hdfs://qianyios:9000/hbase&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;                &lt;value&gt;true&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;                &lt;value&gt;false&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;EOF
启动hbase
start-all.sh start-hbase.sh
然后输入jps,有以下三个个就安装成功

测试hbase
hbase shelllist
能运行没报错就行

访问hbase网页
http://192.168.48.128:16010/

关机备份打快照
关机顺序
stop-hbase.shstop-all.shpoweroff
开机顺序
start-all.shstart-hbase.sh
实例测试1



学号（S_No）
姓名（S_Name）
性别（S_Sex）
年龄（S_Age）




2015001
zhangsan
male
23


2015002
Mary
female
22


2015003
Lisi
male
24



创建学生表
hbase shellcreate &#x27;student&#x27;,&#x27;no&#x27;,&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;#查看表结构describe &#x27;student&#x27;

添加数据
s001为行键,行键可以自定义,但是要注意区别,按照前面的学生表,输入第一行s001的学生信息,我这里就简单输入一些信息，做例子用
#查看表的信息scan &#x27;student&#x27;put &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;no&#x27;,&#x27;2015001&#x27;put &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;,&#x27;zhangsan&#x27;scan &#x27;student&#x27;

查看整行
get &#x27;student&#x27;,&#x27;s001&#x27;

查看单元格
get &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;

实例测试2
这是一个订单表

创建order表
创建一个order表，出现两列族userinfo,orderinfo
你看这次的行是1就和上个实例的s001，是不一样，都是可以自定义的
然后在列族下创建列userinfo:name，userinfo:age，orderinfo:id，orderinfo:money
在创建列的同时附带值
create &#x27;order&#x27;,&#x27;userinfo&#x27;,&#x27;orderinfo&#x27;listput &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:name&#x27;,&#x27;sw&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:age&#x27;,&#x27;24&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:id&#x27;,&#x27;23333&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;30&#x27;scan &#x27;order&#x27;

修改数据
put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:name&#x27;,&#x27;zhangxiaosan&#x27;get &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:name&#x27;scan &#x27;order&#x27;

时间戳
数据添加到HBase的时候都会被记录一个时间戳，这个时间戳被我们当做一个版本。
当修改某一条的时候，本质上是往里边新增一条数据，记录的版本加一。

现在要把这条记录的值改为40，实际上就是多添加一条记录，在读的时候按照时间戳读最新的记录

get &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;40&#x27;get &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;

删除数据
name后一定要加个:
scan &#x27;student&#x27;delete &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name:&#x27;get &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;

删除表
disable &#x27;student&#x27;describe &#x27;student&#x27;drop &#x27;student&#x27;

Hive
hive 是一种底层封装了Hadoop 的数据仓库处理工具，使用类SQL 的hiveSQL 语言实现数据查询，所有hive 的数据都存储在Hadoop 兼容的文件系统、(例如，[Amazon S3](https://baike.baidu.com/item/Amazon S3/10809744)、HDFS)中。hive 在加载数据过程中不会对数据进行任何的修改，只是将数据移动到HDFS 中hive 设定的目录下，因此，hive 不支持对数据的改写和添加，所有的数据都是在加载的时候确定的。
用户接口Client
用户接口主要有三个：CLI，Client 和 WUI。其中最常用的是 Cli，Cli启动的时候，会同时启动一个 hive 副本。Client 是 hive 的客户端，用户连接至 hive Server。在启动 Client 模式的时候，需要指出 hive Server 所在节点，并且在该节点启动 hive Server。 WUI 是通过浏览器访问 hive。
元数据存储 Metastore
hive 将元数据存储在数据库中，如 mysql、derby。hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。
驱动器：Driver 解释器、编译器、优化器、执行器
解释器、编译器、优化器完成 HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在 HDFS 中，并在随后由 MapReduce 调用执行。
Hadoop
hive 的数据存储在 HDFS 中，大部分的查询由 MapReduce 完成（不包含 * 的查询，比如 select * from tbl 不会生成 MapReduce 任务）。


安装hive
qianyios:3306这里要改成你的主机名
root是数据库的root用户
qianyios666是数据库密码
tar -xf /root/hadoop/apache-hive-3.1.3-bin.tar.gzmv apache-hive-3.1.3-bin /usr/local/hiveecho &quot;export HIVE_HOME=/usr/local/hive&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$HIVE_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilecat &gt;/usr/local/hive/conf/hive-site.xml&lt;&lt;&quot;EOF&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;    &lt;value&gt;jdbc:mysql://qianyios:3306/hive?createDatabaseIfNotExist=true&amp;amp;useSSL=false&lt;/value&gt;    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;    &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;    &lt;value&gt;root&lt;/value&gt;    &lt;description&gt;username to use against metastore database&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;    &lt;value&gt;qianyios666&lt;/value&gt;    &lt;description&gt;password to use against metastore database&lt;/description&gt;  &lt;/property&gt; 	&lt;property&gt;    &lt;name&gt;hive.exec.mode.local.auto&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;EOF
安装mysql
apt remove mariadb* -yapt install -y net-tools wget mysql-serversystemctl enable --now mysql#mysql初始化mysql_secure_installation
#输入noPress y|Y for Yes, any other key for No: noRemove anonymous users?: yesDisallow root login remotely?: noRemove test database and access to it?: yesReload privilege tables now?: yes
mysql -uroot#创建用户 &#x27;root&#x27;@&#x27;localhost&#x27;CREATE USER IF NOT EXISTS &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;qianyios666&#x27;;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;#将 &#x27;root&#x27;@&#x27;localhost&#x27; 的认证插件切换为 mysql_native_passwordALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;qianyios666&#x27;;#创建用户 &#x27;root&#x27;@&#x27;qianyios&#x27;CREATE USER IF NOT EXISTS &#x27;root&#x27;@&#x27;qianyios&#x27; IDENTIFIED BY &#x27;qianyios666&#x27;;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;qianyios&#x27; WITH GRANT OPTION;FLUSH PRIVILEGES;create database hive;exitsudo sed -i &#x27;s/^bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/&#x27; /etc/mysql/mysql.conf.d/mysqld.cnfsudo sed -i &#x27;s/^mysqlx-bind-address\s*=\s*127.0.0.1/mysqlx-bind-address = 0.0.0.0/&#x27; /etc/mysql/mysql.conf.d/mysqld.cnfsystemctl restart mysql
启动hive
cdwget -P /root/hadoop/ https://downloads.mysql.com/archives/get/p/3/file/mysql-connector-java-8.0.11.tar.gztar -xf /root/hadoop/mysql-connector-java-8.0.11.tar.gzcp mysql-connector-java-8.0.11/mysql-connector-java-8.0.11.jar /usr/local/hive/lib/mv /usr/local/hive/lib/guava-19.0.jar&#123;,.bak&#125;cp /usr/local/hadoop/share/hadoop/common/lib/guava-27.0-jre.jar  /usr/local/hive/libstart-all.sh #hive初始化，这个命令只需要运行一次schematool -dbType mysql -initSchema#启动hivehive
hive初始化有这个说明成功初始化如果失败，检查一下配置文件或者数据库


要退出就按两下ctrl+C
Hive数据类型



类型
描述
示例




TINYINT（tinyint）
一个字节（8位）有符号整数，  -128~127
1


SMALLINT（smallint）
2字节（16位）有符号整数，-32768~32767
1


INT（int）
4字节（32位）有符号整数
1


BIGINT（bigint）
8字节（64位）有符号整数
1


FLOAT（float）
4字节（32位）单精度浮点数
1


DOUBLE（double）
8字节（64位）双精度浮点数
1


DECIMAL(decimal)
任意精度的带符号小数
1


BOOLEAN（boolean）
true/false
true/false


STRING（string）
字符串，变长
‘a’,‘b’,‘1’


VARCHAR（varchar）
变长字符串
‘a’


CHAR（char）
固定长度字符串
‘a’


BINANY（binany）
字节数组
无法表示


TIMESTAMP（timestamp）
时间戳，纳秒精度
1.22327E+11


DATE（date）
日期
‘2016-03-29’



hive的集合数据类型



类型
描述
示例




ARRAY
有序数组，字段的类型必须相同
Array（1，2）


MAP
一组无序的键值对，键的类型必须是原始数据类型，他的值可以是任何类型，同一个映射的键的类型必须相同，值得类型也必须相同
Map（‘a’,1）


STRUCT
一组命名的字段,字段类型可以不同
Struct（‘a’,1,2.0


UNION
UNION则类似于C语言中的UNION结构，在给定的任何一个时间点，UNION类型可以保存指定数据类型中的任意一种




基本命令
以下在hive数据仓库了运行,输入以下命令进入，可能启动有点慢
hive
创建数据库和表
create database hive;use hive;create table usr(id int,name string,age int);
查看和描述数据库和表
show databases;show tables;USE hive;describe database hive;describe hive.usr;

向表中装载数据
insert into usr values(1,&#x27;sina&#x27;,20);#从linux读取数据[root@qianyios555 ~]# echo &quot;2,zhangsan,22&quot; &gt;&gt; /opt/data#从hive导入数据hive&gt; use hive;create table usr1(id int,name string,age int) row format delimited fields terminated by &quot;,&quot;;load data local inpath &#x27;/opt/data&#x27; overwrite into table usr1;
从hdfs中读取数据
#从linux读取数据echo &quot;3,lisi,25&quot; &gt; /opt/test.txthdfs dfs -put /opt/test.txt /hiveuse hive;load data inpath &#x27;hdfs://qianyios:9000/test.txt&#x27; overwrite into table usr1;
从别的表中读取数据
hive&gt; select * from usr;OK1       sina    20hive&gt; select * from usr1;OK3       lisi    25#读取usr1的id=3的数据到usrinsert overwrite table usr select * from usr1 where id=3;hive&gt; select * from usr;OK3       lisi    25
查询表中数据
select * from usr1;
Hive实验：词频统计
在linux上创建输入目录：/opt/input；
mkdir /opt/input
在以上输入目录中添加多个文本文件，其中文件中包含单词：姓名学号，例如：qianyios555；
echo &quot;hello1 qianyios555&quot; &gt; /opt/input/text1.txtecho &quot;hello2 qianyios555&quot; &gt; /opt/input/text2.txtecho &quot;hello3 qianyios555&quot; &gt; /opt/input/text3.txt
在Hive中创建表“docs”，并把输入目录的文件数据加载到该表中；
hiveuse hive;create table docs(line string);load data local inpath &#x27;/opt/input&#x27; overwrite into table docs;select * from docs;
编写HiveQL语句对输入目录的文本进行词频统计，统计单词“姓名学号”出现的次数。
create table word_count asselect word,count(1) as count from(select explode(split(line,&#x27; &#x27;)) as word from docs) wgroup by wordorder by word;select * from word_count;describe word_count;


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop部署</title>
    <url>/posts/32436/</url>
    <content><![CDATA[
Hadoop部署
本笔记分伪分布和分布式两大块，但建议从头开始观看
文章所需资源可点击这里下载
伪分布
单节点 masteryjx48 （Centos 7.9）



名称
ip1（NAT）
内存
硬盘




masteryjx48
192.168.48.11
5G
100G



基本配置
本地yum配置，自行挂载本地Centos7.9镜像
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/mount /dev/cdrom /mntcat &gt;&gt;/etc/yum.repos.d/local.repo&lt;&lt;EOF[local]name=localbaseurl=file:///mntgpgcheck=0enabled=1EOFyum clean all &amp;&amp; yum makecachesystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinux
更改hosts
echo &quot;192.168.48.11 masteryjx48&quot; &gt;&gt; /etc/hosts
配置主机名
hostnamectl set-hostname masteryjx48 &amp;&amp; bash
配置ssh免密登入
ssh-keygen -t rsacat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keysssh-copy-id masteryjx48ssh masteryjx48exit
安装JAVA环境
mkdir /usr/lib/jvmtar -xf /root/jdk-8u162-linux-x64.tar.gz -C /usr/lib/jvmecho &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$JAVA_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilejava -version
安装Hadoop
tar -zxf hadoop-3.1.3.tar.gz -C /usr/localmv /usr/local/hadoop-3.1.3/ /usr/local/hadoopecho &quot;export HADOOP_HOME=/usr/local/hadoop&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$HADOOP_HOME/bin/:\$HADOOP_HOME/sbin/:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilehadoop version
打个快照，方便做分布式部署,做分布式的直接跳到2.分布式
编写配置文件
编写cort-site.yaml文件
[root@masteryjx48 ~]# cat /usr/local/hadoop/etc/hadoop/core-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;/name&gt;        &lt;value&gt;hdfs://masteryjx48:9000&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;
编写hdfs-site.xml
[root@masteryjx48 ~]# cat /usr/local/hadoop/etc/hadoop/hdfs-site.xml&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;
启动hdfs服务
hdfs namenode -format
添加环境变量
echo &quot;export HDFS_NAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_DATANODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_SECONDARYNAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_RESOURCEMANAGER_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_NODEMANAGER_USER=root&quot; &gt;&gt; /etc/profilesource /etc/profile
修改hadoop配置文件
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.sh
启动hadoop服务
[root@masteryjx48 ~]# start-all.shStarting namenodes on [masteryjx48]Last login: Thu Mar  9 07:12:02 CST 2023 on pts/0Starting datanodesLast login: Thu Mar  9 07:14:08 CST 2023 on pts/0Starting secondary namenodes [masteryjx48]Last login: Thu Mar  9 07:14:11 CST 2023 on pts/0Starting resourcemanagerLast login: Thu Mar  9 07:14:15 CST 2023 on pts/0Starting nodemanagersLast login: Thu Mar  9 07:14:20 CST 2023 on pts/0
关闭hadoop服务  stop-dfs.sh
启动historyserver服务
mr-jobhistory-daemon.sh start historyserver
查看java进程
[root@masteryjx48 ~]# jps9280 ResourceManager8785 DataNode9443 NodeManager9014 SecondaryNameNode8599 NameNode11127 Jps11034 JobHistoryServer
访问网页ip:9870查看hdfs

访问网页ip:8088查看hadoop

分布式
❗❗❗❗这里就克隆前面创建好的快照（1.6步骤），修改好ip



主机
ip
系统和软件
内存




master
192.168.48.11
Centos7.9、Hadoop
5G


slave1
192.168.48.12
Centos7.9、Hadoop
5G



环境配置
修改hosts 把之前添加的删掉
master
hostnamectl set-hostname masterbash
slave1
hostnamectl set-hostname slave1bashecho &quot;192.168.48.11 master&quot; &gt;&gt; /etc/hostsecho &quot;192.168.48.12 slave1&quot; &gt;&gt; /etc/hostsscp /etc/hosts root@master:/etc/hosts
SSH免密登入设置
master
ssh-keygen -t rsacat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keysssh masterexitssh-copy-id -i root@slave1ssh slave1llexit
slave1
ssh-keygen -t rsacat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keysssh slave1exitssh-copy-id -i root@masterssh masterllexit
检查java和hadoop环境
master[root@master ~]# java -versionjava version &quot;1.8.0_162&quot;Java(TM) SE Runtime Environment (build 1.8.0_162-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)[root@master ~]# hadoop versionHadoop 3.1.3Source code repository https://gitbox.apache.org/repos/asf/hadoop.git -r ba631c436b806728f8ec2f54ab1e289526c90579Compiled by ztang on 2019-09-12T02:47ZCompiled with protoc 2.5.0From source with checksum ec785077c385118ac91aadde5ec9799This command was run using /usr/local/hadoop/share/hadoop/common/hadoop-common-3.1.3.jarslave1[root@slave1 ~]# java -versionjava version &quot;1.8.0_162&quot;Java(TM) SE Runtime Environment (build 1.8.0_162-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)[root@slave1 ~]# hadoop versionHadoop 3.1.3Source code repository https://gitbox.apache.org/repos/asf/hadoop.git -r ba631c436b806728f8ec2f54ab1e289526c90579Compiled by ztang on 2019-09-12T02:47ZCompiled with protoc 2.5.0From source with checksum ec785077c385118ac91aadde5ec9799This command was run using /usr/local/hadoop/share/hadoop/common/hadoop-common-3.1.3.jar
修改配置文件
修改workers配置文件
[root@master hadoop]# cd /usr/local/hadoop/etc/hadoop[root@master hadoop]# cat workersslave1
修改core-site.xml
[root@master hadoop]# cat core-site.xml&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;fs.defaultFS&lt;/name&gt;                &lt;value&gt;hdfs://master:9000&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;                &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;        &lt;/property&gt;&lt;/configuration&gt;
修改hdfs-site.xml
[root@master hadoop]# cat hdfs-site.xml&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;                &lt;value&gt;master:50090&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.replication&lt;/name&gt;                &lt;value&gt;1&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;                &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;
修改mapred-site.xml配置文件
[root@master hadoop]# cat mapred-site.xml&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.framework.name&lt;/name&gt;                &lt;value&gt;yarn&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;                &lt;value&gt;master:10020&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;                &lt;value&gt;master:19888&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;&lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;mapreduce.map.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;property&gt;&lt;name&gt;mapreduce.reduce.env&lt;/name&gt;&lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/hadoop&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt;
修改yarn-site.xml文件
[root@master hadoop]# cat yarn-site.xml&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;                &lt;value&gt;master&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;                &lt;value&gt;mapreduce_shuffle&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;
将上述配置拷贝到slave1上
master
cd /usr/local/hadoop/etc/hadoop/scp core-site.xml slave1:/usr/local/hadoop/etc/hadoop/scp hdfs-site.xml slave1:/usr/local/hadoop/etc/hadoop/scp mapred-site.xml slave1:/usr/local/hadoop/etc/hadoop/scp workers slave1:/usr/local/hadoop/etc/hadoop/scp yarn-site.xml slave1:/usr/local/hadoop/etc/hadoop/
修改环境变量拷贝到slave1
master
echo &quot;export HDFS_NAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_DATANODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export HDFS_SECONDARYNAMENODE_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_RESOURCEMANAGER_USER=root&quot; &gt;&gt; /etc/profileecho &quot;export YARN_NODEMANAGER_USER=root&quot; &gt;&gt; /etc/profilesource /etc/profilescp /etc/profile slave1:/etc/profilesource /etc/profile
修改hadoop环境配置文件并将配置文件拷贝到slave1
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.shscp /usr/local/hadoop/etc/hadoop/hadoop-env.sh slave1:/usr/local/hadoop/etc/hadoop/hadoop-env.sh
集群配置启动
master初始化
hdfs namenode -format
启动hadoop
start-all.sh
启动historyserver
mr-jobhistory-daemon.sh start historyserver
查看java进程
[root@master hadoop]# jps35863 ResourceManager2841 JobHistoryServer39065 NameNode39771 Jps35597 SecondaryNameNode
[root@slave1 ~]# jps5587 NodeManager5492 DataNode6215 Jps



 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop组件部署</title>
    <url>/posts/4909/</url>
    <content><![CDATA[
Hadoop组件部署
Hadoop部署 - 严千屹 (qianyios.top)本笔记建立在Hadoop伪分布机子上，可以前往查看安装机子
Zookeeper
你需要克隆出三台hadoop的基础模版机，这里有教程和说明，然后再进行开始操作，这个Zookeeper是hadoop的一个组件，独立出来了的，也就是说是一个独立的Zookeeper集群，Hbase是需要基于Zookeeper运行的，如果你不需要独立的Zookeeper可以不用做这个，hbase有自带的Zookeeper



名称
ip




zk01
192.168.48.11


zk02
192.168.48.12


zk03
192.168.48.13



设置hosts
[root@localhost ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.11 zk01192.168.48.12 zk02192.168.48.13 zk03
更改主机名
hostnamectl set-hostname zk01 &amp;&amp; bash
检查java版本
[root@zk01 ~]# java -versionjava version &quot;1.8.0_162&quot;Java(TM) SE Runtime Environment (build 1.8.0_162-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)
检查hadoop版本
[root@zk01 ~]# hadoop versionHadoop 3.1.3Source code repository https://gitbox.apache.org/repos/asf/hadoop.git -r ba631c436b806728f8ec2f54ab1e289526c90579Compiled by ztang on 2019-09-12T02:47ZCompiled with protoc 2.5.0From source with checksum ec785077c385118ac91aadde5ec9799This command was run using /usr/local/hadoop/share/hadoop/common/hadoop-common-3.1.3.jar
安装zookeeper
tar -xf apache-zookeeper-3.8.0-bin.tar.gz -C /optecho &quot;export ZOOKEEPER_HOME=/opt/apache-zookeeper-3.8.0-bin&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$ZOOKEEPER_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilecd /opt/apache-zookeeper-3.8.0-bin/cp conf/zoo_sample.cfg conf/zoo.cfgvi conf/zoo.cfg    tickTime=2000    dataDir=/opt/apache-zookeeper-3.8.0-bin/data    clientPort=2181    initLimit=10    syncLimit=5    maxClientCnxns=60    server.1=zk01:2888:3888    server.2=zk02:2888:3888    server.3=zk03:2888:3888mkdir /opt/apache-zookeeper-3.8.0-bin/dataecho 1 &gt; /opt/apache-zookeeper-3.8.0-bin/data/myidcat /opt/apache-zookeeper-3.8.0-bin/data/myid
关机克隆出两台机 zk02 zk03
zk02  192.168.48.12
vi /opt/apache-zookeeper-3.8.0-bin/data/myid2
zk03  192.168.48.13
vi /opt/apache-zookeeper-3.8.0-bin/data/myid3
互相ping测试连通性
ping zk01ping zk02ping zk03
能互通说明成功
开启zookeeper服务
需开启两台才能看见Mode: follower
zkServer.sh startzkServer.sh statuszkServer.sh stop
HBase安装
安装hbase
[root@hadoop ~]# ll-rw-r--r--  1 root root 232190985 3月  17 19:37 hbase-2.2.2-bin.tar.gztar -xf hbase-2.2.2-bin.tar.gz -C /usr/local/mv /usr/local/hbase-2.2.2 /usr/local/hbaseecho &quot;export HBASE_HOME=/usr/local/hbase&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$PATH:\$HBASE_HOME/bin&quot; &gt;&gt; /etc/profilesource /etc/profile------------------------------------------------------------------------[root@hadoop ~]# vi /usr/local/hbase/bin/hbaseCLASSPATH=$&#123;CLASSPATH&#125;:$JAVA_HOME/lib/tools.jar:/usr/local/hbase/lib/*或[root@hadoop ~]# sed -i &quot;s/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar:\/usr\/local\/hbase\/lib\/*/g&quot; /usr/local/hbase/bin/hbase------------------------------------------------------------------------[root@hadoop ~]# hbase version                                                       SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/usr/local/hadoop/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/usr/local/hbase/lib/client-facing-thirdparty/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]HBase 2.2.2Source code repository git://6ad68c41b902/opt/hbase-rm/output/hbase revision=e6513a76c91cceda95dad7af246ac81d46fa2589Compiled by hbase-rm on Sat Oct 19 10:10:12 UTC 2019From source with checksum 4d23f97701e395c5d34db1882ac5021b
HBase配置
HBASE_MANAGES_ZK=true设置为true就是说用hbase自带的Zookeeper，如果你有独立的Zookeeper集群，自行设置
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_CLASSPATH=/usr/local/hbase/conf&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_MANAGES_ZK=true&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shvi $HBASE_HOME/conf/hbase-site.xml&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;hbase.rootdir&lt;/name&gt;                &lt;value&gt;hdfs://yjx48:9000/hbase&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;                &lt;value&gt;true&lt;/value&gt;#是否分布式运行，false即为单机        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;                &lt;value&gt;false&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;
HBase启动
start-all.sh start-hbase.sh[root@hadoop hbase]# jps16532 ResourceManager22502 HMaster-----------15799 NameNode16697 NodeManager23097 Jps15962 DataNode22666 HRegionServer-----------16223 SecondaryNameNode22431 HQuorumPeer[root@hadoop ~]# hbase shellhbase(main):001:0&gt; listTABLE0 row(s)Took 0.3118 seconds=&gt; []hbase(main):002:0&gt; exit
访问网页
ip:16010
HBase管理



学号（S_No）
姓名（S_Name）
性别（S_Sex）
年龄（S_Age）




2015001
zhangsan
male
23


2015002
Mary
female
22


2015003
Lisi
male
24



创建学生表
hbase(main):004:0&gt; create &#x27;student&#x27;,&#x27;no&#x27;,&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;age&#x27;Created table studentTook 1.3125 seconds=&gt; Hbase::Table - studenthbase(main):005:0&gt; listTABLEstudent1 row(s)Took 0.0074 seconds=&gt; [&quot;student&quot;]#查看表结构hbase(main):001:0&gt; describe &#x27;student&#x27;Table student is ENABLEDstudentCOLUMN FAMILIES DESCRIPTION&#123;NAME =&gt; &#x27;age&#x27;, VERSIONS =&gt; &#x27;1&#x27;, EVICT_BLOCKS_ON_CLOSE =&gt; &#x27;false&#x27;.......
添加数据
s001为行键
hbase(main):001:0&gt; scan &#x27;student&#x27;ROW                        COLUMN+CELL0 row(s)Took 0.2712 secondshbase(main):002:0&gt; put &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;no&#x27;,&#x27;2015001&#x27;Took 0.0236 secondshbase(main):003:0&gt; put &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;,&#x27;zhangsan&#x27;Took 0.0057 secondshbase(main):004:0&gt; scan &#x27;student&#x27;ROW                        COLUMN+CELL s001                      column=name:, timestamp=1679058447572, value=zhangsan s001                      column=no:, timestamp=1679058447550, value=20150011 row(s)Took 0.0179 seconds
查看整行
hbase(main):001:0&gt; get &#x27;student&#x27;,&#x27;s001&#x27;COLUMN                     CELL name:                     timestamp=1679058447572, value=zhangsan no:                       timestamp=1679058447550, value=20150011 row(s)Took 0.2910 seconds
查看单元格
hbase(main):008:0&gt; get &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;COLUMN                     CELL name:                     timestamp=1679058447572, value=zhangsan1 row(s)Took 0.0053 seconds
订单例子

创建order表
create &#x27;order&#x27;,&#x27;userinfo&#x27;,&#x27;orderinfo&#x27;listput &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:name&#x27;,&#x27;sw&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:age&#x27;,&#x27;24&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:id&#x27;,&#x27;23333&#x27;put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;30&#x27;scan &#x27;order&#x27;-----------------------------------------------------------hbase(main):017:0* create &#x27;order&#x27;,&#x27;userinfo&#x27;,&#x27;orderinfo&#x27;Created table orderTook 2.3102 seconds=&gt; Hbase::Table - orderhbase(main):018:0&gt; listTABLEorderstudent2 row(s)Took 0.0104 seconds=&gt; [&quot;order&quot;, &quot;student&quot;]hbase(main):019:0&gt; put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:name&#x27;,&#x27;sw&#x27;Took 0.0326 secondshbase(main):020:0&gt; put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;userinfo:age&#x27;,&#x27;24&#x27;Took 0.0031 secondshbase(main):021:0&gt; put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:id&#x27;,&#x27;23333&#x27;Took 0.0036 secondshbase(main):022:0&gt; put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;30&#x27;Took 0.0031 secondshbase(main):023:0&gt; scan &#x27;order&#x27;ROW                        COLUMN+CELL 1                         column=orderinfo:id, timestamp=1679060732699, value=23333 1                         column=orderinfo:money, timestamp=1679060732711, value=30 1                         column=userinfo:age, timestamp=1679060732685, value=24 1                         column=userinfo:name, timestamp=1679060732667, value=sw1 row(s)Took 0.0116 seconds
修改数据
hbase(main):001:0&gt; put &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;,&#x27;zhangxiaosan&#x27;Took 0.2879 secondshbase(main):002:0&gt; get &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;COLUMN                     CELL name:                     timestamp=1679061655288, value=zhangxiaosan1 row(s)Took 0.0280 seconds
时间戳
#数据添加到HBase的时候都会被记录一个时间戳，这个时间戳被我们当做一个版本。
当修改某一条的时候，本质上是往里边新增一条数据，记录的版本加一。

#现在要把这条记录的值改为40，实际上就是多添加一条记录，在读的时候按照时间戳读最新的记录

put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;40&#x27;get &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;hbase(main):008:0&gt; put &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;,&#x27;40&#x27;Took 0.0190 secondshbase(main):009:0&gt; get &#x27;order&#x27;,&#x27;1&#x27;,&#x27;orderinfo:money&#x27;COLUMN                     CELL orderinfo:money           timestamp=1679064515487, value=401 row(s)Took 0.0096 seconds
删除数据
name一定要加个:
scan &#x27;student&#x27;delete &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name:&#x27;get &#x27;student&#x27;,&#x27;s001&#x27;,&#x27;name&#x27;
删除表
disable &#x27;student&#x27;describe &#x27;student&#x27;drop &#x27;student&#x27;
访问网页
ip:16010
NoSQL数据库安装
（Redis键值对非关系型数据库）
安装redis
tar -xf redis-5.0.5.tar.gzmv redis-5.0.5 /opt/rediscd /opt/redisyum install -y gcc automake autoconf libtool#编译安装make &amp;&amp; make installcd src[root@yjx48 src]# ./redis-server5861:C 30 Mar 2023 08:49:48.699 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo5861:C 30 Mar 2023 08:49:48.699 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=5861, just started5861:C 30 Mar 2023 08:49:48.699 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf5861:M 30 Mar 2023 08:49:48.699 * Increased maximum number of open files to 10032 (it was originally set to 1024).                _._           _.-``__ &#x27;&#x27;-._      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.5 (00000000/0) 64 bit  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._ (    &#x27;      ,       .-`  | `,    )     Running in standalone mode |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379 |    `-._   `._    /     _.-&#x27;    |     PID: 5861  `-._    `-._  `-./  _.-&#x27;    _.-&#x27; |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;| |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27; |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;| |    `-._`-._        _.-&#x27;_.-&#x27;    |  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;      `-._    `-.__.-&#x27;    _.-&#x27;          `-._        _.-&#x27;              `-.__.-&#x27;5861:M 30 Mar 2023 08:49:48.700 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
#另开一个会话[root@yjx48 ~]# cd /opt/redis/src[root@yjx48 src]# ./redis-cli127.0.0.1:6379&gt; set hello worldOK127.0.0.1:6379&gt; get hello&quot;world&quot;127.0.0.1:6379&gt; exit[root@yjx48 src]#
数据库管理

redis语法
#插入数据set student:2015001:sname zhangsanget student:2015001:snameset student:2015001:sex maleget student:2015001:sex#修改数据set student:2015001:sname zhangxiaosanget student:2015001:sname#删除数据get set student:2015001:snamedel set student:2015001:snameget set student:2015001:sname#没数据了
Hash数据库
student表
2015001=&#123;	name=zhangsan	sex=male	age=23&#125;
插入和查询数据
hset student:2015001 name zhangsanhset student:2015001 sex malehset student:2015001 age 23hget student:2015001 name hget student:2015001 sexhgetall student:2015001
修改数据
hset student:2015001 sex femalehget student:2015001 sex female
删除数据
hdel student:2015001 sexhget student:2015001 sex#无数据
MongoDB
​		Mongodb是一个基于分布式文件存储的文档数据库，介于关系数据库和非关系数据库之间，是非关系数
据库当中功能最丰富、最像关系数据库的一种 NOSQL数据库。
​		Mongo最大的特点是支持的查询语言非常强大，语法有点类似于面向对象的查询语言，几乎可以实现类
似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。
​		Mongodb支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。
JSON语法
JSON 语法是 JavaScript 语法的子集。
JSON 数字
JSON 数字可以是整型或者浮点型：
{ “age”:30 }
JSON 对象
JSON 对象在大括号 {} 中书写：
对象可以包含多个名称/值对：
JSON 数组
JSON 数组在中括号 [] 中书写：
数组可包含多个对象：
[&#123; key1 : value1-1 , key2:value1-2 &#125;,&#123; key1 : value2-1 , key2:value2-2 &#125;,&#123; key1 : value3-1 , key2:value3-2 &#125;,...&#123; key1 : valueN-1 , key2:valueN-2 &#125;,]&#123;	&quot;sites&quot;: [        &#123; &quot;name&quot;:&quot;菜鸟教程&quot; , &quot;url&quot;:&quot;www.runoob.com&quot; &#125;,        &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,        &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;       ]&#125;
在上面的例子中，对象 sites 是包含三个对象的数组。每个对象代表一条关于某个网站（name、url）
的记录。
JSON 布尔值
JSON 布尔值可以是 true 或者 false：
&#123; &quot;flag&quot;:true &#125;
JSON null
JSON 可以设置 null 值：
&#123; &quot;runoob&quot;:null &#125;
MongoDB安装
tar -xf mongodb-linux-x86_64-rhel70-5.0.5.tgz mv mongodb-linux-x86_64-rhel70-5.0.5 /opt/mongodbcd /opt/mongodb/bin./mongo -version#默认情况下 MongoDB 启动后会初始化以下两个目录，事先创建好：#数据存储目录：/var/lib/mongodb#日志文件目录：/var/log/mongodbmkdir -p /var/lib/mongomkdir -p /var/log/mongodb#启动mongodb服务cd /opt/mongodb/bin./mongod --dbpath /var/lib/mongo --logpath /var/log/mongodb/mongod.log --forkps ax | grep mongod./mongo
数据库管理
常用命令
#列出所有数据库
&gt;show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GB
#切换数据库
&gt;use adminswitched to db admin
#显示当前数据库的所有集合
&gt;show collectionssystem.version
#显示集合的所有数据
&gt;db.system.version.find()&#123; &quot;_id&quot; : &quot;featureCompatibilityVersion&quot;, &quot;version&quot; : &quot;5.0&quot; &#125;
创建数据库和集合
#mongodb没有创建数据库命令&gt; use schoolswitched to db school#创建集合，同时会自动创建以上的数据库&gt; db.createCollection(&#x27;student&#x27;)&#123; &quot;ok&quot; : 1 &#125;&gt; show dbsadmin 0.000GBconfig 0.000GBlocal 0.000GBschool 0.000GB&gt; show collectionsStudent
插入数据
#两种方法插入数据：insert和save#_id可以手动输入，否则会自动生成&gt;db.student.insert(&#123;  sno: 2015001,  name: &quot;zhangsan&quot;,  sex: &quot;male&quot;,  age: 23&#125;)WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;642e21279c9d145e592fda70&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 23 &#125;&gt; db.student.save(&#123;sno:2015002,name:&#x27;marry&#x27;,sex:&#x27;female&#x27;,age:22&#125;)WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 23 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;sno&quot; : 2015002, &quot;name&quot; : &quot;marry&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 22 &#125;
#insert和save区别：手动插入一行时，如_id已经存在，insert则出错，save则替代原值。&gt; db.student.insert(&#123;&quot;_id&quot;: ObjectId(&quot;642e259014c45ed3f90756c0&quot;),   &quot;sno&quot;: 2015001,   &quot;name&quot;: &quot;zhangsan&quot;,   &quot;sex&quot;: &quot;male&quot;,   &quot;age&quot;: 23 &#125;)WriteResult(&#123;        &quot;nInserted&quot; : 0,        &quot;writeError&quot; : &#123;                &quot;code&quot; : 11000,                &quot;errmsg&quot; : &quot;E11000 duplicate key error collection: test.student index: _id_ dup key: &#123; _id: ObjectId(&#x27;642e21279c9d145e592fda70&#x27;) &#125;&quot;        &#125;&#125;)#更改年龄23→24&gt; db.student.save(&#123;&quot;_id&quot;: ObjectId(&quot;642e259014c45ed3f90756c0&quot;),   &quot;sno&quot;: 2015001,   &quot;name&quot;: &quot;zhangsan&quot;,   &quot;sex&quot;: &quot;male&quot;,   &quot;age&quot;: 24 &#125;)WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 24 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;sno&quot; : 2015002, &quot;name&quot; : &quot;marry&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 22 &#125;
查找数据
#查询#查询格式：find([query],[fields]，类似于sql的select语句，query相当于where，fields相当于显示的列#查询名字为zhangsan的数据&gt; db.student.find(&#123;name:&#x27;zhangsan&#x27;&#125;)&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 24 &#125;#查询名字为zhangsan的人的性别&gt; db.student.find(&#123;name:&#x27;zhangsan&#x27;&#125;,&#123;name:1,sex:1&#125;)&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot; &#125;#不显示_id&gt; db.student.find(&#123;name:&#x27;zhangsan&#x27;&#125;,&#123;_id:0,name:1,sex:1&#125;)&#123; &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot; &#125;#查询指定列&gt; db.student.find(&#123;&#125;,&#123;name:1&#125;)&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;name&quot; : &quot;zhangsan&quot; &#125;&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;name&quot; : &quot;marry&quot; &#125;#and查询条件 &gt; db.student.find(&#123;name:&#x27;zhangsan&#x27;,sex:&#x27;female&#x27;&#125;)&gt; db.student.find(&#123;name:&#x27;zhangsan&#x27;,sex:&#x27;male&#x27;&#125;)&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 24 &#125;&gt;db.student.find(&#123;$or:[&#123;age:24&#125;,&#123;age:22&#125;]&#125;)#or查询&gt; db.student.find(&#123;  $or:[&#123;age:24&#125;,&#123;age:22&#125;]  &#125;)&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 24 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;sno&quot; : 2015002, &quot;name&quot; : &quot;marry&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 22 &#125;
修改数据
#格式：update( query, [, upsert_bool, multi_bool] )
#query : update的查询条件，类似sql update查询内where后面的。
#update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内
set后面的
#upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是
false，不插入。
#multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查
出来多条记录全部更新。
&gt; db.student.update(&#123;name:&#x27;zhangsan&#x27;&#125;,&#123;$set:&#123;age:23&#125;&#125;)WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;642e259014c45ed3f90756c0&quot;), &quot;sno&quot; : 2015001, &quot;name&quot; : &quot;zhangsan&quot;, &quot;sex&quot; : &quot;male&quot;, &quot;age&quot; : 23 &#125;&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;sno&quot; : 2015002, &quot;name&quot; : &quot;marry&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 22 &#125;
删除数据
&gt; db.student.remove(&#123;name:&#x27;zhangsan&#x27;&#125;)WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)&gt; db.student.find()&#123; &quot;_id&quot; : ObjectId(&quot;642e259614c45ed3f90756c1&quot;), &quot;sno&quot; : 2015002, &quot;name&quot; : &quot;marry&quot;, &quot;sex&quot; : &quot;female&quot;, &quot;age&quot; : 22 &#125;
删除集合
&gt; db.createCollection(&#x27;course&#x27;)&#123; &quot;ok&quot; : 1 &#125;&gt; show collectionscoursestudent&gt; db.course.drop()true&gt; show collectionsstudent
Hive数据仓库安装
hive 是一种底层封装了Hadoop 的数据仓库处理工具，使用类SQL 的hiveSQL 语言实现数据查询，所有hive 的数据都存储在Hadoop 兼容的文件系统、(例如，[Amazon S3](https://baike.baidu.com/item/Amazon S3/10809744)、HDFS)中。hive 在加载数据过程中不会对数据进行任何的修改，只是将数据移动到HDFS 中hive 设定的目录下，因此，hive 不支持对数据的改写和添加，所有的数据都是在加载的时候确定的。
用户接口Client
用户接口主要有三个：CLI，Client 和 WUI。其中最常用的是 Cli，Cli启动的时候，会同时启动一个 hive 副本。Client 是 hive 的客户端，用户连接至 hive Server。在启动 Client 模式的时候，需要指出 hive Server 所在节点，并且在该节点启动 hive Server。 WUI 是通过浏览器访问 hive。
元数据存储 Metastore
hive 将元数据存储在数据库中，如 mysql、derby。hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。
驱动器：Driver 解释器、编译器、优化器、执行器
解释器、编译器、优化器完成 HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在 HDFS 中，并在随后由 MapReduce 调用执行。
Hadoop
hive 的数据存储在 HDFS 中，大部分的查询由 MapReduce 完成（不包含 * 的查询，比如 select * from tbl 不会生成 MapReduce 任务）。


安装hive
tar -xf apache-hive-3.1.2-bin.tar.gzmv apache-hive-3.1.2-bin /usr/local/hiveecho &quot;export HIVE_HOME=/usr/local/hive&quot; &gt;&gt; /etc/profileecho &quot;export PATH=\$HIVE_HOME/bin:\$PATH&quot; &gt;&gt; /etc/profilesource /etc/profilecd /usr/local/hive/conf/cp hive-default.xml.template hive-default.xmlvi hive-site.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;    &lt;value&gt;jdbc:mysql://yjx48:3306/hive?useSSL=false&lt;/value&gt;    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;    &lt;value&gt;root&lt;/value&gt;    &lt;description&gt;username to use against metastore database&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;    &lt;value&gt;Yjx@666.&lt;/value&gt;    &lt;description&gt;password to use against metastore database&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;hive.exec.mode.local.auto&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;
其中Yjx@666.是mysql密码
安装mysql
cdyum remove mariadb-libs.x86_64 -yyum install -y net-toolsmkdir mysqltar -xf mysql-5.7.37-1.el7.x86_64.rpm-bundle.tar -C mysqlcd mysqlrpm -ivh mysql-community-common-5.7.37-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-5.7.37-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-compat-5.7.37-1.el7.x86_64.rpmrpm -ivh mysql-community-client-5.7.37-1.el7.x86_64.rpmrpm -ivh mysql-community-devel-5.7.37-1.el7.x86_64.rpmrpm -ivh mysql-community-server-5.7.37-1.el7.x86_64.rpmsystemctl enable --now mysqldgrep  &#x27;temporary password&#x27; /var/log/mysqld.logmysqladmin -uroot -p&#x27;darm4hb.2Rsy&#x27; password &#x27;Yjx@666.&#x27;mysql -uroot -pYjx@666.#给root用户授权grant all privileges on *.* to &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;Yjx@666.&#x27; with grant option;grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;Yjx@666.&#x27; with grant option;flush privileges;create database hive;exit
配置和启动hive
cdtar -xf mysql-connector-java-5.1.40.tar.gzcp mysql-connector-java-5.1.40/mysql-connector-java-5.1.40-bin.jar /usr/local/hive/lib/mv /usr/local/hive/lib/guava-19.0.jar&#123;,.bak&#125;cp /usr/local/hadoop/share/hadoop/common/lib/guava-27.0-jre.jar  /usr/local/hive/libstart-all.sh schematool -dbType mysql -initSchemahive
Hive数据类型



类型
描述
示例




TINYINT（tinyint）
一个字节（8位）有符号整数，  -128~127
1


SMALLINT（smallint）
2字节（16位）有符号整数，-32768~32767
1


INT（int）
4字节（32位）有符号整数
1


BIGINT（bigint）
8字节（64位）有符号整数
1


FLOAT（float）
4字节（32位）单精度浮点数
1


DOUBLE（double）
8字节（64位）双精度浮点数
1


DECIMAL(decimal)
任意精度的带符号小数
1


BOOLEAN（boolean）
true/false
true/false


STRING（string）
字符串，变长
‘a’,‘b’,‘1’


VARCHAR（varchar）
变长字符串
‘a’


CHAR（char）
固定长度字符串
‘a’


BINANY（binany）
字节数组
无法表示


TIMESTAMP（timestamp）
时间戳，纳秒精度
1.22327E+11


DATE（date）
日期
‘2016-03-29’



hive的集合数据类型



类型
描述
示例




ARRAY
有序数组，字段的类型必须相同
Array（1，2）


MAP
一组无序的键值对，键的类型必须是原始数据类型，他的值可以是任何类型，同一个映射的键的类型必须相同，值得类型也必须相同
Map（‘a’,1）


STRUCT
一组命名的字段,字段类型可以不同
Struct（‘a’,1,2.0


UNION
UNION则类似于C语言中的UNION结构，在给定的任何一个时间点，UNION类型可以保存指定数据类型中的任意一种




基本命令
创建数据库和表
create database hive;use hive;create table usr(id int,name string,age int);
查看和描述数据库和表
show databases;show tables;describe database hive;describe hive.usr;
向表中装载数据
insert into usr values(1,&#x27;sina&#x27;,20);#从linux读取数据[root@yjx48 ~]# echo &quot;2,zhangsan,22&quot; &gt;&gt; /opt/datahive&gt; use hive;create table usr1(id int,name string,age int) row format delimited fields terminated by &quot;,&quot;;load data local inpath &#x27;/opt/data&#x27; overwrite into table usr1;
从hdfs中读取数据
echo &quot;3,lisi,25&quot; &gt;&gt; /opt/test.txthdfs dfs -put /opt/test.txt /hiveload data inpath &#x27;hdfs://yjx48:9000/test.txt&#x27; overwrite into table usr1;
从别的表中读取数据
hive&gt; select * from usr;OK1       sina    20hive&gt; select * from usr1;OK3       lisi    25#读取usr1的id=3的数据到usrinsert overwrite table usr select * from usr1 where id=3;hive&gt; select * from usr;OK3       lisi    25
查询表中数据
select * from usr1;
Hive实验：词频统计
在linux上创建输入目录：/opt/input；
mkdir /opt/input
在以上输入目录中添加多个文本文件，其中文件中包含单词：姓名学号，例如：yjx48；
echo &quot;hello1 yjx48&quot; &gt;&gt; /opt/input/text1.txtecho &quot;hello2 yjx48&quot; &gt;&gt; /opt/input/text2.txtecho &quot;hello3 yjx48&quot; &gt;&gt; /opt/input/text3.txt
在Hive中创建表“docs”，并把输入目录的文件数据加载到该表中；
hiveuse hive;create table docs(line string);load data local inpath &#x27;/opt/input&#x27; overwrite into table docs;select * from docs;
编写HiveQL语句对输入目录的文本进行词频统计，统计单词“姓名学号”出现的次数。
create table word_count asselect word,count(1) as count from(select explode(split(line,&#x27; &#x27;)) as word from docs) wgroup by wordorder by word;select * from word_count;describe word_count;


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>Zookeeper</tag>
        <tag>HBase</tag>
        <tag>NoSQL</tag>
        <tag>MongoDB</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/posts/cc1b9611/</url>
    <content><![CDATA[
JavaScript 基础
本笔记整理自黑马程序员前端JavaScript入门到精通全套视频教程，javascript核心进阶ES6语法、API、js高级等基础知识和实战教程
介绍

掌握 JavaScript 的引入方式，初步认识 JavaScript 的作用

引入方式
JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 script 标签将 JavaScript 代码引入到 HTML 中，有两种方式：
内部方式
通过 script 标签包裹 JavaScript 代码
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 引入方式&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;!-- 内联形式：通过 script 标签包裹 JavaScript 代码 --&gt;  &lt;script&gt;    alert(&#x27;嗨，欢迎来严千屹博客学习前端技术！&#x27;)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
外部形式
一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 script 标签的 src 属性引入
// demo.jsdocument.write(&#x27;嗨，欢迎来严千屹博客学习前端技术！&#x27;)
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 引入方式&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;  &lt;script src=&quot;demo.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
如果 script 标签使用 src 属性引入了某 .js 文件，那么 标签的代码会被忽略！！！如下代码所示：
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 引入方式&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;!-- 外部形式：通过 script 的 src 属性引入独立的 .js 文件 --&gt;  &lt;script src=&quot;demo.js&quot;&gt;    // 此处的代码会被忽略掉！！！！  	alert(666);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
注释和结束符
通过注释可以屏蔽代码被执行或者添加备注信息，JavaScript 支持两种形式注释语法：
单行注释
使用 //  注释单行代码
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 注释&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;    // 这种是单行注释的语法    // 一次只能注释一行    // 可以重复注释    document.write(&#x27;嗨，欢迎来严千屹博客学习前端技术！&#x27;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
多行注释
使用 /* */ 注释多行代码
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 注释&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;    /* 这种的是多行注释的语法 */    /*    	更常见的多行注释是这种写法    	在些可以任意换行    	多少行都可以      */    document.write(&#x27;嗨，欢迎来严千屹博客学习前端技术！&#x27;)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
注：编辑器中单行注释的快捷键为 ctrl + /
结束符
在 JavaScript 中 ; 代表一段代码的结束，多数情况下可以省略 ; 使用回车（enter）替代。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 结束符&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     alert(1);    alert(2);    alert(1)    alert(2)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
实际开发中有许多人主张书写 JavaScript 代码时省略结束符 ;
输入和输出
输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。
举例说明：如按键盘上的方向键，向上/下键可以滚动页面，按向上/下键这个动作叫作输入，页面发生了滚动了这便叫输出。
输出
JavaScript 可以接收用户的输入，然后再将输入的结果输出：
alert()、document.wirte()
以数字为例，向 alert() 或 document.write()输入任意数字，他都会以弹窗形式展示（输出）给用户。
输入
向 prompt() 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 输入输出&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     // 1. 输入的任意数字，都会以弹窗形式展示    document.write(&#x27;要输出的内容&#x27;)    alert(&#x27;要输出的内容&#x27;);    // 2. 以弹窗形式提示用户输入姓名，注意这里的文字使用英文的引号    prompt(&#x27;请输入您的姓名:&#x27;)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
变量

了解变量、数据类型、运算符等基础概念，能够实现数据类型的转换，结合四则运算体会如何编程。


体会现实世界中的事物与计算机的关系
理解什么是数据并知道数据的分类
理解变量存储数据的“容器”
掌握常见运算符的使用，了解优先级关系
知道 JavaScript 数据类型隐式转换的特征


理解变量是计算机存储数据的“容器”，掌握变量的声明方式

变量是计算机中用来存储数据的“容器”，它可以让计算机变得有记忆，通俗的理解变量就是使用【某个符号】来代表【某个具体的数值】（数据）
&lt;script&gt;  // x 符号代表了 5 这个数值  x = 5  // y 符号代表了 6 这个数值  y = 6      //举例： 在 JavaScript 中使用变量可以将某个数据（数值）记录下来！  // 将用户输入的内容保存在 num 这个变量（容器）中  num = prompt(&#x27;请输入一数字!&#x27;)  // 通过 num 变量（容器）将用户输入的内容输出出来  alert(num)  document.write(num)&lt;/script&gt;
声明
声明(定义)变量有两部分构成：声明关键字、变量名（标识）
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 声明和赋值&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     // let 变量名    // 声明(定义)变量有两部分构成：声明关键字、变量名（标识）    // let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语    // age 即变量的名称，也叫标识符    let age  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
关键字是 JavaScript 中内置的一些英文词汇（单词或缩写），它们代表某些特定的含义，如 let 的含义是声明变量的，看到 let  后就可想到这行代码的意思是在声明变量，如 let age;
let 和 var 都是 JavaScript 中的声明变量的关键字，推荐使用 let 声明变量！！！
赋值
声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 声明和赋值&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     // 声明(定义)变量有两部分构成：声明关键字、变量名（标识）    // let 即关键字，所谓关键字是系统提供的专门用来声明（定义）变量的词语    // age 即变量的名称，也叫标识符    let age    // 赋值，将 18 这个数据存入了 age 这个“容器”中    age = 18    // 这样 age 的值就成了 18    document.write(age)        // 也可以声明和赋值同时进行    let str = &#x27;hello world!&#x27;    alert(str);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
关键字
JavaScript 使用专门的关键字 let 和 var 来声明（定义）变量，在使用时需要注意一些细节：
以下是使用 let 时的注意事项：

允许声明和赋值同时进行
不允许重复声明
允许同时声明多个变量并赋值
JavaScript 中内置的一些关键字不能被当做变量名

以下是使用 var 时的注意事项：

允许声明和赋值同时进行
允许重复声明
允许同时声明多个变量并赋值

大部分情况使用 let 和 var 区别不大，但是 let 相较 var 更严谨，因此推荐使用 let，后期会更进一步介绍二者间的区别。
变量名命名规则
关于变量的名称（标识符）有一系列的规则需要遵守：

只能是字母、数字、下划线、$，且不能能数字开头
字母区分大小写，如 Age 和 age 是不同的变量
JavaScript 内部已占用于单词（关键字或保留字）不允许使用
尽量保证变量具有一定的语义，见字知义

注：所谓关键字是指 JavaScript 内部使用的词语，如 let 和var，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 变量名命名规则&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     let age = 18 // 正确    let age1 = 18 // 正确    let _age = 18 // 正确    // let 1age = 18; // 错误，不可以数字开头    let $age = 18 // 正确    let Age = 24 // 正确，它与小写的 age 是不同的变量    // let let = 18; // 错误，let 是关键字    let int = 123 // 不推荐，int 是保留字  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
常量
概念：使用 const 声明的变量称为“常量”。
使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let。
命名规范：和变量一致
const PI = 3.14

注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）

数据类型

计算机世界中的万事成物都是数据。

计算机程序可以处理大量的数据，为了方便数据的管理，将数据分成了不同的类型：
注：通过 typeof 关键字检测数据类型
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     // 检测 1 是什么类型数据，结果为 number    document.write(typeof 1)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
数值类型
即我们数学中学习到的数字，可以是整数、小数、正数、负数
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     let score = 100 // 正整数    let price = 12.345 // 小数    let temperature = -40 // 负数    document.write(typeof score) // 结果为 number    document.write(typeof price) // 结果为 number    document.write(typeof temperature) // 结果为 number  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等。
字符串类型
通过单引号（ ''） 、双引号（ &quot;&quot;）或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。
注意事项：

无论单引号或是双引号必须成对使用
单引号/双引号可以互相嵌套，但是不以自已嵌套自已
必要时可以使用转义符 \，输出单引号或双引号

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     let user_name = &#x27;小明&#x27; // 使用单引号    let gender = &quot;男&quot; // 使用双引号    let str = &#x27;123&#x27; // 看上去是数字，但是用引号包裹了就成了字符串了    let str1 = &#x27;&#x27; // 这种情况叫空字符串		    documeent.write(typeof user_name) // 结果为 string    documeent.write(typeof gender) // 结果为 string    documeent.write(typeof str) // 结果为 string  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
布尔类型
表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 true 和 false，表示肯定的数据用 true，表示否定的数据用 false。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     //  pink老师帅不帅？回答 是 或 否    let isCool = true // 是的，摔死了！    isCool = false // 不，套马杆的汉子！    document.write(typeof isCool) // 结果为 boolean  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
undefined
未定义是比较特殊的类型，只有一个值 undefined，只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 数据类型&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;     // 只声明了变量，并末赋值    let tmp;    document.write(typeof tmp) // 结果为 undefined  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
注：JavaScript 中变量的值决定了变量的数据类型。
类型转换

理解弱类型语言的特征，掌握显式类型转换的方法

在 JavaScript 中数据被分成了不同的类型，如数值、字符串、布尔值、undefined，在实际编程的过程中，不同数据类型之间存在着转换的关系。
隐式转换
某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 隐式转换&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;     let num = 13 // 数值    let num2 = &#x27;2&#x27; // 字符串    // 结果为 132    // 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;    // 然后 + 将两个字符串拼接到了一起    console.log(num + num2)    // 结果为 11    // 原因是将字符串 num2 转换成了数值，相当于 2    // 然后数值 13 减去 数值 2    console.log(num - num2)    let a = prompt(&#x27;请输入一个数字&#x27;)    let b = prompt(&#x27;请再输入一个数字&#x27;)    alert(a + b);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
注：数据类型的隐式转换是 JavaScript 的特征，后续学习中还会遇到，目前先需要理解什么是隐式转换。
补充介绍模板字符串的拼接的使用
显式转换
编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。
Number
通过 Number 显示转换成数值类型，当转换失败时结果为 NaN（Not a Number）即不是一个数字。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 隐式转换&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    let t = &#x27;12&#x27;    let f = 8    // 显式将字符串 12 转换成数值 12    t = Number(t)    // 检测转换后的类型    // console.log(typeof t);    console.log(t + f) // 结果为 20    // 并不是所有的值都可以被转成数值类型    let str = &#x27;hello&#x27;    // 将 hello 转成数值是不现实的，当无法转换成    // 数值时，得到的结果为 NaN （Not a Number）    console.log(Number(str))  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
运算符

理解什么是流程控制，知道条件控制的种类并掌握其对应的语法规则，具备利用循环编写简易ATM取款机程序能力


运算符
语句
综合案例

算术运算符
数字是用来计算的，比如：乘法 * 、除法 / 、加法 + 、减法 - 等等，所以经常和算术运算符一起。
算术运算符：也叫数学运算符，主要包括加、减、乘、除、取余（求模）等



运算符
作用




+
求和


-
求差


*
求积


/
求商


%
取模（取余数），开发中经常用于作为某个数字是否被整除




注意：在计算失败时，显示的结果是 NaN （not a number）

// 算术运算符console.log(1 + 2 * 3 / 2) //  4 let num = 10console.log(num + 10)  // 20console.log(num + num)  // 20// 1. 取模(取余数)  使用场景：  用来判断某个数是否能够被整除console.log(4 % 2) //  0  console.log(6 % 3) //  0console.log(5 % 3) //  2console.log(3 % 5) //  3// 2. 注意事项 : 如果我们计算失败，则返回的结果是 NaN (not a number)console.log(&#x27;pink老师&#x27; - 2)console.log(&#x27;pink老师&#x27; * 2)console.log(&#x27;pink老师&#x27; + 2)   // pink老师2
赋值运算符
赋值运算符：对变量进行赋值的运算符
=     将等号右边的值赋予给左边, 要求左边必须是一个容器



运算符
作用




+=
加法赋值


-+
减法赋值


*=
乘法赋值


/=
除法赋值


%=
取余赋值



&lt;script&gt;let num = 1// num = num + 1// 采取赋值运算符// num += 1num += 3console.log(num)&lt;/script&gt;
自增/自减运算符



符号
作用
说明




++
自增
变量自身的值加1，例如: x++


–
自减
变量自身的值减1，例如: x–




在前和在后在单独使用时二者并没有差别，而且一般开发中我们都是独立使用
++在后（后缀式）我们会使用更多


注意：

只有变量能够使用自增和自减运算符
、-- 可以在变量前面也可以在变量后面，比如: x  或者  ++x


&lt;script&gt;    // let num = 10    // num = num + 1    // num += 1    // // 1. 前置自增    // let i = 1    // ++i    // console.log(i)    // let i = 1    // console.log(++i + 1)    // 2. 后置自增    // let i = 1    // i++    // console.log(i)    // let i = 1    // console.log(i++ + 1)    // 了解     let i = 1    console.log(i++ + ++i + i)  &lt;/script&gt;
比较运算符
使用场景：比较两个数据大小、是否相等，根据比较结果返回一个布尔值（true / false）



运算符
作用




&gt;
左边是否大于右边


&lt;
左边是否小于右边


&gt;=
左边是否大于或等于右边


&lt;=
左边是否小于或等于右边


===
左右两边是否类型和值都相等（重点）


==
左右两边值是否相等


!=
左右值不相等


!==
左右两边是否不全等



&lt;script&gt;  console.log(3 &gt; 5)  console.log(3 &gt;= 3)  console.log(2 == 2)  // 比较运算符有隐式转换 把&#x27;2&#x27; 转换为 2  双等号 只判断值  console.log(2 == &#x27;2&#x27;)  // true  // console.log(undefined === null)  // === 全等 判断 值 和 数据类型都一样才行  // 以后判断是否相等 请用 ===    console.log(2 === &#x27;2&#x27;)  console.log(NaN === NaN) // NaN 不等于任何人，包括他自己  console.log(2 !== &#x27;2&#x27;)  // true    console.log(2 != &#x27;2&#x27;) // false   console.log(&#x27;-------------------------&#x27;)  console.log(&#x27;a&#x27; &lt; &#x27;b&#x27;) // true  console.log(&#x27;aa&#x27; &lt; &#x27;ab&#x27;) // true  console.log(&#x27;aa&#x27; &lt; &#x27;aac&#x27;) // true  console.log(&#x27;-------------------------&#x27;)&lt;/script&gt;
逻辑运算符
使用场景：可以把多个布尔值放到一起运算，最终返回一个布尔值



符号
名称
日常读法
特点
口诀




&amp;&amp;
逻辑与
并且
符号两边有一个假的结果为假
一假则假


||
逻辑或
或者
符号两边有一个真的结果为真
一真则真


!
逻辑非
取反
true变false  false变true
真变假，假变真






A
B
A &amp;&amp; B
A || B
!A




false
false
false
false
true


false
true
false
true
true


true
false
false
true
false


true
true
true
true
false



&lt;script&gt;    // 逻辑与 一假则假    console.log(true &amp;&amp; true)    console.log(false &amp;&amp; true)    console.log(3 &lt; 5 &amp;&amp; 3 &gt; 2)    console.log(3 &lt; 5 &amp;&amp; 3 &lt; 2)    console.log(&#x27;-----------------&#x27;)    // 逻辑或 一真则真    console.log(true || true)    console.log(false || true)    console.log(false || false)    console.log(&#x27;-----------------&#x27;)    // 逻辑非  取反    console.log(!true)    console.log(!false)    console.log(&#x27;-----------------&#x27;)    let num = 6    console.log(num &gt; 5 &amp;&amp; num &lt; 10)    console.log(&#x27;-----------------&#x27;)  &lt;/script&gt;
运算符优先级


逻辑运算符优先级： ！&gt; &amp;&amp; &gt;  ||

语句
表达式和语句

分支语句
分支语句可以根据条件判定真假，来选择性的执行想要的代码
分支语句包含：

if分支语句（重点）
三元运算符
switch语句

if 分支语句
语法：
if(条件表达式) &#123;  // 满足条件要执行的语句&#125;
小括号内的条件结果是布尔值，为 true 时，进入大括号里执行代码；为false，则不执行大括号里面代码
小括号内的结果若不是布尔类型时，会发生类型转换为布尔值，类似Boolean()
如果大括号只有一个语句，大括号可以省略，但是，俺们不提倡这么做~
&lt;script&gt;    // 单分支语句    // if (false) &#123;    //   console.log(&#x27;执行语句&#x27;)    // &#125;    // if (3 &gt; 5) &#123;    //   console.log(&#x27;执行语句&#x27;)    // &#125;    // if (2 === &#x27;2&#x27;) &#123;    //   console.log(&#x27;执行语句&#x27;)    // &#125;    //  1. 除了0 所有的数字都为真    //   if (0) &#123;    //     console.log(&#x27;执行语句&#x27;)    //   &#125;    // 2.除了 &#x27;&#x27; 所有的字符串都为真 true    // if (&#x27;pink老师&#x27;) &#123;    //   console.log(&#x27;执行语句&#x27;)    // &#125;    // if (&#x27;&#x27;) &#123;    //   console.log(&#x27;执行语句&#x27;)    // &#125;    // // if (&#x27;&#x27;) console.log(&#x27;执行语句&#x27;)    // 1. 用户输入    let score = +prompt(&#x27;请输入成绩&#x27;)    // 2. 进行判断输出    if (score &gt;= 700) &#123;      alert(&#x27;恭喜考入黑马程序员&#x27;)    &#125;    console.log(&#x27;-----------------&#x27;)  &lt;/script&gt;
if双分支语句
如果有两个条件的时候，可以使用 if else 双分支语句
if (条件表达式)&#123;  // 满足条件要执行的语句&#125; else &#123;  // 不满足条件要执行的语句&#125;
例如：
&lt;script&gt;   // 1. 用户输入   let uname = prompt(&#x27;请输入用户名:&#x27;)   let pwd = prompt(&#x27;请输入密码:&#x27;)   // 2. 判断输出   if (uname === &#x27;pink&#x27; &amp;&amp; pwd === &#x27;123456&#x27;) &#123;     alert(&#x27;恭喜登录成功&#x27;)   &#125; else &#123;     alert(&#x27;用户名或者密码错误&#x27;)   &#125; &lt;/script&gt;
if 多分支语句
使用场景： 适合于有多个条件的时候
&lt;script&gt;   // 1. 用户输入   let score = +prompt(&#x27;请输入成绩：&#x27;)   // 2. 判断输出   if (score &gt;= 90) &#123;     alert(&#x27;成绩优秀，宝贝，你是我的骄傲&#x27;)   &#125; else if (score &gt;= 70) &#123;     alert(&#x27;成绩良好，宝贝，你要加油哦~~&#x27;)   &#125; else if (score &gt;= 60) &#123;     alert(&#x27;成绩及格，宝贝，你很危险~&#x27;)   &#125; else &#123;     alert(&#x27;成绩不及格，宝贝，我不想和你说话，我只想用鞭子和你说话~&#x27;)   &#125; &lt;/script&gt;
三元运算符（三元表达式）
使用场景： 一些简单的双分支，可以使用  三元运算符（三元表达式），写起来比 if  else双分支 更简单
符号：? 与 : 配合使用
语法：
条件 ? 表达式1 ： 表达式2
例如：
// 三元运算符（三元表达式）// 1. 语法格式// 条件 ? 表达式1 : 表达式2 // 2. 执行过程 // 2.1 如果条件为真，则执行表达式1// 2.2 如果条件为假，则执行表达式2// 3. 验证// 5 &gt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;console.log(5 &lt; 3 ? &#x27;真的&#x27; : &#x27;假的&#x27;)// let age = 18 // age = age + 1//  age++// 1. 用户输入 let num = prompt(&#x27;请您输入一个数字:&#x27;)// 2. 判断输出- 小于10才补0// num = num &lt; 10 ? 0 + num : numnum = num &gt;= 10 ? num : 0 + numalert(num)
switch语句（了解）
使用场景： 适合于有多个条件的时候，也属于分支语句，大部分情况下和 if多分支语句 功能相同
注意：

switch case语句一般用于等值判断, if适合于区间判断
switchcase一般需要配合break关键字使用 没有break会造成case穿透
if 多分支语句开发要比switch更重要，使用也更多

例如：
// switch分支语句// 1. 语法// switch (表达式) &#123;//   case 值1://     代码1//     break//   case 值2://     代码2//     break//   ...//   default://     代码n// &#125;&lt;script&gt;  switch (2) &#123;    case 1:    console.log(&#x27;您选择的是1&#x27;)    break  // 退出switch    case 2:    console.log(&#x27;您选择的是2&#x27;)    break  // 退出switch    case 3:    console.log(&#x27;您选择的是3&#x27;)    break  // 退出switch    default:    console.log(&#x27;没有符合条件的&#x27;)  &#125;&lt;/script&gt;
断点调试
**作用：**学习时可以帮助更好的理解代码运行，工作时可以更快找到bug
浏览器打开调试界面

按F12打开开发者工具
点到源代码一栏 （ sources ）
选择代码文件

**断点：**在某句代码上加的标记就叫断点，当程序执行到这句有标记的代码时会暂停下来
循环语句
使用场景：重复执行 指定的一段代码，比如我们想要输出10次 ‘我学的很棒’
学习路径：
1.while循环
2.for 循环（重点）
while循环
while :  在…. 期间， 所以 while循环 就是在满足条件期间，重复执行某些代码。
语法：
while (条件表达式) &#123;   // 循环体    &#125;
例如：
// while循环: 重复执行代码// 1. 需求: 利用循环重复打印3次 &#x27;月薪过万不是梦，毕业时候见英雄&#x27;let i = 1while (i &lt;= 3) &#123;  document.write(&#x27;月薪过万不是梦，毕业时候见英雄~&lt;br&gt;&#x27;)  i++   // 这里千万不要忘了变量自增否则造成死循环&#125;
循环三要素：
1.初始值 （经常用变量）
2.终止条件
3.变量的变化量
例如：
&lt;script&gt;  // // 1. 变量的起始值  // let i = 1  // // 2. 终止条件  // while (i &lt;= 3) &#123;  //   document.write(&#x27;我要循环三次 &lt;br&gt;&#x27;)  //   // 3. 变量的变化量  //   i++  // &#125;  // 1. 变量的起始值  let end = +prompt(&#x27;请输入次数:&#x27;)let i = 1// 2. 终止条件while (i &lt;= end) &#123;  document.write(&#x27;我要循环三次 &lt;br&gt;&#x27;)  // 3. 变量的变化量  i++&#125;&lt;/script&gt;
中止循环
break   中止整个循环，一般用于结果已经得到, 后续的循环不需要的时候可以使用（提高效率）
continue  中止本次循环，一般用于排除或者跳过某一个选项的时候
&lt;script&gt;    // let i = 1    // while (i &lt;= 5) &#123;    //   console.log(i)    //   if (i === 3) &#123;    //     break  // 退出循环    //   &#125;    //   i++    // &#125;    let i = 1    while (i &lt;= 5) &#123;      if (i === 3) &#123;        i++        continue      &#125;      console.log(i)      i++    &#125;  &lt;/script&gt;
无限循环
1.while(true) 来构造“无限”循环，需要使用break退出循环。（常用）
2.for(;;) 也可以来构造“无限”循环，同样需要使用break退出循环。
// 无限循环  // 需求： 页面会一直弹窗询问你爱我吗？// (1). 如果用户输入的是 &#x27;爱&#x27;，则退出弹窗// (2). 否则一直弹窗询问// 1. while(true) 无限循环// while (true) &#123;//   let love = prompt(&#x27;你爱我吗?&#x27;)//   if (love === &#x27;爱&#x27;) &#123;//     break//   &#125;// &#125;// 2. for(;;) 无限循环for (; ;) &#123;  let love = prompt(&#x27;你爱我吗?&#x27;)  if (love === &#x27;爱&#x27;) &#123;    break  &#125;&#125;
总结

if 多分支语句和 switch的区别：


共同点

都能实现多分支选择， 多选1
大部分情况下可以互换



区别：

switch…case语句通常处理case为比较确定值的情况，而if…else…语句更加灵活，通常用于范围判断(大于，等于某个范围)。
switch 语句进行判断后直接执行到程序的语句，效率更高，而if…else语句有几种判断条件，就得判断多少次
switch 一定要注意 必须是 ===  全等，一定注意 数据类型，同时注意break否则会有穿透效果
结论：

当分支比较少时，if…else语句执行效率高。
当分支比较多时，switch语句执行效率高，而且结构更清晰。






综合案例-ATM存取款机

分析：
①：提示输入框写到循环里面（无限循环）
②：用户输入4则退出循环 break
③：提前准备一个金额预先存储一个数额 money
④：根据输入不同的值，做不同的操作
​     (1)  取钱则是减法操作， 存钱则是加法操作，查看余额则是直接显示金额
​     (2) 可以使用 if else if 多分支 来执行不同的操作
完整代码：
&lt;script&gt;  // 1. 开始循环 输入框写到 循环里面  // 3. 准备一个总的金额  let money = 100while (true) &#123;  let re = +prompt(`请您选择操作：1.存钱2.取钱3.查看余额4.退出`)  // 2. 如果用户输入的 4 则退出循环， break  写到if 里面，没有写到switch里面， 因为4需要break退出循环  if (re === 4) &#123;    break  &#125;  // 4. 根据输入做操作  switch (re) &#123;    case 1:      // 存钱      let cun = +prompt(&#x27;请输入存款金额&#x27;)      money = money + cun      break      case 2:      // 存钱      let qu = +prompt(&#x27;请输入取款金额&#x27;)      money = money - qu      break      case 3:      // 存钱      alert(`您的银行卡余额是$&#123;money&#125;`)      break  &#125;&#125;&lt;/script&gt;
for 语句

掌握 for 循环语句，让程序具备重复执行能力

for 是 JavaScript 提供的另一种循环控制的话句，它和 while 只是语法上存在差异。
for语句的基本使用

实现循环的 3 要素

&lt;script&gt;  // 1. 语法格式  // for(起始值; 终止条件; 变化量) &#123;  //   // 要重复执行的代码  // &#125;  // 2. 示例：在网页中输入标题标签  // 起始值为 1  // 变化量 i++  // 终止条件 i &lt;= 6  for(let i = 1; i &lt;= 6; i++) &#123;    document.write(`&lt;h$&#123;i&#125;&gt;循环控制，即重复执行&lt;h$&#123;i&#125;&gt;`)  &#125;&lt;/script&gt;


变化量和死循环，for 循环和 while 一样，如果不合理设置增量和终止条件，便会产生死循环。


跳出和终止循环


&lt;script&gt;    // 1. continue     for (let i = 1; i &lt;= 5; i++) &#123;        if (i === 3) &#123;            continue  // 结束本次循环，继续下一次循环        &#125;        console.log(i)    &#125;    // 2. break    for (let i = 1; i &lt;= 5; i++) &#123;        if (i === 3) &#123;            break  // 退出结束整个循环        &#125;        console.log(i)    &#125;&lt;/script&gt;
结论：

JavaScript 提供了多种语句来实现循环控制，但无论使用哪种语句都离不开循环的3个特征，即起始值、变化量、终止条件，做为初学者应着重体会这3个特征，不必过多纠结三种语句的区别。
起始值、变化量、终止条件，由开发者根据逻辑需要进行设计，规避死循环的发生。
当如果明确了循环的次数的时候推荐使用for循环,当不明确循环的次数的时候推荐使用while循环


注意：for 的语法结构更简洁，故 for 循环的使用频次会更多。

循环嵌套
利用循环的知识来对比一个简单的天文知识，我们知道地球在自转的同时也在围绕太阳公转，如果把自转和公转都看成是循环的话，就相当于是循环中又嵌套了另一个循环。

实际上 JavaScript 中任何一种循环语句都支持循环的嵌套，如下代码所示：

// 1. 外面的循环 记录第n天 for (let i = 1; i &lt; 4; i++) &#123;    document.write(`第$&#123;i&#125;天 &lt;br&gt;`)    // 2. 里层的循环记录 几个单词    for (let j = 1; j &lt; 6; j++) &#123;        document.write(`记住第$&#123;j&#125;个单词&lt;br&gt;`)    &#125;&#125;
记住，外层循环循环一次，里层循环循环全部
倒三角
 // 外层打印几行for (let i = 1; i &lt;= 5; i++) &#123;    // 里层打印几个星星    for (let j = 1; j &lt;= i; j++) &#123;        document.write(&#x27;★&#x27;)    &#125;    document.write(&#x27;&lt;br&gt;&#x27;)&#125;

九九乘法表
样式css
span &#123;    display: inline-block;    width: 100px;    padding: 5px 10px;    border: 1px solid pink;    margin: 2px;    border-radius: 5px;    box-shadow: 2px 2px 2px rgba(255, 192, 203, .4);    background-color: rgba(255, 192, 203, .1);    text-align: center;    color: hotpink;&#125;
javascript
 // 外层打印几行for (let i = 1; i &lt;= 9; i++) &#123;    // 里层打印几个星星    for (let j = 1; j &lt;= i; j++) &#123;        // 只需要吧 ★ 换成  1 x 1 = 1           document.write(`		&lt;div&gt; $&#123;j&#125; x $&#123;i&#125; = $&#123;j * i&#125; &lt;/div&gt;     `)    &#125;    document.write(&#x27;&lt;br&gt;&#x27;)&#125;

数组

知道什么是数组及其应用的场景，掌握数组声明及访问的语法。

数组是什么？
数组：(Array)是一种可以按顺序保存数据的数据类型
**使用场景：**如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便
数组的基本使用
定义数组和数组单元
&lt;script&gt;  // 1. 语法，使用 [] 来定义一个空数组  // 定义一个空数组，然后赋值给变量 classes  // let classes = [];  // 2. 定义非空数组  let classes = [&#x27;小明&#x27;, &#x27;小刚&#x27;, &#x27;小红&#x27;, &#x27;小丽&#x27;, &#x27;小米&#x27;]&lt;/script&gt;
通过 [] 定义数组，数据中可以存放真正的数据，如小明、小刚、小红等这些都是数组中的数据，我们这些数据称为数组单元，数组单元之间使用英文逗号分隔。
访问数组和数组索引
使用数组存放数据并不是最终目的，关键是能够随时的访问到数组中的数据（单元）。其实 JavaScript 为数组中的每一个数据单元都编了号，通过数据单元在数组中的编号便可以轻松访问到数组中的数据单元了。
我们将数据单元在数组中的编号称为索引值，也有人称其为下标。
索引值实际是按着数据单元在数组中的位置依次排列的，注意是从 0 开始的，如下图所示：

观察上图可以数据单元【小明】对应的索引值为【0】，数据单元【小红】对应的索引值为【2】
&lt;script&gt;  let classes = [&#x27;小明&#x27;, &#x27;小刚&#x27;, &#x27;小红&#x27;, &#x27;小丽&#x27;, &#x27;小米&#x27;]    // 1. 访问数组，语法格式为：变量名[索引值]  document.write(classes[0] // 结果为：小明  document.write(classes[1] // 结果为：小刚  document.write(classes[4] // 结果为：小米    // 2. 通过索引值还可以为数组单重新赋值  document.write(classes[3] // 结果为：小丽  // 重新为索引值为 3 的单元赋值  classes[3] = &#x27;小小丽&#x27;  document.wirte(classes[3]; // 结果为： 小小丽&lt;/script&gt;
数据单元值类型
数组做为数据的集合，它的单元值可以是任意数据类型
&lt;script&gt;  // 6. 数组单值类型可以是任意数据类型  // a) 数组单元值的类型为字符类型  let list = [&#x27;HTML&#x27;, &#x27;CSS&#x27;, &#x27;JavaScript&#x27;]  // b) 数组单元值的类型为数值类型  let scores = [78, 84, 70, 62, 75]  // c) 混合多种类型  let mixin = [true, 1, false, &#x27;hello&#x27;]&lt;/script&gt;
数组长度属性
重申一次，数组在 JavaScript 中并不是新的数据类型，它属于对象类型。
&lt;script&gt;  // 定义一个数组  let arr = [&#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;]  // 数组对应着一个 length 属性，它的含义是获取数组的长度  console.log(arr.length) // 3&lt;/script&gt;
操作数组
数组做为对象数据类型，不但有 length 属性可以使用，还提供了许多方法：

push 动态向数组的尾部添加一个单元
unshit 动态向数组头部添加一个单元
pop 删除最后一个单元
shift 删除第一个单元
splice 动态删除任意单元

使用以上4个方法时，都是直接在原数组上进行操作，即成功调任何一个方法，原数组都跟着发生相应的改变。并且在添加或删除单元时 length 并不会发生错乱。
&lt;script&gt;  // 定义一个数组  let arr = [&#x27;html&#x27;, &#x27;css&#x27;, &#x27;javascript&#x27;]  // 1. push 动态向数组的尾部添加一个单元  arr.push(&#x27;Nodejs&#x27;)  console.log(arr)  arr.push(&#x27;Vue&#x27;)  // 2. unshit 动态向数组头部添加一个单元  arr.unshift(&#x27;VS Code&#x27;)  console.log(arr)  // 3. splice 动态删除任意单元  arr.splice(2, 1) // 从索引值为2的位置开始删除1个单元  console.log(arr)  // 4. pop 删除最后一个单元  arr.pop()  console.log(arr)  // 5. shift 删除第一个单元  arr.shift()  console.log(arr)&lt;/script&gt;
函数

理解封装的意义，能够通过函数的声明实现逻辑的封装，知道对象数据类型的特征，结合数学对象实现简单计算功能。


理解函数的封装的特征
掌握函数声明的语法
理解什么是函数的返回值
知道并能使用常见的内置函数


理解函数的封装特性，掌握函数的语法规则

声明和调用
函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑，这么做的优势是有利于精简代码方便复用。
声明（定义）
声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分

调用
声明（定义）的函数必须调用才会真正被执行，使用 () 调用函数。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 声明和调用&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明（定义）了最简单的函数，既没有形式参数，也没有返回值    function sayHi() &#123;      console.log(&#x27;嗨~&#x27;)    &#125;    // 函数调用，这些函数体内的代码逻辑会被执行    // 函数名()            sayHi()    // 可以重复被调用，多少次都可以    sayHi()  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;

注：函数名的命名规则与变量是一致的，并且尽量保证函数名的语义。

小案例： 小星星
&lt;script&gt;        // 函数声明        function sayHi() &#123;            // document.write(&#x27;hai~&#x27;)            document.write(`*&lt;br&gt;`)            document.write(`**&lt;br&gt;`)            document.write(`***&lt;br&gt;`)            document.write(`****&lt;br&gt;`)            document.write(`*****&lt;br&gt;`)            document.write(`******&lt;br&gt;`)            document.write(`*******&lt;br&gt;`)            document.write(`********&lt;br&gt;`)            document.write(`*********&lt;br&gt;`)        &#125;        // 函数调用        sayHi()        sayHi()        sayHi()        sayHi()        sayHi()    &lt;/script&gt;
参数
通过向函数传递参数，可以让函数更加灵活多变，参数可以理解成是一个变量。
声明（定义）一个功能为打招呼的函数

传入数据列表
声明这个函数需要传入几个数据
多个数据用逗号隔开

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 函数参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明（定义）一个功能为打招呼的函数    // function sayHi() &#123;    //   console.log(&#x27;嗨~&#x27;)    // &#125;    // 调用函数    // sayHi()	    // 这个函数似乎没有什么价值，除非能够向不同的人打招呼    // 这就需要借助参数来实现了    function sayHi(name) &#123;      // 参数 name 可以被理解成是一个变量      console.log(name)      console.log(&#x27;嗨~&#x27; + name)    &#125;    // 调用 sayHi 函数，括号中多了 &#x27;小明&#x27;    // 这时相当于为参数 name 赋值了    sayHi(&#x27;小明&#x27;)// 结果为 小明    // 再次调用 sayHi 函数，括号中多了 &#x27;小红&#x27;    // 这时相当于为参数 name 赋值了    sayHi(&#x27;小红&#x27;) // 结果为 小红  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
总结：

声明（定义）函数时的形参没有数量限制，当有多个形参时使用 , 分隔
调用函数传递的实参要与形参的顺序一致

形参和实参
形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）
实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）
形参可以理解为是在这个函数内声明的变量（比如 num1 = 10）实参可以理解为是给这个变量赋值
开发中尽量保持形参和实参个数一致
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 函数参数&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明（定义）一个计算任意两数字和的函数    // 形参 x 和 y 分别表示任意两个数字，它们是两个变量    function count(x, y) &#123;      console.log(x + y);    &#125;    // 调用函数，传入两个具体的数字做为实参    // 此时 10 赋值给了形参 x    // 此时 5  赋值给了形参 y    count(10, 5); // 结果为 15  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
返回值
函数的本质是封装（包裹），函数体内的逻辑执行完毕后，函数外部如何获得函数内部的执行结果呢？要想获得函数内部逻辑的执行结果，需要通过 return 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 函数返回值&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 定义求和函数    function count(a, b) &#123;      let s = a + b      // s 即为 a + b 的结果      // 通过 return 将 s 传递到外部      return s    &#125;    // 调用函数，如果一个函数有返回值    // 那么可将这个返回值赋值给外部的任意变量    let total = count(5, 12)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
总结：

在函数体中使用return 关键字能将内部的执行结果交给函数外部使用
函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的数据不要换行写
return会立即结束当前函数
函数可以没有return，这种情况默认返回值为 undefined

作用域
通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。
作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。
全局作用域
作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件
处于全局作用域内的变量，称为全局变量
局部作用域
作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。
处于局部作用域内的变量称为局部变量

如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐
但是有一种情况，函数内部的形参可以看做是局部变量。

匿名函数
函数可以分为具名函数和匿名函数
匿名函数：没有名字的函数,无法直接使用。
函数表达式
// 声明let fn = function() &#123;    console.log(&#x27;函数表达式&#x27;)&#125;// 调用fn()
立即执行函数
(function()&#123; xxx  &#125;)();(function()&#123;xxxx&#125;());

无需调用，立即执行，其实本质已经调用了
多个立即执行函数之间用分号隔开

在能够访问到的情况下 先局部 局部没有在找全局
对象

知道对象数据类型的特征，能够利用数组对象渲染页面


理解什么是对象，掌握定义对象的语法
掌握数学对象的使用


对象是 JavaScript 数据类型的一种，之前已经学习了数值类型、字符串类型、布尔类型、undefined。对象数据类型可以被理解成是一种数据集合。它由属性和方法两部分构成。

语法
声明一个对象类型的变量与之前声明一个数值或字符串类型的变量没有本质上的区别。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象语法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明字符串类型变量    let str = &#x27;hello world!&#x27;        // 声明数值类型变量    let num = 199    // 声明对象类型变量，使用一对花括号    // user 便是一个对象了，目前它是一个空对象    let user = &#123;&#125;  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
属性和访问
数据描述性的信息称为属性，如人的姓名、身高、年龄、性别等，一般是名词性的。

属性都是成 对出现的，包括属性名和值，它们之间使用英文 : 分隔
多个属性之间使用英文 , 分隔
属性就是依附在对象上的变量
属性名可以使用 &quot;&quot; 或 ''，一般情况下省略，除非名称遇到特殊符号如空格、中横线等

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象语法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 通过对象描述一个人的数据信息    // person 是一个对象，它包含了一个属性 name    // 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔    let person = &#123;      name: &#x27;小明&#x27;, // 描述人的姓名      age: 18, // 描述人的年龄      stature: 185, // 描述人的身高      gender: &#x27;男&#x27;, // 描述人的性别    &#125;  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
声明对象，并添加了若干属性后，可以使用 . 或 [] 获得对象中属性对应的值，我称之为属性访问。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象语法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 通过对象描述一个人的数据信息    // person 是一个对象，它包含了一个属性 name    // 属性都是成对出现的，属性名 和 值，它们之间使用英文 : 分隔    let person = &#123;      name: &#x27;小明&#x27;, // 描述人的姓名      age: 18, // 描述人的年龄      stature: 185, // 描述人的身高      gender: &#x27;男&#x27;, // 描述人的性别    &#125;;        // 访问人的名字    console.log(person.name) // 结果为 小明    // 访问人性别    console.log(person.gender) // 结果为 男    // 访问人的身高    console.log(person[&#x27;stature&#x27;] // 结果为 185   // 或者    console.log(person.stature) // 结果同为 185  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
扩展：也可以动态为对象添加属性，动态添加与直接定义是一样的，只是语法上更灵活。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象语法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明一个空的对象（没有任何属性）	let user = &#123;&#125;    // 动态追加属性    user.name = &#x27;小明&#x27;    user[&#x27;age&#x27;] = 18        // 动态添加与直接定义是一样的，只是语法上更灵活  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
方法和调用
数据行为性的信息称为方法，如跑步、唱歌等，一般是动词性的，其本质是函数。

方法是由方法名和函数两部分构成，它们之间使用 : 分隔
多个属性之间使用英文 , 分隔
方法是依附在对象中的函数
方法名可以使用 &quot;&quot; 或 ''，一般情况下省略，除非名称遇到特殊符号如空格、中横线等

&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 方法是依附在对象上的函数    let person = &#123;      name: &#x27;小红&#x27;,      age: 18,      // 方法是由方法名和函数两部分构成，它们之间使用 : 分隔      singing: function () &#123;        console.log(&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;)      &#125;,      run: function () &#123;        console.log(&#x27;我跑的非常快...&#x27;)      &#125;    &#125;  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
声明对象，并添加了若干方法后，可以使用 . 或 [] 调用对象中函数，我称之为方法调用。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 方法是依附在对象上的函数    let person = &#123;      name: &#x27;小红&#x27;,      age: 18,      // 方法是由方法名和函数两部分构成，它们之间使用 : 分隔      singing: function () &#123;        console.log(&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;)      &#125;,      run: function () &#123;        console.log(&#x27;我跑的非常快...&#x27;)      &#125;    &#125;        // 调用对象中 singing 方法    person.singing()    // 调用对象中的 run 方法    person.run()  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
扩展：也可以动态为对象添加方法，动态添加与直接定义是一样的，只是语法上更灵活。
&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;JavaScript 基础 - 对象方法&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script&gt;    // 声明一个空的对象（没有任何属性，也没有任何方法）	let user = &#123;&#125;    // 动态追加属性    user.name = &#x27;小明&#x27;    user.[&#x27;age&#x27;] = 18        // 动态添加方法    user.move = function () &#123;      console.log(&#x27;移动一点距离...&#x27;)    &#125;      &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
注：无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的。
null
null 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象。使用 typeof 检测类型它的类型时，结果为 object。
遍历对象
let obj = &#123;      uname: &#x27;pink&#x27;,      age: 18,      sex: &#x27;男&#x27;    &#125;    console.log(obj[&#x27;uname&#x27;];//输出某个属性名的值        for(let i in obj) &#123;      // i 属性名  字符串  带引号    obj.&#x27;uname&#x27;     i ===  &#x27;uname&#x27;      // obj[k]  属性值    obj[&#x27;uname&#x27;]   obj[i]      console.log(i)  //输出所有属性名    &#125;    for(let i in obj) &#123;      // i 属性名  字符串  带引号    obj.&#x27;uname&#x27;     i ===  &#x27;uname&#x27;      // obj[i]  属性值    obj[&#x27;uname&#x27;]   obj[i]      console.log(obj[i]  //输出所有属性的值    &#125;
for in 不提倡遍历数组 因为 k 是 字符串

案例
&lt;script&gt;    let student = [      &#123; name: &#x27;小米&#x27;, age: 18, sex: &#x27;男&#x27;, homedown: &#x27;河南&#x27; &#125;,      &#123; name: &#x27;小美&#x27;, age: 12, sex: &#x27;女&#x27;, homedown: &#x27;北京&#x27; &#125;,      &#123; name: &#x27;小三&#x27;, age: 13, sex: &#x27;男&#x27;, homedown: &#x27;湖北&#x27; &#125;,      &#123; name: &#x27;小四&#x27;, age: 15, sex: &#x27;女&#x27;, homedown: &#x27;广东&#x27; &#125;    ]    for (let i = 0; i &lt;= student.length; i++) &#123;        // console.log(i) //下标索引号        // console.log(student[i] //数组元素=每个对象        console.log(student[i].name) //输出每个对象的名字        //console.log(student[i].age) //输出每个对象的年龄      &#125;  &lt;/script&gt;

内置对象
回想一下我们曾经使用过的 console.log，console其实就是 JavaScript 中内置的对象，该对象中存在一个方法叫 log，然后调用 log 这个方法，即 console.log()。
除了 console 对象外，JavaScritp 还有其它的内置的对象
Math
Math 是 JavaScript 中内置的对象，称为数学对象，这个对象下即包含了属性，也包含了许多的方法。
属性

Math.PI，获取圆周率

// 圆周率console.log(Math.PI);
方法

Math.random，生成 0 到 1 间的随机数

// 0 ~ 1 之间的随机数, 包含 0 不包含 1Math.random()

Math.ceil，数字向上取整

// 舍弃小数部分，整数部分加1Math.ceil(3.4)

Math.floor，数字向下取整

// 舍弃小数部分，整数部分不变Math.floor(4.68)

Math.round，四舍五入取整

// 取整，四舍五入原则Math.round(5.46539)Math.round(4.849)

Math.max，在一组数中找出最大的

// 找出最大值Math.max(10, 21, 7, 24, 13)

Math.min，在一组数中找出最小的

// 找出最小值Math.min(24, 18, 6, 19, 21)

Math.pow，幂方法

// 求某个数的多少次方Math.pow(4, 2) // 求 4 的 2 次方Math.pow(2, 3) // 求 2 的 3 次方

Math.sqrt，平方根

// 求某数的平方根Math.sqrt(16)
数学对象提供了比较多的方法，这里不要求强记，通过演示数学对象的使用，加深对对象的理解。
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Harbor共享存储高可用</title>
    <url>/posts/40301/</url>
    <content><![CDATA[
Harbor共享存储高可用
主机拓扑



角色
主机名
ip
系统
资源最低要求




Harbor1nginxKeepalived1
harbor1
192.168.48.106
OpenEuler22.03LTS
CPU：4核 内存：2G 硬盘：40G


Harbor2nginxKeepalived2
harbor2
192.168.48.107
OpenEuler22.03LTS
CPU：4核 内存：2G 硬盘：40G


postgresqlRedisNFS共享
zujian
192.168.48.108
OpenEuler22.03LTS
CPU：4核 内存：2G 硬盘：40G


高可用ip
192.168.48.100






系统架构图

基本配置
操作节点：[harbor1，harbour2，zujian]
vi jichu_init.sh
将以下脚本内容添加进去
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens160设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、dnsmasq、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl disable dnsmasq &amp;&gt; /dev/nullsystemctl stop firewalldsystemctl stop dnsmasqsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens160：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens160 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens160UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens160ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114nmcli c reloadnmcli c up ens 160echo &quot;4.优化ssh&quot;sed -i &quot;s#\#UseDNS yes#UseDNS no#g&quot; /etc/ssh/sshd_configsed -i &quot;s#GSSAPIAuthentication yes#GSSAPIAuthentication no#g&quot; /etc/ssh/sshd_configsystemctl restart sshdecho &quot;5.更改欧拉源为华为云源，速度快一点&quot;sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repoecho &quot;6.更新yum源软件包缓存&quot;yum clean all &amp;&amp; yum makecachednf update -yecho &quot;7.修改history格式及记录数&quot;sed -i &quot;s#HISTSIZE=1000##g&quot; /etc/profilecat &gt;&gt; /etc/profile &lt;&lt;EOFshopt -s histappendUSER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`export HISTFILE=~/.commandline_warriorexport HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S  `whoami`@$&#123;USER_IP&#125;: &quot;export HISTSIZE=200000export HISTFILESIZE=1000000export PROMPT_COMMAND=&quot;history -a&quot;EOFsource /etc/profileecho &quot;8.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.106 harbor1192.168.48.107 harbor2192.168.48.108 zujianEOFecho &quot;10.安装chrony服务，并同步时间&quot;dnf install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sourcesecho &quot;11、安装依赖包&quot;dnf install -y cmake gcc gcc-c++ perl readline readline-devel openssl openssl-devel zlib zlib-devel ncurses-devel readline readline-devel zlib zlib-develreboot
执行脚本命令格式：sh jichu_init.sh 主机名 主机位[harbor1] sh jichu_init.sh harbor1 106[harbor2] sh jichu_init.sh harbor2 107[zujian] sh jichu_init.sh zujian 108
配置ssh免密
操作节点：[harbor1，harbour2，zujian]
dnf install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;harbor1&quot; &quot;harbor2&quot; &quot;zujian&quot;)# 密码password=&quot;Lj201840.&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
安装高可用组件
操作节点:[harbor1，harbour2]
dnf install -y keepalived nginx
安装nginx
操作节点:[harbor1，harbour2]
cat &gt; /etc/nginx/nginx.conf &lt;&lt;&quot;EOF&quot;user nginx;worker_processes auto;error_log /var/log/nginx/error.log notice;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123;    worker_connections 1024;&#125;stream &#123;    log_format  main  &#x27;$remote_addr $upstream_addr - [$time_local] $status $upstream_bytes_sent&#x27;;    access_log  /var/log/nginx/harbor-access.log  main;    upstream harbor&#123;       server 192.168.48.106:8081;   #harbor1       server 192.168.48.107:8081;   #harbor2    &#125;    server &#123;       listen  80;       proxy_pass harbor;    &#125;&#125;http &#123;    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    keepalive_timeout   65;    types_hash_max_size 4096;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;        include /etc/nginx/conf.d/*.conf;    server &#123;        listen       8888 default_server;        server_name  _;        location / &#123;        &#125;    &#125;&#125;EOFsystemctl enable --now nginxnginx -s reload
安装安装keepalived
操作节点:[harbor1]
cat &gt;/etc/keepalived/keepalived.conf &lt;&lt; &quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;   notification_email &#123;     qianyios@qq.com   &#125;   router_id harbor1&#125;vrrp_instance zh &#123;    state MASTER    interface ens160    mcast_src_ip 192.168.48.106    virtual_router_id 107    priority 100    advert_int 1    nopreempt    authentication &#123;        auth_type PASS        auth_pass 1111    &#125;    virtual_ipaddress &#123;        192.168.48.100/24    &#125;    track_script &#123;        chk_nginx    &#125;&#125;vrrp_script chk_nginx &#123;    script &quot;/etc/keepalived/check_nginx.sh&quot;    interval 2    weight -20&#125;EOF
操作节点:[harbor2]
cat &gt;/etc/keepalived/keepalived.conf &lt;&lt; &quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;   notification_email &#123;     qianyios@qq.com   &#125;   router_id harbor2&#125;vrrp_instance zh &#123;    state BACKUP    interface ens160    mcast_src_ip 192.168.48.107    virtual_router_id 107    priority 99    advert_int 1    nopreempt    authentication &#123;        auth_type PASS        auth_pass 1111    &#125;    virtual_ipaddress &#123;        192.168.48.100/24    &#125;    track_script &#123;        chk_nginx    &#125;&#125;vrrp_script chk_nginx &#123;    script &quot;/etc/keepalived/check_nginx.sh&quot;    interval 2    weight -20&#125;EOF
配置检查脚本
操作节点:[harbor1，harbour2]
cat &gt;/etc/keepalived/check_nginx.sh &lt;&lt;&quot;EOF&quot;#!/bin/bashcounter=`ps -C nginx --no-header | wc -l`if [ $counter -eq 0 ]; then    systemctl start nginx    sleep 2    counter=`ps -C nginx --no-header | wc -l`    if [ $counter -eq 0 ]; then        systemctl stop keepalived    fifiEOF
启动服务
systemctl enable --now nginx keepalivednginx -s reload
查看VIP虚拟ip
[root@harbor1 ~]# ip a.............2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:0c:29:af:76:8c brd ff:ff:ff:ff:ff:ff    inet 192.168.48.106/24 brd 192.168.48.255 scope global noprefixroute ens160       valid_lft forever preferred_lft forever    inet 192.168.48.100/24 scope global secondary ens160   ###192.168.48.100/24就是刚刚设置的高可用ip       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:feaf:768c/64 scope link noprefixroute       valid_lft forever preferred_lft forever
安装postgresql
操作节点：[zujian]
安装
#创建postgres用户useradd postgrespasswd postgres#设置密码123456#编译安装postgresqlwget https://ftp.postgresql.org/pub/source/v16.2/postgresql-16.2.tar.gztar zxvf postgresql-16.2.tar.gz -C /usr/local/bin/cd /usr/local/bin/postgresql-16.2/./configure --prefix=/usr/local/postgresqlmake &amp;&amp; make install#建立数据目录mkdir -p /data/postgresql/data#创建日志目录mkdir -p /data/postgresql/log#创建socket目录mkdir -p /data/postgresql/tmp#授权chown -R postgres:postgres /usr/local/postgresql/chown -R postgres:postgres /data/postgresql#设置postgres环境su - postgrescdcat &lt;&lt; &quot;EOF&quot; &gt;&gt; ~/.bash_profilePGHOME=/usr/local/postgresqlexport PGHOMEPGDATA=/data/postgresql/dataexport PGDATAPATH=$PATH:$HOME/bin:$HOME/.local/bin:$PGHOME/binexport PATHEOFsource ~/.bash_profilepsql -V#初始化数据库initdb --username=postgres -D /data/postgresql/data#会有Success. You can now start the database server using:      #表示初始化成功#修改初始化的配置文件cat &gt; /data/postgresql/data/postgresql.conf &lt;&lt; &quot;EOF&quot;max_connections = 100                   # 允许最大连接数shared_buffers = 128MB                  # 内存大小dynamic_shared_memory_type = posix      # the default is usually the first optionmax_wal_size = 1GBmin_wal_size = 80MBlog_timezone = &#x27;Asia/Shanghai&#x27;datestyle = &#x27;iso, mdy&#x27;timezone = &#x27;Asia/Shanghai&#x27;lc_messages = &#x27;en_US.UTF-8&#x27;             # locale for system error messagelc_monetary = &#x27;en_US.UTF-8&#x27;             # locale for monetary formattinglc_numeric = &#x27;en_US.UTF-8&#x27;              # locale for number formattinglc_time = &#x27;en_US.UTF-8&#x27;                 # locale for time formattingdefault_text_search_config = &#x27;pg_catalog.english&#x27;listen_addresses = &#x27;*&#x27; #监听所有地址data_directory = &#x27;/data/postgresql/data&#x27;  # 数据目录指定port = 5432unix_socket_directories = &#x27;/data/postgresql/tmp&#x27;unix_socket_group = &#x27;&#x27;unix_socket_permissions = 0777logging_collector = onlog_directory = &#x27;/data/postgresql/log&#x27;log_rotation_size = 1GBlog_timezone = &#x27;Asia/Shanghai&#x27;log_min_duration_statement = 100EOF#设置远程连接cat &gt;&gt; /data/postgresql/data/pg_hba.conf &lt;&lt; EOFlocal   all             all                                     trusthost    all             all             0.0.0.0/0               passwordhost    all             all             ::1/128                 passwordhost    all             postgres             0.0.0.0/0           trustEOF#启动PostgreSQLpg_ctl -D /data/postgresql/data -l logfile start
进入数据库
psql -h 127.0.0.1 -p 5432 -U postgrespostgres=# \passwordEnter new password for user &quot;postgres&quot;:Enter it again:#输入密码123456postgres=# exit#重新启动pg_ctl -D /data/postgresql/data -l /data/postgresql/data/postgresql.log restart#提示一下信息成功（不是命令哈，不要去运行）pg_ctl: old server process (PID: 25461) seems to be gonestarting server anywaywaiting for server to start.... doneserver startedpsql -h 127.0.0.1 -p 5432 -U postgres#输入密码123456CREATE DATABASE registry;CREATE DATABASE notary_signer;CREATE DATABASE notary_servers;\lcreate user server with password &#x27;123456&#x27;;create user signer with password &#x27;123456&#x27;;\duGRANT ALL PRIVILEGES ON DATABASE registry to postgres;   GRANT ALL PRIVILEGES ON DATABASE notary_signer to postgres;   GRANT ALL PRIVILEGES ON DATABASE notary_servers to postgres;   exit


设置启动服务
操作节点[zujian]
#回到root用户下执行su - rootcat &gt;/etc/init.d/PG-start.sh&lt;&lt; &quot;EOF&quot;sudo -u postgres /usr/local/postgresql/bin/pg_ctl -D /data/postgresql/data startEOFcat &gt;/etc/init.d/PG-stop.sh&lt;&lt; &quot;EOF&quot;sudo -u postgres /usr/local/postgresql/bin/pg_ctl -D /data/postgresql/data stopEOFcat &gt;/etc/init.d/PG-restart.sh&lt;&lt;&quot;EOF&quot;sudo -u postgres /usr/local/postgresql/bin/pg_ctl -D /data/postgresql/data restartEOFsudo chmod +x /etc/init.d/PG-start.shsudo chmod +x /etc/init.d/PG-stop.shsudo chmod +x /etc/init.d/PG-restart.shcat &gt;/etc/systemd/system/postgresql.service &lt;&lt; &quot;EOF&quot;[Unit]Description=postgresql Service[Service]Type=oneshotuser=rootRemainAfterExit=trueExecStart=/usr/bin/sudo /etc/init.d/PG-start.shExecStop=/usr/bin/sudo /etc/init.d/PG-stop.shExecRestart=/usr/bin/sudo /etc/init.d/PG-restart.sh[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable --now postgresql
错误积累
#每次我启动pgsql的时候就有这个东西2024-09-14 14:34:03.196 CST [17746] HINT:  Is another postmaster (PID 16042) running in data directory &quot;/data/postgresql/data&quot;? stopped waitingpg_ctl: could not start server#意思是有个pid进程在运行，杀掉它就行了sudo kill -9 16042
安装redis
操作节点：[zujian]
安装redis
wget https://download.redis.io/releases/redis-7.2.4.tar.gztar zxvf redis-7.2.4.tar.gz mv redis-7.2.4 /usr/local/bin/cd /usr/local/bin/redis-7.2.4make &amp;&amp; make install
修改配置文件
vi /usr/local/bin/redis-7.2.4/redis.conf#bind 127.0.0.1 -::1  #注释掉bind的行，允许任何主机连接；daemonize yes       #将no修改为yes，使redis可以使用守护进程方式启动；requirepass 123456   #添加这行，设置redis连接的auth密码（123456）protected-mode no  #禁用保护模式以下是一步到位将以上四个命令全部实现sed -i &#x27;s/^bind 127.0.0.1 -::1/#bind 127.0.0.1 -::1/&#x27; /usr/local/bin/redis-7.2.4/redis.confsed -i &#x27;s/^daemonize no/daemonize yes/&#x27; /usr/local/bin/redis-7.2.4/redis.confecho -e &quot;\nrequirepass 123456&quot; &gt;&gt; /usr/local/bin/redis-7.2.4/redis.confsed -i &#x27;s/^protected-mode yes/protected-mode no/&#x27; /usr/local/bin/redis-7.2.4/redis.conf
启动服务
redis-server redis.conf
[root@zujian redis-7.2.4]# redis-server redis.conf2226:C 20 Apr 2024 17:10:45.039 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.
Redis在启动时可能会出现这样的日志：在分析这个问题之前， 首先要弄清楚什么是overcommit？ Linux操作系统对大部分申请内存的请求都回复yes， 以便能运行更多的程序。 因为申请内存后， 并不会马上使用内存， 这种技术叫做overcommit。如果Redis在启动时有上面的日志， 说明vm.overcommit_memory=0， Redis提示把它设置为1。
vm.overcommit_memory用来设置内存分配策略， 有三个可选值， 如表：可用内存代表物理内存与swap之和

解决办法：
echo &quot;vm.overcommit_memory=1&quot; &gt;&gt; /etc/sysctl.confsysctl vm.overcommit_memory=1redis-server redis.conf
再重新启动就可以查看版本和端口号了
[root@zujian redis-7.2.4]# redis-cli -vredis-cli 7.2.4[root@zujian redis-7.2.4]# ps aux |grep 6379root        2227  0.0  0.3  68412 10888 ?        Ssl  17:10   0:00 redis-server *:6379root        5427  0.0  0.0  22096  2300 pts/0    S+   17:19   0:00 grep --color=auto 6379#redis-server有这个就行
关闭服务（只是普及知识，测试可用，不要随意关闭）
redis-cli shutdown
客户端连接redis
操作节点：[zujian]
将redis-cli的工具复制到Harbor1，harbor2
查看redis-cli工具位置
[root@zujian]# which redis-cli/usr/local/bin/redis-cli
复制
which redis-cliscp /usr/local/bin/redis-cli harbor1:/usr/local/bin/scp /usr/local/bin/redis-cli harbor2:/usr/local/bin/
操作节点：[harbor1,harbor2]
redis-cli -h 192.168.48.108 -p 6379 -a 123456


到此redis安装成功
设置启动服务
cat &gt;/etc/init.d/redis-start.sh&lt;&lt; &quot;EOF&quot;/usr/local/bin/redis-server /usr/local/bin/redis-7.2.4/redis.confEOFcat &gt;/etc/init.d/redis-stop.sh&lt;&lt; &quot;EOF&quot;/usr/local/bin/redis-cli -a 123456 shutdownEOFsudo chmod +x /etc/init.d/redis-start.shsudo chmod +x /etc/init.d/redis-stop.shcat &gt;/etc/systemd/system/redis.service &lt;&lt; &quot;EOF&quot;[Unit]Description=redis Service[Service]Type=oneshotuser=rootRemainAfterExit=trueExecStart=/usr/bin/sudo /etc/init.d/redis-start.shExecStop=/usr/bin/sudo /etc/init.d/redis-stop.sh[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable --now redis
NFS共享存储安装
操作节点：[zujian]
dnf install -y nfs-utilssystemctl enable --now nfs#创建远程共享目录mkdir -p /data/harbor_datacat &gt;&gt; /etc/exports &lt;&lt; &quot;EOF&quot;/data/harbor_data 192.168.48.0/24(rw,no_root_squash)EOF#使配置生效exportfs -arv#生效结果[root@zujian ~]# showmount -eExport list for zujian:/data/harbor_data 192.168.48.0/24
操作节点：[harbor1,harbor2]
Harbor1、harbor2机器上安装nfs-utils客户端并挂载共享存储
dnf install -y nfs-utilssystemctl enable --now nfsmkdir -p /data/harbor_datacat &gt;&gt;/etc/fstab&lt;&lt;&quot;EOF&quot;192.168.48.108:/data/harbor_data /data/harbor_data nfs defaults 0 0EOFmount -adf -h | grep harbor#以下是挂载成功[root@harbor1 ~]# df -h | grep harbor192.168.48.108:/data/harbor_data   63G  3.0G   57G   6% /data/harbor_data[root@harbor2 ~]# df -h | grep harbor192.168.48.108:/data/harbor_data   63G  3.0G   57G   6% /data/harbor_data
harbor仓库安装
操作节点：[harbor1,harbor2]
安装docker
wget https://download.docker.com/linux/static/stable/x86_64/docker-26.0.1.tgztar xf docker-*.tgzcp docker/* /usr/bin/#创建containerd的service文件,并且启动cat &gt;/etc/systemd/system/containerd.service &lt;&lt;EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=1048576TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl enable --now containerd.service#准备docker的service文件cat &gt; /etc/systemd/system/docker.service &lt;&lt;EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.service containerd.serviceWants=network-online.targetRequires=docker.socket containerd.service[Service]Type=notifyExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sockExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=alwaysStartLimitBurst=3StartLimitInterval=60sLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTasksMax=infinityDelegate=yesKillMode=processOOMScoreAdjust=-500[Install]WantedBy=multi-user.targetEOF#准备docker的socket文件cat &gt; /etc/systemd/system/docker.socket &lt;&lt;EOF[Unit]Description=Docker Socket for the API[Socket]ListenStream=/var/run/docker.sockSocketMode=0660SocketUser=rootSocketGroup=docker[Install]WantedBy=sockets.targetEOFgroupadd dockersystemctl enable --now docker.socket  &amp;&amp; systemctl enable --now docker.service#验证mkdir /etc/dockercat &gt;/etc/docker/daemon.json &lt;&lt;EOF&#123;  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],  &quot;registry-mirrors&quot;: [    &quot;https://docker.mirrors.ustc.edu.cn&quot;,    &quot;http://hub-mirror.c.163.com&quot;,    &quot;https://pw860av8.mirror.aliyuncs.com&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;500m&quot;,    &quot;max-file&quot;: &quot;3&quot;    &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl restart dockerdocker -v
安装docker-compose
操作节点：[harbor1,harbor2]
wget https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-linux-x86_64mv docker-compose-linux-x86_64 /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-composedocker-compose version
配置内核参数并使之生效
操作节点：[harbor1,harbor2]
modprobe br_netfiltercat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1 #路由转发EOFsysctl -p
下载harbor包并配置文件
操作节点：[harbor1,harbor2]
下载离线包offline字样
wget https://github.com/goharbor/harbor/releases/download/v2.9.4/harbor-offline-installer-v2.9.4.tgztar zxvf harbor-offline-installer-v2.9.4.tgzmv harbor /var/cd /var/harbor/[root@harbor1 harbor]# lscommon.sh  harbor.v2.9.4.tar.gz  harbor.yml.tmpl  install.sh  LICENSE  preparecp harbor.yml.tmpl harbor.yml
配置harbor文件
操作节点：[harbor1]
vi /var/harbor/harbor.yml
hostname: 192.168.48.106  #harbor1http:  port: 8081  #https:       #先注释https协议，后面再实现 # port: 443 # certificate: /your/certificate/path # private_key: /your/private/key/path## 启用外部代理，启用后hostname将不再使用external_url: https://192.168.48.100#harbor页面密码harbor_admin_password: Harbor12345#配置NFS共享存储data_volume: /data/harbor_data_version: 2.9.0#配置数据库external_database:  harbor:    host: 192.168.48.108  # 数据库主机地址    port: 5432              # 数据库端口    db_name: registry    # 数据库名称    username: postgres        # 连接该数据库的用户名    password: 123456    # 连接数据库的密码    ssl_mode: disable    max_idle_conns: 50    max_open_conns: 100  notary_server:    host: 192.168.48.108    port: 5432    db_name: notary_server    username: postgres    password: 123456    ssl_mode: disable  notary_signer:    host: 192.168.48.108    port: 5432    db_name: notary_signer    username: postgres    password: 123456    ssl_mode: disable #配置redisexternal_redis:  host: 192.168.48.108:6379 #redis服务IP地址和端口号  password: 123456   #连接外部redis服务的密码  registry_db_index: 1    jobservice_db_index: 2 #job服务的数据库索引  chartmuseum_db_index: 3  #chartmuseum插件的Redis索引  trivy_db_index: 5   #Trivy扫描器的数据索引  idle_timeout_seconds: 30  #超时时间#启用metrics数据采集插件metric:  enabled: false  port: 9090  path: /metricstrivy:  ignore_unfixed: false  skip_update: false  skip_java_db_update: false  offline_scan: false  security_check: vuln  insecure: falsejobservice:  max_job_workers: 10  job_loggers:    - STD_OUTPUT    - FILE  logger_sweeper_duration: 1 #daysnotification:  webhook_job_max_retry: 3  webhook_job_http_client_timeout: 3 #secondslog:  level: info  local:    rotate_count: 50    rotate_size: 200M    location: /var/log/harborproxy:  http_proxy:  https_proxy:  no_proxy:  components:    - core    - jobservice    - trivyupload_purging:  enabled: true  age: 168h  interval: 24h  dryrun: falsecache:  enabled: false  expire_hours: 24
操作节点：[harbor2]
vi /var/harbor/harbor.yml
hostname: 192.168.48.107  #harbor2http:  port: 8081  #https:       #先注释https协议，后面再实现 # port: 443 # certificate: /your/certificate/path # private_key: /your/private/key/path## 启用外部代理，启用后hostname将不再使用external_url: https://192.168.48.100#harbor页面密码harbor_admin_password: Harbor12345#配置NFS共享存储data_volume: /data/harbor_data_version: 2.9.0#配置数据库external_database:  harbor:    host: 192.168.48.108  # 数据库主机地址    port: 5432              # 数据库端口    db_name: registry    # 数据库名称    username: postgres        # 连接该数据库的用户名    password: 123456    # 连接数据库的密码    ssl_mode: disable    max_idle_conns: 2    max_open_conns: 0notary_server:  host: 192.168.48.108  port: 5432  db_name: notary_server  username: postgres  password: 123456  ssl_mode: disablenotary_signer:  host: 192.168.48.108  port: 5432  db_name: notary_signer  username: postgres  password: 123456  ssl_mode: disable #配置redisexternal_redis:  host: 192.168.48.108:6379 #redis服务IP地址和端口号  password: 123456   #连接外部redis服务的密码  registry_db_index: 1    jobservice_db_index: 2 #job服务的数据库索引  chartmuseum_db_index: 3  #chartmuseum插件的Redis索引  trivy_db_index: 5   #Trivy扫描器的数据索引  idle_timeout_seconds: 30  #超时时间#启用metrics数据采集插件metric:  enabled: false  port: 9090  path: /metricstrivy:  ignore_unfixed: false  skip_update: false  skip_java_db_update: false  offline_scan: false  security_check: vuln  insecure: falsejobservice:  max_job_workers: 10  job_loggers:    - STD_OUTPUT    - FILE  logger_sweeper_duration: 1 #daysnotification:  webhook_job_max_retry: 3  webhook_job_http_client_timeout: 3 #secondslog:  level: info  local:    rotate_count: 50    rotate_size: 200M    location: /var/log/harborproxy:  http_proxy:  https_proxy:  no_proxy:  components:    - core    - jobservice    - trivyupload_purging:  enabled: true  age: 168h  interval: 24h  dryrun: falsecache:  enabled: false  expire_hours: 24
将配置文件注入到各级件中并安装
先提前下载镜像吧，这里用博主构建的镜像速度会快一点
docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/prepare:v2.9.4docker tag registry.cn-hangzhou.aliyuncs.com/qianyios/prepare:v2.9.4 goharbor/prepare:v2.9.4
开始注入
cd /var/harbor/./prepare

开始安装
cd /var/harbor/./install.sh

配置自启动
cat &gt;/usr/lib/systemd/system/harbor.service &lt;&lt; &quot;EOF&quot;[Unit]Description=HarborAfter=docker.service systemd-networkd.service systemd-resolved.service nfs-server.serviceRequires=docker.serviceDocumentation=http://github.com/vmware/harbor[Service]Type=simpleRestart=on-failureRestartSec=5ExecStart=/usr/local/bin/docker-compose -f /var/harbor/docker-compose.yml upExecStop=/usr/local/bin/docker-compose -f /var/harbor/docker-compose.yml down[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reloadsystemctl enable harbor --now
大坑来了，之前找了两个星期都没解决的
到此，harbor安装完成，但是你在网页可能会出现不能用admin登入，会显示密码错误你需要进行下一步安装证书
原因：首先pg数据库在安装harbor时创建的admin是用sha256协议加密的

而在我们harbor页面，我们并没有配置ssl证书，是http方式访问并没有sha256加密协议，意味着harbor再登入的时候，会出现密码错误，就是：网页登入验证===/===pg数据库验证，配置openssl证书，可以解决此问题,openssl包含sha256协议，这样就可以登入了。
OpenSSL是一个强大的加密库，广泛应用于互联网的各个角落，用于保护数据传输的安全。它实现了SSL和TLS协议，这些协议是现代网络安全的基石。
配置ssl证书
操作节点：[harbor1,harbor2]
生成ca证书
创建一个放置证书相关的目录，并使用cd进入该目录
mkdir /var/harbor/cert&amp;&amp; cd  /var/harbor/cert## 1. 生成CA证书私钥openssl genrsa -out ca.key 4096## 2. 生成CA证书，可调整 -subj 选项来表明域名名称等信息openssl req -x509 -new -nodes -sha512 -days 3650 \ -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.48.100&quot; \ -key ca.key \ -out ca.crt
生成服务器证书
认证证书通常包含证书请求.csr文件、签名证书.crt文件及私钥.key文件，我这里harbor配置的hostname是192.168.48.100，所以最终需要生成192.168.48.100.crt、192.168.48.100.csr、192.168.48.100.key三个文件。

key：证书私钥，一般利用rsa等算法生成
csr：证书请求文件，利用证书私钥生成证书请求文件，该文件包含了服务器和地址等信息，申请人将该文件提交给CA机构，CA机构会根据该文件所携带的私钥信息来进行签名生成证书
crt：证书文件

## 1. 生成私钥openssl genrsa -out 192.168.48.100.key 4096## 2. 生成csr文件openssl req -sha512 -new \    -subj &quot;/C=CN/ST=Beijing/L=Beijing/O=example/OU=Personal/CN=192.168.48.100&quot; \    -key 192.168.48.100.key \    -out 192.168.48.100.csr## 3. 生成ssl匹配多域名文，例如既想使用域名又需要通过127.0.0.1本地地址登陆测试，可使用subjectAltName参数来进行配置cat &gt; v3.ext &lt;&lt;-EOFauthorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentextendedKeyUsage = serverAuthsubjectAltName = @alt_names[alt_names]DNS.1=192.168.48.100DNS.2=127.0.0.1IP.1=192.168.48.100EOF## 4. 根据v3.ext及csr文件请求生成crt证书文件openssl x509 -req -sha512 -days 3650 \    -extfile v3.ext \    -CA ca.crt -CAkey ca.key -CAcreateserial \    -in 192.168.48.100.csr \    -out 192.168.48.100.crt
修改harbor配置文件
cat &gt;&gt; /var/harbor/harbor.yml &lt;&lt; &quot;EOF&quot;https:  port: 443  certificate: /var/harbor/cert/192.168.48.100.crt  private_key: /var/harbor/cert/192.168.48.100.keyEOF
重新启动
cd /var/harbordocker-compose down -v./preparedocker-compose up -d
镜像上传及拉取测试
操作节点：[harbor1,harbor2,zujian,qianyios（测试客户端）]
找一台客户端装好docker进行测试
[root@qianyios ~]# docker -vDocker version 26.0.1, build d260a54
新建私有镜像仓库

客户端免https登陆
# 此时直接使用docker login登陆到harbor中，会报错，下面hostname和port是harbor的配置文件中设置的名称及端口#以下是格式[root@xxxx harbor]# docker login [hostname]:[port]可能会出现以下情况#192.168.48.100是高可用vip[root@harbor1 ~]# docker login 192.168.48.100Username: adminPassword:Error response from daemon: Get &quot;https://192.168.48.100/v2/&quot;: tls: failed to verify certificate: x509: certificate signed by unknown authority[root@qianyios ~]# docker login 192.168.48.106:8081Username: adminPassword:Error response from daemon: Get &quot;https://192.168.48.106:8081/v2/&quot;: http: server gave HTTP response to HTTPS client[root@qianyios ~]## 客户端默认使用的是https协议，所以需要对docker做以下修改,在文件末尾添加insecure-registries[root@qianyios ~]# vim /etc/docker/daemon.json&#123;   ................  &quot;registry-mirrors&quot;: [],#无关紧要，不用看,  &quot;insecure-registries&quot;: [ &quot;192.168.48.100&quot; ],#重要加这行，别忘了如果他不是最后一行一定要在末尾加逗号 ................&#125;# 修改后，重启docker使其生效systemctl daemon-reloadsystemctl restart docker# 利用docker info查看是否添加上[root@qianyios ~]# docker infoContainers: 10 Running: 1 Paused: 0 Stopped: 9Images: 37... Experimental: false Insecure Registries:  192.168.48.100   ###要确保有这个才行  127.0.0.0/8 Registry Mirrors:
扩展知识-containerd私有仓库配置（可略过）
在今后的K8s版本可能也会用containerd做为k8s的容器运行时，那么配置私有仓库也是一个头疼的事情。
在/etc/containerd/config.toml会有以下两个信息，可以定位
[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs][plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]
要在以上两个信息下配置东西如下：（理解，我下面有一步到位命令，不用手动加）
[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.48.100&quot;.tls]    insecure_skip_verify = true  # 是否跳过安全认证  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.48.100&quot;.auth]    username = &quot;admin&quot;    password = &quot;Harbor12345&quot;[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]    endpoint = [&quot;https://registry-1.docker.io&quot;]  [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;192.168.48.100&quot;]    endpoint = [&quot;http://192.168.48.100&quot;]

添加Harbor信息
sed -i &#x27;/\[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs\]/a \        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.48.100&quot;.tls]\          insecure_skip_verify = true  # 是否跳过安全认证\        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs.&quot;192.168.48.100&quot;.auth]\          username = &quot;admin&quot;\          password = &quot;Harbor12345&quot;&#x27; /etc/containerd/config.tomlsed -i &#x27;/\[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors\]/a \        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;docker.io&quot;]\          endpoint = [&quot;https://registry-1.docker.io&quot;]\        [plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors.&quot;192.168.48.100&quot;]\          endpoint = [&quot;http://192.168.48.100&quot;]&#x27; /etc/containerd/config.toml
最后尝试下载镜像
crictl pull 192.168.48.100/cicd/jenkins:latest
这个是我自己上传的镜像，已经在harbor仓库了，我现在在有containerd的客户端进行拉取看看能不能成功

显然已经成功
进行登入测试
docker login 192.168.48.100[root@harbor1 ~]# docker login 192.168.48.100Username: adminPassword:WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded[root@qianyios ~]# docker login 192.168.48.100Username: adminPassword:WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded##经过测试，通过添加&quot;insecure-registries&quot;: [ &quot;192.168.48.100&quot; ]可以免除https登入
上传镜像测试
#下载一个nginx镜像，然后tag，再上传[root@qianyios ~]# docker pull nginxUsing default tag: latestlatest: Pulling from library/nginxa2abf6c4d29d: Pull completea9edb18cadd1: Pull complete589b7251471a: Pull complete186b1aaa4aa6: Pull completeb4df32aa5a72: Pull completea0bcbecc962e: Pull completeDigest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31Status: Downloaded newer image for nginx:latestdocker.io/library/nginx:latest#在此下载了最新版的nginx镜像tag为lastest
我们进入当刚刚创建的仓库，点推送指令
#推送镜像命令格式#docker tag 源镜像名[:TAG] 192.168.48.100/qianyios/新镜像名[:TAG]docker tag SOURCE_IMAGE[:TAG] 192.168.48.100/qianyios/REPOSITORY[:TAG]

#我们将nginx镜像打上tag   [root@qianyios ~]# docker imagesREPOSITORY   TAG       IMAGE ID       CREATED       SIZEnginx        latest    605c77e624dd   2 years ago   141MB#605的意思是镜像id的前三位数字，我们指定为V1标签，相当于版本号。[root@qianyios ~]# docker tag 605 192.168.48.100/qianyios/nginx:V1[root@qianyios ~]# docker imagesREPOSITORY                      TAG       IMAGE ID       CREATED       SIZE192.168.48.100/qianyios/nginx   V1        605c77e624dd   2 years ago   141MBnginx                           latest    605c77e624dd   2 years ago   141MB#开始上传[root@qianyios ~]# docker push 192.168.48.100/qianyios/nginx:V1The push refers to repository [192.168.48.100/qianyios/nginx]d874fd2bc83b: Pushed32ce5f6a5106: Pushedf1db227348d0: Pushedb8d6e692a25e: Pushede379e8aedd4d: Pushed2edcec3590a4: PushedV1: digest: sha256:ee89b00528ff4f02f2405e4ee221743ebc3f8e8dd0bfd5c4c20a2fa2aaa7ede3 size: 1570#去页面查看


我们去harbor1测试拉取镜像，会发现下载数变成了1
[root@harbor1 ~]# docker pull 192.168.48.100/qianyios/nginx:V1V1: Pulling from qianyios/nginxa2abf6c4d29d: Pull completea9edb18cadd1: Pull complete589b7251471a: Pull complete186b1aaa4aa6: Pull completeb4df32aa5a72: Pull completea0bcbecc962e: Pull completeDigest: sha256:ee89b00528ff4f02f2405e4ee221743ebc3f8e8dd0bfd5c4c20a2fa2aaa7ede3Status: Downloaded newer image for 192.168.48.100/qianyios/nginx:V1192.168.48.100/qianyios/nginx:V1[root@harbor1 ~]#


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S高可用集群（内部etcd）</title>
    <url>/posts/7158/</url>
    <content><![CDATA[
K8S高可用集群（内部etcd）
以下会用到的资源K8s1.28.2（内外部etcd高可用）所需资源
主机拓扑



主机名
ip1（NAT）
系统
磁盘
内存




master1
192.168.48.101
Centos7.9
100G
4G


master2
192.168.48.102
Centos7.9
100G
4G


master3
192.168.48.103
Centos7.9
100G
4G


node01
192.168.48.104
Centos7.9
100G
8G



基础配置
centos通过单独安装，非克隆。安装完后进行基本环境的配置，配置一下几个方面：

设置主机名
关闭NetworkManager、firewalld、dnsmasq、selinux
设置ens33
优化ssh
备份并新增清华yum源、epel源、docker-ce源、k8s源
更新yum源软件包缓存
修改history格式及记录数
添加hosts解析
关闭swap分区
安装chrony服务，并同步时间
配置limits.conf
安装必备工具
升级系统并重启

操作主机：[master1,master2,master3,node01]
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭NetworkManager、firewalld、dnsmasq、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl disable NetworkManager &amp;&gt; /dev/nullsystemctl disable dnsmasq &amp;&gt; /dev/nullsystemctl stop firewalldsystemctl stop NetworkManagersystemctl stop dnsmasqsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=ensernetBOOTPROTO=staticDEFROUTE=yesNAME=ens33DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2NETMASK=255.255.255.0GATEWAY=192.168.48.2DNS1=114.114.114.114EOFsystemctl restart networkecho &quot;4.优化ssh&quot;sed -i &quot;s#\#UseDNS yes#UseDNS no#g&quot; /etc/ssh/sshd_configsed -i &quot;s#GSSAPIAuthentication yes#GSSAPIAuthentication no#g&quot; /etc/ssh/sshd_configsystemctl restart sshdecho &quot;5.备份并新增清华yum源、epel源、docker-ce源、k8s源&quot;rm -rf /etc/yum.repos.d/*cat &gt; /etc/yum.repos.d/Centos-Base.repo &lt;&lt;EOF[base]name=CentOS-$releasever - Basebaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/os/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[updates]name=CentOS-$releasever - Updatesbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/updates/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/extras/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/centosplus/\$basearch/gpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7EOFcat &gt; /etc/yum.repos.d/epel.repo &lt;&lt;EOF[epel]name=Extra Packages for Enterprise Linux 7 - \$basearchbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/\$basearchfailovermensod=priorityenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7[epel-debuginfo]name=Extra Packages for Enterprise Linux 7 - \$basearch - Debugbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/\$basearch/debugfailovermensod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1[epel-source]name=Extra Packages for Enterprise Linux 7 - \$basearch - Sourcebaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMSfailovermensod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1EOFcat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFcurl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoecho &quot;6.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;7.修改history格式及记录数&quot;sed -i &quot;s#HISTSIZE=1000##g&quot; /etc/profilecat &gt;&gt; /etc/profile &lt;&lt;EOFshopt -s histappendUSER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`export HISTFILE=~/.commandline_warriorexport HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S  `whoami`@$&#123;USER_IP&#125;: &quot;export HISTSIZE=200000export HISTFILESIZE=1000000export PROMPT_COMMAND=&quot;history -a&quot;EOFsource /etc/profileecho &quot;8.添加hosts解析&quot;cat &gt;&gt; /etc/hosts &lt;&lt;EOF192.168.48.101 master1192.168.48.102 master2192.168.48.103 master3192.168.48.104 node01EOFecho &quot;9.关闭swap分区&quot;swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 &amp;&gt; /dev/nullsed -ri &#x27;/^[^#]*swap/s@^@#@&#x27; /etc/fstabecho &quot;10.安装ntpdate服务，并同步时间&quot;yum install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sourcesecho &quot;11.配置limits.conf&quot;ulimit -SHn 65535cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF* soft nofile 65536* hard nofile 131072* soft nproc 65535* hard nproc 655350* soft memlock unlimited* hard memlock unlimitedEOFecho &quot;12.必备工具安装&quot;yum install wget psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -yecho &quot;13.升级系统并重启&quot;yum update -y --exclude=kernel* &amp;&amp; reboot
sh k8s_system_init.sh 主机名 主机位[master1] sh k8s_system_init.sh master1 101[master2] sh k8s_system_init.sh master2 102[master3] sh k8s_system_init.sh master3 103[node01] sh k8s_system_init.sh node01 104
配置ssh免密
操作节点[master1]
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot; &quot;node01&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
内核及ipvs模块配置
此步骤是升级内核、配置ipvs模块，开启一些k8s集群中必须的内核参数。配置一下几个方面：

下载安装包到/server/soft
安装kernel
更改内核启动顺序
安装ipvsadm
配置ipvs模块
开启k8s集群必须的内核参数
配置完内核，重启服务器

操作主机：[master1,master2,master3,node01]
vi kernel_update.sh#!/bin/bashecho &quot;1.下载安装包到/server/soft&quot;mkdir -p /server/soft ; cd /server/softwget https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-6.6.3-1.el7.elrepo.x86_64.rpmwget https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-6.6.3-1.el7.elrepo.x86_64.rpmecho &quot;2.正在安装kernel&quot;yum localinstall -y kernel-ml*echo &quot;3.更改内核启动顺序&quot;grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfggrubby --args=&quot;user_namespace.enable=1&quot; --update-kernel=&quot;$(grubby --default-kernel)&quot;echo &quot;4.输出现在内核版本信息&quot;grubby --default-kernelecho &quot;5.安装ipvsadm&quot;yum install ipvsadm ipset sysstat conntrack libseccomp -y &amp;&gt; /dev/nullecho &quot;6.配置ipvs模块&quot;modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackcat &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOFip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipipEOFsystemctl enable --now systemd-modules-load.service &amp;&gt; /dev/nullecho &quot;7.开启k8s集群必须的内核参数&quot;cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1fs.may_detach_mounts = 1net.ipv4.conf.all.route_localnet = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 65536net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384EOFsysctl --systemecho &quot;8.配置完内核，重启服务器！&quot;reboot
sh kernel_update.sh
检查ipvs加载、内核版本验证
lsmod | grep --color=auto -e ip_vs -e nf_conntrackuname -a

高可用组件安装
haproxy配置
操作节点：[master1，master2,master3]
yum install keepalived haproxy -y
所有Master节点配置HAProxy，所有Master节点的HAProxy配置相同。
操作节点：[master1，master2]cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt;&quot;EOF&quot;global  maxconn  2000  ulimit-n  16384  log  127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode  http  option  httplog  timeout connect 5000  timeout client  50000  timeout server  50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri /monitorfrontend k8s-master  bind 0.0.0.0:16443  bind 127.0.0.1:16443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp  option tcplog  option tcp-check  balance roundrobin  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server master1   192.168.48.101:6443  check  server master2   192.168.48.102:6443  check  server master3   192.168.48.103:6443  checkEOF
Keepalived配置
操作节点：[master1，master2,master3]
所有Master节点配置Keepalived，以下三个Master节点配置注意ip和网卡。
操作节点：[master1]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    mcast_src_ip 192.168.48.101    virtual_router_id 51    priority 101    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master2]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.102    virtual_router_id 51    priority 100    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master3]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.103    virtual_router_id 51    priority 99    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
配置Keepalived健康检查文件
操作节点：[master1，master2,master3]
cat &gt; /etc/keepalived/check_apiserver.sh &lt;&lt;&quot;EOF&quot; #!/bin/bash err=0 for k in $(seq 1 3) do    check_code=$(pgrep haproxy)    if [[ $check_code == &quot;&quot; ]]; then        err=$(expr $err + 1)        sleep 1        continue    else        err=0        break    fi done  if [[ $err != &quot;0&quot; ]]; then    echo &quot;systemctl stop keepalived&quot;    /usr/bin/systemctl stop keepalived    exit 1 else    exit 0 fiEOFchmod +x /etc/keepalived/check_apiserver.sh
启动haproxy和keepalived
操作节点：[master，master2,master3]systemctl daemon-reloadsystemctl enable --now haproxysystemctl enable --now keepalived
测试集群负载均衡高可用
查看master1的vip
ip a

模拟master1的宕机测试，看看vip会不会漂移到master2去
[master1] poweroff

这时候查看master2的ip列表
[master2] ip a

结论：这时可以知道，负载均衡集群成功，当master1出现宕机情况，vip会从master1漂移到master2
docker安装
安装docker
操作节点[master1，master2，master3,node01]
wget https://download.docker.com/linux/static/stable/x86_64/docker-24.0.7.tgztar xf docker-*.tgzcp -rf docker/* /usr/bin/#创建containerd的service文件,并且启动cat &gt;/etc/systemd/system/containerd.service &lt;&lt;EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=1048576TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl enable --now containerd.service#准备docker的service文件cat &gt; /etc/systemd/system/docker.service &lt;&lt;EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.service containerd.serviceWants=network-online.targetRequires=docker.socket containerd.service[Service]Type=notifyExecStart=/usr/bin/dockerd --config-file=/etc/docker/daemon.json -H fd://containerd=/run/containerd/containerd.sockExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=alwaysStartLimitBurst=3StartLimitInterval=60sLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTasksMax=infinityDelegate=yesKillMode=processOOMScoreAdjust=-500[Install]WantedBy=multi-user.targetEOF#准备docker的socket文件cat &gt; /etc/systemd/system/docker.socket &lt;&lt;EOF[Unit]Description=Docker Socket for the API[Socket]ListenStream=/var/run/docker.sockSocketMode=0660SocketUser=rootSocketGroup=docker[Install]WantedBy=sockets.targetEOFgroupadd dockersystemctl enable --now docker.socket  &amp;&amp; systemctl enable --now docker.service#验证mkdir /etc/dockersudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,		&quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart docker
安装cri-docker
操作节点[master1，master2，master3,node01]
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.7/cri-dockerd-0.3.7.amd64.tgztar -zxvf cri-dockerd-0.3.7.amd64.tgzcp cri-dockerd/cri-dockerd  /usr/bin/chmod +x /usr/bin/cri-dockerd#写入启动配置文件cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF[Unit]Description=CRI Interface for Docker Application Container EngineDocumentation=https://docs.mirantis.comAfter=network-online.target firewalld.service docker.serviceWants=network-online.targetRequires=cri-docker.socket [Service]Type=notifyExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9ExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=always StartLimitBurst=3 StartLimitInterval=60s LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinity TasksMax=infinityDelegate=yesKillMode=process [Install]WantedBy=multi-user.targetEOF#写入socket配置文件cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF[Unit]Description=CRI Docker Socket for the APIPartOf=cri-docker.service [Socket]ListenStream=%t/cri-dockerd.sockSocketMode=0660SocketUser=rootSocketGroup=docker [Install]WantedBy=sockets.targetEOFsystemctl daemon-reload &amp;&amp; systemctl enable cri-docker --now
K8S集群安装
安装k8s所需的工具
操作节点[master1，master2，master3,node01]yum -y install  kubeadm kubelet kubectl#为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，配置如下：sed -i &#x27;s/^KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;/g&#x27; /etc/sysconfig/kubelet#设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动systemctl enable kubeletsystemctl enable kubelet.service
集群初始化
操作节点[master1]cat &gt; kubeadm-config.yaml &lt;&lt; EOFapiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.48.101  bindPort: 6443nodeRegistration:  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  taints: null---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta3certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: 1.28.2networking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;controlPlaneEndpoint: &quot;192.168.48.200:16443&quot;---apiVersion: kubeproxy.config.k8s.io/v1alpha1bindAddress: 0.0.0.0bindAddressHardFail: falseclientConnection:  acceptContentTypes: &quot;&quot;  burst: 0  contentType: &quot;&quot;  kubeconfig: /var/lib/kube-proxy/kubeconfig.conf  qps: 0clusterCIDR: &quot;&quot;configSyncPeriod: 0sconntrack:  maxPerCore: null  min: null  tcpCloseWaitTimeout: null  tcpEstablishedTimeout: nulldetectLocal:  bridgeInterface: &quot;&quot;  interfaceNamePrefix: &quot;&quot;detectLocalMode: &quot;&quot;enableProfiling: falsehealthzBindAddress: &quot;&quot;hostnameOverride: &quot;&quot;iptables:  localhostNodePorts: null  masqueradeAll: false  masqueradeBit: null  minSyncPeriod: 0s  syncPeriod: 0sipvs:  excludeCIDRs: null  minSyncPeriod: 0s  scheduler: &quot;&quot;  strictARP: false  syncPeriod: 0s  tcpFinTimeout: 0s  tcpTimeout: 0s  udpTimeout: 0skind: KubeProxyConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0metricsBindAddress: &quot;&quot;mode: &quot;&quot;nodePortAddresses: nulloomScoreAdj: nullportRange: &quot;&quot;showHiddenMetricsForVersion: &quot;&quot;winkernel:  enableDSR: false  forwardHealthCheckVip: false  networkName: &quot;&quot;  rootHnsEndpointName: &quot;&quot;  sourceVip: &quot;&quot;---apiVersion: kubelet.config.k8s.io/v1beta1authentication:  anonymous:    enabled: false  webhook:    cacheTTL: 0s    enabled: true  x509:    clientCAFile: /etc/kubernetes/pki/ca.crtauthorization:  mode: Webhook  webhook:    cacheAuthorizedTTL: 0s    cacheUnauthorizedTTL: 0scgroupDriver: systemdclusterDNS:- 10.96.0.10clusterDomain: cluster.localcontainerRuntimeEndpoint: &quot;&quot;cpuManagerReconcilePeriod: 0sevictionPressureTransitionPeriod: 0sfileCheckFrequency: 0shealthzBindAddress: 127.0.0.1healthzPort: 10248httpCheckFrequency: 0simageMinimumGCAge: 0skind: KubeletConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0memorySwap: &#123;&#125;nodeStatusReportFrequency: 0snodeStatusUpdateFrequency: 0srotateCertificates: trueruntimeRequestTimeout: 0sshutdownGracePeriod: 0sshutdownGracePeriodCriticalPods: 0sstaticPodPath: /etc/kubernetes/manifestsstreamingConnectionIdleTimeout: 0ssyncFrequency: 0svolumeStatsAggPeriod: 0sEOFkubeadm config migrate --old-config kubeadm-config.yaml --new-config new.yaml
准备k8s所需的镜像
操作节点[master1,master2,master3]kubeadm config images pull --config /root/new.yaml 

master1节点初始化
操作节点[master1]
kubeadm init --config /root/new.yaml  --upload-certs
会生成信息

记录信息后面会用到
初始化成功以后，会产生Token值，用于其他节点加入时使用，因此要记录下初始化成功生成的token值（令牌值），有效期24小时，后续需要操作可以重新生成Token
操作节点[master1]
kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 45eeadfc9135a368d08582a90c779c0934d24c54f56134c65d67516f5e6f981dkubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
操作kubect报错：

此时通过kubectl操作，会出现失败，因为还没有将集群的&quot;钥匙&quot;交给root用户。/etc/kubernetes/admin.conf 文件是 Kubernetes（K8s）集群中的管理员配置文件，它包含了用于管理集群的身份验证和访问信息。所以下面进行配置环境变量，用于访问Kubernetes集群：
添加环境变量
操作节点[master1]
mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config
添加其他master节点至集群中
操作节点[master2,master3]
操作节点[master2,master3]kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 45eeadfc9135a368d08582a90c779c0934d24c54f56134c65d67516f5e6f981d \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
接着给master2添加环境变量
操作节点[master2,master3]mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config

这里没有展示master3的图片，但是步骤一样的
模拟Token过期重新生成并加入Node节点
假设加入集群的token过期了。node01无法加入了，这里就模拟一下这种情况

Token过期后生成新的token：

kubeadm token create --print-join-command
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
其中，192.168.48.200:16443 是你的 Kubernetes API 服务器的地址和端口，tn5q1b.7w1jj77ewup7k2in 是新的令牌，sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f 是令牌的 CA 证书哈希值。

Master需要生成–certificate-key：

kubeadm init phase upload-certs --upload-certs
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
其中，5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 是证书密钥。

生成新的Token用于集群添加新Node节点

操作节点[node01]
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 

这时在master查看node状态（显示为notready不影响）

模拟新加master节点的加入K8S集群中
假设我们新加master节点的话，就拼接token，从刚刚生成的token拼接
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
这里提取信息1
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
接着
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
这里提取信息2：这里前面要加上--control-plane --certificate-key
--control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
合成
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 \        --cri-socket unix:///var/run/cri-dockerd.sock                kubeadm join 192.168.48.200:16443 --token lnkno8.u4v1l8n9pahzf0kj \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 41e441fe56cb4bdfcc2fc0291958e6b1da54d01f4649b6651471c07583f85cdf \        --cri-socket unix:///var/run/cri-dockerd.sock
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
图示

安装calico网络插件
操作节点[master1]
添加解析记录，否则无法访问
echo &#x27;185.199.108.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hosts
应用operator资源清单文件
网络组件有很多种，只需要部署其中一个即可，推荐Calico。
Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。
Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。
此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。
curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O
[root@master1 ~]# vim calico.yaml#添加两行- name: IP_AUTODETECTION_METHOD  value: interface=ens33#ens33是你的网卡

sed -i &#x27;s| docker.io/calico/| registry.cn-hangzhou.aliyuncs.com/qianyios/|&#x27; calico.yamlkubectl apply -f calico.yaml

监视kube-system命名空间中pod运行情况
等待估计20分钟左右吧(确保全部running)
kubectl get pods -n kube-system

拿掉master节点的污点
节点 master1 和 master2 都有一个名为 node-role.kubernetes.io/control-plane:NoSchedule 的污点。这个污点的作用是阻止普通的 Pod 被调度到这些节点上，只允许特定的控制平面组件（如 kube-apiserver、kube-controller-manager 和 kube-scheduler）在这些节点上运行。
这种设置有助于确保控制平面节点专门用于运行 Kubernetes 的核心组件，而不会被普通的工作负载占用。通过将污点添加到节点上，可以确保只有被授权的控制平面组件才能在这些节点上运行。
kubectl describe node master1 | grep -i taintkubectl describe node master2 | grep -i taintkubectl describe node master3 | grep -i taint

去除污点
kubectl taint node master1 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master2 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master3 node-role.kubernetes.io/control-plane:NoSchedule-

安装dashboard
操作节点[master1]
下载文件
https://github.com/kubernetes/dashboard/releases/tag/v2.7.0
目前最新版本v2.7.0
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yamlsed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yamlsed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml

修改配置文件
vim recommended.yaml---kind: ServiceapiVersion: v1metadata:  labels:    app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  type: NodePort  selector:    app: kubernetes-dashboard---

运行dashboard
kubectl apply -f recommended.yaml

检查运行状态
kubectl get pods -n kubernetes-dashboardkubectl get pod,svc -o wide -n kubernetes-dashboard

创建cluster-admin用户
创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin#获取用户Tokenkubectl create token dashboard-admin -n kubernetes-dashboard

记录token
eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw
登录浏览器访问
https://192.168.48.200:30001输入token：----eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw----

部署一个nginx测试
操作节点[master1]
vim web.yamlkind: Deployment#apiVersion: extensions/v1beta1apiVersion: apps/v1metadata:  labels:    app: web-deployment-label  name: web-deployment  namespace: defaultspec:  replicas: 3  selector:    matchLabels:      app: web-selector  template:    metadata:      labels:        app: web-selector    spec:      containers:      - name: web-container        image: nginx:latest        imagePullPolicy: Always        ports:        - containerPort: 80          protocol: TCP          name: http        - containerPort: 443          protocol: TCP          name: https---kind: ServiceapiVersion: v1metadata:  labels:    app: web-service-label  name: web-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: 80    protocol: TCP    targetPort: 80    nodePort: 30080  - name: https    port: 443    protocol: TCP    targetPort: 443    nodePort: 30443  selector:    app: web-selector    kubectl apply -f web.yaml 

### 查看nginx的pod 的详细信息kubectl get deploy,svc,pod -o wide

访问nginx网站
http://192.168.48.200:30080


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 8 stream 部署 kvm</title>
    <url>/posts/17511/</url>
    <content><![CDATA[Centos 8 stream 部署 kvm
环境部署



网卡模式
NAT模式




ip
192.168.48.10


内存
4G


核心
4


硬盘
100G


功能
AMD-V



设置主机名
[root@localhost ~]# hostnamectl set-hostname KVM &amp;&amp; bash[root@KVM ~]#
设置网络
设置虚拟机网络（ens160是NAT模式）
[root@KVM ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens160BOOTPROTO=staticONBOOT=yesIPADDR=192.168.48.10PREFIX=24GATEWAY=192.168.48.2DNS1=192.168.48.2DOMAIN=114.114.114.114[root@KVM ~]# nmcli c reload[root@KVM ~]# nmcli c up ens160Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/4)[root@KVM ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host       valid_lft forever preferred_lft forever2: ens160: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:0c:29:ce:a9:48 brd ff:ff:ff:ff:ff:ff    altname enp3s0    inet 192.168.48.10/24 brd 192.168.48.255 scope global noprefixroute ens160       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fece:a948/64 scope link noprefixroute       valid_lft forever preferred_lft forever[root@KVM ~]# ping -c 4 jd.comPING jd.com (111.13.149.108) 56(84) bytes of data.64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=1 ttl=48 time=47.8 ms64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=2 ttl=48 time=48.2 ms64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=3 ttl=48 time=48.2 ms64 bytes from 111.13.149.108 (111.13.149.108): icmp_seq=4 ttl=48 time=48.3 ms--- jd.com ping statistics ---4 packets transmitted, 4 received, 0% packet loss, time 6077msrtt min/avg/max/mdev = 47.845/48.146/48.297/0.235 ms
检查虚拟机是否支持虚拟化
勾选cpu虚拟化（宿主机是amd芯片）

查看虚拟化是否支持
[root@KVM ~]# lscpuVirtualization:      AMD-V说明已支持虚拟化
设置阿里yum源
[root@KVM ~]# cp /etc/yum.repos.d/CentOS-Stream-BaseOS.repo /etc/yum.repos.d/CentOS-Stream-BaseOS.repo.bak[root@KVM ~]# sed -i &#x27;s/mirrorlist/#mirrorlist/&#x27; /etc/yum.repos.d/CentOS-Stream-BaseOS.repo[root@KVM ~]# sed -i &#x27;s/#baseurl=http:\/\/mirror.centos.org/baseurl=http:\/\/mirrors.aliyun.com/g&#x27; /etc/yum.repos.d/CentOS-Stream-BaseOS.repo[root@KVM ~]# yum clean all &amp;&amp; yum makecache0 files removedCentOS Stream 8 - AppStream                                        14 MB/s |  27 MB     00:01CentOS Stream 8 - BaseOS                                          4.0 MB/s |  26 MB     00:06CentOS Stream 8 - Extras                                           28 kB/s |  18 kB     00:00CentOS Stream 8 - Extras common packages                          8.2 kB/s | 5.2 kB     00:00Metadata cache created.[root@KVM ~]#
安装kvm
安装kvm及其工具
[root@KVM ~]# yum install qemu-kvm qemu-img  virt-manager libvirt virt-manager libvirt-client virt-install virt-viewer -yWaiting for process with pid 8674 to finish.Last metadata expiration check: 0:00:05 ago on Sun 08 Jan 2023 06:03:34 AM EST.Package qemu-kvm-15:6.2.0-20.module_el8.7.0+1218+f626c2ff.1.x86_64 is already installed.Package qemu-img-15:6.2.0-20.module_el8.7.0+1218+f626c2ff.1.x86_64 is already installed.Package virt-manager-3.2.0-4.el8.noarch is already installed.Package libvirt-8.0.0-10.module_el8.7.0+1218+f626c2ff.x86_64 is already installed.Package libvirt-client-8.0.0-10.module_el8.7.0+1218+f626c2ff.x86_64 is already installed.Package virt-install-3.2.0-4.el8.noarch is already installed.Package virt-viewer-9.0-11.el8.x86_64 is already installed.Dependencies resolved.Nothing to do.Complete!
启动libvirtd服务
启动服务并设置韦开机自启动，查看状态
[root@KVM ~]# systemctl enable --now libvirtd[root@KVM ~]# systemctl status libvirtd● libvirtd.service - Virtualization daemon   Loaded: loaded (/usr/lib/systemd/system/libvirtd.service; enabled; vendor preset: enabled)   Active: active (running) since Sun 2023-01-08 06:05:12 EST; 12s ago     Docs: man:libvirtd(8)           https://libvirt.org
验证是否已加载kvm模块
[root@KVM ~]# lsmod | grep kvmkvm_amd               143360  0ccp                   106496  1 kvm_amdkvm                   942080  1 kvm_amdirqbypass              16384  1 kvm
[root@KVM ~]# virsh list Id   Name   State--------------------说明kvm安装成功
设置宿主机网络（kvm这个机子）
查看网络情况
KVN软件安装后默认以NAT方式实现网络通信。为了让KVM虚拟机能够与宿主机、本地主机、互联网相互通信，需将宿主机（KVM这个机子）网络设置为bridge方式。
ip a
lo为回环接口，该接口不从外界接收和发送数据包，仅在操作系统内部接收和发送数据包
ens160是以太网接口，与网卡对应，每个硬件网卡对应一个以太网接口
virbr0为虚拟网络接口，由kvm创建，为连接其上的kvm虚拟机网络提供访问外部网络的功能
创建bridge
创建 bridge 时需使用nmcli命令创建 br0，并将其绑定到可以正常工作的网络接口上，同时让br0成为连接宿主机与互联网的接口。
[root@KVM ~]# nmcli connection add type bridge con-name br0 ifname br0 autoconnect yesConnection &#x27;br0&#x27; (ac3429bc-907c-4ad1-bd54-bbf39d853a53) successfully added.查看是否创建成功[root@KVM ~]# nmcli cNAME    UUID                                  TYPE      DEVICEbr0     ac3429bc-907c-4ad1-bd54-bbf39d853a53  bridge    br0ens160  0d45e631-b256-4e08-b8d8-2c42b9481594  ethernet  ens160virbr0  7075d19e-a20c-43da-b161-e7c7519febdb  bridge    virbr0网桥创建成功后会自动生成配置文件[root@KVM ~]# ls -l /etc/sysconfig/network-scripts/-rw-r--r--. 1 root root 312 Jan  8 06:20 ifcfg-br0-rw-r--r--. 1 root root 365 Jan  8 05:40 ifcfg-ens160
设置br0和ens160网卡
将br0桥接到ens160
[root@KVM ~]# vi /etc/sysconfig/network-scripts/ifcfg-br0BOOTPROTO=staticIPADDR=192.168.48.10GATEWAY=192.168.48.2PREFIX=24DNS=114.114.114.114[root@KVM ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens160BOOTPROTO=noneBRIDGE=br0[root@KVM ~]# nmcli c reload[root@KVM ~]# nmcli c drow br0r此时如果你是用ssh工具连着的，你会断开，此时你要去vm那里输入[root@KVM ~]# nmcli c up br0[root@KVM ~]# nmcli c up ens160然后等1分钟左右，就可以连上ssh工具了
测试网络连通性[root@KVM ~]# ping -c 2 jd.comPING jd.com (211.144.24.218) 56(84) bytes of data.64 bytes from 211.144.24.218 (211.144.24.218): icmp_seq=1 ttl=128 time=50.7 ms64 bytes from 211.144.24.218 (211.144.24.218): icmp_seq=2 ttl=128 time=51.9 ms--- jd.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1002msrtt min/avg/max/mdev = 50.683/51.286/51.890/0.644 ms[root@KVM ~]#
创建kvm虚拟机



存储池
存放目录
内容规划




disk
/opt/disk
存放KVM磁盘文件


存放iso
/opt/iso
存放待安装的ISO文件



创建iso存储池
[root@KVM ~]# mkdir -p /opt/iso[root@KVM ~]# chown root:root /opt/iso/[root@KVM ~]# chmod 777 /opt/iso/[root@KVM ~]# virsh pool-define-as iso --type dir --target /opt/iso/ Pool iso--type defined#名称为iso的存储池定义成功如果名字打错 用virsh pool-destroy [名字]virsh pool-undefine [名字] 删除[root@KVM ~]# virsh pool-list --all Name   State      Autostart------------------------------ iso    inactive   no[root@KVM ~]# virsh pool-build isoPool iso built#创建名为iso的存储池[root@KVM ~]# virsh pool-start isoPool iso started#启动iso存储池[root@KVM ~]# virsh pool-autostart isoPool iso marked as autostarted#设置iso存储池自启动查看iso信息[root@KVM ~]# virsh pool-info isoName:           isoUUID:           a966995e-2722-4a3f-a318-e158a642439eState:          runningPersistent:     yesAutostart:      yesCapacity:       63.84 GiBAllocation:     2.75 GiBAvailable:      61.09 GiB
创建disk存储池
[root@KVM ~]# mkdir -p /opt/disk[root@KVM ~]# chown root:root /opt/disk/[root@KVM ~]# chmod 777 /opt/disk/[root@KVM ~]# virsh pool-define-as disk --type dir --target /opt/disk/ Pool disk defined[root@KVM ~]# virsh pool-build diskPool disk built[root@KVM ~]# virsh pool-start diskPool disk started[root@KVM ~]# virsh pool-autostart diskPool disk marked as autostarted[root@KVM ~]# virsh pool-info diskName:           diskUUID:           30d784dc-386b-46e6-a22b-79a3b3447354State:          runningPersistent:     yesAutostart:      yesCapacity:       63.84 GiBAllocation:     2.75 GiBAvailable:      61.09 GiB
获取Centos7
下载Centos7最小化版本到ISO目录下（网络方式）
[root@KVM ~]# yum install -y wget[root@KVM ~]# wget -O /opt/iso/Centos7.iso https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso--2023-01-08 08:09:00--  https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.isoResolving mirrors.aliyun.com (mirrors.aliyun.com)... 120.241.238.243, 120.241.238.242, 120.241.238.241, ...Connecting to mirrors.aliyun.com (mirrors.aliyun.com)|120.241.238.243|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 1020264448 (973M) [application/x-cd-image]Saving to: ‘/opt/iso/Centos7.iso’/opt/iso/Centos7.iso     100%[================================&gt;] 973.00M  1.53MB/s    in 10m 54s2023-01-08 08:19:54 (1.49 MB/s) - ‘/opt/iso/Centos7.iso’ saved [1020264448/1020264448][root@KVM ~]# ll /opt/isototal 996352-rw-r--r--. 1 root root 1020264448 Nov  3  2020 Centos7.iso
也可以本地下载好后，上传至iso目录（本地方式）
下载连接：https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso
[root@KVM ~]# ll /opt/isototal 996352-rw-r--r--. 1 root root 1020264448 Nov  3  2020 Centos7.iso
安装Centos7
无界面安装Centos7
[root@KVM ~]# virt-install --virt-type=kvm --name=Centos7 --vcpus=1 --memory=2048 --network bridge=br0,model=virtio --os-type=linux --os-variant=rhel7.7 --location=/opt/iso/Centos7.iso --disk /opt/disk/Centos7.qcow2,format=qcow2,size=10 --console=pty,target_type=serial --graphics=none --extra-args=&quot;console=tty0 console=ttyS0&quot;Starting install...Retrieving file vmlinuz...                                                 | 6.5 MB  00:00:00Retrieving file initrd.img...                                              |  53 MB  00:00:00Allocating &#x27;Centos7.qcow2&#x27;                                                 |  10 GB  00:00:00Running text console command: virsh --connect qemu:///system console Centos7Connected to domain &#x27;Centos7&#x27;......进入安装界面Connected to domain &#x27;Centos7&#x27;  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;b&#x27; to begin installation |  &#x27;r&#x27; to refresh]:   Please make your choice from above [&#x27;q&#x27; to quit | &#x27;b&#x27; to begin installation |================================================================================================================================================================Installation 1) [x] Language settings                 2) [!] Time settings        (English (United States))                (Timezone is not set.) 3) [x] Installation source               4) [x] Software selection        (Local media)                            (Minimal Install) 5) [!] Installation Destination          6) [x] Kdump        (No disks selected)                      (Kdump is enabled) 7) [ ] Network configuration             8) [!] Root password        (Not connected)                          (Password is not set.) 9) [!] User creation        (No user will be created)  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;b&#x27; to begin installation |  &#x27;r&#x27; to refresh]:   Please make your choice from above [&#x27;q&#x27; to quit | &#x27;b&#x27; to begin installation |
输入2设置时区
================================================================================================================================================================Time settingsTimezone: not setNTP servers:not configured 1)  Set timezone 2)  Configure NTP servers  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;c&#x27; to continue |  &#x27;r&#x27; to refresh]:================================================================================================================================================================按1根据提示选择Asia/shanghai   然后按c
输入5设置磁盘（Installation Destination ）
Probing storage...Installation Destination[x] 1) : 10 GiB (vda)1 disk selected; 10 GiB capacity; 10 GiB free ...  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;c&#x27; to continue |  &#x27;r&#x27; to refresh]:Autopartitioning Options再按c================================================================================[ ] 1) Replace Existing Linux system(s)[x] 2) Use All Space[ ] 3) Use Free SpaceInstallation requires partitioning of your hard drive. Select what space to usefor the install target.  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;c&#x27; to continue |  再按c================================================================================Partition Scheme Options[ ] 1) Standard Partition[ ] 2) Btrfs[x] 3) LVM[ ] 4) LVM Thin ProvisioningSelect a partition scheme configuration.  Please make your choice from above [&#x27;q&#x27; to quit | &#x27;c&#x27; to continue |  &#x27;r&#x27; to refresh]: cGenerating updated storage configurationChecking storage configuration...
按8设置root密码
  &#x27;r&#x27; to refresh]: 8================================================================================        (Not connected) 9) [!] User creation================================================================================Please select new root password. You will have to type it twice.Password:Password (confirm):================================================================================================================================================================QuestionThe password you have provided is weak: The password fails the dictionary check- it is too simplistic/systematic.Would you like to use it anyway?Please respond &#x27;yes&#x27; or &#x27;no&#x27;: yes
全部设置完成后按b确认
  &#x27;r&#x27; to refresh]: b================================================================================================================================================================ProgressSetting up the installation environment.Creating disklabel on /dev/vda.Creating xfs on /dev/vda1.Creating lvmpv on /dev/vda2.Creating swap on /dev/mapper/centos-swap.Creating xfs on /dev/mapper/centos-root.Running pre-installation scripts.Starting package installation process就会开始安装
进入登入界面
CentOS Linux 7 (Core)Kernel 3.10.0-1160.el7.x86_64 on an x86_64localhost login:
管理kvm虚拟机
连接KVM虚拟机

[root@KVM ~]# virsh console Centos7Connected to domain &#x27;Centos7&#x27;Escape character is ^] (Ctrl + ]error: operation failed: Active console session exists for this domain如果你之前连接过，没有退出，但是你与宿主机的ssh断了，就会出现这种问题，也就是你之前的连接控制台的连接还存在；每次连接kvm之后要退出 ctrl+] 就可以退出解决办法：[root@KVM ~]# ps  -ef  |grep virshroot       65402   61750  0 02:26 pts/0    00:00:00 virsh --connect qemu:///system console Centos7root       68540   66569  0 02:35 pts/2    00:00:00 grep --color=auto virsh[root@KVM ~]# kill -9 61750[root@KVM ~]# kill -9 65402

查看KVM虚拟机状态
[root@KVM ~]# virsh list Id   Name      State------------------------- 2    Centos7   running
连接虚拟机
[root@KVM ~]# virsh console Centos7Connected to domain &#x27;Centos7&#x27;Escape character is ^] (Ctrl + ][root@localhost ~]#
初始化KVM虚拟机
设置名字
[root@localhost ~]# hostnamectl set-hostname Centos7 &amp;&amp; bash[root@centos7 ~]#
设置网络
查看状态
[root@centos7 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 52:54:00:b2:b9:d1 brd ff:ff:ff:ff:ff:ff
编辑配置文件
[root@centos7 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=static         ---DEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=eth0UUID=b7053508-5183-4ee4-8af5-8d5241f57116DEVICE=eth0ONBOOT=yes                  ---IPADDR=192.168.48.11        ---PREFIX=24                   ---GATEWAY=192.168.48.2        ---DNS1=114.114.114.114        ---
查看KVM网络信息
[root@centos7 ~]# systemctl restart network[root@centos7 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000    link/ether 52:54:00:b2:b9:d1 brd ff:ff:ff:ff:ff:ff    inet 192.168.48.11/24 brd 192.168.48.255 scope global noprefixroute eth0       valid_lft forever preferred_lft forever    inet6 fe80::85d6:dde0:25ad:9c43/64 scope link noprefixroute       valid_lft forever preferred_lft forever[root@centos7 ~]#
测试一下ssh工具是不是也可以连（cmd、MobaXterm）
测试连通性
ping KVM机子[root@centos7 ~]# ping 192.168.48.10 -c 2PING 192.168.48.10 (192.168.48.10) 56(84) bytes of data.64 bytes from 192.168.48.10: icmp_seq=1 ttl=64 time=0.481 ms64 bytes from 192.168.48.10: icmp_seq=2 ttl=64 time=0.254 ms--- 192.168.48.10 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1000msrtt min/avg/max/mdev = 0.254/0.367/0.481/0.115 msping 百度[root@centos7 ~]# ping baidu.com -c 2PING baidu.com (39.156.66.10) 56(84) bytes of data.64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=1 ttl=128 time=43.5 ms64 bytes from 39.156.66.10 (39.156.66.10): icmp_seq=2 ttl=128 time=44.9 ms--- baidu.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 43.599/44.258/44.917/0.659 ms[root@centos7 ~]#
设置Centos7虚拟机随KVM宿主机开机自启动
[root@KVM ~]# virsh autostart Centos7Domain &#x27;Centos7&#x27; marked as autostarted开机自启动配置后，会在/etc/libvirt/qemu/autostart/目录中增加XML格式[root@KVM ~]# ls /etc/libvirt/qemu/autostart/Centos7.xml
virsh autostart --disable 关闭开机自启动[root@KVM ~]# virsh autostart --disable Centos7Domain &#x27;Centos7&#x27; unmarked as autostarted
为KVM虚拟机增加CPU
查看Centos7配置信息
[root@KVM ~]# virsh dominfo Centos7Id:             1Name:           Centos7UUID:           735f1ca1-c82a-4734-81ec-ea3e82e98baeOS Type:        hvmState:          runningCPU(s):         1CPU time:       17.3sMax memory:     2097152 KiBUsed memory:    2097152 KiBPersistent:     yesAutostart:      enableManaged save:   noSecurity model: selinuxSecurity DOI:   0Security label: system_u:system_r:svirt_t:s0:c202,c740 (enforcing)
关闭虚拟机
[root@KVM ~]# virsh shutdown Centos7Domain &#x27;Centos7&#x27; is being shutdown[root@KVM ~]# virsh list --all Id   Name      State-------------------------- -    Centos7   shut off
修改Centos7 CPU核心数量
[root@KVM ~]# vi /etc/libvirt/qemu/Centos7.xml&lt;domain type=&#x27;kvm&#x27;&gt;  &lt;name&gt;Centos7&lt;/name&gt;  &lt;uuid&gt;735f1ca1-c82a-4734-81ec-ea3e82e98bae&lt;/uuid&gt;  &lt;metadata&gt;    &lt;libosinfo:libosinfo xmlns:libosinfo=&quot;http://libosinfo.org/xmlns/libvirt/domain/1.0&quot;&gt;      &lt;libosinfo:os id=&quot;http://redhat.com/rhel/7.7&quot;/&gt;    &lt;/libosinfo:libosinfo&gt;  &lt;/metadata&gt;  &lt;memory unit=&#x27;KiB&#x27;&gt;2097152&lt;/memory&gt;  &lt;currentMemory unit=&#x27;KiB&#x27;&gt;2097152&lt;/currentMemory&gt;  &lt;vcpu placement=&#x27;static&#x27;&gt;2&lt;/vcpu&gt;    修改为2  &lt;os&gt;    &lt;type arch=&#x27;x86_64&#x27; machine=&#x27;pc-q35-rhel8.6.0&#x27;&gt;hvm&lt;/type&gt;
启动虚拟机并查看配置文件
[root@KVM ~]# virsh start Centos7Domain &#x27;Centos7&#x27; started[root@KVM ~]# virsh dominfo Centos7Id:             1Name:           Centos7UUID:           735f1ca1-c82a-4734-81ec-ea3e82e98baeOS Type:        hvmState:          runningCPU(s):         2CPU time:       13.4sMax memory:     2097152 KiBUsed memory:    2097152 KiBPersistent:     yesAutostart:      enableManaged save:   noSecurity model: selinuxSecurity DOI:   0Security label: system_u:system_r:svirt_t:s0:c414,c924 (enforcing)[root@KVM ~]#
维护虚拟机
挂起/恢复虚拟机
[root@KVM ~]# virsh suspend Centos7Domain &#x27;Centos7&#x27; suspended[root@KVM ~]# virsh list --all Id   Name      State------------------------ 1    Centos7   paused[root@KVM ~]# virsh resume Centos7Domain &#x27;Centos7&#x27; resumed[root@KVM ~]# virsh list --all Id   Name      State------------------------- 1    Centos7   running
克隆KVM虚拟机
关闭Centos7 并且克隆Centos7为C7
[root@KVM ~]# virsh shutdown Centos7Domain &#x27;Centos7&#x27; is being shutdown[root@KVM ~]# virsh list --all Id   Name      State-------------------------- -    Centos7   shut off[root@KVM ~]# virt-clone -o Centos7 -n C7 -f /opt/disk/C7.qcow2Allocating &#x27;C7.qcow2&#x27;                                                      |  10 GB  00:00:37Clone &#x27;C7&#x27; created successfully.克隆成功[root@KVM ~]# virsh list --all Id   Name      State-------------------------- -    C7        shut off -    Centos7   shut off
开启C7，登入并且修改主机名为C7
[root@KVM ~]# virsh start C7Domain &#x27;C7&#x27; started[root@KVM ~]# virsh console C7Connected to domain &#x27;C7&#x27;Escape character is ^] (Ctrl + ]CentOS Linux 7 (Core)Kernel 3.10.0-1160.el7.x86_64 on an x86_64centos7 login: rootPassword:Last login: Mon Jan  9 15:56:16 from 192.168.48.250[root@centos7 ~]# hostnamectl set-hostname C7 &amp;&amp; bash[root@c7 ~]#克隆后ip回合Centos7一样，记得后期修改
设置Kvm虚拟机快照
登入C7 创建/opt/dev ，关闭虚拟机，创建快照
[root@c7 ~]# mkdir /opt/dev[root@c7 ~]# ls /optdev按ctrl + ] 退回到KVM宿主机[root@KVM ~]# virsh shutdown C7Domain &#x27;C7&#x27; is being shutdown创建快照[root@KVM ~]# virsh snapshot-create C7Domain snapshot 1673252946 created查看C7的快照列表[root@KVM ~]# virsh snapshot-list C7 Name         Creation Time               State--------------------------------------------------- 1673252946   2023-01-09 03:29:06 -0500   shutoff
开启C7 删除/opt/dev ，恢复快照
[root@KVM ~]# virsh start C7Domain &#x27;C7&#x27; started[root@KVM ~]# virsh console C7Connected to domain &#x27;C7&#x27;[root@c7 ~]# rm -rf /opt/dev[root@c7 ~]# ll /opttotal 0按ctrl + ] 退回到KVM宿主机[root@KVM ~]# virsh snapshot-list C7 Name         Creation Time               State--------------------------------------------------- 1673252946   2023-01-09 03:29:06 -0500   shutoff[root@KVM ~]# virsh snapshot-revert C7 1673252946virsh snapshot-revert 虚拟机名字 快照名字 
开启C7,查看是否恢复成功
[root@KVM ~]# virsh start C7Domain &#x27;C7&#x27; started[root@KVM ~]# virsh console C7Connected to domain &#x27;C7&#x27;Escape character is ^] (Ctrl + ]CentOS Linux 7 (Core)Kernel 3.10.0-1160.el7.x86_64 on an x86_64c7 login: rootPassword:Last login: Mon Jan  9 16:27:07 on ttyS0[root@c7 ~]# ls /optdev
virsh 命令
virsh shutdown 关闭KVM虚拟机 virsh destroy 强制关闭KVM虚拟机，不删除虚拟机磁盘，virsh list列表里面看不见，但是磁盘还在，还是可以启动，通过virsh list --all可以查看virsh undefine 彻底删除虚拟机，包括虚拟机存储所在的位置virsh start 开启KVM虚拟机virsh suspend 虚拟机名称 #挂起virsh resume 虚拟机名称 #恢复被挂起的

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Centos 8 stream</tag>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S高可用集群（外部etcd）</title>
    <url>/posts/59349/</url>
    <content><![CDATA[
K8S高可用集群（外部etcd）
以下会用到的资源K8s1.28.2（内外部etcd高可用）所需资源
主机拓扑



主机名
ip1（NAT）
系统
磁盘
内存




master1
192.168.48.101
Centos7.9
100G
4G


master2
192.168.48.102
Centos7.9
100G
4G


master3
192.168.48.103
Centos7.9
100G
4G


node01
192.168.48.104
Centos7.9
100G
8G



基础配置
centos通过单独安装，非克隆。安装完后进行基本环境的配置，配置一下几个方面：

设置主机名
关闭NetworkManager、firewalld、dnsmasq、selinux
设置ens33
优化ssh
备份并新增清华yum源、epel源、docker-ce源、k8s源
更新yum源软件包缓存
修改history格式及记录数
添加hosts解析
关闭swap分区
安装chrony服务，并同步时间
配置limits.conf
安装必备工具
升级系统并重启

操作主机：[master1,master2,master3,node01]
vim k8s_system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭NetworkManager、firewalld、dnsmasq、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl disable NetworkManager &amp;&gt; /dev/nullsystemctl disable dnsmasq &amp;&gt; /dev/nullsystemctl stop firewalldsystemctl stop NetworkManagersystemctl stop dnsmasqsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=ensernetBOOTPROTO=staticDEFROUTE=yesNAME=ens33DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2NETMASK=255.255.255.0GATEWAY=192.168.48.2DNS1=114.114.114.114EOFsystemctl restart networkecho &quot;4.优化ssh&quot;sed -i &quot;s#\#UseDNS yes#UseDNS no#g&quot; /etc/ssh/sshd_configsed -i &quot;s#GSSAPIAuthentication yes#GSSAPIAuthentication no#g&quot; /etc/ssh/sshd_configsystemctl restart sshdecho &quot;5.备份并新增清华yum源、epel源、docker-ce源、k8s源&quot;rm -rf /etc/yum.repos.d/*cat &gt; /etc/yum.repos.d/Centos-Base.repo &lt;&lt;EOF[base]name=CentOS-$releasever - Basebaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/os/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[updates]name=CentOS-$releasever - Updatesbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/updates/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[extras]name=CentOS-$releasever - Extrasbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/extras/\$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7[centosplus]name=CentOS-$releasever - Plusbaseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/\$releasever/centosplus/\$basearch/gpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7EOFcat &gt; /etc/yum.repos.d/epel.repo &lt;&lt;EOF[epel]name=Extra Packages for Enterprise Linux 7 - \$basearchbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/\$basearchfailovermensod=priorityenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7[epel-debuginfo]name=Extra Packages for Enterprise Linux 7 - \$basearch - Debugbaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/\$basearch/debugfailovermensod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1[epel-source]name=Extra Packages for Enterprise Linux 7 - \$basearch - Sourcebaseurl=https://mirrors.tuna.tsinghua.edu.cn/epel/7/SRPMSfailovermensod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1EOFcat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOFcurl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoecho &quot;6.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;7.修改history格式及记录数&quot;sed -i &quot;s#HISTSIZE=1000##g&quot; /etc/profilecat &gt;&gt; /etc/profile &lt;&lt;EOFshopt -s histappendUSER_IP=`who -u am i 2&gt;/dev/null| awk &#x27;&#123;print $NF&#125;&#x27;|sed -e &#x27;s/[()]//g&#x27;`export HISTFILE=~/.commandline_warriorexport HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S  `whoami`@$&#123;USER_IP&#125;: &quot;export HISTSIZE=200000export HISTFILESIZE=1000000export PROMPT_COMMAND=&quot;history -a&quot;EOFsource /etc/profileecho &quot;8.添加hosts解析&quot;cat &gt;&gt; /etc/hosts &lt;&lt;EOF192.168.48.101 master1192.168.48.102 master2192.168.48.103 master3192.168.48.104 node01EOFecho &quot;9.关闭swap分区&quot;swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 &amp;&gt; /dev/nullsed -ri &#x27;/^[^#]*swap/s@^@#@&#x27; /etc/fstabecho &quot;10.安装ntpdate服务，并同步时间&quot;yum install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sourcesecho &quot;11.配置limits.conf&quot;ulimit -SHn 65535cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF* soft nofile 65536* hard nofile 131072* soft nproc 65535* hard nproc 655350* soft memlock unlimited* hard memlock unlimitedEOFecho &quot;12.必备工具安装&quot;yum install wget psmisc vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git -yecho &quot;13.升级系统并重启&quot;yum update -y --exclude=kernel* &amp;&amp; reboot
sh k8s_system_init.sh 主机名 主机位[master1] sh k8s_system_init.sh master1 101[master2] sh k8s_system_init.sh master2 102[master3] sh k8s_system_init.sh master3 103[node01] sh k8s_system_init.sh node01 104
配置ssh免密
操作节点[master1]
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot; &quot;node01&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
内核及ipvs模块配置
此步骤是升级内核、配置ipvs模块，开启一些k8s集群中必须的内核参数。配置一下几个方面：

下载安装包到/server/soft
安装kernel
更改内核启动顺序
安装ipvsadm
配置ipvs模块
开启k8s集群必须的内核参数
配置完内核，重启服务器

操作主机：[master1,master2,master3,node01]
vi kernel_update.sh#!/bin/bashecho &quot;1.下载安装包到/server/soft&quot;mkdir -p /server/soft ; cd /server/softwget https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-6.6.3-1.el7.elrepo.x86_64.rpmwget https://mirrors.aliyun.com/elrepo/kernel/el7/x86_64/RPMS/kernel-ml-devel-6.6.3-1.el7.elrepo.x86_64.rpmecho &quot;2.正在安装kernel&quot;yum localinstall -y kernel-ml*echo &quot;3.更改内核启动顺序&quot;grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfggrubby --args=&quot;user_namespace.enable=1&quot; --update-kernel=&quot;$(grubby --default-kernel)&quot;echo &quot;4.输出现在内核版本信息&quot;grubby --default-kernelecho &quot;5.安装ipvsadm&quot;yum install ipvsadm ipset sysstat conntrack libseccomp -y &amp;&gt; /dev/nullecho &quot;6.配置ipvs模块&quot;modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackcat &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOFip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipipEOFsystemctl enable --now systemd-modules-load.service &amp;&gt; /dev/nullecho &quot;7.开启k8s集群必须的内核参数&quot;cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1fs.may_detach_mounts = 1net.ipv4.conf.all.route_localnet = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 65536net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384EOFsysctl --systemecho &quot;8.配置完内核，重启服务器！&quot;reboot
sh kernel_update.sh
检查ipvs加载、内核版本验证
lsmod | grep --color=auto -e ip_vs -e nf_conntrackuname -a

部署ETCD集群
本次在master1、master2、master3上进行etcd集群部署
安装etcd
下载安装包
wget https://github.com/etcd-io/etcd/releases/download/v3.5.10/etcd-v3.5.10-linux-amd64.tar.gz --no-check-certificate

解压
tar xf etcd-v3.5.10-linux-amd64.tar.gzmv etcd-v3.5.10-linux-amd64 /tmp/etcdcp /tmp/etcd/etcd* /usr/local/bin/


添加环境变量
将文件夹中etcd和etcdctl两个文件添加到环境变量中
mkdir -p /var/lib/etcd/mkdir -p /etc/etcd/chmod 700 /var/lib/etcd

创建默认配置文件
cat &lt;&lt;EOF | sudo tee /etc/etcd/etcd.conf#节点名称ETCD_NAME=$(hostname -s)#数据存放位置ETCD_DATA_DIR=/var/lib/etcdEOF

创建etcd服务
cat &lt;&lt;EOF | sudo tee /etc/systemd/system/etcd.service [Unit]Description=Etcd ServerDocumentation=https://github.com/coreos/etcdAfter=network.target [Service]User=rootType=notifyEnvironmentFile=-/etc/etcd/etcd.confExecStart=/usr/local/bin/etcdRestart=on-failureRestartSec=10sLimitNOFILE=40000 [Install]WantedBy=multi-user.targetEOF

开启服务
systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl start etcd

查看版本信息
etcd -version

在master1节点上生成etcd配置文件
vim etcd_install.shetcd1=192.168.48.101etcd2=192.168.48.102etcd3=192.168.48.103TOKEN=smartgoETCDHOSTS=($etcd1 $etcd2 $etcd3)NAMES=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot;)for i in &quot;$&#123;!ETCDHOSTS[@]&#125;&quot;; doHOST=$&#123;ETCDHOSTS[$i]&#125;NAME=$&#123;NAMES[$i]&#125;cat &lt;&lt; EOF &gt; /tmp/$NAME.conf# [member]ETCD_NAME=$NAMEETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;http://$HOST:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;http://$HOST:2379,http://127.0.0.1:2379&quot;#[cluster]ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://$HOST:2380&quot;ETCD_INITIAL_CLUSTER=&quot;$&#123;NAMES[0]&#125;=http://$&#123;ETCDHOSTS[0]&#125;:2380,$&#123;NAMES[1]&#125;=http://$&#123;ETCDHOSTS[1]&#125;:2380,$&#123;NAMES[2]&#125;=http://$&#123;ETCDHOSTS[2]&#125;:2380&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;$TOKEN&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;http://$HOST:2379&quot;EOFdonels /tmp/master*scp /tmp/master2.conf $etcd2:/etc/etcd/etcd.confscp /tmp/master3.conf $etcd3:/etc/etcd/etcd.confcp /tmp/master1.conf /etc/etcd/etcd.confrm -f /tmp/master*.conf

sh etcd_install.sh

在k8s集群master节点上启动etcd
systemctl restart etcdsystemctl enable --now etcd

检查etcd集群是否正常
etcdctl member listetcdctl endpoint health



高可用组件安装
haproxy配置
操作节点：[master1，master2,master3]
yum install keepalived haproxy -y
所有Master节点配置HAProxy，所有Master节点的HAProxy配置相同。
操作节点：[master1，master2]cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt;&quot;EOF&quot;global  maxconn  2000  ulimit-n  16384  log  127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode  http  option  httplog  timeout connect 5000  timeout client  50000  timeout server  50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri /monitorfrontend k8s-master  bind 0.0.0.0:16443  bind 127.0.0.1:16443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp  option tcplog  option tcp-check  balance roundrobin  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server master1   192.168.48.101:6443  check  server master2   192.168.48.102:6443  check  server master3   192.168.48.103:6443  checkEOF
Keepalived配置
操作节点：[master1，master2,master3]
所有Master节点配置Keepalived，以下三个Master节点配置注意ip和网卡。
操作节点：[master1]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    mcast_src_ip 192.168.48.101    virtual_router_id 51    priority 101    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master2]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.102    virtual_router_id 51    priority 100    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master3]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.103    virtual_router_id 51    priority 99    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
配置Keepalived健康检查文件
操作节点：[master1，master2,master3]
cat &gt; /etc/keepalived/check_apiserver.sh &lt;&lt;&quot;EOF&quot; #!/bin/bash err=0 for k in $(seq 1 3) do    check_code=$(pgrep haproxy)    if [[ $check_code == &quot;&quot; ]]; then        err=$(expr $err + 1)        sleep 1        continue    else        err=0        break    fi done  if [[ $err != &quot;0&quot; ]]; then    echo &quot;systemctl stop keepalived&quot;    /usr/bin/systemctl stop keepalived    exit 1 else    exit 0 fiEOFchmod +x /etc/keepalived/check_apiserver.sh
启动haproxy和keepalived
操作节点：[master，master2,master3]systemctl daemon-reloadsystemctl enable --now haproxysystemctl enable --now keepalived
测试集群负载均衡高可用
查看master1的vip
ip a

模拟master1的宕机测试，看看vip会不会漂移到master2去
[master1] poweroff

这时候查看master2的ip列表
[master2] ip a

结论：这时可以知道，负载均衡集群成功，当master1出现宕机情况，vip会从master1漂移到master2
docker安装
安装docker
操作节点[master1，master2，master3,node01]
wget https://download.docker.com/linux/static/stable/x86_64/docker-24.0.7.tgztar xf docker-*.tgzcp -rf docker/* /usr/bin/#创建containerd的service文件,并且启动cat &gt;/etc/systemd/system/containerd.service &lt;&lt;EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=1048576TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl enable --now containerd.service#准备docker的service文件cat &gt; /etc/systemd/system/docker.service &lt;&lt;EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.service containerd.serviceWants=network-online.targetRequires=docker.socket containerd.service[Service]Type=notifyExecStart=/usr/bin/dockerd --config-file=/etc/docker/daemon.json -H fd://containerd=/run/containerd/containerd.sockExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=alwaysStartLimitBurst=3StartLimitInterval=60sLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTasksMax=infinityDelegate=yesKillMode=processOOMScoreAdjust=-500[Install]WantedBy=multi-user.targetEOF#准备docker的socket文件cat &gt; /etc/systemd/system/docker.socket &lt;&lt;EOF[Unit]Description=Docker Socket for the API[Socket]ListenStream=/var/run/docker.sockSocketMode=0660SocketUser=rootSocketGroup=docker[Install]WantedBy=sockets.targetEOFgroupadd dockersystemctl enable --now docker.socket  &amp;&amp; systemctl enable --now docker.service#验证mkdir /etc/dockersudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,		&quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart docker
安装cri-docker
操作节点[master1，master2，master3,node01]
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.7/cri-dockerd-0.3.7.amd64.tgztar -zxvf cri-dockerd-0.3.7.amd64.tgzcp cri-dockerd/cri-dockerd  /usr/bin/chmod +x /usr/bin/cri-dockerd#写入启动配置文件cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF[Unit]Description=CRI Interface for Docker Application Container EngineDocumentation=https://docs.mirantis.comAfter=network-online.target firewalld.service docker.serviceWants=network-online.targetRequires=cri-docker.socket [Service]Type=notifyExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9ExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=always StartLimitBurst=3 StartLimitInterval=60s LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinity TasksMax=infinityDelegate=yesKillMode=process [Install]WantedBy=multi-user.targetEOF#写入socket配置文件cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF[Unit]Description=CRI Docker Socket for the APIPartOf=cri-docker.service [Socket]ListenStream=%t/cri-dockerd.sockSocketMode=0660SocketUser=rootSocketGroup=docker [Install]WantedBy=sockets.targetEOFsystemctl daemon-reload &amp;&amp; systemctl enable cri-docker --now
K8S集群安装
安装k8s所需的工具
操作节点[master1，master2，master3,node01]yum -y install  kubeadm kubelet kubectl#为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，配置如下：sed -i &#x27;s/^KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;/g&#x27; /etc/sysconfig/kubelet#设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动systemctl enable kubeletsystemctl enable kubelet.service
初始化集群
cat &gt; kubeadm-config.yaml &lt;&lt; EOF---apiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.48.101  bindPort: 6443nodeRegistration:  criSocket: unix:///var/run/cri-dockerd.sock---apiVersion: kubeadm.k8s.io/v1beta3kind: ClusterConfigurationkubernetesVersion: 1.28.2imageRepository: registry.aliyuncs.com/google_containersnetworking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;apiServerCertSANs:- 192.168.48.200controlPlaneEndpoint: &quot;192.168.48.200:16443&quot;etcd:  external:    endpoints:      - http://192.168.48.101:2379      - http://192.168.48.102:2379      - http://192.168.48.103:2379---apiVersion: kubeproxy.config.k8s.io/v1alpha1kind: KubeProxyConfigurationfeatureGates:  # SupportIPVSProxyMode: falsemode: ipvs---apiVersion: kubelet.config.k8s.io/v1beta1authentication:  anonymous:    enabled: false  webhook:    cacheTTL: 0s    enabled: true  x509:    clientCAFile: /etc/kubernetes/pki/ca.crtauthorization:  mode: Webhook  webhook:    cacheAuthorizedTTL: 0s    cacheUnauthorizedTTL: 0scgroupDriver: systemdclusterDNS:- 10.96.0.10clusterDomain: cluster.localcpuManagerReconcilePeriod: 0sevictionPressureTransitionPeriod: 0sfileCheckFrequency: 0shealthzBindAddress: 127.0.0.1healthzPort: 10248httpCheckFrequency: 0simageMinimumGCAge: 0skind: KubeletConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0memorySwap: &#123;&#125;nodeStatusReportFrequency: 0snodeStatusUpdateFrequency: 0srotateCertificates: trueruntimeRequestTimeout: 0sshutdownGracePeriod: 0sshutdownGracePeriodCriticalPods: 0sstaticPodPath: /etc/kubernetes/manifestsstreamingConnectionIdleTimeout: 0ssyncFrequency: 0svolumeStatsAggPeriod: 0sEOF
准备k8s所需的镜像
操作节点[master1]kubeadm config images pull --config kubeadm-config.yaml

master1节点初始化
操作节点[master1]
kubeadm init --config kubeadm-config.yaml --upload-certs --v=9
会生成信息

记录信息后面会用到
初始化成功以后，会产生Token值，用于其他节点加入时使用，因此要记录下初始化成功生成的token值（令牌值），有效期24小时，后续需要操作可以重新生成Token
操作节点[master1]
kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 \        --control-plane --certificate-key 37b1370abd3584c354517603bf97e10c795e3367e05e5ff3f2f6ca14288d8054kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612
操作kubect报错：

此时通过kubectl操作，会出现失败，因为还没有将集群的&quot;钥匙&quot;交给root用户。/etc/kubernetes/admin.conf 文件是 Kubernetes（K8s）集群中的管理员配置文件，它包含了用于管理集群的身份验证和访问信息。所以下面进行配置环境变量，用于访问Kubernetes集群：
添加环境变量
操作节点[master1]
mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config
添加其他master节点至集群中
操作节点[master2,master3]
操作节点[master2,master3]kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 \        --control-plane --certificate-key 37b1370abd3584c354517603bf97e10c795e3367e05e5ff3f2f6ca14288d8054 \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
接着给master2添加环境变量
操作节点[master2,master3]mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config

这里没有展示master3的图片，但是步骤一样的
模拟Token过期重新生成并加入Node节点
假设加入集群的token过期了。node01无法加入了，这里就模拟一下这种情况

Token过期后生成新的token：

kubeadm token create --print-join-command
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token ke773y.6hv9utk33to4vwfy --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612[root@master1 ~]#
其中，192.168.48.200:16443 是你的 Kubernetes API 服务器的地址和端口，ke773y.6hv9utk33to4vwfy 是新的令牌，sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 是令牌的 CA 证书哈希值。

Master需要生成–certificate-key：

kubeadm init phase upload-certs --upload-certs
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
其中，5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 是证书密钥。

生成新的Token用于集群添加新Node节点

操作节点[node01]
kubeadm join 192.168.48.200:16443 \        --token ke773y.6hv9utk33to4vwfy \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612  \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 

这时在master查看node状态（显示为notready不影响）

模拟新加master节点的加入K8S集群中
假设我们新加master节点的话，就拼接token，从刚刚生成的token拼接
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
这里提取信息1
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
接着
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
这里提取信息2：这里前面要加上--control-plane --certificate-key
--control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
合成
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 \        --cri-socket unix:///var/run/cri-dockerd.sock                kubeadm join 192.168.48.200:16443 --token lnkno8.u4v1l8n9pahzf0kj \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 41e441fe56cb4bdfcc2fc0291958e6b1da54d01f4649b6651471c07583f85cdf \        --cri-socket unix:///var/run/cri-dockerd.sock
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
图示

安装calico网络插件
操作节点[master1]
添加解析记录，否则无法访问
echo &#x27;185.199.108.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hosts
应用operator资源清单文件
网络组件有很多种，只需要部署其中一个即可，推荐Calico。
Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。
Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。
此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。
curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O
[root@master1 ~]# vim calico.yaml#添加两行- name: WAIT_FOR_DATASTORE  value: &quot;true&quot;- name: IP_AUTODETECTION_METHOD  value: interface=ens33#ens33是你的网卡

sed -i &#x27;s| docker.io/calico/| registry.cn-hangzhou.aliyuncs.com/qianyios/|&#x27; calico.yamlkubectl apply -f calico.yaml

监视kube-system命名空间中pod运行情况
等待估计20分钟左右吧(确保全部running)
kubectl get pods -n kube-system

拿掉master节点的污点
节点 master1 和 master2 都有一个名为 node-role.kubernetes.io/control-plane:NoSchedule 的污点。这个污点的作用是阻止普通的 Pod 被调度到这些节点上，只允许特定的控制平面组件（如 kube-apiserver、kube-controller-manager 和 kube-scheduler）在这些节点上运行。
这种设置有助于确保控制平面节点专门用于运行 Kubernetes 的核心组件，而不会被普通的工作负载占用。通过将污点添加到节点上，可以确保只有被授权的控制平面组件才能在这些节点上运行。
kubectl describe node master1 | grep -i taintkubectl describe node master2 | grep -i taintkubectl describe node master3 | grep -i taint

去除污点
kubectl taint node master1 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master2 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master3 node-role.kubernetes.io/control-plane:NoSchedule-

安装dashboard
操作节点[master1]
下载文件
https://github.com/kubernetes/dashboard/releases/tag/v2.7.0
目前最新版本v2.7.0
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yamlsed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yamlsed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml

修改配置文件
vim recommended.yaml---kind: ServiceapiVersion: v1metadata:  labels:    app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  type: NodePort  selector:    app: kubernetes-dashboard---

运行dashboard
kubectl apply -f recommended.yaml

检查运行状态
kubectl get pods -n kubernetes-dashboardkubectl get pod,svc -o wide -n kubernetes-dashboard

创建cluster-admin用户
创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin#获取用户Tokenkubectl create token dashboard-admin -n kubernetes-dashboard

记录token
eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw
登录浏览器访问
https://192.168.48.200:30001输入token：----eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw----

部署一个nginx测试
操作节点[master1]
vim web.yamlkind: Deployment#apiVersion: extensions/v1beta1apiVersion: apps/v1metadata:  labels:    app: web-deployment-label  name: web-deployment  namespace: defaultspec:  replicas: 3  selector:    matchLabels:      app: web-selector  template:    metadata:      labels:        app: web-selector    spec:      containers:      - name: web-container        image: nginx:latest        imagePullPolicy: Always        ports:        - containerPort: 80          protocol: TCP          name: http        - containerPort: 443          protocol: TCP          name: https---kind: ServiceapiVersion: v1metadata:  labels:    app: web-service-label  name: web-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: 80    protocol: TCP    targetPort: 80    nodePort: 30080  - name: https    port: 443    protocol: TCP    targetPort: 443    nodePort: 30443  selector:    app: web-selector    kubectl apply -f web.yaml 

### 查看nginx的pod 的详细信息kubectl get deploy,svc,pod -o wide

访问nginx网站
http://192.168.48.200:30080


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Mysql8.4.2 LTS</title>
    <url>/posts/32ce47c9/</url>
    <content><![CDATA[
Linux安装Mysql8.4.2 LTS
下载安装包
下载地址：MySQL
根据自己的系统选择哦！
我的系统是OpenEuler22.03LTS兼容红帽安装包

下载之后上传到root目录下

创建安装目录并解压安装包到此目录下
mkdir mysql8.4.2ltstar -xvf mysql-8.4.2-1.el8.x86_64.rpm-bundle.tar -C mysql8.4.2ltscd mysql8.4.2lts/ls
已经解压完成了哦

开始安装
删除旧版本的mysql和mariadb
# 卸载 mariadb 相关的包yum remove mariadb mariadb-config mariadb-libs -y# 如果之前安装过 MySQL 社区版，也需要一并移除yum remove mysql-community-common mysql-community-icu-data-files mysql-community-client-plugins mysql-community-libs mysql-community-client mysql-community-server mysql-community-libs-compat -y
最好按照以下顺序按照，不然会报错
#全局的依赖（common）rpm -ivh mysql-community-common-8.4.2-1.el8.x86_64.rpmrpm -ivh mysql-community-icu-data-files-8.4.2-1.el8.x86_64.rpmrpm -ivh mysql-community-client-plugins-8.4.2-1.el8.x86_64.rpmrpm -ivh mysql-community-libs-8.4.2-1.el8.x86_64.rpmrpm -ivh mysql-community-client-8.4.2-1.el8.x86_64.rpmrpm -ivh mysql-community-server-8.4.2-1.el8.x86_64.rpm#php依赖文件rpm -ivh mysql-community-libs-compat-8.4.2-1.el8.x86_64.rpm
注意：如果需要搭载php使用，需要安装7.7，因为rpm -ivh mysql-community-libs-compat是php的依赖。；如果不安装php，则无需安装7.7的依赖。
数据库基础配置
启动数据库并且设置自启动
systemctl enable mysqld --now
查看启动进程
ps -ef | grep mysql

查看初始密码
grep &#x27;temporary password&#x27; /var/log/mysqld.log
2024-09-08T06:44:47.204524Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: zo+&amp;q(qYG21X密码是zo+&amp;q(qYG21X
修改密码
mysql -uroot -p&quot;zo+&amp;q(qYG21X&quot;alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;Qianyios007@&#x27;;
以后你就可以用以下目录登入mysql了
mysql -uroot -p&quot;Qianyios007@&quot;

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置DNS服务</title>
    <url>/posts/b29b8cd3/</url>
    <content><![CDATA[
Linux配置DNS服务
DNS 简介
- 什么是域名

域名(DomainName)，简称域名、网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。具有独一无二，不可重复的特性。

- 域名的关系和组成
常见域名：www.baidu.com
完整域名：www.baidu.com.
注意com 后面有一点
. ：根域，可省略不写。
com：顶级域，由ICANN组织指定和管理。
分类：1、国家地区域名: (cn(中国)、hk(香港)、sg (新加坡)等。2、通用项级域名: com (商业机构)、org (非营利组织)、edu (教育机构)等。3、新通用顶级域名: red (红色、热情)、top (顶级、高端)等。4、com.cn属于“二级域名”，是cn项级域的子域。
baidu：级域(注册域) ，可由·个人或组织申请注册。
www：三级域(子域)，服务器网站名代表。（www.baidu.com）

- 什么是DNS?
域名系统(Domain Name System,缩写: DNS)是互联网的一项服务。域名解析是把域名指向网站空间IP,让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。可以理解为DNS就是翻译官。
正向解析：域名 --&gt; IP地址。
反向解析：IP地址 --&gt; 域名。
DNS 工作过程


客户端在浏览器输入一个域名：www.baidu.com，浏览器自动补充域名：www.baidu.com：80。80端口是web服务器的端口

1.在从自己本机中查询host文件，是否有此域名的解析记录，如果有则返回给浏览器
2.如果host文件没有域名的解析记录，则会在本机上继续查询是否有DNS的解析缓存，如果有则返回给浏览器
3.如果本机没有DNS的解析记录，则会在网卡设置的DNS服务器上，查询域名的解析结果
4.如果DNS服务器上也没有查询到，则会从别人询问的结果的缓存中查找
5.就迭代查询，顶级域名，二级域名，三级域名
DNS 配置文件

/ etc / named.conf ：主配置文件



/ etc / named.rfc1912.zones：区域配置文件



/ var / named / ：数据配置文件

named.ca：记录了13台根域服务器的位置
named.localhost：正向代理
named.loopback：反向代理

serial：主DNS每次改完zone必须加1，触发slave来同步；可填：纯数字、YYYYMMDDnn、Unix时间戳。
refresh：slave隔多久去查一次serial是否更新；可填：秒数或带单位的时间（如3600、1H、1D）。
retry：refresh失败后隔多久再试；可填：同上（如1800、30M）。
expire：多久拉不到数据就把zone视为失效；可填：同上（如604800、1W）。
minimum：否定/无记录结果在缓存里的最短生存时间；可填：同上（如10800、3H）。



类型
描述




A
地址记录，用来指定域名的 IPv4 地址的记录。


CNAME
将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 CNAME 记录。


TXT
可填写任何东西，长度限制 255。绝大多数的 TXT 记录是用来做 SPF 的（反垃圾邮件）。


NS
域名服务器记录，如果需要把子域名交给其他 DNS 服务商解析，就需要添加 NS 记录。


AAAA
地址记录，用来指定域名的 IPv6 地址的记录。


MX
邮件交换记录，如果需要设置邮箱，让邮箱能收到邮件，就需要添加 MX 记录。


PTR
PoinTeR，IP --&gt; FQDN




软件名称：bind
服务名称：named
软件端口：


UDP 53 数据通信(域名解析)
TCP 53 数据同步(主从同步)

DNS 服务搭建
配置DNS地址：/etc/resolv.conf



主机名
ip
内存
硬盘
cpu
OS




master
192.168.48.101
2g
100g
2v
Centos7


slave
192.168.48.102
2g
100g
2v
Centos7


client
192.168.48.103
2g
100g
2v
Centos7




前情提要：以下是三台机的网卡dns配置,自行设置
matser: DNS1=192.168.48.101
slave: DNS1=192.168.48.102
client: DNS1=192.168.48.101 , DNS2=192.168.48.102

服务端配置
一、安装
yum install -y bind bind-utils
二、配置文件
操作节点：[master]
1.配置主文件 vim /etc/named.conf
// listen-on port 53 &#123; 127.0.0.1; &#125;;// allow-query     &#123; localhost; &#125;;
listen-on port 53 &#123; 192.168.48.101; &#125;;
→ 只在 192.168.48.101 这台机器的 53 端口上提供 DNS 服务。如若注释掉：BIND 不再限定监听地址，会在服务器所有可用 IP 的 53 端口上提供 DNS 服务。这样就可以在多ip地址下进行dns了
allow-query &#123; any; &#125;;
→ 允许任何来源向这台 DNS 服务器发起查询请求。如果不注释掉，只要网络可达（没有防火墙、路由等限制），任何 IP 地址（公网、私网、本机），这些设备把 DNS 指向你的服务器 IP 都可以向这台 DNS 服务器发起查询，如果注释掉了，他只会允许这台机同网段下局域网内的机子可以向这台dns服务器发起查询
这次实验主要是实现企业内网dns，所以这两项我都注释掉
这次实验主要是实现企业内网dns，所以这两项我都注释掉
这次实验主要是实现企业内网dns，所以这两项我都注释掉
2、配置区域文件 vim /etc/named.rfc1912.zones
cat &gt;&gt; /etc/named.rfc1912.zones &lt;&lt;&quot;EOF2&quot;zone &quot;aaa.com&quot; IN &#123;        type master;        file &quot;aaa.com.zone&quot;;&#125;;zone &quot;48.168.192.in-addr.arpa&quot; IN &#123;        type master;        file &quot;aaa.loopback&quot;;&#125;;EOF2
3、编辑正向解析数据文件 vim /var/named/aaa.com.zone
cat &gt; /var/named/aaa.com.zone &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 0 1D 1H 1W 3H )        NS      mastermaster  A       192.168.48.101www     A       192.168.48.128EOF
@：代表本域名的根域（zone 本身）；
IN：记录类别为Internet（标准 TCP/IP）；
SOA：这是一条起始授权记录（Start of Authority）；
aaa.com.：该域的**主 DNS 服务器（primary nameserver）**主机名；（只是描述信息）
admin@qianyios.top.：管理员邮箱地址（把第一个点换成 @），如果不需要则用 .invalid 表示示例/无效地址。（只是描述信息）
NS  master：声明本域的权威 DNS 服务器名字叫 master（相对名，实际全名是 master.aaa.com.）。
master A  192.168.48.101：给NS的名字为 master 绑定真实 IP 192.168.48.101，让别人能解析到这台权威服务器。

检查zone文件语法用：
[root@master ~]# named-checkzone aaa.com /var/named/aaa.com.zone
zone aaa.com/IN: loaded serial 0
OK

4、编辑反向解析数据文件 vim /var/named/aaa.loopback
举例了两条反向记录
cat &gt; /var/named/aaa.loopback &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 0 1D 1H 1W 3H )        NS      master.aaa.com.129     PTR     www1.aaa.com.128     PTR     www.aaa.com.EOF
NS master.aaa.com.:在正向zone不是配置了NS  master吗，那反向这里就要写全称域名后面要加小数点
5.启动named服务
systemctl enable --now named systemctl restart named
重启无报错
客户端配置
操作节点：[client]
一、安装
yum install -y bind bind-utils
二、配置网卡dns
这是我的网卡名称是ens33你自己按你自己的改
vim /etc/sysconfig/network-scripts/ifcfg-ens33
DNS1=192.168.48.101

重启网卡
systemctl restart network
查看是否配置成功
[root@client ~]# cat /etc/resolv.conf# Generated by NetworkManagernameserver 192.168.48.101
三、 测试 nslookup

正向解析测试

[root@client ~]# nslookup www.aaa.comServer:         192.168.48.101Address:        192.168.48.101#53Name:   www.aaa.comAddress: 192.168.48.128  #自己查看正向解析文件

反向解析测试

[root@client ~]# host 192.168.48.128 &amp;&amp; host 192.168.48.129128.48.168.192.in-addr.arpa domain name pointer www.aaa.com.129.48.168.192.in-addr.arpa domain name pointer www1.aaa.com.#自行查看反向解析文件
成功
主从DNS服务器搭建
减轻主服务器的压力，数据从 主服务器上复制到 从服务器上
主服务器配置
操作节点：[master]
1.配置主文件 vim /etc/named.conf
listen-on port 53 &#123; 192.168.48.101; &#125;; //masterIPallow-query     &#123; any; &#125;;
listen-on port 53 &#123; 192.168.48.101; &#125;;
→ 只在 192.168.48.101 这台机器的 53 端口上提供 DNS 服务。如若注释掉：BIND 不再限定监听地址，会在服务器所有可用 IP 的 53 端口上提供 DNS 服务。这样就可以在多ip地址下进行dns了
allow-query &#123; any; &#125;;
→ 允许任何来源向这台 DNS 服务器发起查询请求。如果不注释掉，只要网络可达（没有防火墙、路由等限制），任何 IP 地址（公网、私网、本机），这些设备把 DNS 指向你的服务器 IP 都可以向这台 DNS 服务器发起查询，如果注释掉了，他只会允许这台机同网段下局域网内的机子可以向这台dns服务器发起查询
这次实验主要是实现企业内网dns，所以这两项我都注释掉
这次实验主要是实现企业内网dns，所以这两项我都注释掉
这次实验主要是实现企业内网dns，所以这两项我都注释掉
2、配置区域文件 vim /etc/named.rfc1912.zones
allow-update（可选）：只允许 192.168.48.102 这台主机向本 DNS 服务器发送动态更新
allow-update &#123; any; &#125;;含义：允许任何主机向本 DNS 服务器提交动态更新请求，即谁都可以增删改该区域的资源记录。安全风险极大，生产环境务必改成 &#123; none; &#125; 或只列出可信 IP/密钥，否则任何人都能篡改你的域名解析。
zone &quot;aaa.com&quot; IN &#123;        type master;        file &quot;aaa.com.zone&quot;;        allow-update &#123; none; &#125;;&#125;;zone &quot;48.168.192.in-addr.arpa&quot; IN &#123;        type master;        file &quot;aaa.loopback&quot;;        allow-update &#123; none; &#125;;&#125;;
3、编辑正向解析数据文件 vim /var/named/aaa.com.zone
cat &gt; /var/named/aaa.com.zone &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 0 1D 1H 1W 3H )        NS      mastermaster  A       192.168.48.101www     A       192.168.48.128EOF
4、编辑反向解析数据文件 vim /var/named/aaa.loopback
cat &gt; /var/named/aaa.loopback &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 0 1D 1H 1W 3H )        NS      master.aaa.com.129     PTR     www1.aaa.com.128     PTR     www.aaa.com.EOF
从服务器配置
操作节点：[slave]
#安装yum install -y bind bind-utils
1.配置主文件 vim /etc/named.conf
#注释掉// listen-on port 53 &#123; 127.0.0.1; &#125;;// allow-query     &#123; localhost; &#125;;
2、配置区域文件 vim /etc/named.rfc1912.zones
cat &gt;&gt; /etc/named.rfc1912.zones &lt;&lt; &quot;EOF&quot;zone &quot;aaa.com&quot; IN &#123;        type slave;        file &quot;slaves/aaa.com.zone&quot;;        masters &#123; 192.168.48.101; &#125;; //主服务器的IP&#125;;zone &quot;48.168.192.in-addr.arpa&quot; IN &#123;        type slave;        file &quot;slaves/aaa.loopback&quot;;        masters &#123; 192.168.48.101; &#125;; //主服务器的IP&#125;;EOF

如果主从同步之后区域数据文件会同步到/var/named/slaves这个目录下，现在还是空的
[root@slave ~]# ll /var/named/slavestotal 0[root@slave ~]#
两台重启named服务
操作节点：[master,slave]
systemctl restart named
这时候经过两台服务器重启named之后，master里的两个文件就已经同步到slave的/var/named/slaves这个目录下

客户端配置并测试正反向解析
操作节点：[client]
设置dns添加slave的IP地址
DNS2=192.168.48.102 然后重启网卡
修改网卡dns添加一个从服务器的ip
vim /etc/sysconfig/network-scripts/ifcfg-ens33

重启网卡
systemctl restart network
#检查是否配置成功[root@client ~]# cat /etc/resolv.conf# Generated by NetworkManagernameserver 192.168.48.101nameserver 192.168.48.102
测试主从服务
当我们给master模拟named服务故障时，由从服务器进行接管
测试前，是由master提供服务
[root@client ~]# nslookup www.aaa.comServer:         192.168.48.101Address:        192.168.48.101#53Name:   www.aaa.comAddress: 192.168.48.128[root@client ~]# host 192.168.48.128 &amp;&amp; host 192.168.48.129128.48.168.192.in-addr.arpa domain name pointer www.aaa.com.129.48.168.192.in-addr.arpa domain name pointer www1.aaa.com.
断开master的named的服务
[root@master ~]# systemctl stop named[root@master ~]#
再次进行测试
nslookup www.aaa.comhost 192.168.48.128 &amp;&amp; host 192.168.48.129

这时重启master的named，客户机又从主服务器查询域名了
systemctl start named
[root@client ~]# host 192.168.48.128 &amp;&amp; host 192.168.48.129128.48.168.192.in-addr.arpa domain name pointer www.aaa.com.129.48.168.192.in-addr.arpa domain name pointer www1.aaa.com.[root@client ~]# nslookup www.aaa.comServer:         192.168.48.101Address:        192.168.48.101#53Name:   www.aaa.comAddress: 192.168.48.128
自动主从同步
我们已经配置了主从服务器了，如果这时主服务器的区域数据文件中又添加了新的解析条目，怎么实现从服务器也能自动同步这个数据呢？很简单
操作节点：[matser]
1.配置正向区域文件
cat &gt; /var/named/aaa.com.zone &lt;&lt;&quot;EOF&quot;$TTL 1D                                   @       IN SOA  aaa.com. admin@qianyios.top. ( 1 1D 1H 1W 3H )        NS      master        NS      slavemaster  A       192.168.48.101slave   A       192.168.48.102    ;增加slave解析记录www     A       192.168.48.128abc     A       192.168.48.130EOF
( 1 1D 1H 1W 3H );第一个数字，原先是0要增加到1，就是说dns要确定这个文件已经更新过了，靠这个数字来判断的，递增一次就是更新一次了，才可以进行同步
2.配置反向解析文件
cat &gt; /var/named/aaa.loopback &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 1 1D 1H 1W 3H )        NS      master.aaa.com.        NS      slave.aaa.com.129     PTR     www1.aaa.com.128     PTR     www.aaa.com.130     PTR     abc.aaa.com.EOF
( 1 1D 1H 1W 3H );第一个数字，原先是0要增加到1，就是说dns要确定这个文件已经更新过了，靠这个数字来判断的，递增一次就是更新一次了，才可以进行同步

如果说你不想加NS   slave.aaa.com.
你就要在vim /etc/named.rfc1912.zones里配置该域名下的添加
notify yes;,also-notify &#123; 192.168.48.102; &#125;

notify yes;
主 DNS 变更后自动给 NS 列表里的辅 DNS 发“快更新”通知。
also-notify &#123; 192.168.48.102; &#125;
在“自动推导的 NS 列表”之外，额外再通知一个/一批 IP。就是说如果你没加NS   slave.aaa.com.，那么他会额外再通知192.168.48.102;

如下图


3、测试
测试前查看slave数据的文件时间

重启master的named的服务
systemctl restart named

这时候已经更新了，再次在客户端进行测试
[root@client ~]# nslookup abc.aaa.comServer:         192.168.48.101Address:        192.168.48.101#53Name:   abc.aaa.comAddress: 192.168.48.130[root@client ~]# host 192.168.48.130130.48.168.192.in-addr.arpa domain name pointer abc.aaa.com.
都能成功进行解析，主从自动同步成功
失败案例
我有测试没有修改序号就添加数据顺便重启，是没有同步成功的
序号为1，没增加1，本身应该是2的
cat &gt; /var/named/aaa.loopback &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 1 1D 1H 1W 3H )        NS      master.aaa.com.        NS      slave.aaa.com.129     PTR     www1.aaa.com.128     PTR     www.aaa.com.130     PTR     abc.aaa.com.131     PTR     qy.aaa.com.EOFcat &gt; /var/named/aaa.com.zone &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 1 1D 1H 1W 3H )        NS      master        NS      slavemaster  A       192.168.48.101slave   A       192.168.48.102www     A       192.168.48.128abc     A       192.168.48.130qy      A       192.168.48.131EOF
重启之前查看时间
[root@slave ~]# ll /var/named/slaves/total 8-rw-r--r-- 1 named named 329 Jul 22 08:46 aaa.com.zone-rw-r--r-- 1 named named 393 Jul 22 08:46 aaa.loopback
重启之后
[root@master ~]# systemctl restart named[root@master ~]#
slave下的文件还是和原来一样
[root@slave ~]# ll /var/named/slaves/total 8-rw-r--r-- 1 named named 329 Jul 22 08:46 aaa.com.zone-rw-r--r-- 1 named named 393 Jul 22 08:46 aaa.loopback
并且客户端解析不到我新添加的数据
[root@client ~]# host 192.168.48.131131.48.168.192.in-addr.arpa domain name pointer qy.aaa.com.[root@client ~]# nslookup qy.aaa.comServer:         192.168.48.101Address:        192.168.48.101#53Name:   qy.aaa.comAddress: 192.168.48.131#好奇怪这不是解析到了吗，因为dns里不是设置了两个dns吗，我们删掉master的dns，重启网卡[root@client ~]# cat /etc/resolv.conf# Generated by NetworkManagernameserver 192.168.48.102#再次进行解析[root@client ~]# host 192.168.48.131Host 131.48.168.192.in-addr.arpa. not found: 3(NXDOMAIN)[root@client ~]# nslookup qy.aaa.comServer:         192.168.48.102Address:        192.168.48.102#53** server can&#x27;t find qy.aaa.com: NXDOMAIN#就说明192.168.48.102并没有实现同步
只有当我修改序号为2时，再进行重启，才能进行同步
cat &gt; /var/named/aaa.loopback &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 2 1D 1H 1W 3H )        NS      master.aaa.com.        NS      slave.aaa.com.129     PTR     www1.aaa.com.128     PTR     www.aaa.com.130     PTR     abc.aaa.com.131     PTR     qy.aaa.com.EOFcat &gt; /var/named/aaa.com.zone &lt;&lt;&quot;EOF&quot;$TTL 1D@       IN SOA  aaa.com. admin@qianyios.top. ( 2 1D 1H 1W 3H )        NS      master        NS      slavemaster  A       192.168.48.101slave   A       192.168.48.102www     A       192.168.48.128abc     A       192.168.48.130qy      A       192.168.48.131EOFsystemctl	restart named
slave查看是否更新
[root@slave ~]# ll /var/named/slaves/total 8-rw-r--r-- 1 named named 367 Jul 22 08:56 aaa.com.zone-rw-r--r-- 1 named named 456 Jul 22 08:56 aaa.loopback#之前是8:46的，更新之后就是8:56
client查看解析
[root@client ~]# host 192.168.48.131131.48.168.192.in-addr.arpa domain name pointer qy.aaa.com.[root@client ~]# nslookup qy.aaa.comServer:         192.168.48.102    #slave成功解析Address:        192.168.48.102#53Name:   qy.aaa.comAddress: 192.168.48.131
ssh免密
此步骤是为了方便以下自动脚本
操作节点：【三台服务器】
这是我的ip和主机名，你根据需要自行修改
cat &gt;&gt; /etc/hosts &lt;&lt; &quot;EOF&quot;192.168.48.101 master192.168.48.102 slave192.168.48.103 clientEOF
操作节点：【master】

脚本里password=&quot;123456&quot;是我三台机的密码，我三台都一样，如何你是不一样，你自己自行进行手动免密了
[master] yum install -y sshpass
[master] ssh-keygen -t rsa -N “” -f ~/.ssh/id_rsa
以下这个命令的主机名，三个主机名都要输一遍，也就是三条命令了
[master] sshpass -p “密码” ssh-copy-id -o StrictHostKeyChecking=no “主机名”
测试免密，三个主机名都要输一遍，也就是三条命令了
[master] sshpass -p “密码” ssh -o StrictHostKeyChecking=no “主机名” “echo ‘免密登录成功’”

yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master&quot; &quot;slave&quot; &quot;client&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
自动添加解析脚本
你要做的就是修改脚本中的SLAVE_IP=&quot;192.168.48.102&quot;这是我的从节点的ip
你要把你的主从节点做好免密之后，才可以进行以下操作
操作节点:[master]
vim jx.sh
#!/bin/bash# 检查参数数量if [ &quot;$#&quot; -ne 2 ]; then    echo &quot;Usage: $0 &lt;IP_ADDRESS&gt; &lt;DOMAIN&gt;&quot;    exit 1fiIP=&quot;$1&quot;DOMAIN=&quot;$2&quot;# 获取本机 IP 地址（假设主机只有一个有效 IP）MASTER_IP=$(hostname -I | awk &#x27;&#123;print $1&#125;&#x27;)# 从服务器的 IP 地址SLAVE_IP=&quot;192.168.48.102&quot;# 解析域名和反向 IPBASE_DOMAIN=$(echo &quot;$DOMAIN&quot; | awk -F. &#x27;&#123;print $(NF-1)&quot;.&quot;$NF&#125;&#x27;)ZONE_FILE=&quot;/var/named/$BASE_DOMAIN.zone&quot;REV_ZONE_FILE=&quot;/var/named/$(echo $IP | awk -F. &#x27;&#123;print $3&quot;.&quot;$2&quot;.&quot;$1&quot;.in-addr.arpa&quot;&#125;&#x27;).zone&quot;ZONE_CONFIG=&quot;/etc/named.rfc1912.zones&quot;# 解析反向 IP 和主机名REV_IP=$(echo $IP | awk -F. &#x27;&#123;print $3&quot;.&quot;$2&quot;.&quot;$1&#125;&#x27;)REV_HOST=$(echo $IP | awk -F. &#x27;&#123;print $4&#125;&#x27;)SHORT_NAME=$(echo &quot;$DOMAIN&quot; | awk -F. &#x27;&#123;print $1&#125;&#x27;)# 确保 /var/named 目录存在mkdir -p /var/named/touch &quot;$ZONE_FILE&quot; &quot;$REV_ZONE_FILE&quot;chown named:named &quot;$ZONE_FILE&quot; &quot;$REV_ZONE_FILE&quot;chmod 644 &quot;$ZONE_FILE&quot; &quot;$REV_ZONE_FILE&quot;# 检查是否已存在相同的解析记录if grep -q &quot;^$SHORT_NAME[[:space:]]*A[[:space:]]*$IP&quot; &quot;$ZONE_FILE&quot;; then    echo &quot;记录 $DOMAIN -&gt; $IP 已存在，无需添加&quot;    exit 0fi# **递增 serial 号**increment_serial() &#123;    # 提取当前 serial 值    current_serial=$(awk &#x27;/serial/&#123;print $1&#125;&#x27; &quot;$1&quot;)        if [[ -z &quot;$current_serial&quot; ]]; then        # 如果没有找到 serial（空），初始化为 1        current_serial=1    fi    # 递增 serial    new_serial=$((current_serial + 1))    # 替换 serial 行，保留前导空格和注释    sed -i &quot;s/\([[:space:]]*\)\([0-9]\+\)\([[:space:]]*; serial\)/\1$new_serial\3/&quot; &quot;$1&quot;&#125;# 添加正向解析区域配置（如果不存在）if ! grep -q &quot;zone \&quot;$BASE_DOMAIN\&quot; IN&quot; &quot;$ZONE_CONFIG&quot;; then    cat &gt;&gt; &quot;$ZONE_CONFIG&quot; &lt;&lt;EOFzone &quot;$BASE_DOMAIN&quot; IN &#123;        type master;        file &quot;$ZONE_FILE&quot;;        notify yes;        also-notify &#123; $SLAVE_IP; &#125;;        allow-update &#123; $SLAVE_IP; &#125;;&#125;;EOFfi# 添加反向解析区域配置（如果不存在）if ! grep -q &quot;zone \&quot;$REV_IP.in-addr.arpa\&quot; IN&quot; &quot;$ZONE_CONFIG&quot;; then    cat &gt;&gt; &quot;$ZONE_CONFIG&quot; &lt;&lt;EOFzone &quot;$REV_IP.in-addr.arpa&quot; IN &#123;        type master;        file &quot;$REV_ZONE_FILE&quot;;        notify yes;        also-notify &#123; $SLAVE_IP; &#125;;        allow-update &#123; $SLAVE_IP; &#125;;&#125;;EOFfi# **初始化 Zone 文件（正向解析）**if [ ! -s &quot;$ZONE_FILE&quot; ]; then    cat &gt; &quot;$ZONE_FILE&quot; &lt;&lt;EOF\$TTL 1D@       IN SOA  $BASE_DOMAIN rname.invalid. (                                        1       ; serial                                        1D      ; refresh                                        1H      ; retry                                        1W      ; expire                                        3H )    ; minimum        NS      $BASE_DOMAIN$BASE_DOMAIN     A   $MASTER_IPEOF    increment_serial &quot;$ZONE_FILE&quot;  # 初始化时递增 serialfi# **追加 A 记录（使用短名）**if ! grep -q &quot;^$SHORT_NAME[[:space:]]*A[[:space:]]*$IP&quot; &quot;$ZONE_FILE&quot;; then    echo &quot;$SHORT_NAME    A       $IP&quot; &gt;&gt; &quot;$ZONE_FILE&quot;    increment_serial &quot;$ZONE_FILE&quot;  # 追加记录后递增 serialfi# **初始化 Zone 文件（反向解析）**if [ ! -s &quot;$REV_ZONE_FILE&quot; ]; then    cat &gt; &quot;$REV_ZONE_FILE&quot; &lt;&lt;EOF\$TTL 1D@       IN SOA  $BASE_DOMAIN rname.invalid. (                                        1       ; serial                                        1D      ; refresh                                        1H      ; retry                                        1W      ; expire                                        3H )    ; minimum        NS      $BASE_DOMAIN$BASE_DOMAIN     A   $MASTER_IP        EOF    increment_serial &quot;$REV_ZONE_FILE&quot;  # 初始化时递增 serialfi# **追加 PTR 记录**if ! grep -q &quot;^$REV_HOST[[:space:]]*PTR[[:space:]]*$SHORT_NAME.$BASE_DOMAIN.&quot; &quot;$REV_ZONE_FILE&quot;; then    echo &quot;$REV_HOST     PTR     $SHORT_NAME.$BASE_DOMAIN.&quot; &gt;&gt; &quot;$REV_ZONE_FILE&quot;    increment_serial &quot;$REV_ZONE_FILE&quot;  # 追加记录后递增 serialfi# 在从服务器上追加主从同步配置ssh -T root@$SLAVE_IP &lt;&lt;EOF# 检查从服务器配置文件是否已存在主从同步区域if ! grep -q &quot;zone \&quot;$BASE_DOMAIN\&quot; IN&quot; &quot;$ZONE_CONFIG&quot;; then    cat &gt;&gt; &quot;$ZONE_CONFIG&quot; &lt;&lt;EOTzone &quot;$BASE_DOMAIN&quot; IN &#123;     type slave;    file &quot;slaves/$BASE_DOMAIN.zone&quot;;     masters &#123; $MASTER_IP; &#125;; # 主服务器的IP&#125;;EOTfi# 检查反向解析的从服务器配置if ! grep -q &quot;zone \&quot;$REV_IP.in-addr.arpa\&quot; IN&quot; &quot;$ZONE_CONFIG&quot;; then    cat &gt;&gt; &quot;$ZONE_CONFIG&quot; &lt;&lt;EOTzone &quot;$REV_IP.in-addr.arpa&quot; IN &#123;     type slave;    file &quot;slaves/$REV_IP.loopback&quot;;    masters &#123; $MASTER_IP; &#125;; # 主服务器的IP&#125;;EOTfiEOF# 重新加载主服务器的 Bind 配置systemctl restart namedecho &quot;✅ DNS 记录已添加并重新加载 Bind 服务&quot;# 重新加载从服务器上的 Bind 配置ssh -T root@$SLAVE_IP &lt;&lt;EOFsystemctl restart namedecho &quot;✅ 从服务器 $SLAVE_IP 配置已更新并重新加载 Bind 服务&quot;EOFecho &quot;✅ 主从同步配置已成功添加到从服务器 $SLAVE_IP&quot;systemctl restart named
bash jx.sh 192.168.111.201 bs.qianyios12.topbash jx.sh 192.168.123.202 bs1.qianyios1245.topbash jx.sh 192.168.236.203 bs3.qianyios22224.top

接下来进行测试，三台机都可以进行测试
nslookup bs.qianyios12.topnslookup bs1.qianyios1245.topnslookup bs3.qianyios22224.tophost 192.168.111.201host 192.168.123.202host 192.168.236.203
master

slave

client


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>Linux</tag>
        <tag>Dns</tag>
      </tags>
  </entry>
  <entry>
    <title>Lsky Pro图床</title>
    <url>/posts/6726/</url>
    <content><![CDATA[
Lsky Pro图床
系统：centos 8 stream  ip：192.168.48.11
介绍

支持本地等多种第三方云储存 AWS S3、阿里云 OSS、腾讯云 COS、七牛云、又拍云、SFTP、FTP、WebDav、Minio
多种数据库驱动支持，MySQL 5.7+、PostgreSQL 9.6+、SQLite 3.8.8+、SQL Server 2017+
支持配置使用多种缓存驱动，Memcached、Redis、DynamoDB、等其他关系型数据库，默认以文件的方式缓存
多图上传、拖拽上传、粘贴上传、动态设置策略上传、复制、一键复制链接
强大的图片管理功能，瀑布流展示，支持鼠标右键、单选多选、重命名等操作
自由度极高的角色组配置，可以为每个组配置多个储存策略，同时储存策略可以配置多个角色组
可针对角色组设置上传文件、文件夹路径命名规则、上传频率限制、图片审核等功能
支持图片水印、文字水印、水印平铺、设置水印位置、X/y 轴偏移量设置、旋转角度等
支持通过接口上传、管理图片、管理相册
支持在线增量更新、跨版本更新
图片广场

要求

PHP &gt;= 8.0.2
BCMath PHP 扩展
Ctype PHP 扩展
DOM PHP 拓展
Fileinfo PHP 扩展
JSON PHP 扩展
Mbstring PHP 扩展
OpenSSL PHP 扩展
PDO PHP 扩展
Tokenizer PHP 扩展
XML PHP 扩展
Imagick 拓展
exec、shell_exec 函数
readlink、symlink 函数
putenv、getenv 函数
chmod、chown、fileperms 函数

安装Lsky Pro
下载Lsky Pro项目文件
项目地址:Releases · lsky-org/lsky-pro (github.com)
wget https://github.com/lsky-org/lsky-pro/releases/download/2.1/lsky-pro-2.1.zipunzip lsky-pro-2.1.zip -d /var/www/html/lskychmod 755 -R /var/www/html/lskychown -R nginx:nginx /var/www/html/lsky
安装nginx
sudo dnf upgrade --refresh -ysudo dnf install \   https://dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/e/epel-release-8-19.el8.noarch.rpm \   https://dl.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/e/epel-next-release-8-19.el8.noarch.rpm \   http://rpms.remirepo.net/enterprise/remi-release-8.8.rpm \   dnf-utils -ydnf module list | grep php# 删除 PHPsudo dnf -y remove php php-fpm   # 删除相关扩展包sudo dnf -y remove php*   # 重置 PHP 模块列表sudo dnf -y module reset php启用（安装）PHP 8.0sudo dnf -y module enable php:remi-8.0sudo dnf -y install php php-fpmsudo dnf install php-cli php-fpm php-curl php-mysqlnd php-gd php-opcache php-zip php-intl php-common php-bcmath php-imagick php-xmlrpc php-json php-readline php-memcached php-redis php-mbstring php-apcu php-xml php-dom php-redis php-memcached php-memcache php-devel php-ctype php-fileinfo  php-openssl php-pdo php-tokenizer -ysed -i &#x27;s/user = apache/user = nginx/; s/group = apache/group = nginx/&#x27; /etc/php-fpm.d/www.confdnf install -y http://nginx.org/packages/rhel/8/x86_64/RPMS/nginx-1.24.0-1.el8.ngx.x86_64.rpmsystemctl	enable --now nginxsudo systemctl restart php-fpm.service
安装mysql
sudo dnf install mysql-server mysql -ysystemctl enable --now mysqld#mysql初始化sudo mysql_secure_installation根据自身需要设置mysql -uroot -p
设置兰空页面
[root@localhost ~]# cat /etc/nginx/conf.d/default.confserver &#123;    listen       80;    server_name  localhost;    root          /var/www/html/lsky/public/;    index        index.php;    location / &#123;      try_files $uri $uri/ /index.php?$query_string;    &#125;    location ~ \.php$ &#123;      root           /var/www/html/lsky/public/;      fastcgi_pass   unix:/run/php-fpm/www.sock;      fastcgi_index  index.php;      fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;      include        fastcgi_params;    &#125;&#125;#重启nginxnginx -s reload
访问页面192.168.48.11


利用postman获取token
官网：Postman API Platform
自己注册一个账号，并且下载桌面版的postman（如果你的项目部署在服务器，可以不用下载，直接从第二步开始）
软件下载：Download Postman | Get Started for Free
下载软件并双击运行


打开页面


6|0kKPF29VXPv2Kv6lEqu1chyxHjTpjiiEdwwkRE0T
实现typro自动上传
Releases · ygxbnet/lsky-upload (github.com)
下载自动上传项目
https://github.com/ygxbnet/lsky-upload/releases/download/0.3.0/lsky-upload_0.3.0_windows_amd64.zip

打开配置文件可以看见一下信息，更换为前面的获取的token

验证能否自动上传
打开typroa


再去看看后台图库

至此项目成功

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Centos 8 stream</tag>
        <tag>Lsky Pro</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx1.22实现内网自签证书</title>
    <url>/posts/10165/</url>
    <content><![CDATA[
Nginx1.22实现内网自签证书
HTTPS（全称：HyperText Transfer Protocol Secure）是HTTP（超文本传输协议）的安全版本。本质上，HTTPS在HTTP的基础上，通过SSL/TLS协议提供了数据加密、完整性保护和身份验证，以确保网络数据传输的安全性。HTTPS被广泛用于互联网上的安全通信，特别是在线交易和处理敏感信息时，本文以Nginx为例部署自签发https证书。
前情提要
本次实验仅仅用于实验测试有ssl需求的实验，生产环境建议不要用
本次实验环境是Rocky8.9（和centos 8 stream 大差不差）
安装nginx
dnf update -ydnf module list nginxdnf remove @nginxdnf module reset nginxdnf module install nginx:1.22 -ysystemctl enable --now nginxnginx -V
查看是否有--with-http_ssl_module
--with-http_ssl_module 是 Nginx 配置选项之一，用于启用 Nginx 的 SSL 功能模块。当 Nginx 编译时包含了 --with-http_ssl_module 选项时，表示 Nginx 将支持处理 HTTPS 请求，即通过 SSL/TLS 加密协议保护数据传输。

安装openssl
OpenSSL 是一个开放源代码的加密库，广泛用于安全通信、加密和解密数据。它提供了一组功能丰富的工具和库，用于处理安全通信所需的各种加密操作。
dnf install openssldnf install openssl-devel
生成证书
#没有就创建sslkey文件夹cd /etc/nginx/sslkey#创建本地私有密钥openssl genrsa -out ssl.key 2048 #按提示输入即可openssl req -new -key ssl.key -out ssl.csr ---------------------------------------------------------------- 国家名称(2字母代码)[XX]:CNCountry Name (2 letter code) [XX]:CN州或省名(全称)[]:GuangdongState or Province Name (full name) []:Guangdong地区名称(如城市)[默认城市]:广州Locality Name (eg, city) [Default City]:Guangzhou组织机构名称(如公司)【默认公司有限公司】:qianyiosOrganization Name (eg, company) [Default Company Ltd]:qianyios组织单位名称(如section) []:NONEOrganizational Unit Name (eg, section) []:NONE通用名称(例如，您的名字或服务器主机名)[]:qianyiosCommon Name (eg, your name or your server&#x27;s hostname) []:qianyios邮箱地址[]:abc@qq.comEmail Address []:abc@qq.com请输入以下“额外”属性Please enter the following &#x27;extra&#x27; attributes与您的证书请求一起发送to be sent with your certificate request挑战密码[]:123456A challenge password []:123456可选的公司名称[]:NONEAn optional company name []:NONE ----------------------------------------------------------------#创建证书crtopenssl x509 -req -days 1460 -in ssl.csr -signkey ssl.key -out ssl.crt #创建证书pemopenssl dhparam -out ssl.pem 2048
Nginx配置
vi /etc/nginx/nginx.conf...........include /etc/nginx/sslkey/*.conf;...........保存退出
在nginx默认配置下加上include /etc/nginx/sslkey/*.conf;

给ssl证书单独生成一个conf。
cat &gt;&gt; /etc/nginx/sslkey/ssl.conf &lt;&lt;&quot;EOF&quot;server &#123;    listen 443   ssl;    ssl_certificate                          /etc/nginx/sslkey/ssl.crt;    ssl_certificate_key                        /etc/nginx/sslkey/ssl.key;    ssl_session_timeout 5m;    ssl_protocols TLSv1.2;    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!KRB5:!aECDH:!EDH+3DES;    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;;&#125;EOF
重点！！！
在你需要的网站配置加入重定向至https，因为我们默认访问nginx页面的时候是http的，所以要重定向。现在我们模拟访问80端口的默认网页
vi /etc/nginx/nginx.conf    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sslkey/*.conf;    server &#123;        listen       80;        listen       [::]:80;        return 301 https://$host$request_uri;   #就加这一句        server_name  _;        root         /usr/share/nginx/html;

重启nginx
nginx -tnginx -s reload
这时候访问80网页，自签证书已经好了，只是不受信任而已


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Rocky 8</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql主从复制案例</title>
    <url>/posts/8acdcc65/</url>
    <content><![CDATA[
Mysql主从复制案例
各种复制架构

主从复制原理

主从复制相关线程

主节点：

​	dump Thread： 为每个Slave的I/O Thread启动一个dump线程，用于向其发送binary log events

从节点：

​	I/O Thread： 向Master请求二进制日志事件，并保存于中继日志中
​	SQL Thread： 从中继日志中读取日志事件，在本地完成重放
跟复制功能相关的文件：

master.info ：用于保存slave连接至master时的相关信息，例如账号、密码、服务器地址等
relay-log.info ：保存在当前slave节点上已经复制的当前二进制日志和本地relay log日志的对应关系
mysql-relay-bin.00000#: 中继日志,保存从主节点复制过来的二进制日志,本质就是二进制日志

二进制日志功能
【安装好mysql再来查询】
这里讲一下二进制日志是干啥的，你只要开启了二进制日志的功能
sql_log_bin=ON：开启二进制日志记录的功能，你执行一个mysql语句他就会记录一下，他在mysql默认是开启的就不用管了
log-bin=路径/文件前缀：开启二进制日志功能,这个可以直接写在/etc/my.cnf里,一主一从的步骤里有介绍
一个是记录，一个是开启，如果你只有记录，没有开启是没有二进制日志的，所以二者缺一不可
先看看怎么查
[root@master ~]# mysql -uroot -p123456 -e &quot;select @@log_bin;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+-----------+| @@log_bin |+-----------+|         1 |+-----------+[root@master ~]# mysql -uroot -p123456 -e &quot;select @@sql_log_bin;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+---------------+| @@sql_log_bin |+---------------+|             1 |+---------------+[root@master ~]#
如果你看到两个都是1或者ON那就是全部开启了
一主一从
master：192.168.48.128
slave：192.168.48.11
安装mysql

自行关闭firewalld，selinux

操作节点：【所有节点】
二进制安装（适合新机）
#你可以选择用我的脚本进行安装二进制的mysql#二进制安装是基本所有linux都可以使用的，如果有哪个系统运行不了请留言wget https://blog.qianyios.top/file/mysql_install.shbash mysql_install.sh#密码我设置了123456（建议不要太简单）#建议选清理一遍（输入3），再进行安装mysql8.0（输入2）
其他安装
其他方式自行安装，我就不解释了，只要确保同个版本差不多就行了8.0.x这些。
主节点配置
操作节点：【master】
修改/etc/my.cnf
#其他安装mysql的方法，你只需要确保有如下选项就行了[mysqld]sever-id=128log-bin=/data/logbin/qylog
sever-id ：必须是整个集群里面唯一的，不能重复
log-bin:后续会在/data/logbin生成qylog.000001的二进制文件，你可以自定义路径和文件名不用加后缀
如果是用了我的脚本安装的mysql可以直接执行下面的语句，不是的话就看上面那个步骤手动修改
cat &gt; /etc/my.cnf &lt;&lt; &quot;EOF&quot;[mysqld]server-id=128datadir=/data/mysqlskip_name_resolve=1socket=/data/mysql/mysql.socklog-error=/data/mysql/mysql.logpid-file=/data/mysql/mysql.pidcharacter-set-server=utf8mb4#开启二进制选项log-bin=/data/logbin/qylog#二进制日志记录的格式，mariadb5.5默认STATEMENT#binlog_format=STATEMENT|ROW|MIXED[client]socket=/data/mysql/mysql.sock[mysql]prompt=(\\u@\\h) [\\d]&gt;\\_EOF
由于前面不是开启了二进制文件的功能吗
我的路径是：/data/logbin/qylog，其中/data/logbin并不存在，你要手动创建，不然开启mysql会报错
mkdir -p /data/logbinchown -R mysql:mysql /data/logbinsystemctl restart mysqld
此时二进制文件已经创建成功
[root@master ~]# ll /data/logbin/total 8-rw-r----- 1 mysql mysql 157 Jul 31 18:53 qylog.000001-rw-r----- 1 mysql mysql  26 Jul 31 18:53 qylog.index
创建用于主从复制的账号
[root@master ~]# mysql -uroot -p123456 -e &quot;show master status&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+--------------+----------+--------------+------------------+-------------------+| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+--------------+----------+--------------+------------------+-------------------+| qylog.000001 |      157 |              |                  |                   |+--------------+----------+--------------+------------------+-------------------+#记住这个qylog.000001和起始位置157，后面会用到
#创建repluser用户，密码是123456，允许从192.168.48.0来连接master的mysqlmysql -uroot -p123456 -e &quot;create user repluser@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27;;&quot;mysql -uroot -p123456 -e &quot;grant replication slave on *.* to repluser@&#x27;192.168.48.%&#x27;;&quot;
从节点配置
操作节点：【slave1】
修改/etc/my.cnf
#其他安装mysql的方法，你只需要确保有如下选项就行了[mysqld]server-id=11log-bin=/data/logbin/qylogread_only=ON #设置数据库只读，针对supper user无效#启动中继日志relay_log=/data/relaylog/relay-log #relay log的文件路径，默认值hostname-relay-binrelay_log_index=/data/relaylog/relay-log.index  #默认值hostname-relay-bin.index
sever-id ：必须是整个集群里面唯一的，不能重复
log-bin:后续会在/data/logbin生成qylog.000001的二进制文件，你可以自定义路径和文件名不用加后缀
如果是用了我的脚本安装的mysql可以直接执行下面的语句，不是的话就看上面那个步骤手动修改
cat &gt; /etc/my.cnf &lt;&lt; &quot;EOF&quot;[mysqld]server-id=11datadir=/data/mysqlsocket=/data/mysql/mysql.socklog-error=/data/mysql/mysql.logpid-file=/data/mysql/mysql.pidcharacter-set-server=utf8mb4#开启二进制选项log-bin=/data/logbin/qylog#二进制日志记录的格式，mariadb5.5默认STATEMENT#binlog_format=STATEMENT|ROW|MIXEDread_only=ON #设置数据库只读，针对supper user无效relay_log=/data/relaylog/relay-log #relay log的文件路径，默认值hostname-relay-binrelay_log_index=/data/relaylog/relay-log.index  #默认值hostname-relay-bin.index[client]socket=/data/mysql/mysql.sock[mysql]prompt=(\\u@\\h) [\\d]&gt;\\_EOF
由于前面不是开启了二进制文件的功能，还有开启中继日志的功能吗
我的路径是：
log-bin=/data/logbin/qylog，其中/data/logbin并不存在
relay_log=/data/relaylog/relay-log，其中/data/relaylog并不存在
你要手动创建，不然开启mysql会报错
mkdir -p /data/logbin /data/relaylogchown -R mysql:mysql /data/logbin /data/relaylogsystemctl restart mysqld
启动复制线程
操作节点：[slave]
使用有复制权限的用户账号连接至主服务器
mysql -u root -p123456CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000001&#x27;, MASTER_LOG_POS=157,get_master_public_key=1,MASTER_DELAY=10; 
CHANGE MASTER TO
MASTER_HOST=‘192.168.48.128’,  master的ip
MASTER_USER=‘repluser’,              master创建的主从复制的账号
MASTER_PASSWORD=‘123456’,   master创建的主从复制的账号的密码
MASTER_LOG_FILE=‘qylog.000001’,   master查看的二进制文件
MASTER_LOG_POS=157,              master查看的二进制文件的起始位置
MASTER_DELAY=10;                延迟更新10s
启动复制线程
start slave;show slave status\G;
确保有两个yes就行了

如果你想重置线程可以用以下命令
stop slave;reset slave;
有一个重要的点，因为二进制日志是记录你的操作的嘛，我们在开启二进制日志之后，不是在主节点创建了一个repluser用户吗，那这个操作肯定也被记录，然后这不是主从复制了吗，这里肯定，也会同步，也会运行，二进制日志本身就是一个sql文件，普通cat是看不了，你得用这个命令
[root@master ~]# mysqlbinlog -uroot -p123456 /data/logbin/qylog.000001 -v

所有既然主从复制了，那在从节点，应该也运行了这个二进制文件，就说明从节点也有这个账号
select host,user from mysql.user;

测试
接下来在主节点导入测试数据
全选复制粘贴退出mysql运行
cat &gt; hellodb.sql &lt;&lt;&quot;EOF&quot;CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hellodb` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `hellodb`;DROP TABLE IF EXISTS `classes`;CREATE TABLE `classes` (  `ClassID` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,  `Class` varchar(100) DEFAULT NULL,  `NumOfStu` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ClassID`)) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;LOCK TABLES `classes` WRITE;INSERT INTO `classes` VALUES(1,&#x27;Shaolin Pai&#x27;,10),(2,&#x27;Emei Pai&#x27;,7),(3,&#x27;QingCheng Pai&#x27;,11),(4,&#x27;Wudang Pai&#x27;,12),(5,&#x27;Riyue Shenjiao&#x27;,31),(6,&#x27;Lianshan Pai&#x27;,27),(7,&#x27;Ming Jiao&#x27;,27),(8,&#x27;Xiaoyao Pai&#x27;,15);UNLOCK TABLES;DROP TABLE IF EXISTS `coc`;CREATE TABLE `coc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `ClassID` tinyint(3) unsigned NOT NULL,  `CourseID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;LOCK TABLES `coc` WRITE;INSERT INTO `coc` VALUES (1,1,2),(2,1,5),(3,2,2),(4,2,6),(5,3,1),(6,3,7),(7,4,5),(8,4,2),(9,5,1),(10,5,9),(11,6,3),(12,6,4),(13,7,4),(14,7,3);UNLOCK TABLES;DROP TABLE IF EXISTS `courses`;CREATE TABLE `courses` (  `CourseID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Course` varchar(100) NOT NULL,  PRIMARY KEY (`CourseID`)) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;LOCK TABLES `courses` WRITE;/*!40000 ALTER TABLE `courses` DISABLE KEYS */;INSERT INTO `courses` VALUES (1,&#x27;Hamo Gong&#x27;),(2,&#x27;Kuihua Baodian&#x27;),(3,&#x27;Jinshe Jianfa&#x27;),(4,&#x27;Taiji Quan&#x27;),(5,&#x27;Daiyu Zanghua&#x27;),(6,&#x27;Weituo Zhang&#x27;),(7,&#x27;Dagou Bangfa&#x27;);/*!40000 ALTER TABLE `courses` ENABLE KEYS */;UNLOCK TABLES;DROP TABLE IF EXISTS `scores`;CREATE TABLE `scores` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `StuID` int(10) unsigned NOT NULL,  `CourseID` smallint(5) unsigned NOT NULL,  `Score` tinyint(3) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;LOCK TABLES `scores` WRITE;INSERT INTO `scores` VALUES (1,1,2,77),(2,1,6,93),(3,2,2,47),(4,2,5,97),(5,3,2,88),(6,3,6,75),(7,4,5,71),(8,4,2,89),(9,5,1,39),(10,5,7,63),(11,6,1,96),(12,7,1,86),(13,7,7,83),(14,8,4,57),(15,8,3,93);UNLOCK TABLES;DROP TABLE IF EXISTS `students`;CREATE TABLE `students` (  `StuID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(50) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) NOT NULL,  `ClassID` tinyint(3) unsigned DEFAULT NULL,  `TeacherID` int(10) unsigned DEFAULT NULL,  PRIMARY KEY (`StuID`)) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;LOCK TABLES `students` WRITE;INSERT INTO `students` VALUES (1,&#x27;Shi Zhongyu&#x27;,22,&#x27;M&#x27;,2,3),(2,&#x27;Shi Potian&#x27;,22,&#x27;M&#x27;,1,7),(3,&#x27;Xie Yanke&#x27;,53,&#x27;M&#x27;,2,16),(4,&#x27;Ding Dian&#x27;,32,&#x27;M&#x27;,4,4),(5,&#x27;Yu Yutong&#x27;,26,&#x27;M&#x27;,3,1),(6,&#x27;Shi Qing&#x27;,46,&#x27;M&#x27;,5,NULL),(7,&#x27;Xi Ren&#x27;,19,&#x27;F&#x27;,3,NULL),(8,&#x27;Lin Daiyu&#x27;,17,&#x27;F&#x27;,7,NULL),(9,&#x27;Ren Yingying&#x27;,20,&#x27;F&#x27;,6,NULL),(10,&#x27;Yue Lingshan&#x27;,19,&#x27;F&#x27;,3,NULL),(11,&#x27;Yuan Chengzhi&#x27;,23,&#x27;M&#x27;,6,NULL),(12,&#x27;Wen Qingqing&#x27;,19,&#x27;F&#x27;,1,NULL),(13,&#x27;Tian Boguang&#x27;,33,&#x27;M&#x27;,2,NULL),(14,&#x27;Lu Wushuang&#x27;,17,&#x27;F&#x27;,3,NULL),(15,&#x27;Duan Yu&#x27;,19,&#x27;M&#x27;,4,NULL),(16,&#x27;Xu Zhu&#x27;,21,&#x27;M&#x27;,1,NULL),(17,&#x27;Lin Chong&#x27;,25,&#x27;M&#x27;,4,NULL),(18,&#x27;Hua Rong&#x27;,23,&#x27;M&#x27;,7,NULL),(19,&#x27;Xue Baochai&#x27;,18,&#x27;F&#x27;,6,NULL),(20,&#x27;Diao Chan&#x27;,19,&#x27;F&#x27;,7,NULL),(21,&#x27;Huang Yueying&#x27;,22,&#x27;F&#x27;,6,NULL),(22,&#x27;Xiao Qiao&#x27;,20,&#x27;F&#x27;,1,NULL),(23,&#x27;Ma Chao&#x27;,23,&#x27;M&#x27;,4,NULL),(24,&#x27;Xu Xian&#x27;,27,&#x27;M&#x27;,NULL,NULL),(25,&#x27;Sun Dasheng&#x27;,100,&#x27;M&#x27;,NULL,NULL);UNLOCK TABLES;DROP TABLE IF EXISTS `teachers`;CREATE TABLE `teachers` (  `TID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(100) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) DEFAULT NULL,  PRIMARY KEY (`TID`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;LOCK TABLES `teachers` WRITE;INSERT INTO `teachers` VALUES (1,&#x27;Song Jiang&#x27;,45,&#x27;M&#x27;),(2,&#x27;Zhang Sanfeng&#x27;,94,&#x27;M&#x27;),(3,&#x27;Miejue Shitai&#x27;,77,&#x27;F&#x27;),(4,&#x27;Lin Chaoying&#x27;,93,&#x27;F&#x27;);UNLOCK TABLES;DROP TABLE IF EXISTS `toc`;CREATE TABLE `toc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `CourseID` smallint(5) unsigned DEFAULT NULL,  `TID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `toc` WRITE;UNLOCK TABLES;EOF
在主节点导入
#导入[root@master ~]# mysql -uroot -p123456 &lt; hellodb.sqlmysql: [Warning] Using a password on the command line interface can be insecure.#这个警告没关系[root@master ~]# mysql -uroot -p123456 hellodb -e &quot;show tables;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+-------------------+| Tables_in_hellodb |+-------------------+| classes           || coc               || courses           || scores            || students          || teachers          || toc               |+-------------------+#成功导入#在主节点插入一条数据mysql -uroot -p123456use hellodb;insert into teachers (name,age,gender)values(&quot;XIAOHU&quot;,18,&#x27;M&#x27;);select * from teachers;#成功插入数据(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      |+-----+---------------+-----+--------+
接下来看看从节点是否有成功实现主从复制
[root@slave ~]# mysql -uroot -p123456use hellodb;show tables;select * from teachers;#看吧，已经成功从主节点复制数据到从节点(root@localhost) [hellodb]&gt; show tables;+-------------------+| Tables_in_hellodb |+-------------------+| classes           || coc               || courses           || scores            || students          || teachers          || toc               |+-------------------+7 rows in set (0.00 sec)#新插入的数据也在(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      |+-----+---------------+-----+--------+5 rows in set (0.00 sec)
至此，一主一从的主从复制实验成功，你必须理解，主要是通过二进制日志来依靠传输的
案例
实战案例：将已有的MySQL8.0单机架构变成主从复制架构
这台单机，可能运行很久了，有很多数据了，现在要让他变成主从架构
前提：两者开启二进制日志功能
1.mysqldump备份所有数据库
2.创建传输用户并且授权
3.将备份scp复制到从节点
4.从节点开启read-only等参数
5.从节点设置主从复制连接
6.从节点进行还原备份
7.开启主从复制，start slave；
#已有的master节点,备份所有的数据库mysqldump -uroot -p123456 -A -F -E -R --triggers --single-transaction \--source-data=1 --flush-privileges --hex-blob --default-character-set=utf8 &gt; all.sql#创建传输用户并且授权mysql -uroot -p123456 -e &quot;create user repluser@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27;;&quot;mysql -uroot -p123456 -e &quot;grant replication slave on *.* to repluser@&#x27;192.168.48.%&#x27;;&quot;#将备份scp复制到从节点scp -p all.sql 192.168.48.11:/root/#从节点开启read-only等参数[root@slave ~]# cat /etc/my.cnfserver-id=8log-bin=/data/logbin/qylogread_only=ONrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.index#从节点设置主从复制连接#1.查看all.sql的二进制文件和起始位置head -n 30 all.sqlCHANGE MASTER TO MASTER_LOG_FILE=&#x27;qylog.000002&#x27;, MASTER_LOG_POS=157;#2.设置复制连接，填入前面的二进制文件和起始位置mysql -u root -p123456CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000002&#x27;, MASTER_LOG_POS=157,MASTER_DELAY=10; #从节点进行还原备份#先停止记录二进制日志mysql -u root -p123456set sql_log_bin=0;source all.sqlset sql_log_bin=1;#开启主从复制start slave;show slave status\G;#可能等待60秒才能主从双yes#主节点插入新数据mysql -uroot -p123456use hellodb;insert into teachers (name,age,gender)values(&quot;qianyios&quot;,18,&#x27;M&#x27;);select * from teachers;#最后看看是否有数据库已经新插入的数据库是否同步成功(root@localhost) [hellodb]&gt; show tables;+-------------------+| Tables_in_hellodb |+-------------------+| classes           || coc               || courses           || scores            || students          || teachers          || toc               |+-------------------+7 rows in set (0.00 sec)(root@localhost) [hellodb]&gt; show databases;+--------------------+| Database           |+--------------------+| hellodb            || information_schema || mysql              || performance_schema || sys                |+--------------------+5 rows in set (0.00 sec)(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      ||   6 | qianyios      |  18 | M      |+-----+---------------+-----+--------+
一主多从
master：192.168.48.128
slave1：192.168.48.11
slave2：192.168.48.10
接下来在前面的一主一从复制架构，变成一主多从，一样，如果这个mysql的主节点是已经运行很久了，你就要全部备份，拉到从节点，注意新的从节点要安装和另外一个从节点一样的mysql版本（这里我就略过安装教程了），然后只需要在新从节点设置好/etc/my.cnf和主从连接信息，关闭二进制记录，还原all.sql文件，开启二进制记录，开启主从复制即可
这里就接着那个案例来
#在案例的时间点之后，又运行了一段时间，此时你必须重新备份全部数据库，拉到从节点mysqldump -uroot -p123456 -A -F -E -R --triggers --single-transaction \--source-data=1 --flush-privileges --hex-blob --default-character-set=utf8 &gt; all.sqlscp -p all.sql 192.168.48.10:/root/#新从节点创建传输用户并且授权mysql -uroot -p123456 -e &quot;create user repluser@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27;;&quot;mysql -uroot -p123456 -e &quot;grant replication slave on *.* to repluser@&#x27;192.168.48.%&#x27;;&quot;#vim进去all.sql会有一段CHANGE MASTER TO MASTER_LOG_FILE=&#x27;qylog.000003&#x27;, MASTER_LOG_POS=157;#是不是很像连接信息，那你就把它变成下面那样，就其实它二进制文件和起始位置都有了，只需要把其他补齐就行了CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000003&#x27;, MASTER_LOG_POS=157; #然后保存退出，这和案例里的先设置主从复制连接效果是一样，我就直接在文件里设置也一样#没关系的，这样进文件，省得我还要看一遍二进制文件是啥了，对不对，我直接进去设置#接下来进行还原set sql_log_bin=0;source all.sql;set sql_log_bin=1;#开启slave主从复制start slave;show slave status\G;#接下来你就自行测试，看看是否有数据库已经还原成功和新插入数据是否成功并确认是否同步
至此一主多从成功！
级联复制
master：192.168.48.128
slave1：192.168.48.11（充当级联slave中间节点）
slave2：192.168.48.10
这个实验，我就只用了一个slave2，slave3和slave2的操作一样的

为啥会有级联呢！
就好比前面的一主多从，他要进行多个复制任务给从节点，那主节点的压力是不是大一点，那么就有了级联，把复制任务分担给从节点
这里还有一个问题
首先我们都知道主从复制的原理就是，主节点通过二进制日志bin传输数据到从节点的io线程接收写到中继日志relay,那后面的slave2和slave3应该也是这样，只需要接收slave1的bin的数据就行了是不是
错！大错特错！！！！！！
slave1的bin的数据从哪里来，他自己本身就是生成自己自身的数据，他怎么可能有主节点的数据呢？是不是得从自身的relay来，所以后面会讲到一个参数，就是可以让relay的数据传输过来的时候自动写入到bin，那就后面再说
这里延续前面的一主多从
#首先我得把slave2的一些信息删除，脱离原来一主多从#/etc/my.cnf的信息不用删，本身就是给从节点用的#要删就要删除主从复制的连接信息，顺便重置二进制信息stop slave;reset slave all;reset master;
在中间节点slave1启用以下配置，实现中间slave节点能将master的二进制日志在本机进行数据库更新，并且也同时更新本机的二进制，从而实现级联复制
[mysqld]sever-id=11log-bin=/data/logbin/qylogread_only=ONrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexlog_slave_updates #级联复制中间节点的必选，,MySQL8.0此为默认值,可以不用人为添加,其它版本默认不开启
重启mysql
systemctl restart mysqld
接着在新的从节点（slave2）进行操作，假设他是新的，你要进行的是，配置my.cnf，创建主从复制账号和授权，还有因为他是新的，没有数据，你还要在从节点备份全部数据库到从节点
#新的从节点[mysqld]server-id=10log-bin=/data/logbin/qylogread_only=ON relay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.index#从节点导出全部数据库的备份（注意是从节点）mysqldump -uroot -p123456 -A -F -E -R --triggers --single-transaction \--source-data=1 --flush-privileges --hex-blob --default-character-set=utf8 &gt; all.sql#将备份scp复制到从节点scp -p all.sql 192.168.48.10:/root/#新的从节点创建传输用户并且授权mysql -uroot -p123456 -e &quot;create user repluser@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27;;&quot;mysql -uroot -p123456 -e &quot;grant replication slave on *.* to repluser@&#x27;192.168.48.%&#x27;;&quot;#新的从节点vim进入all.sql#编辑那条语句，这时候这里的master就不是主节点而是指向中间节点了CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.11&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000003&#x27;, MASTER_LOG_POS=157; #然后保存退出#新的从节点接下来进行还原set sql_log_bin=0;source all.sql;set sql_log_bin=1;#新的从节点开启slave主从复制start slave;show slave status\G;#接着我在主节点插入数据use hellodb;insert into teachers (name,age,gender)values(&quot;qianyios2&quot;,18,&#x27;M&#x27;);#之后在中间从节点看到了新的数据#在最后的从节点也看到了数据
主主复制
master：192.168.48.128
slave1：192.168.48.11（让他变成master主节点）
slave2：192.168.48.10
容易产生的问题：数据不一致；因此慎用
配置步骤
(1) 各节点使用一个惟一server_id
(2) 都启动binary log和relay log
(3) 创建拥有复制权限的用户账号
(4) 均把对方指定为主节点，并启动复制线程

keepalived提供vip地址，实现数据库集群高可用，这个点后面再说
双主的意思就是，这两个节点互为主从，实现双向复制，我是主的时候你是从，你是主的时候我是从
#将slave1的/etc/my.cnf里的read only相关参数要删掉，既然都是主节点，那么肯定要可读可写，保留如下[mysqld]server-id=11log-bin=/data/logbin/qylogrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.index#主节点添加relay_log相关参数[mysqld]server-id=128log-bin=/data/logbin/qyloglog_slave_updatesrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.index#主节点还要创建/data/relaylogmkdir -p /data/relaylogchown -R mysql:mysql /data/relaylogsystemctl restart mysqld#由于slave1的主从复制连接已经指向了master节点，我就不改了，（这是之前的）CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000001&#x27;, MASTER_LOG_POS=157,MASTER_DELAY=10; 
#现在接着配置主节点的主从复制连接指向第二个主节点，slave1#你首先要在第二个主节点(slave1)查看二进制文件的位置(root@localhost) [hellodb]&gt; show master logs;+--------------+-----------+-----------+| Log_name     | File_size | Encrypted |+--------------+-----------+-----------+| qylog.000001 |      1405 | No        || qylog.000002 |       200 | No        || qylog.000003 |       180 | No        || qylog.000004 |       488 | No        || qylog.000005 |       180 | No        || qylog.000006 |       465 | No        |+--------------+-----------+-----------+#记住qylog.000006 | 465 （看最新的就行了）#在第一个主节点设置复制连接，指向第二个主节点CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.11&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000006&#x27;, MASTER_LOG_POS=465,MASTER_DELAY=10;start slave;show slave status\G;#这时候第一个主节点显示的是双yes
测试两个节点各自插入新数据，看看对方有没有实现双向复制
#第一个主节点use hellodb;insert into teachers (name,age,gender)values(&quot;qi1&quot;,18,&#x27;M&#x27;);#第二个节点查询(root@localhost) [hellodb]&gt;  select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      ||   6 | qianyios      |  18 | M      ||   7 | qianyios1     |  18 | M      ||   8 | qianyios2     |  18 | M      ||   9 | qianyios3     |  18 | M      ||  10 | qi1           |  18 | M      |+-----+---------------+-----+--------+#第二个主节点use hellodb;insert into teachers (name,age,gender)values(&quot;qi2&quot;,18,&#x27;M&#x27;);#好奇怪，我这里就出问题了，第二个节点复制不到主节点不知道什么问题#后来才知道是设置了时间延迟#但起始也不是这个原因，你要关闭延迟也没问题，主要原因（可以千万最后一个章节bug集锦中查看）STOP SLAVE SQL_THREAD;CHANGE MASTER TO MASTER_DELAY = 0;START SLAVE SQL_THREAD;SHOW SLAVE STATUS\G;#两个节点都执行一下#查看第一个节点是否有数据(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   9 | qi1           |  18 | M      ||  10 | qi2           |  18 | M      |+-----+---------------+-----+--------+6 rows in set (0.00 sec)
如果你两个节点都同时插入数据，会出现一个主键的冲突比如说教师id你第一个节点这边添加了一个新数据，id自动分配为5但是又有10秒的延迟，都还没同步过去你在第二个节点又添加一个新数据，Id自动分配为5，那这样就会报错，所以两个数据库把插入的数据记得删掉
所以要这样配置
添加auto_increment_offset和auto_increment_increment
#slave1[mysqld]server-id=11log-bin=/data/logbin/qylogrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexauto_increment_offset=2     #开始点auto_increment_increment=2   #增长幅度 #主节点[mysqld]server-id=128log-bin=/data/logbin/qyloglog_slave_updatesrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexauto_increment_offset=1     #开始点auto_increment_increment=2   #增长幅度
两个节点重启服务
systemctl restart mysqld
再次两个节点同时插入数据
#第一个节点use hellodb;insert into teachers (name,age,gender)values(&quot;qi111&quot;,18,&#x27;M&#x27;);select * from teachers;......，#id自动增长为19|  17 | qi13          |  18 | M      ||  19 | qi111         |  18 | M      |#第二个节点use hellodb;insert into teachers (name,age,gender)values(&quot;qi112&quot;,18,&#x27;M&#x27;);select * from teachers;......，#id自动增长为17|  17 | qi13          |  18 | M      ||  18 | qi112         |  18 | M      |#就这样就不会导致主键的冲突#最后等待10秒的延迟，数据就会一致，两个节点都同步成功了(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      |......|  17 | qi13          |  18 | M      ||  18 | qi112         |  18 | M      ||  19 | qi111         |  18 | M      |+-----+---------------+-----+--------+13 rows in set (0.00 sec)

看前面的架构图，两主一从，其实现在的状况是，数据从master写入到slave再到slave2的，slave2是没有连接master，所以只能后期写脚本，监测keepalived的vip变化，一旦变化，就去修改那个主从复制连接中的master ip去变化。

半同步复制


官方文档
https://dev.mysql.com/doc/refman/8.0/en/replication-semisync.htmlhttps://dev.mysql.com/doc/refman/5.7/en/replication-semisync.htmlhttps://mariadb.com/kb/en/library/semisynchronous-replication/
经过前两个图的理解，现在就开始实操
#接着上面一个主主的案例下来，如果不是，你只需要保留/etc/my.cnf有如下选项即可#master[mysqld]server-id=128log-bin=/data/logbin/qylogrpl_semi_sync_master_enabled=ON   #添加此行,需要先安装semisync_master.so插件后,再重启配置文件,否则无法启动rpl_semi_sync_master_timeout=10000  #设置10s内无法同步，也将返回成功信息给客户端#slave1server-id=11log-bin=/data/logbin/qylogrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexrpl_semi_sync_slave_enabled=ON #修改此行,需要先安装semisync_slave.so插件后,再重启,否则无法启动#slave1server-id=10log-bin=/data/logbin/qylogrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexrpl_semi_sync_slave_enabled=ON #修改此行,需要先安装semisync_slave.so插件后,再重启,否则无法启动#注意先别那么快重启mysql！！要安装半同步复制插件#master(永久安装)，如果想要临时的直接设置全局变量即可mysql -uroot -p123456 -e &quot;INSTALL PLUGIN rpl_semi_sync_master SONAME &#x27;semisync_master.so&#x27;;&quot;systemctl restart mysql#slave1mysql -uroot -p123456 -e &quot;INSTALL PLUGIN rpl_semi_sync_slave SONAME &#x27;semisync_slave.so&#x27;;&quot;systemctl restart mysql#slave2mysql -uroot -p123456 -e &quot;INSTALL PLUGIN rpl_semi_sync_slave SONAME &#x27;semisync_slave.so&#x27;;&quot;systemctl restart mysql
#三个节点的复制关系都要删掉mysql -uroot -p123456stop slave;reset slave all;#三个节点重置二进制日志reset master;
master导出全部备份给slave1和slave2，创建复制账号，关闭二进制日志记录
还原数据库，开启二进制日志记录，自行验证是否同步，这里就略过了
（注意是一主二从）相当于重新开始了
半同步复制的一些参数
#master节点(root@localhost) [hellodb]&gt; SHOW GLOBAL VARIABLES LIKE &#x27;%semi%&#x27;;+-------------------------------------------+------------+| Variable_name                             | Value      |+-------------------------------------------+------------+| rpl_semi_sync_master_enabled             | ON         || rpl_semi_sync_master_timeout             | 10000      || rpl_semi_sync_master_trace_level          | 32         || rpl_semi_sync_master_wait_for_slave_count | 1          || rpl_semi_sync_master_wait_no_slave        | ON         || rpl_semi_sync_master_wait_point           | AFTER_SYNC |+-------------------------------------------+------------+

rpl_semi_sync_master_enabled：是否启用半同步复制功能。ON 表示启用，OFF 表示禁用。
rpl_semi_sync_master_timeout：主库等待从库响应的超时时间（单位：毫秒）。超时后主库会切换为异步复制。
rpl_semi_sync_master_trace_level：日志记录的详细程度，数值越大记录越详细。
rpl_semi_sync_master_wait_for_slave_count：主库提交事务时需要等待的从库数量。
rpl_semi_sync_master_wait_no_slave：当没有从库连接时，主库是否继续使用半同步复制。ON 表示继续等待，OFF 表示切换为异步复制。
rpl_semi_sync_master_wait_point：半同步复制的等待点。AFTER_SYNC 表示在同步完成后等待，AFTER_FLUSH 表示在数据刷新到磁盘后等待。

#master(root@localhost) [hellodb]&gt; SHOW GLOBAL STATUS LIKE &#x27;%semi%&#x27;;+--------------------------------------------+-------+| Variable_name                              | Value |+--------------------------------------------+-------+| Rpl_semi_sync_master_clients               | 2     | #成功的有两个| Rpl_semi_sync_master_net_avg_wait_time     | 0     || Rpl_semi_sync_master_net_wait_time         | 0     || Rpl_semi_sync_master_net_waits             | 2     || Rpl_semi_sync_master_no_times              | 0     || Rpl_semi_sync_master_no_tx                 | 0     || Rpl_semi_sync_master_status                | ON    || Rpl_semi_sync_master_timefunc_failures     | 0     || Rpl_semi_sync_master_tx_avg_wait_time      | 674   || Rpl_semi_sync_master_tx_wait_time          | 674   || Rpl_semi_sync_master_tx_waits              | 1     || Rpl_semi_sync_master_wait_pos_backtraverse | 0     || Rpl_semi_sync_master_wait_sessions         | 0     || Rpl_semi_sync_master_yes_tx                | 1     |+--------------------------------------------+-------+
Rpl_semi_sync_master_clients：当前连接到主库并支持半同步复制的从库数量。
Rpl_semi_sync_master_net_avg_wait_time：半同步复制中网络平均等待时间（单位：微秒）。
Rpl_semi_sync_master_net_wait_time：半同步复制中网络总等待时间（单位：微秒）。
Rpl_semi_sync_master_net_waits：半同步复制中网络等待的总次数。
Rpl_semi_sync_master_no_times：半同步复制未成功（切换为异步复制）的次数。
Rpl_semi_sync_master_no_tx：半同步复制未成功时的事务数量。
Rpl_semi_sync_master_status：当前半同步复制的状态，ON 表示启用，OFF 表示禁用。
Rpl_semi_sync_master_timefunc_failures：半同步复制中时间函数失败的次数。
Rpl_semi_sync_master_tx_avg_wait_time：事务平均等待时间（单位：微秒）。
Rpl_semi_sync_master_tx_wait_time：事务总等待时间（单位：微秒）。
Rpl_semi_sync_master_tx_waits：事务等待的总次数。
接下来进行测试
1.测试都启动的情况下，一主二从，是否正常的主从同步
#主节点use hellodb;insert into teachers (name,age,gender)values(&quot;oooo1&quot;,18,&#x27;M&#x27;);use hellodb;select * from teachers;#从节点use hellodb;select * from teachers;#经测试同步成功(root@localhost) [hellodb]&gt; use hellodb;select * from teachers;Database changed+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      |......|  21 | qy2           |  56 | F      ||  22 | oooo1         |  18 | M      |+-----+---------------+-----+--------+15 rows in set (0.00 sec)
2.接下来测试，slave关闭mysql模拟宕机的操作，再次进行插入数据
#slave2systemctl stop mysqld#主节点use hellodb;insert into teachers (name,age,gender)values(&quot;oooo1&quot;,18,&#x27;M&#x27;);use hellodb;select * from teachers;#slave1use hellodb;select * from teachers;#slave1成功同步数据(root@localhost) [hellodb]&gt; use hellodb;select * from teachers;Database changed+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   9 | qi1           |  18 | M      ||  10 | qi2           |  18 | M      ||  11 | qi3           |  18 | M      ||  12 | qi4           |  18 | M      ||  13 | qi19          |  18 | M      ||  14 | qi20          |  18 | M      ||  17 | qi13          |  18 | M      ||  18 | qi112         |  18 | M      ||  19 | qi111         |  18 | M      ||  21 | qy2           |  56 | F      ||  22 | oooo1         |  18 | M      ||  23 | oooo1         |  18 | M      |+-----+---------------+-----+--------+16 rows in set (0.00 sec)
3.接下来，让最后一个slave1也宕机看看是什么情况
#slave1systemctl stop mysqld#主节点use hellodb;insert into teachers (name,age,gender)values(&quot;oooo2&quot;,18,&#x27;M&#x27;);use hellodb;select * from teachers;#情况如下，默认等待10s(root@localhost) [hellodb]&gt; insert into teachers (name,age,gender)values(&quot;oooo2&quot;,18,&#x27;M&#x27;);Query OK, 1 row affected (10.01 sec)#此时已经没有slave节点连接数了(root@localhost) [hellodb]&gt; SHOW GLOBAL STATUS LIKE &#x27;%semi%&#x27;;+--------------------------------------------+----------+| Variable_name                              | Value    |+--------------------------------------------+----------+| Rpl_semi_sync_master_clients               | 0        |#在插入一次数据，这里就没有等待了(root@localhost) [hellodb]&gt; insert into teachers (name,age,gender)values(&quot;oooo3&quot;,18,&#x27;M&#x27;);Query OK, 1 row affected (0.05 sec)

第一次插入操作等待 10 秒，是因为主节点在半同步复制模式下等待从节点确认，但超时了。
第二次插入操作没有等待，是因为主节点已经检测到没有从节点连接，直接以异步复制模式执行。

4.恢复所有的slave节点，看看有无同步
#slave1和slave2systemctl start mysqld#主节点的数据(root@localhost) [hellodb]&gt; use hellodb;select * from teachers;Database changed+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      |......|  22 | oooo1         |  18 | M      ||  23 | oooo1         |  18 | M      ||  24 | oooo1         |  18 | M      ||  32 | oooo2         |  18 | M      ||  33 | oooo3         |  18 | M      |+-----+---------------+-----+--------+19 rows in set (0.00 sec)#slave1和slave2的数据成功同步(root@localhost) [hellodb]&gt; use hellodb;select * from teachers;Database changed+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      |......|  22 | oooo1         |  18 | M      ||  23 | oooo1         |  18 | M      ||  24 | oooo1         |  18 | M      ||  32 | oooo2         |  18 | M      ||  33 | oooo3         |  18 | M      |+-----+---------------+-----+--------+19 rows in set (0.00 sec)
至此半同步复制成功
复制过滤器
让从节点仅复制指定的数据库，或指定数据库的指定表
复制过滤器两种实现方式：
(1) 服务器选项：主服务器仅向二进制日志中记录与特定数据库相关的事件
缺点：基于二进制还原将无法实现；不建议使用
优点: 只需要在主节点配置一次即可


只需要在主服务器配置，如果我不想同步论坛，只想同步其他的，只需要禁用论坛的二进制日志，就行了，但是这就有一个问题，你论坛的二进制日志都禁用了，那你这个论坛的这个数据库突然出现问题了，数据怎么办？这就是缺点

这个禁用二进制，不用禁用log_bin选项，看下面的来配置黑白名单就行
注意：此项和 binlog_format相关
参看：https://mariadb.com/kb/en/library/mysqld-options/#-binlog-ignore-db
#只同步db1和db2，也就是只有这两个会开启二进制日志，其他数据库不会#（白名单和黑名单必须二选一)#默认就是白名单)vim /etc/my.cnf#白名单binlog-do-db=db1 #数据库白名单列表，不支持同时指定多个值，如果想实现多个数据库需多行实现binlog-do-db=db2 #也可以设置黑名单binlog-ignore-db=db3 #数据库黑名单列表
注意：
This option will not work with cross-database updates with statement-based  logging. See the Statement-Based Logging section for more information.This option can not be set dynamically.When setting it on the command-line or in a server option group in an option  file, the option does not accept a comma-separated list. If you would like to  specify multiple filters, then you need to specify the option multiple times.#此选项不适用于使用基于语句的日志记录的跨数据库更新。有关更多信息，请参阅基于语句的日志记录部分。#此选项不能动态设置。#在命令行或选项文件中的服务器选项组中设置该选项时，该选项不接受逗号分隔的列表。如果希望指定多个过滤器，则需要多次指定该选项。
来测试吧
#master#配置文件只需要保留如下选项vim /etc/my.cnf[mysqld]server-id=128log-bin=/data/logbin/qylogbinlog-do-db=db1binlog-do-db=db2 binlog-ignore-db=db3#slave1和slave2记得删除半同步的选项，最后所有服务器重启mysqlsystemctl restart mysqld#主节点创建测试的数据库mysql -u root -p123456 -e&quot;create database db1;&quot;mysql -u root -p123456 -e&quot;create database db2;&quot;mysql -u root -p123456 -e&quot;create database db3;&quot;#db1和db2插入数据mysql -u root -p123456 -e&quot;USE db1;CREATE TABLE test ( id INT);INSERT INTO test (id) VALUES (1);SELECT * FROM test;&quot;mysql -u root -p123456 -e&quot;USE db2;CREATE TABLE test ( id INT);INSERT INTO test (id) VALUES (1);SELECT * FROM test;&quot;#查看数据库mysql -u root -p123456 -e&quot;show databases;&quot;+--------------------+| Database           |+--------------------+| db1                || db2                || db3                || hellodb            || information_schema || mysql              || performance_schema || sys                |+--------------------+#这时候其他从节点可以查看是否有这个db1和db2数据库mysql -u root -p123456 -e&quot;show databases;&quot;mysql -u root -p123456 -e&quot;USE db1;SELECT * FROM test;&quot;mysql -u root -p123456 -e&quot;USE db2;SELECT * FROM test;&quot;#同步成功，slave1和slave2都一样，都成功同步了白名单的数据库，黑名单的数据库就没同步[root@slave1 ~]# mysql -u root -p123456 -e&quot;show databases;&quot;+--------------------+| Database           |+--------------------+| db1                || db2                || hellodb            || information_schema || mysql              || performance_schema || sys                |+--------------------+[root@slave1 ~]# mysql -u root -p123456 -e&quot;USE db1;SELECT * FROM test;&quot;+------+| id   |+------+|    1 |+------+[root@slave1 ~]# mysql -u root -p123456 -e&quot;USE db2;SELECT * FROM test;&quot;+------+| id   |+------+|    1 |+------+[root@slave ~]#
(2) 从服务器SQL_THREAD在relay log中的事件时，仅读取与特定数据库(特定表)相关的事件并应用于本地
缺点：会造成网络及磁盘IO浪费,在所有从节点都要配置
优点: 不影响二进制备份还原
从服务器上的复制过滤器相关变量
白名单和黑名单二选一，复制库和复制表，以及通配符类型三选一（白名单和黑名单二选一），不然会出现数据不一致的情况
replicate_do_db=db1 #指定复制库的白名单，选项不支持多值,只能分别写多行实现replicate_do_db=db2 #指定复制库的白名单，选项不支持多值,只能分别写多行实现replicate_ignore_db=db4  #指定复制库黑名单replicate_do_table=db1.test #指定复制数据库中的表的白名单replicate_ignore_table=db2.test #指定复制数据库中表的黑名单replicate_wild_do_table= foo%.bar% #支持通配符 只复制数据库名以 foo 开头，表名以 bar 开头的表replicate_wild_ignore_table=db1.tbl_% #忽略 db1 数据库中所有以 tbl_ 开头的表的复制

#删除master的第一步的配置，保留如下[mysqld]server-id=128log-bin=/data/logbin/qylog#然后重启systemctl restart mysqld
在所有的从节点，注意是所有的从节点
[mysqld]replicate_do_db=db2 replicate_do_db=db1#这次我不加黑名单，我看会不会同步db3#然后重启systemctl restart mysqld
master创建测试数据
mysql -u root -p123456#db1创建tes1表，以及在原来的test表插入新数据USE db1;CREATE TABLE test1 ( id INT);INSERT INTO test1 (id) VALUES (1);SELECT * FROM test1;USE db1;INSERT INTO test (id) VALUES (2);SELECT * FROM test;#在db2原来的test插入新数据，且创建新表USE db2;CREATE TABLE test1 ( id INT);INSERT INTO test1 (id) VALUES (1);SELECT * FROM test1;USE db2;INSERT INTO test (id) VALUES (2);SELECT * FROM test;#在db3创建新表USE db3;CREATE TABLE test ( id INT);INSERT INTO test (id) VALUES (1);SELECT * FROM test;USE db3;INSERT INTO test (id) VALUES (2);SELECT * FROM test;
slave查看从节点
USE db1;SELECT * FROM test1;USE db1;SELECT * FROM test;USE db2;SELECT * FROM test1;USE db2;SELECT * FROM test;use db3;#都是可以成功同步数据，只有db3是没有同步过来的(root@localhost) [(none)]&gt; USE db1;SELECT * FROM test1;+------+| id   |+------+|    1 |+------+1 row in set (0.00 sec)(root@localhost) [db1]&gt; USE db1;SELECT * FROM test;+------+| id   |+------+|    1 ||    2 |+------+2 rows in set (0.00 sec)(root@localhost) [db1]&gt; USE db2;SELECT * FROM test1;+------+| id   |+------+|    1 |+------+1 row in set (0.00 sec)(root@localhost) [db2]&gt; USE db2;SELECT * FROM test;+------+| id   |+------+|    1 ||    2 |+------+2 rows in set (0.00 sec)(root@localhost) [db2]&gt; use db3;ERROR 1049 (42000): Unknown database &#x27;db3&#x27;
GTID复制
全局复制Id
背景

💥 传统复制机制的问题（基于 binlog 位置点）

多个客户端（如图中）分别发起事务 1001、1002、1003，主库依次执行，写入 binlog。
主库通过只有一个的 dump 线程把 binlog 发送给从库。
从库通过 IO 线程读取 binlog，通过 SQL 线程 一个一个串行执行事务。

❗问题来了：

从库自身也有客户端访问，可能也会产生事务，编号也可能是 1001、1002、1003（编号只是应用内部的业务编号，不是数据库唯一标识）。
主库传过来的 binlog，只记录了操作内容、表名、数据改动，但没有全局唯一事务 ID。
所以从库根本分不清：这个 1001 是主库的？还是我自己产生的？
为了避免数据冲突、保证顺序一致，从库只能串行地照着 binlog 执行事务，而不能乱序执行或并发执行。


正是因为分不清，怕双方的事务乱序执行，所以才会选择串行执行，确保安全
而且如果一个事务特别特别慢，他会拖累整个串行执行的进度，效率慢

GTID（全局事务标识符） 从 MySQL 5.6 开始引入，建议使用 5.7 及以上版本，更稳定可靠。
在 MySQL 5.7 中，即使未开启 GTID，也会生成匿名 GTID，具备一定追踪能力。
GTID 复制的优势包括：

支持 master_auto_position=1，无需指定 binlog 文件和 POS 点，主从复制更简化。


就是你那个主从复制连接里，不用记录了是哪个二进制文件和起点了，有了这个参数就可以自动识别，前提是主从的数据库要一致


实现了事务级的幂等性，重复执行事务不会出错。
配合 5.6 的库级并行复制和 5.7 的事务级并行复制（逻辑时钟机制），显著提升复制并发性能，降低延迟。
可安全支持多个 dump 线程 + 多 SQL 线程 并发复制。

GTID 优点:

保证事务全局统一
截取日志更加方便。跨多文件，判断起点终点更加方便
判断主从工作状态更加方便
传输日志，可以并发传输。SQL回放可以更高并发
主从复制构建更加方便


GTID = server_uuid:transaction_id，在一组复制中，全局唯一
server_uuid 来源于 /var/lib/mysql/auto.cnf

GTID服务器相关选项
gtid_mode=ON #gtid模式enforce_gtid_consistency=ON #保证GTID安全的参数
测试案例：前提是主从的数据库要一致，并且创建好复制传输的账号
#如果主服务器和从服务器数据不一致,需要先将主库数据备份还原至从库,再执行下面操作
mysqldump -uroot -p123456 -A -F -E -R --triggers --single-transaction \--source-data=1 --flush-privileges --hex-blob --default-character-set=utf8 &gt; all.sql#自行复制的从节点，还原的步骤我就不说了
1.主节点
vim /etc/my.cnf#保留如下[mysqld]server-id=128log-bin=/data/logbin/qyloggtid_mode=ONenforce_gtid_consistency=ON#然后重启mysqlsystemctl restart mysqld
2.从节点（slave1和slave2都一样）
vim /etc/my.cnfserver-id=（从节点的唯一id）log-bin=/data/logbin/qylogrelay_log=/data/relaylog/relay-logrelay_log_index=/data/relaylog/relay-log.indexgtid_mode=ONenforce_gtid_consistency=ON#然后重启mysqlsystemctl restart mysqld
3.从节点重置前面实验的slave复制连接
#slave1和slave2都执行stop slave;reset slave all;CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, get_master_public_key=1,MASTER_AUTO_POSITION=1; #使用GTIDstart slave;show slave status\G;#然后就是双yes
4.查看是否成功
主节点执行一个操作，我这里就执行创建一个db4数据库(root@localhost) [(none)]&gt; create database db5;Query OK, 1 row affected (0.05 sec)(root@localhost) [(none)]&gt; SHOW MASTER STATUS\G*************************** 1. row ***************************             File: qylog.000004         Position: 339     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 363255e7-6ebc-11f0-80de-000c293bf782:1#这里就可以看到gtid了1 row in set (0.00 sec)#然后从节点(root@localhost) [(none)]&gt; show slave status\G;......           Retrieved_Gtid_Set: 363255e7-6ebc-11f0-80de-000c293bf782:1            Executed_Gtid_Set: 363255e7-6ebc-11f0-80de-000c293bf782:1  #是不是和前面主节点一样......
至此gtid成功
主从复制bug集锦
1.主从复制在从节点你可能会看见
show slave status\G;
Last_IO_Error: error connecting to master &#x27;repluser@192.168.48.11:3306&#x27; - retry-time: 60 retries: 1 message: Authentication plugin &#x27;caching_sha2_password&#x27; reported error: Authentication requires secure connection.
原因：MySQL 8 默认使用 caching_sha2_password 作为认证插件，这种认证方式需要安全连接（SSL/TLS）。需要生成证书，如果不想生成证书，你自己现在从节点进行一次登入
如果你是级联最后的slave，主节点的地址要指向中间节点
在这种情况下，服务器将RSA公钥发送给客户端，后者使用它来加密密码并将结果返回给服务器。插件使用服务器端的RSA私钥解密密码，并根据密码是否正确来接受或拒绝连接。
mysql -urepluser -p123456 -h192.168.48.128 --get-server-public-key
然后重启slave复制线程
stop slave;start slave;show slave status\G;
以上只是临时的解决方案，还有一个办法就是
加这个参数get_master_public_key=1
如果这个不行就换get_source_public_key=1
CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.128&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000001&#x27;, MASTER_LOG_POS=157,get_master_public_key=1,MASTER_DELAY=10; 
2.在主主复制的时候，我知道不是设置了延迟复制为10秒吗，就是那个主从复制的连接最后一项
但是情况是：
第一个主节点插入数据成功复制到从节点
但是在第二个主节点，插入数据之后，就出现l下面的情况
SQL_Remaining_Delay: 3995
Slave_SQL_Running_State: Waiting until SOURCE_DELAY seconds after source executed event           Master_Retry_Count: 86400
问了ai
你设置了延迟复制 MASTER_DELAY = 10；从库显示 SQL_Remaining_Delay: 3995，说明它在“等事件执行时间到了再处理”；这个是正常现象，不是错误；延迟时间这么长，可能是主节点的系统时间比从节点慢；
结果你知道吗，真的服了，两个主机的时间不一致
[root@slave ~]# dateFri Aug  1 03:06:40 CST 2025[root@master ~]# dateFri Aug  1 02:00:20 AM CST 2025#但是是我的从节点时间有问题，我更新了一下时间
复制的监控和维护
清理日志
PURGE &#123; BINARY | MASTER &#125; LOGS  &#123; TO &#x27;log_name&#x27; | BEFORE datetime_expr &#125;RESET MASTER TO # #mysql 不支持RESET SLAVE [ALL]
复制监控
SHOW MASTER STATUSSHOW BINARY LOGSSHOW BINLOG EVENTSSHOW SLAVE STATUSSHOW PROCESSLIST
从服务器是否落后于主服务
Seconds_Behind_Master：0
如何确定主从节点数据是否一致
percona-toolkit
数据不一致如何修复
删除从数据库，重新复制
复制的问题和解决方案
数据损坏或丢失

Master：MHA + semisync replication
Slave： 重新复制

不惟一的 server id
重新复制
复制延迟

升级到MySQL5.7以上版本(5.7之前的版本，没有开GTID之前，主库可以并发事务，但是dump传输时是串行)利用GTID(MySQL5.6需要手动开启,MySQL5.7以上默认开启)支持并发传输binlog及并行多个SQL线程
减少大事务,将大事务拆分成小事务
减少锁
sync_binlog=1 加快binlog更新时间,从而加快日志复制
需要额外的监控工具的辅助
一从多主：Mariadb10 版后支持
多线程复制：对多个数据库复制

MySQL 主从数据不一致
造成主从不一致的原因

主库binlog格式为Statement，同步到从库执行后可能造成主从不一致。
主库执行更改前有执行set sql_log_bin=0，会使主库不记录binlog，从库也无法变更这部分数据。
从节点未设置只读，误操作写入数据
主库或从库意外宕机，宕机可能会造成binlog或者relaylog文件出现损坏，导致主从不一致
主从实例版本不一致，特别是高版本是主，低版本为从的情况下，主数据库上面支持的功能，从数据库上面可能不支持该功能
主从sql_mode 不一致
MySQL自身bug导致

主从不一致修复方法

将从库重新实现

虽然这也是一种解决方法，但是这个方案恢复时间比较慢，而且有时候从库也是承担一部分的查询操作的，不能贸然重建。

使用percona-toolkit工具辅助

PT工具包中包含pt-table-checksum和pt-table-sync两个工具，主要用于检测主从是否一致以及修复数据不一致情况。这种方案优点是修复速度快，不需要停止主从辅助，缺点是需要知识积累，需要时间去学习，去测试，特别是在生产环境，还是要小心使用
关于使用方法，可以参考下面链接：https://www.cnblogs.com/feiren/p/7777218.html

手动重建不一致的表

在从库发现某几张表与主库数据不一致，而这几张表数据量也比较大，手工比对数据不现实，并且重做整个库也比较慢，这个时候可以只重做这几张表来修复主从不一致这种方案缺点是在执行导入期间需要暂时停止从库复制，不过也是可以接受的
范例：A,B,C这三张表主从数据不一致
1、从库停止Slave复制mysql&gt;stop slave;2、在主库上dump这三张表，并记录下同步的binlog和POS点mysqldump -uroot -pmagedu -q --single-transaction --master-data=2 testdb A B C &gt;/backup/A_B_C.sql3、查看A_B_C.sql文件，找出记录的binlog和POS点head A_B_C.sql例如:MASTERLOGFILE=&#x27;mysql-bin.888888&#x27;, MASTERLOGPOS=666666;#以下指令是为了保障其他表的数据不丢失，一直同步直到那个点结束，A,B,C表的数据在之前的备份已经生成了一份快照，只需要导入进入，然后开启同步即可4、把A_B_C.sql拷贝到Slave机器上，并做指向新位置mysql&gt;start slave until MASTERLOGFILE=&#x27;mysql-bin.888888&#x27;, MASTERLOGPOS=666666;5、在Slave机器上导入A_B_C.sqlmysql -uroot -pmagedu testdb mysql&gt;set sql_log_bin=0;mysql&gt;source /backup/A_B_C.sqlmysql&gt;set sql_log_bin=1;6、导入完毕后，从库开启同步即可。mysql&gt;start slave;
如何避免主从不一致

主库binlog采用ROW格式
主从实例数据库版本保持一致
主库做好账号权限把控，不可以执行set sql_log_bin=0
从库开启只读，不允许人为写入
定期进行主从一致性检验


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门笔记</title>
    <url>/posts/c0d89ad/</url>
    <content><![CDATA[
Nginx入门笔记
Nginx介绍
Nginx是一个高性能的HTTP、反向代理服务器
主要功能：

反向代理
实现集群和负载均衡
静态资源虚拟化

Nginx的版本：


Nginx开源版 http://nginx.org/en/
官方原始的Nginx版本


Nginx plus商业版
开箱即用，集成了大量功能


Open Resty https://openresty.org/cn/
OpenResty是一个基于Nginx与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。更适用于需要大量二次开发的场景，有极强的扩展性


Tengine https://tengine.taobao.org/
由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。相比于Open Resty，扩展性不够强，但是能够满足绝多数使用场景


什么是代理
正向代理
正向代理可以理解为「客户端」的代理

反向代理
反向代理可以理解为「服务器」的代理

Nginx安装
以下有两种方式，按需选择，编译会慢一点，但是可以离线安装，不需要从网络下载所需的包，Rpm安装全部安装都需要网络。两个都差不多（我接下来测试全部用编译安装）
编译安装
不限制;Linux系统
这里我就用OpenEuler22.03LTS做演示，命令都和CentOS差不多，不做过多解释
1.安装必要工具
yum install -y tar gcc make pcre pcre-devel zlib zlib-devel openssl openssl-devel
2.下载源码包
官网：nginx: download

你可以右键复制链接在虚拟机下载
wget https://nginx.org/download/nginx-1.26.2.tar.gz
也可以直接点击红色框框的下载下来然后上传到虚拟机（root用户一般都上传到/root）去

3.创建nginx安装目录并解压安装包
mkdir -p /etc/nginx/#解压并移动到/app/nginxtar -zxf nginx-1.26.2.tar.gz#进入安装目录cd nginx-1.26.2# 配置nginx安装路径./configure --prefix=/etc/nginx/# 编译&amp;&amp;安装make &amp;&amp; make install
4.设置守护进程实现自启动
cat &gt; /etc/systemd/system/nginx.service &lt;&lt;&quot;EOF&quot;[Unit]Description=nginxAfter=network.target remote-fs.target nss-ookup.target[Service]Type=forkingPIDFile=/etc/nginx/logs/nginx.pidExecStartPre=/etc/nginx/sbin/nginx -t -c /etc/nginx/conf/nginx.confExecStart=/etc/nginx/sbin/nginx -c /etc/nginx/conf/nginx.confExecReload=/etc/nginx/sbin/nginx -s reloadExecStop=/etc/nginx/sbin/nginx -s stopExecQuit=/etc/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.targetEOF# 重载配置systemctl daemon-reload# 加入自启systemctl enable nginx# 启动nginxsystemctl start nginx#将nginx可执行文件添加到$PATH，这样才能全局使用nginx命令cat &gt;&gt; /etc/profile &lt;&lt; &quot;EOF&quot;export PATH=$PATH:/etc/nginx/sbinEOFsource /etc/profile
5.访问测试页
访问你虚拟机的ip就行

到这编译版nginx安装成功
普及一下nginx命令：
systemctl start nginx 启动nginx
nginx -s reload 重载nginx
RPM安装
有两个系统的教程，我下面有标注
官网文档：nginx: Linux packages

Centos7或Centos8
yum install yum-utils -y#添加nginx源cat &gt;/etc/yum.repos.d/nginx.repo &lt;&lt; &quot;EOF&quot;[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueEOFyum install nginx -ysystemctl enable nginx --now
OpenEuler系统
因为没有适配openeuler的版本，这里直接用centos8的来代替，兼容的没关系，你可以根据你的系统去自行替换
原本是$releasever的，但是没有openeuler的版本直接用8来代替也就是centos8，openeuler兼容centos
cat &gt;/etc/yum.repos.d/nginx.repo &lt;&lt; &quot;EOF&quot;[nginx-stable]name=nginx stable repo#baseurl=http://nginx.org/packages/centos/$releasever/$basearch/baseurl=http://nginx.org/packages/centos/8/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repo#baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/baseurl=http://nginx.org/packages/mainline/centos/8/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueEOFyum install nginx -ysystemctl enable nginx --now
访问测试页
访问你虚拟机的ip就行

关闭防火墙
systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0#重启服务器reboot
Nginx目录

conf #配置文件	｜-nginx.conf # 主配置文件	｜-其他配置文件 # 可通过那个include关键字，引入到了nginx.conf生效	html #静态页面logs（默认不是放在这里，可以在配置文件中修改为这里）	｜-access.log #访问日志(每次访问都会记录)	｜-error.log #错误日志	｜-nginx.pid #进程号	sbin	｜-nginx #主进程文件	*_temp #运行时，生成临时文件
Nginx进程模型
一个Master：监听请求，并分配worker进程处理
默认一个worker进程（可以在配置文件中修改worker数量）：处理客户端请求

每个worker之间彼此独立，每一个worker处理多个请求

Nginx配置文件
Nginx配置生成工具
nginx.conf默认配置文件
这是nginx默认的配置文件
展示部分核心配置，后续更多配置会在后面进行慢慢升华
[root@localtion ~]# vim /etc/nginx/conf/nginx.conf# Nginx 主配置文件# master进程会启动worker进程，该选项设置在系统中显示启动该进程的用户名（一般不改动，默认nobody）# user nobody# 设置工作进程的数量，通常设置为自动或与CPU核心数相同worker_processes  1;     #默认为1，表示开启一个业务进程# 错误日志放置的路径 notice、info是错误日志的级别，比如：info就是日志级别大于info才生成日志# 默认地址为/var/log/nginx/error.log ，可通过nginx -V返回的--eror-log-path字段获取实际值#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;# pid文件存放路径,默认：/var/run/nginx/nginx.pid，可通过nginx -V返回的--pid-path字段获取实际值#pid        logs/nginx.pid;# 事件驱动模块配置events &#123;    # 每个工作进程的最大连接数    worker_connections  1024;   # 单个业务进程可接受连接数&#125;# HTTP 模块配置http &#123;    # 引入 mime.types 文件，用于定义文件扩展名与MIME类型的映射关系    include       mime.types;      # 默认MIME类型，当请求的文件类型不在mime.types中定义时使用    default_type  application/octet-stream;         # 访问日志格式    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;    # 访问日志地址，默认：/var/log/nginx/access.log，可通过nginx -V返回的--http-log-path字段获取实际值    #access_log  logs/access.log  main;        # 是否开启sendfile传输文件，开启可以提高效率    sendfile        on;       # 连接超时时间    keepalive_timeout  65;    # 服务器模块配置    server &#123;        # 监听80端口        listen       80;        # 服务器名称        server_name  localhost;  #可以设置主机名和域名        # 根目录配置        location / &#123;            root   html; # 设置网站根目录            index  index.html index.htm; # 默认首页文件        &#125;        # 错误页面配置        error_page   500 502 503 504  /50x.html;        # 定义50x.html错误页面的位置        location = /50x.html &#123;            root   html;        &#125;    &#125;&#125;
刚刚访问安装成功后的测试页
测试有的index文件在/etc/nginx/html/index.html
一般所有的网页的文件都放在nginx安装目录下的html下
这里nginx的根目录/，监听的端口是80

location / &#123;    root   html; # 设置网站根目录    index  index.html index.htm; # 默认首页文件&#125; # 根目录配置    location / &#123;        root   html; # 设置网站根目录        index  index.html index.htm; # 默认首页文件    &#125;

每次修改配置文件要重载配置
nginx -s reload
sendfile配置
在高负载情况下，启用Nginx的sendfile功能可以减少CPU和内存的使用，提高服务器性能，因为它允许数据直接从磁盘传输到网络，无需先加载到Nginx的内存中。这不仅降低了CPU使用率，还减少了内存占用，从而提高了I/O效率和服务器的吞吐量，并且降低了响应延迟。
http&#123;	sendfile:on # off&#125;# 或者指定某个server开启server &#123;    location / &#123;        sendfile on;        ...    &#125;&#125;

gzip配置
http&#123;   gzip on; # 开启压缩，压缩后发送给客户端	gzip_min_length 1;# 设置最小压缩下限。1就是小于1字节的文件不压缩	gzip_comp_level 3 # 压缩级别0-9，值越大文件就压缩的越小，相应的会损耗更多性能	gzip_type text/plain application/javascript image/* # 指定哪些 MIME 类型，开启压缩（不写默认全部），可以使用通配符 image/* 就是所有图片。具体哪些类型可以看conf/mime.types文件&#125;
nginx 中的 gzip 压缩分为动态压缩、静态压缩


动态压缩：服务器给客户端返回响应时，消耗自身的资源进行实时压缩，保证客户端拿到 gzip 格式的文件
gzip on开启的就是动态压缩，gzip_comp_level设置的级别高，可能会造成CPU占用过高（文章：简单一招竟把nginx服务器性能提升50倍）


静态压缩：直接将预先压缩过的 .gz 文件返回给客户端，不再实时压缩文件，如果找不到 .gz 文件，会使用对应的原始文件
该功能需要模块： ngx_http_gzip_static_module（默认不会被构建）
我们可以通过下面命令查看，当前安装的是否包含该模块


我们可以通过下面命令查看，当前安装的是否包含该模块
nginx -V

如若没有，则要重新编译：
cd nginx-1.26.2/./configure --prefix=/etc/nginx --with-http_gzip_static_module# 指定编译配置，这个参数安装模块`ngx_http_gzip_static_module` 一定要指定你的安装目录make # 编译make install # 安装
启用以下配置
http &#123;    gzip  on;&#125;
记得重载配置
nginx -s reload
Server配置
虚拟主机配置（可以启用多个），多个server字段，会根据请求的域名+端口从前向后匹配
以下是例子：
如果是公网：qianyios.top这个域名要解析到这个这个服务器的公网ip
如果是内网：这个域名要在本机进行hosts匹配映射ip qianyios.top
http &#123;......    # 虚拟主机(相当于一样站点)    server &#123;        # 监听80端口        listen       80;        # 服务器名称        #server_name  *.qianyios.top; 当你配置了通配符域名，就是不管你是www.qianyios.top还是xxx.qianyios.top,等各种前缀都能访问到这里                server_name  qianyios.top;  #可以设置主机名和域名，如果有多个，用空格隔开，支持通配符        #访问的时候就是域名+端口就可以访问到这个server下的网站                #我会在这里插入例子，下面我会展示例子！！！    &#125;&#125;
【例子1】当访问http://qianyios.top:80就会访问以下页面（也就是nginx欢迎页），这里只是例子，你可以根据你自己情况匹配
/  这个路径很特殊，只要用户访问的地址qianyios.top:80后面没有加什么被其他location定位到的话都会来到这个
http &#123;......    server &#123;        listen       80;        server_name  qianyios.top;         location / &#123;            root   html; # 设置网站根目录            index  index.html index.htm; # 默认首页文件            #当访问的时候会在nginx目录下的html/下寻找index.html index.htm;        &#125; &#125;
【例子2】当访问http://qianyios.top:80/abc/就会访问以下页面，一个server可以存在多个location，但是其定位的路径不要出现相同的位置。比如：有两个location /abc&#123;内容&#125;
注意有两个误区
①如果root是/home 这里实际访问路径是/home/abc/index.html
②如果root是/home/abc 这里实际访问路径是/home/abc/abc/index.html
其实root的功能就是将qianyios.top:80定义为root（网站根目录），然后访问地址后面的/abc就会加在实际访问路径里
http &#123;......    server &#123;        listen       80;        server_name  qianyios.top;          location / &#123;            root   html; # 设置网站根目录            index  index.html index.htm; # 默认首页文件            #当访问的时候会在nginx目录下的html/下寻找index.html index.htm;        &#125;                        location /abc &#123;        #这个/abc下的网站根目录可以不用在nginx目录下，你可以定义其他位置            root   /home; # 设置定位/abc站点以/home为网站根目录            index  index.html index.htm; # 默认首页文件            #当访问的时候会在/home目录下寻找index.html index.htm;        &#125; &#125;

mkdir /home/abcecho &quot;welccome to /home/abc&quot; &gt;&gt; /home/abc/index.htmlnginx -s reloadhttp://qianyios.top:80/abc
这里又会有两个报错

我们要去找index.html文件只有像以下输入命令才会能找得到
[root@localtion ~]# ls /home/abc/index.html
如果你只是访问http://qianyios.top:80/abc实际访问路径是/home/abc，但是我认为nginx会因为abc是个文件，我们本身的目的就是要去abc下去找index.html,所以最后要加个/
但是呢在宿主机的浏览器实际访问地址是http://192.168.48.101/abc（这里是我的宿主机，我没做hosts映射，我就用ip了，我只在虚拟机做了映射一样的。）注意，这里我最后没加斜杠它自动给我加上了。

总结：我搞不懂两者怎么回事，可能linux不会自动加上吧，浏览器会，就是说如果在虚拟机访问要加/。为了规范就是不管在哪都在配置文件加上末尾的斜杠
【例子3】
一般静态文件会用alias,比如说/var/www/images/下有个图片

当我设置了以下配置
location /images/ &#123;	# alias设置请求的别名，用于替换文件系统路径。       alias /var/www/images/;&#125;
重载配置之后
访问http://192.168.48.101/images/1.png

结论：
访问地址：192.168.48.101/images/1.png
实际访问地址：/var/www/images/1.png
同类型的案例再来一个
location /abc/ &#123;   alias   /home/abc/;    index  index.html index.htm; # 默认首页文件   #当访问的时候会在/home目录下寻找index.html index.htm;&#125;

【例子4】
精确匹配（顾名思义不做过多解释了）
访问：http://qianyios.top/50x.html
location = /50x.html &#123;            root   html;        &#125;
【例子5】

~：大小写敏感（正则表达式）
= : 精确匹配（必须全部相等）
~*：忽略大小写（正则表达式），这里要注意忽略大小写的意思是请求的字符大小写都可以， 但是不会进行大小转换，请求的大小写对应的文件必须存在。
^~ ：只需匹配uri部分
@ ：内部服务跳转

#1.精确匹配 location = /index.html &#123;  root /etc/nginx/html;&#125;# 则匹配到http://192.168.48.101/index.html这种请求。#2.大小写铭感匹配 location ~ /ABC/ &#123;    [ configuration ] &#125; #请求示例 #http://qianyios.top/ABC/ [成功] #http://qianyios.top/abc/ [失败]#3.大小写不敏感匹配location ~* /abc.html &#123;    [ configuration ]&#125;# 则会忽略 uri 部分的大小写#http://qianyios.top/ABC.html [成功] 可以成功匹配，但是目录中要ABC.html文件#http://qianyios.top/abc.html [成功] 可以成功匹配，但是目录中要abc.html文件#4.指定后缀匹配location ~* \.(gif|jpg|jpeg|png)$ &#123; root /var/www/images;&#125;#http://qianyios.top/1.png [成功]#5.忽略正则匹配location ^~ /images/ &#123;   alias /var/www/images;&#125;#以 /img/ 开头的请求，都会匹配上#http://qianyios.top/images/1.jpg  [成功]#http://qianyios.top/images/1.png [成功]
注意：如果配置了#5，那么所有url里请求 /images/ 下的图片会被上面#5的处理，因为 ^~ 指令匹配到了/image/，则不检查#4正则表达式。对比这两个location，可以设置不同目录，相同文件进行实验。
反向代理和正向代理
反向代理

根据以上的代码可以知道，我们设置三个server，分别表示3个网站，他们都有对应的域名，然后通过配置反向代理（右边的配置文件）实现反向代理。即：当用户访问user1.com，nginx就会将请求转到发到https://website1.com上。对应的后端服务器web1接收到请求并返回响应给 Nginx，Nginx 接收到来自后端服务器的响应，并将其返回给用户。

对于 user1.com 的请求，Nginx 将其转发到 http://website1.com/。
对于 user2.com 的请求，Nginx 将其转发到 http://website2.com/。
对于 user3.com 的请求，Nginx 将其转发到 http://website3.com/。

图片中说的无法跳过nginx去直接访问后端服务器，说法太死了，只能说是个例，如果项目本身就不想让你知道后端的地址，只想让你通过nginx来进行访问，方便管理，举个例子，就好像baidu.com    总不能说baidu.com只绑定到一个机子上吧，他肯定会有一个庞大的负载均衡以及反向代理集群，去均衡负载分散流量等操作，如果只绑定到一个机子，也承受不住每天几百万的访问下面会讲到负载均衡。就好像上面的图片的例子，我的后端三个都是百度的网站，有三个不同的域名，但是不可能让用户去记住三个域名吧，所以有个nginx去做反向代理，然后设置一个baidu.com去代理这三个web也可以做到反向代理
正向代理
用户需要通过代理服务器去访问外网。这个代理服务器可以是其他工具不一定是nginx

总结：简单来说局域网访问互联网就是正向代理,互联网访问局域网就是反向代理.这些都是隧道式代理，进出都要经过代理服务器
负载均衡
负载均衡策略
轮询
默认情况下使用轮询方式，逐一转发，这种方式适用于无状态请求。(在无参数情况下平均分配所有请求)

http &#123;#upstream和server是同一级别，都包含在http内    upstream qianyi &#123;        server website1.com   weight=10 down;  #每十次请求之后轮询到下一个        server website2.com   weight=1;        server website3.com   weight=1 backup;    &#125;    server &#123;        listen 80;	server_name qianyios.top        location / &#123;            proxy_pass http://qianyi;#名字随意，要和upstream后的名字一样        &#125;    &#125;&#125;

down：表示当前的server暂时不参与负载
weight：默认为1.weight越大，负载的权重就越大。
backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。

ip_hash
对用户的ip进行计算：Hash(IP)%upstream_node_count，返回要使用机器的索引
每一个用户会固定分配到一台机器，防止在A机器上创建Session的用户，后续被分配到其他机器，导致Session失效
开启ip_hash后，如果想要移除一台server，必须使用down配置。如果直接删除，会导致upstream_node_count变化，使得所有用户访问的访问的机器发生变化
缺点：

增加服务节点会导致upstream_node_count变化，进而导致所有用户访问的机器变化
某个用户短时间发起大量请求，会打到一台固定的机器，导致这台机器性能大幅下降，而其他机器可能还是空闲

upstream test_server&#123;    # 开启ip_hash，    ip_hash;    		server web1.com:80;		server web2.com:80;&#125;
least_conn
尽可能将请求转发到当前连接数最少的后端服务器
upstream test_server&#123;    least_conn;    		server web1.com:80;		server web2.com:80;&#125;
下面例子，开启least_conn，Nginx会优先转发到Tomcat3

url_hash
根据用户访问的url定向转发请求
fair
根据后端服务器响应时间转发请求
总结：当我们访问http://qianyios.top时在upstream无参数的情况下，这三个网页都会平均的访问，且地址栏里的qianyios.top不会变
其次有参数时，都会按照参数的性质，进行轮询访问
动静分离


静：前端项目（静态资源）


动：接口服务


域名A.com访问到A项目、B.com访问到B项目
Api.com访问接口服务
将3个域名都解析到Nginx所在机器


# 前端server &#123;        listen       80;        server_name  A.com;                location ~ &#123;              root /websit/xxx; # A项目目录            index  index.html index.htm;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;&#125;server &#123;        listen       80;        server_name  B.com;                location ~ &#123;              root /websit/xxx; # B项目目录            index  index.html index.htm;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;&#125;# 接口server &#123;        listen       80;        server_name  Api.com;					# 接口	location  &#123;        proxy_pass http://接口机器的IP:端口;        &#125;        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   html;        &#125;&#125;
location ~* /(js|css|img)&#123;	root html;  index  index.html index.htm;&#125;#   ~* 表示这是一个不区分大小写的正则表达式匹配。#   /(css|img|js) 意味着这个location块将匹配所有以/css、/img或/js结尾的URL路径。#  Nginx会在服务器的文件系统中对应的html目录下查找文件。
URL重写
return
把Http重定向为Https
server &#123;        listen       80;        server_name  www.qianyios.com;		location / &#123; 			return 302 https://www.qianyios.com$request_uri 			# 302是状态码			# $request_uri是路径和参数 ，例如：/xxx/xx?xx=xx        &#125;&#125;
rewrite
rewrite是URL重写的关键指令，根据regex（正则表达式）部分内容，重定向到replacement，结尼是flag标记。rewrite    &lt;regex&gt;   &lt;replacement&gt;  [flag];关键字				正则				替代内容     flagt标记正则：per1森容正则表达式语句进行规则匹配替代内容：将正则匹配的内容替换成replacementflag标记说明：last  #本条规则匹配完成后，继续向下匹配新的1ocation URI规则break #本条规则匹配完成即终止，不再匹配后面的任何规则redirect #返回302临重定向，游览器地址会显示跳转后的URL地址permanent #返回301永久重定向，测览器地址栏会显示跳转后的URL地址
把Http重定向为Https
server &#123;        listen       80;        server_name  www.qianyios.com;		location / &#123; 		   rewrite ^/(.*) https://www.qianyios.top.com/$1 redirect;		   # 匹配到uri的/后的内容，并放到$1中，执行重定向        	  proxy_pass http://xxx;        &#125;&#125;
当你尝试访问http://www.qianyios.top/1.html时，由于上述rewrite指令的存在，你的浏览器实际上会被引导至https://www.qianyios.top.com/1.html
上述命令改成return会更高效
return 301 https://www.qianyios.top.com$request_uri;
实例：
rewrite ^/([0-9]+).html$  /index.jsp?pageNum=$1 break;
假设我们的真实地址是192.168.48.101/index.jsp?pageNum=12   但是我不想客户知道真实地址
配置了这个规则之后，他就会变成192.168.48.101/12.html
我们访问192.168.48.101/12.html（但是12.html是不存在的）之后，他会把流量转发到192.168.48.101/index.jsp?pageNum=12（真实地址）
Nginx网关服务器
企业中，无论是前端页面、静态资源、接口，都是通过Nginx进行访问（使用proxy_pass），这时候这台Nginx服务器就成为了网关服务器（承担入口的功能）

所以，我们启动web服务器的防火墙，设置其只能接受这台Nginx服务器的请求
systemctl start firewalld
添加rich规则
#这里的192.168.48.101是网关服务器(nginx)地址firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.48.101&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot; 

firewall-cmd：这是用来与firewalld进行交互的命令行工具。
--permanent：表示这个更改会永久生效，即使系统重启后也会保留。不过请注意，为了使永久性规则立即生效，您需要重新加载防火墙配置。
--add-rich-rule=&quot;规则&quot;：这是用来添加一条富规则到firewalld的参数。富规则允许更复杂的条件和操作。

在引号内的部分定义了具体的规则：

rule family=&quot;ipv4&quot;：指定这条规则适用于IPv4协议。
source address=&quot;192.168.48.101&quot;：规则只适用于源地址为192.168.48.101的流量。
port protocol=&quot;tcp&quot; port=&quot;8080&quot;：这条规则针对的是TCP协议，并且仅限于端口号为8080的连接。
accept：这表示如果所有上述条件都满足，则接受（允许）该网络流量。

配置完之后重启firewalld
systemctl restart firewalld
这时候，原本web开启了防火墙之后，不管访问web地址还是nginx服务器都无法访问到我们的web
且nginx配置proxy_pass http://192.168.48.105:8080反向代理到web
但是，我们在web端配置了防火墙规则之后，让web同意接收来自nginx的192.168.48.101的请求，且自身开放8080端口，这样我们访问192.168.48.101（这是nginx的地址反向代理到了web）就可以访问web了
移除rich规则
#这里的192.168.48.101是网关服务器(nginx)地址firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.48.101&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot; 
查看所有规则
firewall-cmd --list-all #所有开启的规则
防盗链配置
当我们请求到一个页面后，这个页面一般会再去请求其中的静态资源，这时候请求头中，会有一个refer字段，表示当前这个请求的来源，我们可以限制指定来源的请求才返回，否则就不返回，这样可以节省资源


valid_referers none|server_name
设置有效的refer值

none：不校验refer
server_name：校验refer地址是否为server_name（server_name可以使用通配符）

注意： if ($invalid_referer)中if后有个空格，不写就会报错
nginx: [emerg] unknown directive &quot;if($invalid_referer)&quot; in /usr/local/nginx/conf/nginx.conf:27
1.例子：这里设置nginx服务器中的img目录下的图片必须refer为https://blog.qianyios.top才能访问
server &#123;        listen       80;        server_name  localhost;	  location /img&#123;                valid_referers https://blog.qianyios.top/;                if ($invalid_referer)&#123;#无效的refere                        return 403;#返回状态码403                &#125;                root html;                index  index.html index.htm;        &#125;&#125;
这样其他人，不管是引用图片到他自己web或者直接在地址栏输入直接访问都不行

如果可以开放直接在地址栏输入直接访问可以加none
valid_referers none https://blog.qianyios.top/;
2.直接跳转到自定义图片
假设123.png是写有禁止盗取字样的图片
假设我的图片是http://qianyios.top/images/1.png
他会直接跳转到/var/www/image/123.png
location ^~ /image/ &#123;   root /var/www/;&#125;location ^~ /images/ &#123;          valid_referers qianyios.top;          if ($invalid_referer)&#123;#无效的refere             rewrite ^/images/(.*)$ /image/123.png break;             #return 302 /abc/123.png;          &#125;          root /var/www/;&#125;
^/images/(.*)$ 匹配所有以 /images/ 开头的路径，并捕获后续部分（即 (.*)）。
用curl工具进行访问
http://qianyios.top/images/1.png

带引用的访问
curl -e &quot;http://qianyios.top&quot; -I http://qianyios.top/images/1.png

高可用配置
背景
如下图，如果只有一个Nginx作为网关，一旦出现故障会导致全部服务不可用

高可用方案：

注意：Nginx主备机器配置要基本一致，如果配置相差较大，在切换时大量流量进入备用机，容易造成宕机
VRRP协议
keepalived是基于VRRP（Virtual Router Redundancy Protocol）协议的
VRRP可以将多个Nginx网关机器分为 master、backup两种类型，并生成一个VIP（虚拟IP:Virtual IP Address）
每台机器上的keepalived会相互通信，根据其他机器上的keepalived进程是否存在，判断服务器状态，如果默认的Master停止了，就会在剩下的Backup机器中，竞选出一台Nginx服务器作为Master
由Master服务器使用这个VIP，用户访问时，访问的是VIP
yum install -y keepalived
#keepalived的配置文件vim /etc/keepalived/keepalived.conf
nginx1的配置
! Configuration File for keepalivedglobal_defs &#123;   # keepalived邮件通知（可配置多个）   notification_email &#123;     acassen@firewall.loc     failover@firewall.loc     sysadmin@firewall.loc   &#125;   # 邮件发件人地址   notification_email_from Alexandre.Cassen@firewall.loc   # 邮件服务器（SMTP）地址   smtp_server 192.168.200.1   # 连接SMTP服务器的超时时间   smtp_connect_timeout 30   # 后面会提到   router_id lb1 # 路由id，可以随意取，但是要保证每个配置了keepalive的机器不重复就行      # vrrp相关配置，用的比较少   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval 0   vrrp_gna_interval 0&#125;# 节点名可以随意取，但要保证主、备节点之间保持一致即可vrrp_instance VI_1 &#123;    state MASTER  #主服务器    interface eth160 #vip到时候会生成在这个网卡下    virtual_router_id 51    priority 100  #优先级    advert_int 1  #检测间隔时间    authentication &#123;   #认证机制，这样可以区分实现不同作用的keepalived集群，不会混乱        auth_type PASS # 指定了认证类型为密码（PASS）        auth_pass 1111  # 设置了认证密码，这里设置的密码是&quot;1111&quot;    &#125;    virtual_ipaddress &#123;        192.168.48.200 #总ip    &#125;&#125;······其余配置······&#125;

authentication、virtual_router_id、virtual_ipaddress这几个一样的机器，才算是同一个组里。这个组才会选出一个作为Master机器

nginx2的配置
! Configuration File for keepalivedglobal_defs &#123;   router_id lb2&#125;vrrp_instance VI_1 &#123;    state BACKUP  #主服务器    interface eth160 #vip到时候会生成在这个网卡下    virtual_router_id 51    priority 50  #降低优先级    advert_int 1  #检测间隔时间    authentication &#123;   #认证机制，这样可以区分实现不同作用的keepalived集群，不会混乱        auth_type PASS # 指定了认证类型为密码（PASS）        auth_pass 1111  # 设置了认证密码，这里设置的密码是&quot;1111&quot;    &#125;    virtual_ipaddress &#123;        192.168.48.200 #总ip    &#125;&#125;······其余配置······&#125;
配置完成后，重启keepalived就可以实现高可用

假设我访问192.168.48.200就会访问到竞争到master的服务器，然后master是个nginx网关，将流量负载到Tomcat，假设master节点挂了，vip就会跳转backup的ens160上，这样访问192.168.48.200就会访问到backup的服务器，当master恢复，那vip就会跳回到master。

这里有keepalived实验过程
可以看一下
K8S高可用集群（内部etcd） | 严千屹博客

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenEuler-K8S高可用集群（外部etcd）</title>
    <url>/posts/2459/</url>
    <content><![CDATA[
OpenEuler-部署K8S高可用集群（外部etcd）
主机拓扑



主机名
ip1（NAT）
系统
磁盘
内存




master1
192.168.48.101
OpenEuler-22.03-LTS
100G
4G


master2
192.168.48.102
OpenEuler-22.03-LTS
100G
4G


master3
192.168.48.103
OpenEuler-22.03-LTS
100G
4G


node01
192.168.48.104
OpenEuler-22.03-LTS
100G
8G



镜像下载地址：OpenEuler-22.03-LTS
下载名为openEuler-22.03-LTS-SP4-x86_64-dvd.iso
基础配置
Openeuler通过单独安装，非克隆。安装完后进行基本环境的配置，配置一下几个方面：

设置主机名
关闭firewalld、dnsmasq、selinux
设置ens33
备份并新增、docker-ce源、k8s源
更新yum源软件包缓存
添加hosts解析
关闭swap分区
安装chrony服务，并同步时间
配置limits.conf
安装必备工具
升级系统并重启

操作主机：[master1,master2,master3,node01]
#将以下脚本内容添加进去vi k8s_system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、dnsmasq、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl disable dnsmasq &amp;&gt; /dev/nullsystemctl stop firewalldsystemctl stop dnsmasqsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.新增docker-ce源、k8s源&quot;mkdir /etc/yum.repos.d/bak/cp /etc/yum.repos.d/* /etc/yum.repos.d/bak/sleep 3cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg EOF#切换为华为云，下载速度更快sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repocurl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposed -i &#x27;s/\$releasever/7/g&#x27; /etc/yum.repos.d/docker-ce.repoecho &quot;5.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;6.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 master1192.168.48.102 master2192.168.48.103 master3192.168.48.104 node01192.168.48.105 node02EOFecho &quot;7.关闭swap分区&quot;swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 &amp;&gt; /dev/nullsed -ri &#x27;/^[^#]*swap/s@^@#@&#x27; /etc/fstabecho &quot;8.安装chrony服务，并同步时间&quot;yum install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sourcesecho &quot;9.配置limits.conf&quot;ulimit -SHn 65535cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF* soft nofile 65536* hard nofile 131072* soft nproc 65535* hard nproc 655350* soft memlock unlimited* hard memlock unlimitedEOFecho &quot;10.必备工具安装&quot;yum install wget psmisc vim net-tools telnet device-mapper-persistent-data lvm2 git -yecho &quot;11.重启&quot;reboot
sh k8s_system_init.sh 主机名  主机位[master1] sh k8s_system_init.sh master1 101[master2] sh k8s_system_init.sh master2 102[master3] sh k8s_system_init.sh master3 103[node01] sh k8s_system_init.sh node01 104
配置ssh免密
操作节点[master1]
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot; &quot;node01&quot;)# 密码password=&quot;Lj201840.&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
内核及ipvs模块配置
此步骤是配置ipvs模块，开启一些k8s集群中必须的内核参数。配置一下几个方面：

更改内核启动顺序
安装ipvsadm
配置ipvs模块
开启k8s集群必须的内核参数
配置完内核，重启服务器

操作主机：[master1,master2,master3,node01]
vi kernel_update.sh
#!/bin/bashecho &quot;1.更改内核启动顺序&quot;grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfggrubby --args=&quot;user_namespace.enable=1&quot; --update-kernel=&quot;$(grubby --default-kernel)&quot;echo &quot;2.安装ipvsadm&quot;yum install ipvsadm ipset sysstat conntrack libseccomp -y &amp;&gt; /dev/nullecho &quot;3.配置ipvs模块&quot;modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackcat &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOFip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipipEOFsystemctl enable --now systemd-modules-load.service &amp;&gt; /dev/nullecho &quot;4.开启k8s集群必须的内核参数&quot;cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_nonlocal_bind = 1 net.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1fs.may_detach_mounts = 1net.ipv4.conf.all.route_localnet = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 65536net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384EOFsysctl --systemecho &quot;5.配置完内核，重启服务器！&quot;reboot
sh kernel_update.sh
检查ipvs加载、内核版本验证
lsmod | grep --color=auto -e ip_vs -e nf_conntrackuname -a

部署ETCD集群
本次在master1、master2、master3上进行etcd集群部署
安装etcd
下载安装包
wget https://github.com/etcd-io/etcd/releases/download/v3.5.13/etcd-v3.5.13-linux-amd64.tar.gz

解压
tar xf etcd-v3.5.13-linux-amd64.tar.gzmv etcd-v3.5.13-linux-amd64 /tmp/etcdcp /tmp/etcd/etcd* /usr/local/bin/

添加环境变量
将文件夹中etcd和etcdctl两个文件添加到环境变量中
mkdir -p /var/lib/etcd/mkdir -p /etc/etcd/chmod 700 /var/lib/etcd

创建默认配置文件
cat &lt;&lt;EOF | sudo tee /etc/etcd/etcd.conf#节点名称ETCD_NAME=$(hostname -s)#数据存放位置ETCD_DATA_DIR=/var/lib/etcdEOF

创建etcd服务
cat &lt;&lt;EOF | sudo tee /etc/systemd/system/etcd.service [Unit]Description=Etcd ServerDocumentation=https://github.com/coreos/etcdAfter=network.target [Service]User=rootType=notifyEnvironmentFile=-/etc/etcd/etcd.confExecStart=/usr/local/bin/etcdRestart=on-failureRestartSec=10sLimitNOFILE=40000 [Install]WantedBy=multi-user.targetEOF

开启服务
systemctl daemon-reload &amp;&amp; systemctl enable etcd &amp;&amp; systemctl start etcd

查看版本信息
etcd -version

在master1节点上生成etcd配置文件
vim etcd_install.sh
etcd1=192.168.48.101etcd2=192.168.48.102etcd3=192.168.48.103TOKEN=smartgoETCDHOSTS=($etcd1 $etcd2 $etcd3)NAMES=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot;)for i in &quot;$&#123;!ETCDHOSTS[@]&#125;&quot;; doHOST=$&#123;ETCDHOSTS[$i]&#125;NAME=$&#123;NAMES[$i]&#125;cat &lt;&lt; EOF &gt; /tmp/$NAME.conf# [member]ETCD_NAME=$NAMEETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;http://$HOST:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;http://$HOST:2379,http://127.0.0.1:2379&quot;#[cluster]ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://$HOST:2380&quot;ETCD_INITIAL_CLUSTER=&quot;$&#123;NAMES[0]&#125;=http://$&#123;ETCDHOSTS[0]&#125;:2380,$&#123;NAMES[1]&#125;=http://$&#123;ETCDHOSTS[1]&#125;:2380,$&#123;NAMES[2]&#125;=http://$&#123;ETCDHOSTS[2]&#125;:2380&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;$TOKEN&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;http://$HOST:2379&quot;EOFdonels /tmp/master*scp /tmp/master2.conf $etcd2:/etc/etcd/etcd.confscp /tmp/master3.conf $etcd3:/etc/etcd/etcd.confcp /tmp/master1.conf /etc/etcd/etcd.confrm -f /tmp/master*.conf

sh etcd_install.sh

在k8s集群master节点上启动etcd
systemctl restart etcdsystemctl enable --now etcd

检查etcd集群是否正常
etcdctl member listetcdctl endpoint health



高可用组件安装
haproxy配置
操作节点：[master1，master2,master3]
yum install keepalived haproxy -y
所有Master节点配置HAProxy，所有Master节点的HAProxy配置相同。
操作节点：[master1，master2, master3]cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt;&quot;EOF&quot;global  maxconn  2000  ulimit-n  16384  log  127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode  http  option  httplog  timeout connect 5000  timeout client  50000  timeout server  50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri /monitorfrontend k8s-master  bind 0.0.0.0:16443  bind 127.0.0.1:16443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp  option tcplog  option tcp-check  balance roundrobin  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server master1   192.168.48.101:6443  check  server master2   192.168.48.102:6443  check  server master3   192.168.48.103:6443  checkEOF
Keepalived配置
操作节点：[master1，master2,master3]
所有Master节点配置Keepalived，以下三个Master节点配置注意ip和网卡。
操作节点：[master1]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    mcast_src_ip 192.168.48.101    virtual_router_id 51    priority 101    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master2]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.102    virtual_router_id 51    priority 100    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
操作节点：[master3]cat &gt;/etc/keepalived/keepalived.conf  &lt;&lt;&quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVELscript_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2  rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.103    virtual_router_id 51    priority 99    advert_int 2    authentication &#123;        auth_type PASS        auth_pass K8SHA_KA_AUTH    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;       chk_apiserver    &#125;&#125;EOF
配置Keepalived健康检查文件
操作节点：[master1，master2,master3]
cat &gt; /etc/keepalived/check_apiserver.sh &lt;&lt;&quot;EOF&quot; #!/bin/bash err=0 for k in $(seq 1 3) do    check_code=$(pgrep haproxy)    if [[ $check_code == &quot;&quot; ]]; then        err=$(expr $err + 1)        sleep 1        continue    else        err=0        break    fi done  if [[ $err != &quot;0&quot; ]]; then    echo &quot;systemctl stop keepalived&quot;    /usr/bin/systemctl stop keepalived    exit 1 else    exit 0 fiEOFchmod +x /etc/keepalived/check_apiserver.sh
启动haproxy和keepalived
操作节点：[master，master2,master3]systemctl daemon-reloadsystemctl enable --now haproxysystemctl enable --now keepalived
测试集群负载均衡高可用
查看master1的vip
ip a

模拟master1的宕机测试，看看vip会不会漂移到master2去
[master1] poweroff

这时候查看master2的ip列表
[master2] ip a

结论：这时可以知道，负载均衡集群成功，当master1出现宕机情况，vip会从master1漂移到master2
docker安装
安装docker
操作节点[master1，master2，master3,node01]
wget https://download.docker.com/linux/static/stable/x86_64/docker-24.0.7.tgztar xf docker-*.tgzcp -rf docker/* /usr/bin/#创建containerd的service文件,并且启动cat &gt;/etc/systemd/system/containerd.service &lt;&lt;EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=1048576TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl enable --now containerd.service#准备docker的service文件cat &gt; /etc/systemd/system/docker.service &lt;&lt;EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.service containerd.serviceWants=network-online.targetRequires=docker.socket containerd.service[Service]Type=notifyExecStart=/usr/bin/dockerd --config-file=/etc/docker/daemon.json -H fd://containerd=/run/containerd/containerd.sockExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=alwaysStartLimitBurst=3StartLimitInterval=60sLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTasksMax=infinityDelegate=yesKillMode=processOOMScoreAdjust=-500[Install]WantedBy=multi-user.targetEOF#准备docker的socket文件cat &gt; /etc/systemd/system/docker.socket &lt;&lt;EOF[Unit]Description=Docker Socket for the API[Socket]ListenStream=/var/run/docker.sockSocketMode=0660SocketUser=rootSocketGroup=docker[Install]WantedBy=sockets.targetEOFgroupadd dockersystemctl enable --now docker.socket  &amp;&amp; systemctl enable --now docker.service#验证mkdir /etc/dockersudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,		&quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart docker
安装cri-docker
操作节点[master1，master2，master3,node01]
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.12/cri-dockerd-0.3.12.amd64.tgztar -zxvf cri-dockerd-0.3.12.amd64.tgzcp cri-dockerd/cri-dockerd  /usr/bin/chmod +x /usr/bin/cri-dockerd#写入启动配置文件cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF[Unit]Description=CRI Interface for Docker Application Container EngineDocumentation=https://docs.mirantis.comAfter=network-online.target firewalld.service docker.serviceWants=network-online.targetRequires=cri-docker.socket [Service]Type=notifyExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9ExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=always StartLimitBurst=3 StartLimitInterval=60s LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinity TasksMax=infinityDelegate=yesKillMode=process [Install]WantedBy=multi-user.targetEOF#写入socket配置文件cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF[Unit]Description=CRI Docker Socket for the APIPartOf=cri-docker.service [Socket]ListenStream=%t/cri-dockerd.sockSocketMode=0660SocketUser=rootSocketGroup=docker [Install]WantedBy=sockets.targetEOFsystemctl daemon-reload &amp;&amp; systemctl enable cri-docker --now
K8S集群安装
安装k8s所需的工具
操作节点[master1，master2，master3,node01]yum -y install  kubeadm kubelet kubectl#为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，配置如下：sed -i &#x27;s/^KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;/g&#x27; /etc/sysconfig/kubelet#设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动systemctl enable kubeletsystemctl enable kubelet.service
初始化集群
cat &gt; kubeadm-config.yaml &lt;&lt; EOF---apiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.48.101  bindPort: 6443nodeRegistration:  criSocket: unix:///var/run/cri-dockerd.sock---apiVersion: kubeadm.k8s.io/v1beta3kind: ClusterConfigurationkubernetesVersion: 1.28.2imageRepository: registry.aliyuncs.com/google_containersnetworking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;apiServerCertSANs:- 192.168.48.200controlPlaneEndpoint: &quot;192.168.48.200:16443&quot;etcd:  external:    endpoints:      - http://192.168.48.101:2379      - http://192.168.48.102:2379      - http://192.168.48.103:2379---apiVersion: kubeproxy.config.k8s.io/v1alpha1kind: KubeProxyConfigurationfeatureGates:  # SupportIPVSProxyMode: falsemode: ipvs---apiVersion: kubelet.config.k8s.io/v1beta1authentication:  anonymous:    enabled: false  webhook:    cacheTTL: 0s    enabled: true  x509:    clientCAFile: /etc/kubernetes/pki/ca.crtauthorization:  mode: Webhook  webhook:    cacheAuthorizedTTL: 0s    cacheUnauthorizedTTL: 0scgroupDriver: systemdclusterDNS:- 10.96.0.10clusterDomain: cluster.localcpuManagerReconcilePeriod: 0sevictionPressureTransitionPeriod: 0sfileCheckFrequency: 0shealthzBindAddress: 127.0.0.1healthzPort: 10248httpCheckFrequency: 0simageMinimumGCAge: 0skind: KubeletConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0memorySwap: &#123;&#125;nodeStatusReportFrequency: 0snodeStatusUpdateFrequency: 0srotateCertificates: trueruntimeRequestTimeout: 0sshutdownGracePeriod: 0sshutdownGracePeriodCriticalPods: 0sstaticPodPath: /etc/kubernetes/manifestsstreamingConnectionIdleTimeout: 0ssyncFrequency: 0svolumeStatsAggPeriod: 0sEOF
准备k8s所需的镜像
操作节点[master1]kubeadm config images pull --config kubeadm-config.yaml

master1节点初始化
操作节点[master1]
kubeadm init --config kubeadm-config.yaml --upload-certs --v=9
会生成信息

记录信息后面会用到
初始化成功以后，会产生Token值，用于其他节点加入时使用，因此要记录下初始化成功生成的token值（令牌值），有效期24小时，后续需要操作可以重新生成Token
操作节点[master1]
kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 \        --control-plane --certificate-key 37b1370abd3584c354517603bf97e10c795e3367e05e5ff3f2f6ca14288d8054kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612
操作kubect报错：

此时通过kubectl操作，会出现失败，因为还没有将集群的&quot;钥匙&quot;交给root用户。/etc/kubernetes/admin.conf 文件是 Kubernetes（K8s）集群中的管理员配置文件，它包含了用于管理集群的身份验证和访问信息。所以下面进行配置环境变量，用于访问Kubernetes集群：
添加环境变量
操作节点[master1]
mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config
添加其他master节点至集群中
操作节点[master2,master3]
操作节点[master2,master3]kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 \        --control-plane --certificate-key 37b1370abd3584c354517603bf97e10c795e3367e05e5ff3f2f6ca14288d8054 \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
接着给master2添加环境变量
操作节点[master2,master3]mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config

这里没有展示master3的图片，但是步骤一样的
模拟Token过期重新生成并加入Node节点
假设加入集群的token过期了。node01无法加入了，这里就模拟一下这种情况

Token过期后生成新的token：

kubeadm token create --print-join-command
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token ke773y.6hv9utk33to4vwfy --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612[root@master1 ~]#
其中，192.168.48.200:16443 是你的 Kubernetes API 服务器的地址和端口，ke773y.6hv9utk33to4vwfy 是新的令牌，sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612 是令牌的 CA 证书哈希值。

Master需要生成–certificate-key：

kubeadm init phase upload-certs --upload-certs
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
其中，5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 是证书密钥。

生成新的Token用于集群添加新Node节点

操作节点[node01]
kubeadm join 192.168.48.200:16443 \        --token ke773y.6hv9utk33to4vwfy \        --discovery-token-ca-cert-hash sha256:bc27d821932d27bb4b49c187ddd412569ead01b14009e03b6d03aa3ea54e4612  \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 

这时在master查看node状态（显示为notready不影响）

模拟新加master节点的加入K8S集群中
假设我们新加master节点的话，就拼接token，从刚刚生成的token拼接
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
这里提取信息1
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
接着
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
这里提取信息2：这里前面要加上--control-plane --certificate-key
--control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
合成
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 \        --cri-socket unix:///var/run/cri-dockerd.sock                kubeadm join 192.168.48.200:16443 --token lnkno8.u4v1l8n9pahzf0kj \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 41e441fe56cb4bdfcc2fc0291958e6b1da54d01f4649b6651471c07583f85cdf \        --cri-socket unix:///var/run/cri-dockerd.sock
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
图示

安装calico网络插件
操作节点[master1]
添加解析记录，否则无法访问
echo &#x27;185.199.108.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hosts
应用operator资源清单文件
网络组件有很多种，只需要部署其中一个即可，推荐Calico。
Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。
Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。
此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。
curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O
[root@master1 ~]# vim calico.yaml。。。。。- name: WAIT_FOR_DATASTORE  value: &quot;true&quot;  #添加以下两行- name: IP_AUTODETECTION_METHOD  value: interface=ens33#ens33是你的网卡

sed -i &#x27;s| docker.io/calico/| registry.cn-hangzhou.aliyuncs.com/qianyios/|&#x27; calico.yamlkubectl apply -f calico.yaml

监视kube-system命名空间中pod运行情况
等待估计20分钟左右吧(确保全部running)
kubectl get pods -n kube-system

拿掉master节点的污点
节点 master1 和 master2 都有一个名为 node-role.kubernetes.io/control-plane:NoSchedule 的污点。这个污点的作用是阻止普通的 Pod 被调度到这些节点上，只允许特定的控制平面组件（如 kube-apiserver、kube-controller-manager 和 kube-scheduler）在这些节点上运行。
这种设置有助于确保控制平面节点专门用于运行 Kubernetes 的核心组件，而不会被普通的工作负载占用。通过将污点添加到节点上，可以确保只有被授权的控制平面组件才能在这些节点上运行。
kubectl describe node master1 | grep -i taintkubectl describe node master2 | grep -i taintkubectl describe node master3 | grep -i taint

去除污点
kubectl taint node master1 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master2 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master3 node-role.kubernetes.io/control-plane:NoSchedule-

安装dashboard
操作节点[master1]
下载文件
https://github.com/kubernetes/dashboard/releases/tag/v2.7.0
目前最新版本v2.7.0
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yamlsed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yamlsed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml

修改配置文件
vim recommended.yaml---kind: ServiceapiVersion: v1metadata:  labels:    app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  type: NodePort  selector:    app: kubernetes-dashboard---

运行dashboard
kubectl apply -f recommended.yaml

检查运行状态
kubectl get pods -n kubernetes-dashboardkubectl get pod,svc -o wide -n kubernetes-dashboard

创建cluster-admin用户
创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin#获取用户Tokenkubectl create token dashboard-admin -n kubernetes-dashboard

记录token
eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw
登录浏览器访问
https://192.168.48.200:30001输入token：----eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw----

部署一个nginx测试
操作节点[master1]
vim web.yamlkind: Deployment#apiVersion: extensions/v1beta1apiVersion: apps/v1metadata:  labels:    app: web-deployment-label  name: web-deployment  namespace: defaultspec:  replicas: 3  selector:    matchLabels:      app: web-selector  template:    metadata:      labels:        app: web-selector    spec:      containers:      - name: web-container        image: nginx:latest        imagePullPolicy: Always        ports:        - containerPort: 80          protocol: TCP          name: http        - containerPort: 443          protocol: TCP          name: https---kind: ServiceapiVersion: v1metadata:  labels:    app: web-service-label  name: web-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: 80    protocol: TCP    targetPort: 80    nodePort: 30080  - name: https    port: 443    protocol: TCP    targetPort: 443    nodePort: 30443  selector:    app: web-selector    kubectl apply -f web.yaml 

### 查看nginx的pod 的详细信息kubectl get deploy,svc,pod -o wide

访问nginx网站
http://192.168.48.200:30080


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenEuler22.03 LTS部署Zabbix</title>
    <url>/posts/1ca7aa3d/</url>
    <content><![CDATA[
OpenEuler22.03 LTS部署Zabbix
以下文档部分参考：Zabbix 6.2 安装：国产系统篇（OpenEuler）-zabbix 5.0安装
主机拓扑图



主机名
ip
硬盘
cpu
备注




zabbix-server
192.168.48.101
100g
2v
主控


zabbix-agent
192.168.48.102
100g
2v
测试机



基础配置
操作节点：[server]
不要一股脑的复制，注意修改网卡的名字，我这里是ens33，包括修改ip段，比如我的是192.168.48.你就要修改成你的172.8.3.最后那一个主机位就不用管，其他不变
vi system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.新增华为云源&quot;mkdir /etc/yum.repos.d/bak/cp /etc/yum.repos.d/* /etc/yum.repos.d/bak/sleep 3#切换为华为云，下载速度更快sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repoecho &quot;5.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;6.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 zabbix-server192.168.48.102 zabbix-agentEOFecho &quot;7.安装chrony服务，并同步时间&quot;yum install chrony -ysystemctl enable chronyd --nowtimedatectl set-timezone Asia/Shanghaitimedatectl set-local-rtc 1timedatectl set-ntp yeschronyc -a makestepchronyc trackingchronyc sourcesecho &quot;8.必备工具安装&quot;yum install wget psmisc vim net-tools telnet socat device-mapper-persistent-data lvm2 git gcc -yecho &quot;9.重启&quot;reboot
运行
sh system_init.sh 主机名  主机位[zabbix-server] sh system_init.sh zabbix-server 101[zabbix-agent] sh system_init.sh zabbix-agent 102
zabbix-server安装
zabbix服务段安装
操作节点：[server]
#创建zabbix用户groupadd --system zabbixuseradd --system -g zabbix -d /usr/lib/zabbix -s /sbin/nologin -c &quot;Zabbix Monitoring System&quot; zabbix#创建zabbix安装目录mkdir -p /app/zabbix
下载 Zabbix 源码

#server端下载源码包,你也可以手动下载上传到虚拟机即可，我是放到了root目录下wget https://cdn.zabbix.com/zabbix/sources/stable/7.0/zabbix-7.0.5.tar.gztar -zxvf zabbix-7.*.tar.gz
开始编译安装

prefix 指定安装目录。
enable-server 启用 Zabbix Server。
enable-agent 启用 Zabbix agent。
with-mysql 后端指定数据库为mysql。
net-snmp 支持 snmp 协议。

其实还有很多参数,大家可以参考 ./configure --help 自行研究 ，官方文档里也有案例
#安装需要的组件dnf -y install mysql-devel libevent-devel pcre-devel#开始编译（/app/zabbix）是zabbix的安装目录，以下编译会安装在/app/zabbixmv zabbix-7.0.5 zabbix &amp;&amp; cd zabbix./configure --prefix=/app/zabbix --enable-server --enable-agent --with-mysql
出现这个页面是编译完成

#开始安装make &amp;&amp; make install#安装完成！

整体目录情况

PHP部分
openEuler 22.04 自带8.0版本，所以符合6.0以上版本的需求。

dnf -y install php php-fpm
Apache
由于安装PHP会自动安装apache（httpd）服务，所以安装过程并未提及apache的安装过程
现在移动zabbix前端网页文件到/var/http/html（这是apache网页的运行根目录文件）
[root@zabbix-sever zabbix]# pwd/root/zabbix#我现在/root/zabbix是刚刚解压源码包的地方，别走错了，看你的位置在哪cd /root/zabbix#这个命令会递归地复制 ui 目录下的所有内容，包括子目录和文件，到 /var/www/html/ 目录中并且保留文件的权限和属性cp -rp ui/* /var/www/html/#启动apachesystemctl start httpd &amp;&amp; systemctl enable httpdsystemctl start php-fpm &amp;&amp; systemctl enable php-fpm
访问192.168.48.101
选择中文

这里显示有些php扩展没下载等

dnf -y install php-gd php-mysqlnd php-bcmath php-xml php-mbstring
安装完依赖此时不需要重启任何服务，接下来调整PHP的配置文件。
根据报错来调整三个值分别是 post_max_size,max_execution_time,max_input_time。

所要求的最小PHP post大小是16M (配置项&quot;post_max_size&quot;)。
所要求的最小PHP脚本执行时间是300 (配置项 “max_execution_time”)。
所要求的PHP脚本最小解析时间是300 (配置项&quot;max_input_time&quot;)。

#一键修改命令sed -i &#x27;s/post_max_size = 8M/post_max_size = 16M/g&#x27; /etc/php.inised -i &#x27;s/max_execution_time = 30/max_execution_time = 300/g&#x27; /etc/php.inised -i &#x27;s/max_input_time = 60/max_input_time = 300/g&#x27; /etc/php.ini
改完之后需要重启php-fpm服务。
systemctl restart php-fpm
刷新页面就ok了

安装mysql
安装mysql
dnf -y install mysql-serversystemctl start mysqld &amp;&amp; systemctl enable mysqldmysql_secure_installation#提示信息：VALIDATE PASSWORD COMPONENT can be u ····· gh. Would you like to setup VALIDATE PASSWORD component?#验证密码组件可用于测试密码和提高安全性。它检查密码的强度，并允许用户只设置那些足够安全的密码。要设置VALIDATE PASSWORD组件吗？Press y|Y for Yes, any other key for No: NO (填NO)New password: Re-enter new password:#输入你的秘密，我这里是qianyios007#是否删除匿名用户Remove anonymous users?  (Press y|Y for Yes, any other key for No) : Y#是否禁止root用户远程登录Disallow root login remotely? (Press y|Y for Yes, any other key for No) : No#是否删除测试数据库？Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y#是否重新加载特权表吗？Reload privilege tables now?  (Press y|Y for Yes, any other key for No) : Y# 验证登入数据库mysql -u root -pqianyios007

创建Zabbix所需要的数据库和用户
mysql -u root -pqianyios007#创建一个名为zabbix的新数据库，并指定字符集为utf8mb4，排序规则为utf8mb4_bin。create database zabbix character set utf8mb4 collate utf8mb4_bin;#创建一个新用户zabbix，该用户只能从localhost连接，密码设置为123456。create user zabbix@localhost identified by &#x27;123456&#x27;;#授予zabbix用户对zabbix数据库的所有表的所有权限。grant all privileges on zabbix.* to zabbix@localhost;#设置全局变量log_bin_trust_function_creators为1，这允许创建存储函数时不受二进制日志的限制set global log_bin_trust_function_creators = 1;quit;
导入Zbbix 的数据文件
cd /root/zabbixcat database/mysql/schema.sql | mysql -uzabbix -p123456 zabbixcat database/mysql/images.sql | mysql -uzabbix -p123456 zabbixcat database/mysql/data.sql | mysql -uzabbix -p123456 zabbixmysql -u root -pqianyios007#相关数据导入完成后关掉log_bin_trust_function_creators功能。set global log_bin_trust_function_creators = 0;quit;
完成这部分，就可以在前端进入数据库配配置界面。



报错了，此时会出现无法创建，这是由于目标目录没有权限导致的，可以点击蓝色字体(网页中下载配置文件)将配置得好的文件下载下来，然后传到前端提示的目录里，该文这里路径为：
/var/www/html/conf/

自行下载用工具传过去即可

放过去之后刷新即可

管理员用户名密码为Admin/zabbix


服务端安装成功!

zabbix-server基本配置
这里可以看姐server端是没有启动的，说明要对于他进行配置

首先来说说zabbix server 目录的一些情况

程序文件路径为/app/zabbix/sbin/
配置文件路径为/app/zabbix/etc/


编辑配置文件

sed -i &#x27;s|^LogFile=.*|LogFile=/var/log/zabbix/zabbix_server.log|&#x27; /app/zabbix/etc/zabbix_server.confsed -i &#x27;/^# DBPassword=/a \  DBPassword=123456&#x27; /app/zabbix/etc/zabbix_server.confsed -i &#x27;/^# PidFile=\/tmp\/zabbix_server.pid$/a \  PidFile=/var/log/zabbix/zabbix_server.pid&#x27; /app/zabbix/etc/zabbix_server.conf

制作zabbix server守护文件

cat &gt; /usr/lib/systemd/system/zabbix-server.service &lt;&lt;&quot;EOF&quot;[Unit]Description=Zabbix ServerAfter=syslog.targetAfter=network.targetAfter=postgresql.serviceAfter=pgbouncer.serviceAfter=postgresql-13.service[Service]Environment=&quot;CONFFILE=/app/zabbix/etc/zabbix_server.conf&quot;EnvironmentFile=-/etc/sysconfig/zabbix-serverType=forkingRestart=on-failure#pid文件要改哦，看你在哪个位置PIDFile=/var/log/zabbix/zabbix_server.pidKillMode=control-groupExecStart=/app/zabbix/sbin/zabbix_server -c $CONFFILEExecStop=/bin/kill -SIGTERM $MAINPIDRestartSec=10sTimeoutSec=0[Install]WantedBy=multi-user.targetEOF
由于是源码编译安装，所以存放日志文件的目录不存在，所以需要自行创建和给予权限
mkdir /var/log/zabbixchown zabbix:zabbix /var/log/zabbix
启动zabbix-server和查看服务的状态。
systemctl start zabbix-server &amp;&amp; systemctl enable zabbix-serversystemctl status zabbix-server

查看日志也正常
tail -f /var/log/zabbix/zabbix_server.log

查看网页已经在运行了

zabbix-agent安装
server端安装agent
操作节点[server]
#制作 Zabbix agent 守护文件cat &gt; /usr/lib/systemd/system/zabbix-agent.service&lt;&lt;&quot;EOF&quot;[Unit]Description=Zabbix AgentAfter=syslog.targetAfter=network.target[Service]Environment=&quot;CONFFILE=/app/zabbix/etc/zabbix_agentd.conf&quot;Type=simpleRestart=on-failure#PID文件要改PIDFile=/var/log/zabbix/zabbix_agentd.pidKillMode=control-groupExecStart=/app/zabbix/sbin/zabbix_agentd -c $CONFFILEExecStop=/bin/kill -SIGTERM $MAINPIDRestartSec=10sUser=zabbixGroup=zabbix[Install]WantedBy=multi-user.targetEOF#修改agent配置文件也是和server一样修改日志文件和pid文件位置sed -i &#x27;s|^LogFile=.*|LogFile=/var/log/zabbix/zabbix_agentd.log|&#x27; /app/zabbix/etc/zabbix_agentd.confsed -i &#x27;/^# PidFile=\/tmp\/zabbix_agentd.pid$/a \  PidFile=/var/log/zabbix/zabbix_agentd.pid&#x27; /app/zabbix/etc/zabbix_agentd.conf#启动zabbix agentsystemctl daemon-reloadsystemctl start zabbix-agent &amp;&amp; systemctl enable zabbix-agent

这样在server主机的zabbix的server端和agent端已经安装好了，但是现在就是说只有一个agent端也就是本机，只能监控自己，现在就教你们去监控其他机子


其他主机安装agent
操作节点：[zabbix-agent]
#agent端下载源码包,你也可以手动下载上传到虚拟机即可，我是放到了root目录下wget https://cdn.zabbix.com/zabbix/sources/stable/7.0/zabbix-7.0.5.tar.gztar -zxvf zabbix-7.*.tar.gz#创建zabbix用户groupadd --system zabbixuseradd --system -g zabbix -d /usr/lib/zabbix -s /sbin/nologin -c &quot;Zabbix Monitoring System&quot; zabbix#创建zabbix安装目录mkdir -p /app/zabbix#安装需要的组件dnf -y install mysql-devel libevent-devel pcre-devel#开始编译（/app/zabbix）是zabbix的安装目录，以下编译会安装在/app/zabbix 这里只需要启用agent即可server不用mv zabbix-7.0.5 zabbix &amp;&amp; cd zabbix./configure --prefix=/app/zabbix --enable-agent #开始安装make install#修改配置文件sed -i &#x27;s|^LogFile=.*|LogFile=/var/log/zabbix/zabbix_agentd.log|&#x27; /app/zabbix/etc/zabbix_agentd.confsed -i &#x27;/^# PidFile=\/tmp\/zabbix_agentd.pid$/a \  PidFile=/var/log/zabbix/zabbix_agentd.pid&#x27; /app/zabbix/etc/zabbix_agentd.conf#修改测试机agent配置文件里的serve-ip，这里要填server机的ip（修改192.168.48.101即可）sed -i &#x27;s/Server=127.0.0.1/Server=192.168.48.101/g&#x27; /app/zabbix/etc/zabbix_agentd.confsed -i &#x27;s/ServerActive=127.0.0.1/ServerActive=192.168.48.101/g&#x27; /app/zabbix/etc/zabbix_agentd.conf#zabbix-agent修改成你测试机的主机名sed -i &#x27;s/Hostname=Zabbix server/Hostname=zabbix-agent/g&#x27; /app/zabbix/etc/zabbix_agentd.conf#制作 Zabbix agent 守护文件cat &gt; /usr/lib/systemd/system/zabbix-agent.service&lt;&lt;&quot;EOF&quot;[Unit]Description=Zabbix AgentAfter=syslog.targetAfter=network.target[Service]Environment=&quot;CONFFILE=/app/zabbix/etc/zabbix_agentd.conf&quot;Type=simpleRestart=on-failure#PID文件要改PIDFile=/var/log/zabbix/zabbix_agentd.pidKillMode=control-groupExecStart=/app/zabbix/sbin/zabbix_agentd -c $CONFFILEExecStop=/bin/kill -SIGTERM $MAINPIDRestartSec=10sUser=zabbixGroup=zabbix[Install]WantedBy=multi-user.targetEOF#由于是源码编译安装，所以存放日志文件的目录不存在，所以需要自行创建和给予权限mkdir /var/log/zabbixchown zabbix:zabbix /var/log/zabbix#启动zabbix agentsystemctl daemon-reloadsystemctl start zabbix-agent &amp;&amp; systemctl enable zabbix-agent
zabbix页面配置测试机监控端



最终效果，点击添加即可


测试端的机子已经添加好了
测试
Zabbix Web 配置模板(监听 Port 80)
操作节点：[zabbix-agent]
安装nginx并配置网页
因为没有适配openeuler的版本，这里直接用centos8的来代替，兼容的没关系，你可以根据你的系统去自行替换
cat &gt;/etc/yum.repos.d/nginx.repo &lt;&lt; &quot;EOF&quot;[nginx-stable]name=nginx stable repo#baseurl=http://nginx.org/packages/centos/$releasever/$basearch/#原本是$releasever的，但是没有openeuler的版本直接用8来代替也就是centos8，openeuler兼容centosbaseurl=http://nginx.org/packages/centos/8/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repo#baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/baseurl=http://nginx.org/packages/mainline/centos/8/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueEOFyum install nginx -ysystemctl enable nginx --now
这样就可以随时安装最新版本的nginx
添加测试网页
/etc/nginx/conf.d/default.conf
[root@zabbix-agent ~]# cat /etc/nginx/conf.d/default.confserver &#123;#80端口    listen       80;    server_name  localhost;    #access_log  /var/log/nginx/host.access.log  main;    location / &#123;    #这里就是网站的根目录了        root   /usr/share/nginx/html;        index  index.html index.htm;    &#125;    error_page   500 502 503 504  /50x.html;    location = /50x.html &#123;        root   /usr/share/nginx/html;    &#125;    #。。。。。&#125;
直接修改80端口下的网站里面的内容
vim /usr/share/nginx/html/index.html
里面的内容全部删了,写入以下内容，然后保存退出即可
&lt;h1&gt;welcome to qianyios.blog&lt;/h1&gt;
重启服务
nginx -s reload

配置80端口模板
创建监控80端口状态的模板

创建监控项


创建触发器
点击触发器，创建触发器


创建图形


配置测试机应用80端口模板

更新一下

80端口模板测试

当我们模拟80端口down
systemctl stop nginx


然后我们再开起来
systemctl start nginx

到此监测80端口成功

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenEuler部署K8s-1.31.1</title>
    <url>/posts/50cdf140/</url>
    <content><![CDATA[
OpenEuler部署K8s-1.31.1
主机拓扑图



主机名
ip
内存
硬盘
cpu
OS




master
192.168.48.101
5G
100G
2
openEuler-22.03-LTS-SP4


node01
192.168.48.102
5G
100G
2
openEuler-22.03-LTS-SP4


node02
192.168.48.103
5G
100G
2
openEuler-22.03-LTS-SP4



镜像下载地址：OpenEuler-22.03-LTS
下载名为openEuler-22.03-LTS-SP4-x86_64-dvd.iso
基本配置
注意一下你的网卡叫什么，我的是ens33，如果你是其他的记得替换，不要无脑的复制粘贴，看看脚本那些需要改的，目测需要改的是ip这些，还有第三步和第六步
基本配置
操作节点：[所有节点]
vi k8s_system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.新增华为云源、k8s源&quot;mkdir /etc/yum.repos.d/bak/cp /etc/yum.repos.d/* /etc/yum.repos.d/bak/sleep 3cat &lt;&lt;EOF | tee /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.31/rpm/enabled=1gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.31/rpm/repodata/repomd.xml.keyEOF#切换为华为云，下载速度更快sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repoecho &quot;5.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;6.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 master192.168.48.102 node01192.168.48.103 node02EOFecho &quot;7.关闭swap分区&quot;swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 &amp;&gt; /dev/nullsed -ri &#x27;/^[^#]*swap/s@^@#@&#x27; /etc/fstabecho &quot;8.安装chrony服务，并同步时间&quot;yum install chrony -ysystemctl enable chronyd --nowtimedatectl set-timezone Asia/Shanghaitimedatectl set-local-rtc 1timedatectl set-ntp yeschronyc -a makestepchronyc trackingchronyc sourcesecho &quot;9.必备工具安装&quot;yum install wget psmisc vim net-tools telnet socat device-mapper-persistent-data lvm2 git -yecho &quot;10.重启&quot;reboot
运行脚本
sh k8s_system_init.sh 主机名  主机位[master] sh k8s_system_init.sh master 101[node01] sh k8s_system_init.sh node01 102[node02] sh k8s_system_init.sh node02 103
配置ssh免密
操作节点:[所有节点]
注意修改你的主机密码和主机列表的主机名
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master&quot; &quot;node01&quot; &quot;node02&quot;)# 密码password=&quot;Lj201840.&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
配置内核路由转发及网桥过滤以及安装ipset及ipvsadm
操作节点:[所有节点]
sed -i &#x27;s/net.ipv4.ip_forward=0/net.ipv4.ip_forward=1/g&#x27; /etc/sysctl.confcat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1vm.swappiness = 0EOF# 配置加载br_netfilter模块cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.confoverlaybr_netfilterEOF#加载br_netfilter overlay模块modprobe br_netfiltermodprobe overlaysysctl --systemsysctl -p # 使用新添加配置文件生效sysctl -p /etc/sysctl.d/k8s.conf  yum -y install ipset ipvsadmcat &gt; /etc/sysconfig/modules/ipvs.module &lt;&lt;EOF#!/bin/bashmodprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackEOF#授权、运行、检查是否加载chmod 755 /etc/sysconfig/modules/ipvs.module &amp;&amp;  /etc/sysconfig/modules/ipvs.module查看对应的模块是否加载成功lsmod | grep -e ip_vs -e nf_conntrack_ipv4
containerd容器环境安装
操作节点：[所有节点]
#下载所需软件包wget https://github.com/containerd/containerd/releases/download/v1.7.22/containerd-1.7.22-linux-amd64.tar.gzwget https://github.com/opencontainers/runc/releases/download/v1.1.15/runc.amd64wget https://github.com/containernetworking/plugins/releases/download/v1.5.1/cni-plugins-linux-amd64-v1.5.1.tgz#安装containerdtar Cxzvf /usr/local containerd-1.7.22-linux-amd64.tar.gz# 创建服务，所有主机都要操作cat &lt;&lt; EOF &gt; /usr/lib/systemd/system/containerd.service[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/local/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5# Having non-zero Limit*s causes performance problems due to accounting overhead# in the kernel. We recommend using cgroups to do container-local accounting.LimitNPROC=infinityLimitCORE=infinity# Comment TasksMax if your systemd version does not supports it.# Only systemd 226 and above support this version.TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl daemon-reload &amp;&amp; systemctl enable --now containerd#安装runcinstall -m 755 runc.amd64 /usr/local/sbin/runc#安装cnimkdir -p /opt/cni/bin &amp;&amp; tar -xzf cni-plugins-linux-amd64-v1.5.1.tgz -C /opt/cni/bin/#生成容器配置文件mkdir -p /etc/containerd &amp;&amp; containerd config default &gt; /etc/containerd/config.tomlsed -i &#x27;s#sandbox_image = &quot;registry.k8s.io/pause:.*&quot;#sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.10&quot;#&#x27; /etc/containerd/config.tomlsed -i &#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27; /etc/containerd/config.tomlcat &gt;/etc/crictl.yaml &lt;&lt;&quot;EOF&quot;runtime-endpoint: unix:///run/containerd/containerd.sockimage-endpoint: unix:///run/containerd/containerd.socktimeout: 10debug: falseEOF#配置containerd镜像加速# 修改 /etc/containerd/config.toml 中的 config_pathsed -i &#x27;s|^  config_path =.*$|  config_path = &quot;/etc/containerd/certs.d&quot;|&#x27; /etc/containerd/config.toml# 创建必要的目录mkdir -p /etc/containerd/certs.d/docker.iomkdir -p /etc/containerd/certs.d/registry.k8s.io# 配置 docker.io 的 hosts.tomlcat &lt;&lt;EOF &gt; /etc/containerd/certs.d/docker.io/hosts.tomlserver = &quot;https://docker.io&quot;[host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOF# 配置 registry.k8s.io 的 hosts.tomlcat &lt;&lt;EOF &gt; /etc/containerd/certs.d/registry.k8s.io/hosts.tomlserver = &quot;https://registry.k8s.io&quot;[host.&quot;https://k8s.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;, &quot;push&quot;]EOF# 重启 containerd 服务systemctl daemon-reloadsystemctl restart containerd.service
安装K8s1.31.1
操作节点:[所有节点]
不出意外第一步安装的就是1.31.1的版本
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes#  配置kubelet为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，建议修改如下文件内容。所有节点均要安装sed -i &#x27;s/^KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;/g&#x27; /etc/sysconfig/kubelet#设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动systemctl enable kubelet --now
开始安装K8s
操作节点:[master]
kubeadm config print init-defaults &gt; /etc/kubernetes/init-default.yaml# 修改为国内阿里源sed -i &#x27;s/registry.k8s.io/registry.aliyuncs.com\/google_containers/&#x27; /etc/kubernetes/init-default.yaml # 设置 apiServerIP 地址. 请自行替换192.168.48.101为自己master的IPsed -i &#x27;s/1.2.3.4/192.168.48.101/&#x27; /etc/kubernetes/init-default.yamlsed -i &#x27;/serviceSubnet: 10.96.0.0\/12/a \  podSubnet: 192.168.0.0/16&#x27; /etc/kubernetes/init-default.yamlsed -i &#x27;s/1.31.0/1.31.1/g&#x27; /etc/kubernetes/init-default.yaml#拉取所需镜像kubeadm config images pull --config /etc/kubernetes/init-default.yamlkubeadm init --image-repository registry.aliyuncs.com/google_containers --upload-certs
如果要重置集群，或者报错则运行以下命令，报错了就找原因看看哪里出错了
kubeadm reset[reset] Are you sure you want to proceed? [y/N]: y#输入Ysudo rm -rf /etc/kubernetes/manifests/*sudo iptables -F &amp;&amp; sudo ipvsadm --clear
初始化后运行以下命令
mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config
加入node节点
kubeadm token create --print-join-command
生成以下信息
kubeadm join 192.168.48.101:6443 --token mxybd6.j56dbce9cy698ejr --discovery-token-ca-cert-hash sha256:c1b1c7248f6aeea4d01244a226489958bfaaaa76926077b5c09b143c760b68e9
将这个命令复制给node01和node02运行就可以加入集群了
安装网络插件
echo &#x27;185.199.108.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hostscurl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -Osed -i &#x27;/- name: WAIT_FOR_DATASTORE/i \ \ \ \ \ \ \ \ \ \ \ \ - name: IP_AUTODETECTION_METHOD\n              value: interface=ens33&#x27; calico.yamlsed -i &#x27;s| docker.io/calico/| registry.cn-hangzhou.aliyuncs.com/qianyios/|&#x27; calico.yamlkubectl apply -f calico.yaml
等待十几分钟这样子，就出现以下全部ready和running就说明K8s集群部署成功
kubectl get pods -A

K8S-dashboard
配置yaml
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yamlsed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yamlsed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml
修改配置文件
vim recommended.yaml---kind: ServiceapiVersion: v1metadata:  labels:    app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  type: NodePort  selector:    app: kubernetes-dashboard---
运行
kubectl apply -f recommended.yaml
创建cluster-admin用户
#创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin#获取用户Tokenkubectl create token dashboard-admin -n kubernetes-dashboard
记录token
eyJhbGciOiJSUzI1NiIsImtpZCI6IjhsSUtJbk93YU5xR1V2ZndOS0lFMnpVLVR1cEl1YUF5U0JBd2NRUXFHVE0ifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNzI4Mzk1MzcxLCJpYXQiOjE3MjgzOTE3NzEsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwianRpIjoiYjA5NjA2OTEtNTVkNy00YzhmLTliZGItZDRkNzljYTU0YTJiIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIwYzU0YWE0OC0zYTFkLTQyNmYtODI5ZS01ODVjZWNjMzEyYjAifX0sIm5iZiI6MTcyODM5MTc3MSwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.dYb1MRmrKqNSTs2SKGsXZT_Nq4xtt3JeQEXOaHIjvFNtn_iCk1qTuY6oUBE8xdRv4S1oyqb52udGj0Zb5gYpMEBIfpQxTL_KJkeR-1S-tyl2U1FsH6UCnPE_j7KWh5suU3YJncIhQ26Ei7hC12WuZ9l-_UD3mL2tEPzwjbhnT0qir2Qe4rqrSJNNSQHrtwNVD2O-zv13VaUx6azXArec2GPDYR5ZYbSqMXuklaelwtZoKPLzP0DFnZy4jJ4n1JM7PRzqS5sWT_2nMgpSFZ_a5E0b7knvcNvyQHgHzeIYTrY88wjaCQi3x3cIn2hUvtVsroZySjx3Mz-ZECco5WN-eQ
浏览器访问即可并输入以上token
https://192.168.48.101:30001/

至此K8s-1.31.1部署完成

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack-Train-三节点部署</title>
    <url>/posts/26892/</url>
    <content><![CDATA[
  
  
    
      
      
        点击输入密码
      
    
  

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenEuler-K8S高可用集群（内部etcd）</title>
    <url>/posts/62904/</url>
    <content><![CDATA[
OpenEuler-部署K8S高可用集群（内部etcd）
主机拓扑



主机名
ip1（NAT）
系统
磁盘
内存




master1
192.168.48.101
OpenEuler-22.03-LTS
100G
4G


master2
192.168.48.102
OpenEuler-22.03-LTS
100G
4G


master3
192.168.48.103
OpenEuler-22.03-LTS
100G
4G


node01
192.168.48.104
OpenEuler-22.03-LTS
100G
8G



镜像下载地址：OpenEuler-22.03-LTS
下载名为openEuler-22.03-LTS-SP4-x86_64-dvd.iso
基础配置
Openeuler通过单独安装，非克隆。安装完后进行基本环境的配置，配置一下几个方面：

设置主机名
关闭firewalld、dnsmasq、selinux
设置ens33
备份并新增、docker-ce源、k8s源
更新yum源软件包缓存
添加hosts解析
关闭swap分区
安装chrony服务，并同步时间
配置limits.conf
安装必备工具
升级系统并重启

操作主机：[master1,master2,master3,node01]
#将以下脚本内容添加进去vi k8s_system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、dnsmasq、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl disable dnsmasq &amp;&gt; /dev/nullsystemctl stop firewalldsystemctl stop dnsmasqsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.新增docker-ce源、k8s源&quot;mkdir /etc/yum.repos.d/bak/cp /etc/yum.repos.d/* /etc/yum.repos.d/bak/sleep 3cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg EOF#切换为华为云，下载速度更快sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repocurl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposed -i &#x27;s/\$releasever/7/g&#x27; /etc/yum.repos.d/docker-ce.repoecho &quot;5.更新yum源软件包缓存&quot; yum clean all &amp;&amp; yum makecacheecho &quot;6.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 master1192.168.48.102 master2192.168.48.103 master3192.168.48.104 node01192.168.48.105 node02EOFecho &quot;7.关闭swap分区&quot;swapoff -a &amp;&amp; sysctl -w vm.swappiness=0 &amp;&gt; /dev/nullsed -ri &#x27;/^[^#]*swap/s@^@#@&#x27; /etc/fstabecho &quot;8.安装chrony服务，并同步时间&quot;yum install chrony -ysystemctl start chronydsystemctl enable chronydchronyc sourceschronyc sourcesecho &quot;9.配置limits.conf&quot;ulimit -SHn 65535cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF* soft nofile 65536* hard nofile 131072* soft nproc 65535* hard nproc 655350* soft memlock unlimited* hard memlock unlimitedEOFecho &quot;10.必备工具安装&quot;yum install wget psmisc vim net-tools telnet device-mapper-persistent-data lvm2 git -yecho &quot;11.重启&quot;reboot
sh k8s_system_init.sh 主机名  主机位[master1] sh k8s_system_init.sh master1 101[master2] sh k8s_system_init.sh master2 102[master3] sh k8s_system_init.sh master3 103[node01] sh k8s_system_init.sh node01 104
配置ssh免密
操作节点[master1]
yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;master1&quot; &quot;master2&quot; &quot;master3&quot; &quot;node01&quot;)# 密码password=&quot;Lj201840.&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
内核及ipvs模块配置
此步骤是配置ipvs模块，开启一些k8s集群中必须的内核参数。配置一下几个方面：

更改内核启动顺序
安装ipvsadm
配置ipvs模块
开启k8s集群必须的内核参数
配置完内核，重启服务器

操作主机：[master1,master2,master3,node01]
vi kernel_update.sh
#!/bin/bashecho &quot;1.更改内核启动顺序&quot;grub2-set-default  0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfggrubby --args=&quot;user_namespace.enable=1&quot; --update-kernel=&quot;$(grubby --default-kernel)&quot;echo &quot;2.安装ipvsadm&quot;yum install ipvsadm ipset sysstat conntrack libseccomp -y &amp;&gt; /dev/nullecho &quot;3.配置ipvs模块&quot;modprobe -- ip_vsmodprobe -- ip_vs_rrmodprobe -- ip_vs_wrrmodprobe -- ip_vs_shmodprobe -- nf_conntrackcat &gt;&gt; /etc/modules-load.d/ipvs.conf &lt;&lt;EOFip_vsip_vs_lcip_vs_wlcip_vs_rrip_vs_wrrip_vs_lblcip_vs_lblcrip_vs_dhip_vs_ship_vs_foip_vs_nqip_vs_sedip_vs_ftpip_vs_shnf_conntrackip_tablesip_setxt_setipt_setipt_rpfilteript_REJECTipipEOFsystemctl enable --now systemd-modules-load.service &amp;&gt; /dev/nullecho &quot;4.开启k8s集群必须的内核参数&quot;cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.confnet.ipv4.ip_nonlocal_bind = 1 net.ipv4.ip_forward = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1fs.may_detach_mounts = 1net.ipv4.conf.all.route_localnet = 1vm.overcommit_memory=1vm.panic_on_oom=0fs.inotify.max_user_watches=89100fs.file-max=52706963fs.nr_open=52706963net.netfilter.nf_conntrack_max=2310720net.ipv4.tcp_keepalive_time = 600net.ipv4.tcp_keepalive_probes = 3net.ipv4.tcp_keepalive_intvl =15net.ipv4.tcp_max_tw_buckets = 36000net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_max_orphans = 327680net.ipv4.tcp_orphan_retries = 3net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.ip_conntrack_max = 65536net.ipv4.tcp_max_syn_backlog = 16384net.ipv4.tcp_timestamps = 0net.core.somaxconn = 16384EOFsysctl --systemecho &quot;5.配置完内核，重启服务器！&quot;reboot
sh kernel_update.sh
检查ipvs加载、内核版本验证
lsmod | grep --color=auto -e ip_vs -e nf_conntrackuname -a

高可用组件安装
haproxy配置
操作节点：[master1，master2,master3]
yum install keepalived haproxy -y
所有Master节点配置HAProxy，所有Master节点的HAProxy配置相同。
操作节点：[master1，master2，master3]cat &gt; /etc/haproxy/haproxy.cfg &lt;&lt;&quot;EOF&quot;global  maxconn  2000  ulimit-n  16384  log  127.0.0.1 local0 err  stats timeout 30sdefaults  log global  mode  http  option  httplog  timeout connect 5000  timeout client  50000  timeout server  50000  timeout http-request 15s  timeout http-keep-alive 15sfrontend monitor-in  bind *:33305  mode http  option httplog  monitor-uri /monitorfrontend k8s-master  bind 0.0.0.0:16443  bind 127.0.0.1:16443  mode tcp  option tcplog  tcp-request inspect-delay 5s  default_backend k8s-masterbackend k8s-master  mode tcp  option tcplog  option tcp-check  balance roundrobin  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100  server master1   192.168.48.101:6443  check  server master2   192.168.48.102:6443  check  server master3   192.168.48.103:6443  checkEOF
Keepalived配置
操作节点：[master1，master2,master3]
所有Master节点配置Keepalived，以下三个Master节点配置注意ip和网卡。
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; &quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVEL    script_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2    rise 1&#125;vrrp_instance VI_1 &#123;    state MASTER    interface ens33    mcast_src_ip 192.168.48.101    virtual_router_id 51    priority 201    advert_int 2    authentication &#123;        auth_type PASS        auth_pass 1111 # 限制在8个字符以内    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;        chk_apiserver    &#125;&#125;EOF
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; &quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVEL    script_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2    rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.102    virtual_router_id 51    priority 150    advert_int 2    authentication &#123;        auth_type PASS        auth_pass 1111 # 限制在8个字符以内    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;        chk_apiserver    &#125;&#125;EOF
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt; &quot;EOF&quot;! Configuration File for keepalivedglobal_defs &#123;    router_id LVS_DEVEL    script_user root    enable_script_security&#125;vrrp_script chk_apiserver &#123;    script &quot;/etc/keepalived/check_apiserver.sh&quot;    interval 5    weight -5    fall 2    rise 1&#125;vrrp_instance VI_1 &#123;    state BACKUP    interface ens33    mcast_src_ip 192.168.48.103    virtual_router_id 51    priority 99    advert_int 2    authentication &#123;        auth_type PASS        auth_pass 1111 # 限制在8个字符以内    &#125;    virtual_ipaddress &#123;        192.168.48.200    &#125;    track_script &#123;        chk_apiserver    &#125;&#125;EOF
配置Keepalived健康检查文件
操作节点：[master1，master2,master3]
cat &gt; /etc/keepalived/check_apiserver.sh &lt;&lt; &quot;EOF&quot;#!/bin/basherr=0for k in \$(seq 1 3)do    check_code=\$(pgrep haproxy)    if [[ \$check_code == &quot;&quot; ]]; then        err=\$(expr \$err + 1)        sleep 1        continue    else        err=0        break    fidoneif [[ \$err != &quot;0&quot; ]]; then    echo &quot;Stopping keepalived due to haproxy failure.&quot;    /usr/bin/systemctl stop keepalived    exit 1else    exit 0fiEOFchmod +x /etc/keepalived/check_apiserver.sh
启动haproxy和keepalived
操作节点：[master，master2,master3]systemctl daemon-reloadsystemctl enable --now haproxysystemctl enable --now keepalivedsystemctl restart haproxy keepalived
测试集群负载均衡高可用
查看master1的vip
ip a

模拟master1的宕机测试，看看vip会不会漂移到master2去
[master1] poweroff

这时候查看master2的ip列表
[master2] ip a

结论：这时可以知道，负载均衡集群成功，当master1出现宕机情况，vip会从master1漂移到master2
docker安装
安装docker
操作节点[master1，master2，master3,node01]
wget https://download.docker.com/linux/static/stable/x86_64/docker-24.0.7.tgztar xf docker-*.tgzcp -rf docker/* /usr/bin/#创建containerd的service文件,并且启动cat &gt;/etc/systemd/system/containerd.service &lt;&lt;EOF[Unit]Description=containerd container runtimeDocumentation=https://containerd.ioAfter=network.target local-fs.target[Service]ExecStartPre=-/sbin/modprobe overlayExecStart=/usr/bin/containerdType=notifyDelegate=yesKillMode=processRestart=alwaysRestartSec=5LimitNPROC=infinityLimitCORE=infinityLimitNOFILE=1048576TasksMax=infinityOOMScoreAdjust=-999[Install]WantedBy=multi-user.targetEOFsystemctl enable --now containerd.service#准备docker的service文件cat &gt; /etc/systemd/system/docker.service &lt;&lt;EOF[Unit]Description=Docker Application Container EngineDocumentation=https://docs.docker.comAfter=network-online.target firewalld.service containerd.serviceWants=network-online.targetRequires=docker.socket containerd.service[Service]Type=notifyExecStart=/usr/bin/dockerd --config-file=/etc/docker/daemon.json -H fd://containerd=/run/containerd/containerd.sockExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=alwaysStartLimitBurst=3StartLimitInterval=60sLimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinityTasksMax=infinityDelegate=yesKillMode=processOOMScoreAdjust=-500[Install]WantedBy=multi-user.targetEOF#准备docker的socket文件cat &gt; /etc/systemd/system/docker.socket &lt;&lt;EOF[Unit]Description=Docker Socket for the API[Socket]ListenStream=/var/run/docker.sockSocketMode=0660SocketUser=rootSocketGroup=docker[Install]WantedBy=sockets.targetEOFgroupadd dockersystemctl enable --now docker.socket  &amp;&amp; systemctl enable --now docker.service#验证mkdir /etc/dockersudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,		&quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart docker
安装cri-docker
操作节点[master1，master2，master3,node01]
wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.12/cri-dockerd-0.3.12.amd64.tgztar -zxvf cri-dockerd-0.3.*.amd64.tgzcp cri-dockerd/cri-dockerd  /usr/bin/chmod +x /usr/bin/cri-dockerd#写入启动配置文件cat &gt;  /usr/lib/systemd/system/cri-docker.service &lt;&lt;EOF[Unit]Description=CRI Interface for Docker Application Container EngineDocumentation=https://docs.mirantis.comAfter=network-online.target firewalld.service docker.serviceWants=network-online.targetRequires=cri-docker.socket [Service]Type=notifyExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9ExecReload=/bin/kill -s HUP $MAINPIDTimeoutSec=0RestartSec=2Restart=always StartLimitBurst=3 StartLimitInterval=60s LimitNOFILE=infinityLimitNPROC=infinityLimitCORE=infinity TasksMax=infinityDelegate=yesKillMode=process [Install]WantedBy=multi-user.targetEOF#写入socket配置文件cat &gt; /usr/lib/systemd/system/cri-docker.socket &lt;&lt;EOF[Unit]Description=CRI Docker Socket for the APIPartOf=cri-docker.service [Socket]ListenStream=%t/cri-dockerd.sockSocketMode=0660SocketUser=rootSocketGroup=docker [Install]WantedBy=sockets.targetEOFsystemctl daemon-reload &amp;&amp; systemctl enable cri-docker --now
K8S集群安装
安装k8s所需的工具
操作节点[master1，master2，master3,node01]yum -y install  kubeadm kubelet kubectl#为了实现docker使用的cgroupdriver与kubelet使用的cgroup的一致性，配置如下：sed -i &#x27;s/^KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd&quot;/g&#x27; /etc/sysconfig/kubelet#设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动systemctl enable kubeletsystemctl enable kubelet.service
集群初始化
操作节点[master1,master2,master3]cat &gt; kubeadm-config.yaml &lt;&lt; EOFapiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.48.101  bindPort: 6443nodeRegistration:  criSocket: unix:///var/run/cri-dockerd.sock  imagePullPolicy: IfNotPresent  taints: null---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta3certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: 1.28.2networking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;controlPlaneEndpoint: &quot;192.168.48.200:16443&quot;---apiVersion: kubeproxy.config.k8s.io/v1alpha1bindAddress: 0.0.0.0bindAddressHardFail: falseclientConnection:  acceptContentTypes: &quot;&quot;  burst: 0  contentType: &quot;&quot;  kubeconfig: /var/lib/kube-proxy/kubeconfig.conf  qps: 0clusterCIDR: &quot;&quot;configSyncPeriod: 0sconntrack:  maxPerCore: null  min: null  tcpCloseWaitTimeout: null  tcpEstablishedTimeout: nulldetectLocal:  bridgeInterface: &quot;&quot;  interfaceNamePrefix: &quot;&quot;detectLocalMode: &quot;&quot;enableProfiling: falsehealthzBindAddress: &quot;&quot;hostnameOverride: &quot;&quot;iptables:  localhostNodePorts: null  masqueradeAll: false  masqueradeBit: null  minSyncPeriod: 0s  syncPeriod: 0sipvs:  excludeCIDRs: null  minSyncPeriod: 0s  scheduler: &quot;&quot;  strictARP: false  syncPeriod: 0s  tcpFinTimeout: 0s  tcpTimeout: 0s  udpTimeout: 0skind: KubeProxyConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0metricsBindAddress: &quot;&quot;mode: &quot;&quot;nodePortAddresses: nulloomScoreAdj: nullportRange: &quot;&quot;showHiddenMetricsForVersion: &quot;&quot;winkernel:  enableDSR: false  forwardHealthCheckVip: false  networkName: &quot;&quot;  rootHnsEndpointName: &quot;&quot;  sourceVip: &quot;&quot;---apiVersion: kubelet.config.k8s.io/v1beta1authentication:  anonymous:    enabled: false  webhook:    cacheTTL: 0s    enabled: true  x509:    clientCAFile: /etc/kubernetes/pki/ca.crtauthorization:  mode: Webhook  webhook:    cacheAuthorizedTTL: 0s    cacheUnauthorizedTTL: 0scgroupDriver: systemdclusterDNS:- 10.96.0.10clusterDomain: cluster.localcontainerRuntimeEndpoint: &quot;&quot;cpuManagerReconcilePeriod: 0sevictionPressureTransitionPeriod: 0sfileCheckFrequency: 0shealthzBindAddress: 127.0.0.1healthzPort: 10248httpCheckFrequency: 0simageMinimumGCAge: 0skind: KubeletConfigurationlogging:  flushFrequency: 0  options:    json:      infoBufferSize: &quot;0&quot;  verbosity: 0memorySwap: &#123;&#125;nodeStatusReportFrequency: 0snodeStatusUpdateFrequency: 0srotateCertificates: trueruntimeRequestTimeout: 0sshutdownGracePeriod: 0sshutdownGracePeriodCriticalPods: 0sstaticPodPath: /etc/kubernetes/manifestsstreamingConnectionIdleTimeout: 0ssyncFrequency: 0svolumeStatsAggPeriod: 0sEOFkubeadm config migrate --old-config kubeadm-config.yaml --new-config new.yaml
准备k8s所需的镜像
操作节点[master1,master2,master3]kubeadm config images pull --config /root/new.yaml 

master1节点初始化
操作节点[master1]
kubeadm init --config /root/new.yaml  --upload-certs
会生成信息

记录信息后面会用到
初始化成功以后，会产生Token值，用于其他节点加入时使用，因此要记录下初始化成功生成的token值（令牌值），有效期24小时，后续需要操作可以重新生成Token
操作节点[master1]
kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:fd91b75286ce9d50c840f380117e25961ad743a8962f3a9f2c80d74c928e1497 \        --control-plane --certificate-key 0dfa57d943f4a2b8b55840d17f67de731b137e11ca4720f7bf9bfd75d8247e22kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:fd91b75286ce9d50c840f380117e25961ad743a8962f3a9f2c80d74c928e1497
操作kubect报错：

此时通过kubectl操作，会出现失败，因为还没有将集群的&quot;钥匙&quot;交给root用户。/etc/kubernetes/admin.conf 文件是 Kubernetes（K8s）集群中的管理员配置文件，它包含了用于管理集群的身份验证和访问信息。所以下面进行配置环境变量，用于访问Kubernetes集群：
添加环境变量
操作节点[master1]
mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config
添加其他master节点至集群中
操作节点[master2,master3]
操作节点[master2,master3]kubeadm join 192.168.48.200:16443 --token abcdef.0123456789abcdef \        --discovery-token-ca-cert-hash sha256:fd91b75286ce9d50c840f380117e25961ad743a8962f3a9f2c80d74c928e1497 \        --control-plane --certificate-key 0dfa57d943f4a2b8b55840d17f67de731b137e11ca4720f7bf9bfd75d8247e22 \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
接着给master2添加环境变量
操作节点[master2,master3]mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config

这里没有展示master3的图片，但是步骤一样的
模拟Token过期重新生成并加入Node节点
假设加入集群的token过期了。node01无法加入了，这里就模拟一下这种情况

Token过期后生成新的token：

kubeadm token create --print-join-command
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
其中，192.168.48.200:16443 是你的 Kubernetes API 服务器的地址和端口，tn5q1b.7w1jj77ewup7k2in 是新的令牌，sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f 是令牌的 CA 证书哈希值。

Master需要生成–certificate-key：

kubeadm init phase upload-certs --upload-certs
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
其中，5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 是证书密钥。

生成新的Token用于集群添加新Node节点

操作节点[node01]
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --cri-socket unix:///var/run/cri-dockerd.sock 
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 

这时在master查看node状态（显示为notready不影响）

模拟新加master节点的加入K8S集群中
假设我们新加master节点的话，就拼接token，从刚刚生成的token拼接
[root@master1 ~]# kubeadm token create --print-join-commandkubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
这里提取信息1
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f
接着
[root@master1 ~]# kubeadm init phase upload-certs --upload-certsW1110 18:12:03.426245   10185 version.go:104] could not fetch a Kubernetes version from the internet: unable to get URL &quot;https://dl.k8s.io/release/stable-1.txt&quot;: Get &quot;https://dl.k8s.io/release/stable-1.txt&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)W1110 18:12:03.426320   10185 version.go:105] falling back to the local client version: v1.28.2[upload-certs] Storing the certificates in Secret &quot;kubeadm-certs&quot; in the &quot;kube-system&quot; Namespace[upload-certs] Using certificate key:5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
这里提取信息2：这里前面要加上--control-plane --certificate-key
--control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128
合成
kubeadm join 192.168.48.200:16443 --token tn5q1b.7w1jj77ewup7k2in \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f  \        --control-plane --certificate-key 5d3706028d5e569324a4c456c81ae0f5551ece88b3132f03917668c6b0605128 \        --cri-socket unix:///var/run/cri-dockerd.sock                kubeadm join 192.168.48.200:16443 --token lnkno8.u4v1l8n9pahzf0kj \        --discovery-token-ca-cert-hash sha256:cc5427e0e133d95250ab0aa90976fea2c383278b6345fd7e8c28702ac8dfc61f \        --control-plane --certificate-key 41e441fe56cb4bdfcc2fc0291958e6b1da54d01f4649b6651471c07583f85cdf \        --cri-socket unix:///var/run/cri-dockerd.sock
注意：这里末尾添加了--cri-socket unix:///var/run/cri-dockerd.sock 
图示

安装calico网络插件
操作节点[master1]
添加解析记录，否则无法访问
echo &#x27;185.199.108.133 raw.githubusercontent.com&#x27; &gt;&gt; /etc/hosts
应用operator资源清单文件
网络组件有很多种，只需要部署其中一个即可，推荐Calico。
Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。
Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。
此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。
curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O
[root@master1 ~]# vim calico.yaml#参考信息 - name: WAIT_FOR_DATASTORE  value: &quot;true&quot;#添加以下两行- name: IP_AUTODETECTION_METHOD  value: interface=ens33#ens33是你的网卡

sed -i &#x27;s| docker.io/calico/| registry.cn-hangzhou.aliyuncs.com/qianyios/|&#x27; calico.yamlkubectl apply -f calico.yaml

监视kube-system命名空间中pod运行情况
等待估计20分钟左右吧(确保全部running)
kubectl get pods -n kube-system

拿掉master节点的污点
节点 master1 和 master2 都有一个名为 node-role.kubernetes.io/control-plane:NoSchedule 的污点。这个污点的作用是阻止普通的 Pod 被调度到这些节点上，只允许特定的控制平面组件（如 kube-apiserver、kube-controller-manager 和 kube-scheduler）在这些节点上运行。
这种设置有助于确保控制平面节点专门用于运行 Kubernetes 的核心组件，而不会被普通的工作负载占用。通过将污点添加到节点上，可以确保只有被授权的控制平面组件才能在这些节点上运行。
kubectl describe node master1 | grep -i taintkubectl describe node master2 | grep -i taintkubectl describe node master3 | grep -i taint

去除污点
kubectl taint node master1 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master2 node-role.kubernetes.io/control-plane:NoSchedule-kubectl taint node master3 node-role.kubernetes.io/control-plane:NoSchedule-

安装dashboard
操作节点[master1]
下载文件
https://github.com/kubernetes/dashboard/releases/tag/v2.7.0
目前最新版本v2.7.0
wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yamlsed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yamlsed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml

修改配置文件
vim recommended.yaml---kind: ServiceapiVersion: v1metadata:  labels:    app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443      nodePort: 30001  type: NodePort  selector:    app: kubernetes-dashboard---

运行dashboard
kubectl apply -f recommended.yaml

检查运行状态
kubectl get pods -n kubernetes-dashboardkubectl get pod,svc -o wide -n kubernetes-dashboard

创建cluster-admin用户
创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin#获取用户Tokenkubectl create token dashboard-admin -n kubernetes-dashboard

记录token
eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw
登录浏览器访问
https://192.168.48.200:30001输入token：----eyJhbGciOiJSUzI1NiIsImtpZCI6IjJxb21sRTZSckhEZ09FMnlvWU5IY3dfTTRIWDEzRUpsQ000MThhSWxYNDgifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjk5NjQ2Mjg3LCJpYXQiOjE2OTk2NDI2ODcsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJkYXNoYm9hcmQtYWRtaW4iLCJ1aWQiOiIyNTBhNTQ2MS03MGJlLTRhZTItOWY2Yi1hMDQwOWE1NWJhMTMifX0sIm5iZiI6MTY5OTY0MjY4Nywic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmVybmV0ZXMtZGFzaGJvYXJkOmRhc2hib2FyZC1hZG1pbiJ9.U-lH9_sRU4TVrpAznqS60INNSev9NxHu61igGUTzTBoaWo7WjPG7vzTnpZYhvsoglTzMEKhfranJkkkn95pe-prkvSasaAL6kXHw0jQjlSMzcYiF7DoLdkOtDJSukuALEubidf9eIwZXFZ-sezZdZHm4hnk5nWme5YtdOmYOJPh5sv1dzRvM1XuOHknJPTA1BbdZuVAtSGHSjkhwx-wl-41uuQoROW5GjJs0bz4zLBFn1w_pWaSMCn7pjGJNcbr6IuDV41km_etpwwxacWyfAcxNykzCtIiE1abJj7m-e944GvAn_eqxz3wCZD6Bgt41FWRzyMHjrppJfDjk7FaHNw----

部署一个nginx测试
操作节点[master1]
vim web.yamlkind: Deployment#apiVersion: extensions/v1beta1apiVersion: apps/v1metadata:  labels:    app: web-deployment-label  name: web-deployment  namespace: defaultspec:  replicas: 3  selector:    matchLabels:      app: web-selector  template:    metadata:      labels:        app: web-selector    spec:      containers:      - name: web-container        image: nginx:latest        imagePullPolicy: Always        ports:        - containerPort: 80          protocol: TCP          name: http        - containerPort: 443          protocol: TCP          name: https---kind: ServiceapiVersion: v1metadata:  labels:    app: web-service-label  name: web-service  namespace: defaultspec:  type: NodePort  ports:  - name: http    port: 80    protocol: TCP    targetPort: 80    nodePort: 30080  - name: https    port: 443    protocol: TCP    targetPort: 443    nodePort: 30443  selector:    app: web-selector    kubectl apply -f web.yaml 

### 查看nginx的pod 的详细信息kubectl get deploy,svc,pod -o wide

访问nginx网站
http://192.168.48.200:30080


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack Antelope</title>
    <url>/posts/8c5be7b9/</url>
    <content><![CDATA[
OpenStack Antelope
本文档是基于 openEuler 24.03 LTS 的 OpenStack 部署指南
镜像下载： openEuler 24.03 LTS
主机拓扑



主机名
ip
硬盘1
硬盘2
cpu
内存




controller
192.168.48.101
100G

4
7G


compute
192.168.48.102
100G

4
4G


storage
192.168.48.103
100G
100G
4
2G



具体安装的服务如下：



节点名称
OpenStack 服务




控制节点
MariaDB RabbitMQ Memcache Keystone Placement Glance Nova Neutron Cinder Horizon Heat


计算节点
Nova Neutron


块存储节点
Cinder Swift



前情提要
compute启动虚拟机硬件加速（x86_64）

所有节点的内存和硬盘芯片都要按照我的来

安全性
物理节点关闭顺序
给每台机都加上两个脚本
cat &gt;&gt; stop.sh &lt;&lt; EOF#!/bin/bash# 关闭所有 OpenStack 节点# 依次关闭计算节点、网络节点、控制节点for server in \$(openstack server list -f value -c ID); do    openstack server stop \$serverdone# 关闭计算节点echo &quot;Stopping compute services...&quot;systemctl stop openstack-nova-compute.servicesystemctl stop libvirtd.service# 关闭网络节点echo &quot;Stopping network services...&quot;systemctl stop openvswitch.servicesystemctl stop neutron-server.servicesystemctl stop neutron-linuxbridge-agent.servicesystemctl stop neutron-dhcp-agent.servicesystemctl stop neutron-metadata-agent.servicesystemctl stop neutron-l3-agent.service# 关闭控制节点echo &quot;Stopping control services...&quot;systemctl stop mariadb.servicesystemctl stop rabbitmq-server.servicesystemctl stop memcached.servicesystemctl stop httpd.servicesystemctl stop openstack-glance-api.servicesystemctl stop openstack-glance-registry.servicesystemctl stop openstack-cinder-api.servicesystemctl stop openstack-cinder-scheduler.servicesystemctl stop openstack-cinder-volume.servicesystemctl stop openstack-nova-api.servicesystemctl stop openstack-nova-scheduler.servicesystemctl stop openstack-nova-conductor.servicesystemctl stop openstack-nova-novncproxy.servicesystemctl stop openstack-nova-consoleauth.servicesystemctl stop openstack-keystone.servicesystemctl stop openstack-heat-api.servicesystemctl stop openstack-heat-api-cfn.servicesystemctl stop openstack-heat-engine.servicesystemctl stop openstack-swift-proxy.servicesystemctl stop openstack-swift-account.servicesystemctl stop openstack-swift-container.servicesystemctl stop openstack-swift-object.serviceecho &quot;Stopping all services...&quot;systemctl stop --all# 关闭电源echo &quot;Shutting down the system...&quot;poweroffEOFcat &gt;&gt; start.sh &lt;&lt; EOF#!/bin/bash# 重新启动 OpenStack 服务# 依次启动控制节点、网络节点、计算节点# 启动控制节点echo &quot;Starting control services...&quot;systemctl start mariadb.servicesystemctl start rabbitmq-server.servicesystemctl start memcached.servicesystemctl start httpd.servicesystemctl start openstack-glance-api.servicesystemctl start openstack-glance-registry.servicesystemctl start openstack-cinder-api.servicesystemctl start openstack-cinder-scheduler.servicesystemctl start openstack-cinder-volume.servicesystemctl start openstack-nova-api.servicesystemctl start openstack-nova-scheduler.servicesystemctl start openstack-nova-conductor.servicesystemctl start openstack-nova-novncproxy.servicesystemctl start openstack-nova-consoleauth.servicesystemctl start openstack-keystone.servicesystemctl start openstack-heat-api.servicesystemctl start openstack-heat-api-cfn.servicesystemctl start openstack-heat-engine.servicesystemctl start openstack-swift-proxy.servicesystemctl start openstack-swift-account.servicesystemctl start openstack-swift-container.servicesystemctl start openstack-swift-object.service# 启动网络节点echo &quot;Starting network services...&quot;systemctl start openvswitch.servicesystemctl start neutron-server.servicesystemctl start neutron-linuxbridge-agent.servicesystemctl start neutron-dhcp-agent.servicesystemctl start neutron-metadata-agent.servicesystemctl start neutron-l3-agent.service# 启动计算节点echo &quot;Starting compute services...&quot;systemctl start libvirtd.servicesystemctl start openstack-nova-compute.serviceEOF
（先给coompute和storage节点执行-最后等这两个节点完全关闭，再给控制节点执行）
关闭物理机的时候运行sh stop.sh(运行的时候可能会提示你有些服务找不到，报错，这个没关系，但是要是告诉你有些服务起不来，要你自己去找报错了)一般情况下是没问题的
物理节点开启顺序

先开controller再开剩下的计算节点

基本用户信息
OpenStack 各组件都需要在控制节点数据库中注册专属账户以存放数据信息，故需要设置密码，强烈建议各组件的密码以及宿主机密码各不相同。



OpenStack 组件
密码




控制节点 root
Lj201840.


计算节点 root
Lj201840.


Metadata 元数据密钥
METADATA_SECRET


Mariadb root 账户
MARIADB_PASS


RabbitMQ 服务
RABBIT_PASS


OpenStack admin
ADMIN_PASS


Placement 服务
PLACEMENT_PASS


Keystone 数据库
KEYSTONE_DBPASS


Glance 服务
GLANCE_PASS


Glance 数据库
GLANCE_DBPASS


Nova 服务
NOVA_PASS


Nova 数据库
NOVA_DBPASS


Neutron 服务
NEUTRON_PASS


Neutron 数据库
NEUTRON_DBPASS


Cinder 服务
CINDER_PASS


Cinder 数据库
CINDER_DBPASS


Horizon 数据库
DASH_DBPASS


Swift服务
SWIFT_PASS


Heat服务
HEAT_PASS


Heat数据库服务
HEAT_DBPASS


heat_domain_admin用户
HEAT_DOMAIN_USER_PASS



测试用户



用户
密码




admin
123456


use_dog
123456



基础配置
操作节点：[所有节点]
不要一股脑的复制，注意修改网卡的名字，我这里是ens33，修改成你的网卡名字，包括修改ip段，比如我的是192.168.48.你就要修改成你的172.8.3.最后那一个主机位就不用管，其他不变
vi init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.新增华为云源&quot;mkdir /etc/yum.repos.d/bak/cp /etc/yum.repos.d/* /etc/yum.repos.d/bak/#切换为华为云，下载速度更快sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/openEuler.reposed -i &#x27;s/http\:\/\/repo.openeuler.org/https\:\/\/mirrors.huaweicloud.com\/openeuler/g&#x27; /etc/yum.repos.d/openEuler.repoecho &quot;5.更新yum源软件包缓存&quot;yum clean all &amp;&amp; yum makecacheecho &quot;6.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101   controller192.168.48.102   compute192.168.48.103   storageEOFecho &quot;7.安装chrony服务，并同步时间&quot;yum install chrony -ysystemctl enable chronyd --nowtimedatectl set-timezone Asia/Shanghaitimedatectl set-local-rtc 1timedatectl set-ntp yeschronyc -a makestepchronyc trackingchronyc sourcesecho &quot;8.必备工具安装&quot;yum install wget psmisc vim net-tools telnet socat device-mapper-persistent-data lvm2 git -yecho &quot;9.安装openstack&quot;#新装的系统，默认启用 EPOL ，若没有启动，自行启用 EPOL 软件仓以支持 OpenStackyum update -yyum install openstack-release-antelope -yecho &quot;10.重启&quot;reboot
运行
sh system_init.sh 主机名  主机位[controller] sh init.sh controller 101[compute] sh init.sh compute 102[storage] sh init.sh storage 103
SSH免密
#各节点yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;controller&quot; &quot;compute&quot; &quot;storage&quot;)# 密码（注意修改）!!!!!!!!!!!!!!!!!!!!!!!password=&quot;Lj201840.&quot;# SSH 配置文件ssh_config=&quot;$HOME/.ssh/config&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 确保 SSH 配置文件存在mkdir -p &quot;$HOME/.ssh&quot;touch &quot;$ssh_config&quot;chmod 600 &quot;$ssh_config&quot;# 添加 SSH 配置&#123;    echo &quot;Host *&quot;    echo &quot;    StrictHostKeyChecking no&quot;    echo &quot;    UserKnownHostsFile /dev/null&quot;&#125; &gt;&gt; &quot;$ssh_config&quot;# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
依赖组件
时间同步
集群环境时刻要求每个节点的时间一致，一般由时钟同步软件保证。本文使用chrony软件
由于前面基础配置已经安装chrony，这里就不再安装了
操作节点：[controller]
echo &quot;allow 192.168.48.0/24&quot; | sudo tee -a /etc/chrony.conf &gt; /dev/nullsystemctl restart chronyd
操作节点：[compute,storage]
# 192.168.48.101是controller IP，表示从这个机器获取时间，这里我们填192.168.48.101，或者在`/etc/hosts`里配置好的controller名字即可。echo &quot;server 192.168.48.101 iburst&quot; | sudo tee -a /etc/chrony.conf &gt; /dev/nullsystemctl restart chronyd
配置完成后，检查一下结果，在其他非controller节点执行chronyc sources，返回结果类似如下内容，表示成功从controller同步时钟


安装数据库
操作节点:[controller]
dnf install mysql-config mariadb mariadb-server python3-PyMySQL -ycat &gt; /etc/my.cnf.d/openstack.cnf &lt;&lt; &quot;EOF&quot;[mysqld]bind-address = 192.168.48.101default-storage-engine = innodbinnodb_file_per_table = onmax_connections = 4096collation-server = utf8_general_cicharacter-set-server = utf8EOFsystemctl enable --now mariadb#初始化数据库mysql_secure_installationEnter current password for root (enter for none): 回车Switch to unix_socket authentication [Y/n] nChange the root password? [Y/n] y# 将要求输入数据库 root 账户密码 MARIADB_PASSRemove anonymous users? [Y/n] yDisallow root login remotely? [Y/n] YRemove test database and access to it? [Y/n] yReload privilege tables now? [Y/n] y# 验证mysql -u root -pMARIADB_PASS
安装消息队列
操作节点:[controller]
dnf install rabbitmq-server -ysystemctl enable --now rabbitmq-serverrabbitmqctl add_user openstack RABBIT_PASSrabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
安装缓存服务
操作节点:[controller]
controller是我的主机名，你要改成你的主机名
dnf install memcached python3-memcached -ysed -i &quot;s/OPTIONS=\&quot;-l 127.0.0.1,::1\&quot;/OPTIONS=\&quot;-l 127.0.0.1,::1,controller\&quot;/g&quot; /etc/sysconfig/memcachedsystemctl enable memcached --now
Keystone
Keystone是OpenStack提供的鉴权服务，是整个OpenStack的入口，提供了租户隔离、用户认证、服务发现等功能，必须安装。
建立一个脚本  (后续我都不做解释了，自行添加脚本，然后运行，要注意脚本里的密码啥的，改成自己需要的)
mkdir openstack-installcd openstack-installvim keystone.sh
添加以下内容
#!/bin/bash# 创建数据库并授权#替换 KEYSTONE_DBPASS，为 keystone 数据库设置密码echo &quot;CREATE DATABASE keystone;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;sleep 3# 安装OpenStack Keystone和相关依赖dnf install openstack-keystone httpd mod_wsgi -y# 备份并配置keystone配置文件mv /etc/keystone/keystone.conf&#123;,.bak&#125;cat &gt; /etc/keystone/keystone.conf &lt;&lt;EOF[database]connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone[token]provider = fernetEOF# 同步数据库su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystoneecho &quot;use keystone; show tables;&quot; | mysql -u root -pMARIADB_PASS# 初始化Fernet密钥仓库和凭证keystone-manage fernet_setup --keystone-user keystone --keystone-group keystonekeystone-manage credential_setup --keystone-user keystone --keystone-group keystone# 启动服务keystone-manage bootstrap --bootstrap-password 123456 \--bootstrap-admin-url http://controller:5000/v3/ \--bootstrap-internal-url http://controller:5000/v3/ \--bootstrap-public-url http://controller:5000/v3/ \--bootstrap-region-id RegionOne# 配置Apache HTTP servercp /etc/httpd/conf/httpd.conf&#123;,.bak&#125;sed -i &quot;s/#ServerName www.example.com:80/ServerName controller/g&quot; /etc/httpd/conf/httpd.confln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/systemctl enable httpd --now# 创建管理员账户配置文件cat &lt;&lt; EOF &gt; /root/admin-openrcexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOF# 创建测试用户配置文件cat &lt;&lt; EOF &gt; /root/user_dog-openrcexport OS_USERNAME=user_dogexport OS_PASSWORD=123456export OS_PROJECT_NAME=Demoexport OS_USER_DOMAIN_NAME=RegionOneexport OS_PROJECT_DOMAIN_NAME=RegionOneexport OS_AUTH_URL=http://controller:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOF# 安装python3-openstackclientdnf install python3-openstackclient -y# 依次创建domain, projects, users, rolessource /root/admin-openrcopenstack domain create --description &quot;An RegionOne Domain&quot; RegionOneopenstack project create --domain default --description &quot;Service Project&quot; service# 在 RegionOne 域中创建一个 Demo 项目openstack project create --domain RegionOne --description &quot;Demo Project&quot; Demoopenstack user create --domain RegionOne --password 123456 user_dogopenstack role create user_dog_roleopenstack role add --project Demo --user user_dog user_dog_role# 列举当前所有域名openstack domain list
运行keystone脚本
sh keystone.sh

Glance
cd openstack-installvim glance.sh
#!/bin/bash#替换 GLANCE_DBPASS，为 glance 数据库设置密码echo &quot;CREATE DATABASE glance;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;source /root/admin-openrc#创建glance用户并设置密码openstack user create --domain default --password GLANCE_PASS glance#添加glance用户到service project并指定admin角色openstack role add --project service --user glance admin#创建glance服务实体openstack service create --name glance --description &quot;OpenStack Image&quot; image#创建glance API服务openstack endpoint create --region RegionOne image public http://controller:9292openstack endpoint create --region RegionOne image internal http://controller:9292openstack endpoint create --region RegionOne image admin http://controller:9292#安装软件包dnf install openstack-glance -y#修改配置文件mv /etc/glance/glance-api.conf&#123;,.bak&#125;cat &gt;/etc/glance/glance-api.conf &lt;&lt; &quot;EOF&quot;[database]connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance[keystone_authtoken]www_authenticate_uri  = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = glancepassword = GLANCE_PASS[paste_deploy]flavor = keystone[glance_store]stores = file,httpdefault_store = filefilesystem_store_datadir = /var/lib/glance/images/EOF#同步数据库su -s /bin/sh -c &quot;glance-manage db_sync&quot; glance#启动服务systemctl enable openstack-glance-api.service --nowsource /root/admin-openrcmkdir /root/openstack-install/iso/#下载镜像wget -P /root/openstack-install/iso/ https://resource.qianyios.top/cloud/iso/cirros-0.4.0-x86_64-disk.img#向Image服务上传镜像source /root/admin-openrcopenstack image create --disk-format qcow2 --container-format bare \   --file /root/openstack-install/iso/cirros-0.4.0-x86_64-disk.img --public cirros#验证是否上传openstack image list
sh glance.sh

Placement
Placement是OpenStack提供的资源调度组件，一般不面向用户，由Nova等组件调用，安装在控制节点。
安装、配置Placement服务前，需要先创建相应的数据库、服务凭证和API endpoints。
操作节点[controller]
cd openstack-installvim placement.sh
#!/bin/bash#创建数据库并授权#替换PLACEMENT_DBPASS为placement数据库访问密码。echo &quot;CREATE DATABASE placement;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;source /root/admin-openrc#创建placement用户并设置密码openstack user create --domain default --password PLACEMENT_PASS placement#添加placement用户到service project并指定admin角色openstack role add --project service --user placement admin#创建placement服务实体openstack service create --name placement \  --description &quot;Placement API&quot; placement#创建Placement API服务endpointsopenstack endpoint create --region RegionOne \  placement public http://controller:8778openstack endpoint create --region RegionOne \  placement internal http://controller:8778openstack endpoint create --region RegionOne \  placement admin http://controller:8778#安装placementdnf install openstack-placement-api -y#配置placementmv /etc/placement/placement.conf&#123;,.bak&#125;#PLACEMENT_DBPASS为placement服务的数据库账户密码#PLACEMENT_PASS为placement服务的密码#以下的placement.conf文件不要有任何的注释，不然后面会报错cat &gt; /etc/placement/placement.conf &lt;&lt; &quot;EOF&quot;[placement_database]connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement[api]auth_strategy = keystone[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = placementpassword = PLACEMENT_PASSEOFsu -s /bin/sh -c &quot;placement-manage db sync&quot; placementoslopolicy-convert-json-to-yaml  --namespace placement \  --policy-file /etc/placement/policy.json \  --output-file /etc/placement/policy.yamlmv /etc/placement/policy.json&#123;,.bak&#125;systemctl restart httpddnf install python3-osc-placement -yplacement-status upgrade check
sh placement.sh

验证服务，列出可用的资源类别及特性
source /root/admin-openrcopenstack --os-placement-api-version 1.2 resource class list --sort-column nameopenstack --os-placement-api-version 1.6 trait list --sort-column name


Nova
Nova是OpenStack的计算服务，负责虚拟机的创建、发放等功能。
controller
操作节点[controller]
cd openstack-installvim nova-controller.sh
#创建数据库并授权#创建nova_api、nova和nova_cell0数据库：echo &quot;CREATE DATABASE nova_api;&quot; | mysql -u root -pMARIADB_PASSecho &quot;CREATE DATABASE nova;&quot; | mysql -u root -pMARIADB_PASSecho &quot;CREATE DATABASE nova_cell0;&quot; | mysql -u root -pMARIADB_PASS#授权echo &quot;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;source /root/admin-openrc#创建nova用户并设置用户密码openstack user create --domain default --password NOVA_PASS nova#添加nova用户到service project并指定admin角色openstack role add --project service --user nova admin#创建nova服务实体openstack service create --name nova \  --description &quot;OpenStack Compute&quot; compute#创建Nova API服务endpoints：openstack endpoint create --region RegionOne \  compute public http://controller:8774/v2.1openstack endpoint create --region RegionOne \  compute internal http://controller:8774/v2.1openstack endpoint create --region RegionOne \  compute admin http://controller:8774/v2.1dnf install openstack-nova-api openstack-nova-conductor \  openstack-nova-novncproxy openstack-nova-scheduler -ymv /etc/nova/nova.conf&#123;,.bak&#125;cat &gt; /etc/nova/nova.conf &lt;&lt;EOF[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:RABBIT_PASS@controller:5672/# RABBIT_PASS为 rabbitmq 密码my_ip = 192.168.48.101# 控制节点的 IPlog_dir = /var/log/novastate_path = /var/lib/nova[api_database]connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api# NOVA_DBPASS 为数据库 Nova 账户密码[database]connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova# NOVA_DBPASS 为数据库 Nova 账户密码[api]auth_strategy = keystone[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword = NOVA_PASS# NOVA_PASS 为 Nova 服务的密码[vnc]enabled = trueserver_listen = \$my_ipserver_proxyclient_address = \$my_ip[glance]api_servers = http://controller:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = PLACEMENT_PASS# PLACEMENT_PASS 为 placement 服务的密码EOF#同步数据库su -s /bin/sh -c &quot;nova-manage api_db sync&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; novasu -s /bin/sh -c &quot;nova-manage db sync&quot; nova#验证cell0和cell1注册正确su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; nova#启动服务systemctl enable \  openstack-nova-api.service \  openstack-nova-scheduler.service \  openstack-nova-conductor.service \  openstack-nova-novncproxy.service --now
sh nova-controller.sh

compute
操作节点[compute]
确认计算节点是否支持虚拟机硬件加速（x86_64）
egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo
如果返回值为0则不支持硬件加速。
这时候请回到文章开头前情提要部分，认真看看如何开启硬件加速
不好好看文章，你就要回到开头呗，累吧？
mkdir openstack-install &amp;&amp; cd openstack-installvim nova-compute.sh
#!/bin/bashdnf install openstack-nova-compute -ymv /etc/nova/nova.conf&#123;,.bak&#125;cat &gt; /etc/nova/nova.conf &lt;&lt;EOF[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:RABBIT_PASS@controller:5672/#替换RABBIT_PASS为RabbitMQ中openstack账户的密码。my_ip = 192.168.48.102compute_driver = libvirt.LibvirtDriverinstances_path = /var/lib/nova/instanceslog_dir = /var/log/novalock_path = /var/lock/novastate_path = /var/lib/nova[api]auth_strategy = keystone[keystone_authtoken]auth_url = http://controller:5000/v3memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword = NOVA_PASS#替换NOVA_PASS为nova用户的密码。[vnc]enabled = trueserver_listen = \$my_ipserver_proxyclient_address = \$my_ipnovncproxy_base_url = http://192.168.48.101:6080/vnc_auto.html#建议设置成192.168.48.101，也就是controller，这个决定你在页面访问实例控制台的地址，如果你是自己的电脑访问，然后你又没有设置hosts映射到controller，你会访问不到的，改成ip可以访问[glance]api_servers = http://controller:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller:5000/v3username = placementpassword = PLACEMENT_PASS#PLACEMENT_PASS 为 Placement 服务密码EOFsystemctl enable libvirtd.service openstack-nova-compute.service --now
sh nova-compute.sh
验证服务
操作节点[controller]
source /root/admin-openrcopenstack compute service list --service nova-compute#当你向环境中添加新的计算节点时，确保这些新节点被加入到正确的Cell中su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova#列出服务组件，验证每个流程都成功启动和注册：openstack compute service list#列出身份服务中的API端点，验证与身份服务的连接：openstack catalog list#列出镜像服务中的镜像，验证与镜像服务的连接：openstack image list#检查cells是否运作成功，以及其他必要条件是否已具备。nova-status upgrade check



Neutron
Neutron是OpenStack的网络服务，提供虚拟交换机、IP路由、DHCP等功能。
controller
操作节点[controller]
cd openstack-installvim neutron-controller.sh
#!/bin/bash#创建数据库并授权echo &quot;CREATE DATABASE neutron;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;#创建neutron用户和服务source /root/admin-openrcopenstack user create --domain default --password NEUTRON_PASS neutronopenstack role add --project service --user neutron adminopenstack service create --name neutron \  --description &quot;OpenStack Networking&quot; network#部署 Neutron API 服务openstack endpoint create --region RegionOne \  network public http://controller:9696openstack endpoint create --region RegionOne \  network internal http://controller:9696openstack endpoint create --region RegionOne \  network admin http://controller:9696#安装软件包dnf install -y openstack-neutron openstack-neutron-linuxbridge ebtables ipset openstack-neutron-ml2#配置Neutronmv /etc/neutron/neutron.conf&#123;,.bak&#125;cat &gt;/etc/neutron/neutron.conf&lt;&lt;&quot;EOF&quot;[database]connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron[DEFAULT]core_plugin = ml2service_plugins = routerallow_overlapping_ips = truetransport_url = rabbit://openstack:RABBIT_PASS@controllerauth_strategy = keystonenotify_nova_on_port_status_changes = truenotify_nova_on_port_data_changes = true[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = neutronpassword = NEUTRON_PASS[nova]auth_url = http://controller:5000auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultregion_name = RegionOneproject_name = serviceusername = novapassword = NOVA_PASS[oslo_concurrency]lock_path = /var/lib/neutron/tmp[experimental]linuxbridge = trueEOF#配置ML2，ML2具体配置可以根据用户需求自行修改，本文使用的是provider network + linuxbridge**mv /etc/neutron/plugins/ml2/ml2_conf.ini&#123;,.bak&#125;#修改/etc/neutron/plugins/ml2/ml2_conf.inicat &gt; /etc/neutron/plugins/ml2/ml2_conf.ini &lt;&lt; EOF[ml2]type_drivers = flat,vlan,vxlantenant_network_types = vxlanmechanism_drivers = linuxbridge,l2populationextension_drivers = port_security[ml2_type_flat]flat_networks = provider[ml2_type_vxlan]vni_ranges = 1:1000[securitygroup]enable_ipset = trueEOF#修改/etc/neutron/plugins/ml2/linuxbridge_agent.inicat &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini &lt;&lt;EOF[linux_bridge]physical_interface_mappings = provider:ens33# ens33 为第一块网卡名称[vxlan]enable_vxlan = truelocal_ip = 192.168.48.101l2_population = true# 192.168.48.101 为控制节点的 IP[securitygroup]enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriverEOF#配置Layer-3代理mv /etc/neutron/l3_agent.ini&#123;,.bak&#125;cat &gt; /etc/neutron/l3_agent.ini &lt;&lt; EOF[DEFAULT]interface_driver = linuxbridgeEOF#配置DHCP代理 mv /etc/neutron/dhcp_agent.ini&#123;,.bak&#125;cat &gt; /etc/neutron/dhcp_agent.ini &lt;&lt; EOF[DEFAULT]interface_driver = linuxbridgedhcp_driver = neutron.agent.linux.dhcp.Dnsmasqenable_isolated_metadata = trueEOF#配置metadata代理mv /etc/neutron/metadata_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/metadata_agent.ini &lt;&lt; EOF[DEFAULT]nova_metadata_host = controllermetadata_proxy_shared_secret = METADATA_SECRET# METADATA_SECRET 为 元数据 的密钥EOFcat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF#追加在末尾[neutron]auth_url = http://controller:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = NEUTRON_PASSservice_metadata_proxy = truemetadata_proxy_shared_secret = METADATA_SECRET#NEUTRON_PASS  为 neutron 服务的密码#METADATA_SECRET 为上边设置的元数据密钥EOF#创建/etc/neutron/plugin.ini的符号链接ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.inisu -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutronsystemctl restart openstack-nova-apisystemctl enable neutron-server.service neutron-linuxbridge-agent.service \neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.service --now
sh neutron-controller.sh
compute
操作节点[compute]
cd openstack-installvim neutron-compute.sh
#!/bin/bashdnf install openstack-neutron-linuxbridge ebtables ipset -y#配置neutroncat &gt;/etc/neutron/neutron.conf &lt;&lt; &quot;EOF&quot;[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controllerauth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = neutronpassword = NEUTRON_PASS[oslo_concurrency]lock_path = /var/lib/neutron/tmpEOF#修改/etc/neutron/plugins/ml2/linuxbridge_agent.inicat &gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini &lt;&lt;EOF[linux_bridge]physical_interface_mappings = provider:ens33# ens33 为第一块网卡名称[vxlan]enable_vxlan = truelocal_ip = 192.168.48.102l2_population = true# 192.168.48.102 为计算节点的 IP[securitygroup]enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriverEOF#配置nova compute服务使用neutroncat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF#追加在末尾[neutron]auth_url = http://controller:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = NEUTRON_PASSservice_metadata_proxy = truemetadata_proxy_shared_secret = METADATA_SECRET#NEUTRON_PASS  为 neutron 服务的密码#METADATA_SECRET 为上边设置的元数据密钥EOFsystemctl restart openstack-nova-compute.servicesystemctl enable neutron-linuxbridge-agent --now
sh neutron-compute.sh
验证服务
操作节点[controller]
source admin-openrcopenstack network agent list
确保五个都是up你再做下一步

Cinder
Cinder是OpenStack的存储服务，提供块设备的创建、发放、备份等功能。
controller
操作节点[controller]
cd openstack-installvim cinder-controller.sh
my_ip = 192.168.48.101为控制节点ip
#!/bin/bashecho &quot;CREATE DATABASE cinder;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;CINDER_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;CINDER_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;source /root/admin-openrcopenstack user create --domain default --password CINDER_PASS cinderopenstack role add --project service --user cinder adminopenstack service create --name cinderv3 \  --description &quot;OpenStack Block Storage&quot; volumev3openstack endpoint create --region RegionOne \  volumev3 public http://controller:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 internal http://controller:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 admin http://controller:8776/v3/%\(project_id\)sdnf install openstack-cinder-api openstack-cinder-scheduler -ycat &gt;/etc/cinder/cinder.conf&lt;&lt;&quot;EOF&quot;[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controllerauth_strategy = keystonemy_ip = 192.168.48.101[database]connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = cinderpassword = CINDER_PASS[oslo_concurrency]lock_path = /var/lib/cinder/tmpEOFsu -s /bin/sh -c &quot;cinder-manage db sync&quot; cindercat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF[cinder]os_region_name = RegionOneEOFsystemctl restart openstack-nova-apisystemctl enable openstack-cinder-api openstack-cinder-scheduler  --now
sh cinder-controller.sh
Storage
关闭所有节点(运行不了，请回开头，复制关闭顺序脚本)（注意关闭顺序，这里不在说明，回头看）
操作节点[所有节点]
sh stop.sh
给compute添加一块100g的磁盘

操作节点[Storage]
按照前情提要里的Storage节点，添加一块新硬盘，我这里是/dev/sdb
Cinder支持很多类型的后端存储，本指导使用最简单的lvm为参考，如果您想使用如ceph等其他后端，请自行配置。
mkdir openstack-install &amp;&amp; cd openstack-installvim cinder-storage.sh
#!/bin/bashdnf install lvm2 device-mapper-persistent-data scsi-target-utils rpcbind nfs-utils openstack-cinder-volume openstack-cinder-backup -y#配置lvm卷组pvcreate /dev/sdbvgcreate cinder-volumes /dev/sdb# sdb 为划分给块存储使用的磁盘# 如有多个磁盘，则需重复以上两个命令#配置cindermv /etc/cinder/cinder.conf&#123;,.bak&#125;cat &gt;/etc/cinder/cinder.conf&lt;&lt;&quot;EOF&quot;[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controllerauth_strategy = keystonemy_ip = 192.168.0.4enabled_backends = lvmglance_api_servers = http://controller:9292[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = cinderpassword = CINDER_PASS[database]connection = mysql+pymysql://cinder:CINDER_DBPASS@controller/cinder[lvm]volume_driver = cinder.volume.drivers.lvm.LVMVolumeDrivervolume_group = cinder-volumestarget_protocol = iscsitarget_helper = lioadm[oslo_concurrency]lock_path = /var/lib/cinder/tmpEOFsystemctl enable openstack-cinder-volume target --now
sh cinder-storage.sh
至此，Cinder服务的部署已全部完成，可以在controller通过以下命令进行简单的验证

配置cinder backup （可选）
cinder-backup是可选的备份服务，cinder同样支持很多种备份后端，本文使用swift存储，如果您想使用如NFS等后端，请自行配置，例如可以参考OpenStack官方文档对NFS的配置说明。
修改/etc/cinder/cinder.conf，在[DEFAULT]中新增
[DEFAULT]backup_driver = cinder.backup.drivers.swift.SwiftBackupDriverbackup_swift_url = SWIFT_URL
这里的SWIFT_URL是指环境中swift服务的URL，在部署完swift服务后，执行openstack catalog show object-store命令获取。
systemctl start openstack-cinder-backup 

验证服务
操作节点[controller]
source admin-openrcsystemctl restart httpd memcachedopenstack volume service list

Horizon
Horizon是OpenStack提供的前端页面，可以让用户通过网页鼠标的操作来控制OpenStack集群，而不用繁琐的CLI命令行。Horizon一般部署在控制节点。
操作节点[controller]
cd openstack-installvim horizon-controller.sh
dnf install openstack-dashboard -ycp /etc/openstack-dashboard/local_settings&#123;,.bak&#125;sed -i &#x27;s/^ALLOWED_HOSTS/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^OPENSTACK_HOST/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^OPENSTACK_KEYSTONE_URL/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^TIME_ZONE/#&amp;/&#x27; /etc/openstack-dashboard/local_settingscat &gt;&gt;/etc/openstack-dashboard/local_settings &lt;&lt; &quot;EOF&quot;OPENSTACK_HOST = &quot;controller&quot;ALLOWED_HOSTS = [&#x27;*&#x27;]OPENSTACK_KEYSTONE_URL =  &quot;http://controller:5000/v3&quot;SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;CACHES = &#123;&#x27;default&#x27;: &#123;    &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,    &#x27;LOCATION&#x27;: &#x27;controller:11211&#x27;,    &#125;&#125;OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = TrueOPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &quot;Default&quot;OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;member&quot;WEBROOT = &#x27;/dashboard&#x27;TIME_ZONE = &quot;Asia/Shanghai&quot;POLICY_FILES_PATH = &quot;/etc/openstack-dashboard&quot;OPENSTACK_API_VERSIONS = &#123;    &quot;identity&quot;: 3,    &quot;image&quot;: 2,    &quot;volume&quot;: 3,&#125;EOFsystemctl restart httpd memcached
sh horizon-controller.sh
至此，horizon服务的部署已全部完成，打开浏览器，输入http://192.168.48.101/dashboard，打开horizon登录页面。


Swift
Swift 提供了弹性可伸缩、高可用的分布式对象存储服务，适合存储大规模非结构化数据。
controller
操作节点[controller]
cd openstack-installvim swift-controller-1.sh
#!/bin/bash#创建服务凭证以及API端点。# 创建swift用户source /root/admin-openrcopenstack user create --domain default --password SWIFT_PASS swift# 添加admin角色openstack role add --project service --user swift admin# 创建对象存储服务openstack service create --name swift --description &quot;OpenStack Object Storage&quot; object-store#创建API端点。openstack endpoint create --region RegionOne object-store public http://controller:8080/v1/AUTH_%\(project_id\)sopenstack endpoint create --region RegionOne object-store internal http://controller:8080/v1/AUTH_%\(project_id\)sopenstack endpoint create --region RegionOne object-store admin http://controller:8080/v1 #安装Swift。dnf install openstack-swift-proxy python3-swiftclient \python3-keystoneclient python3-keystonemiddleware memcached -y#配置proxy-server。#Swift RPM包里已经包含了一个基本可用的proxy-server.conf，只需要手动修改其中的ip（controller可以不改，看你自己需要）和SWIFT_PASS即可。sed -i &quot;s/password = swift/password = SWIFT_PASS/g&quot; /etc/swift/proxy-server.conf
sh swift-controller-1.sh
Storage
本节点，添加了四块硬盘作为swift使用的硬盘
关闭所有节点，回头看物理关闭顺序
给storage添加4张硬盘，添加完之后就可以开机了

操作节点[Storage]
cd openstack-installvim swift-storage-1.sh
#!/bin/bashdnf install openstack-swift-account openstack-swift-container openstack-swift-object -ydnf install xfsprogs rsync -y #将sdc,sdd,sde,sdf设备格式化为XFS：mkfs.xfs -f /dev/sdcmkfs.xfs -f /dev/sddmkfs.xfs -f /dev/sdemkfs.xfs -f /dev/sdf#创建安装点目录结构：mkdir -p /srv/node/sdcmkdir -p /srv/node/sddmkdir -p /srv/node/sdemkdir -p /srv/node/sdf#写入自动挂载cat &gt;&gt; /etc/fstab &lt;&lt; EOF/dev/sdc /srv/node/sdc xfs noatime 0 2/dev/sdd /srv/node/sdd xfs noatime 0 2/dev/sde /srv/node/sde xfs noatime 0 2/dev/sdf /srv/node/sdf xfs noatime 0 2EOF#挂载设备systemctl daemon-reloadmount -t xfs /dev/sdc /srv/node/sdcmount -t xfs /dev/sdd /srv/node/sddmount -t xfs /dev/sde /srv/node/sdemount -t xfs /dev/sdf /srv/node/sdf#如果用户不需要容灾功能，以上步骤只需要创建一个设备即可，同时可以跳过下面的rsync配置。mv /etc/rsyncd.conf&#123;,.bak&#125;cat&gt;/etc/rsyncd.conf&lt;&lt;EOF[DEFAULT]uid = swiftgid = swiftlog file = /var/log/rsyncd.logpid file = /var/run/rsyncd.pidaddress = 192.168.48.103#192.168.48.103为storage的ip[account]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/account.lock[container]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/container.lock[object]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/object.lockEOFsystemctl enable rsyncd.service --now#编辑/etc/swift目录的account-server.conf、container-server.conf和object-server.conf文件，替换bind_ip为存储节点的IP地址。sudo sed -i &#x27;s/^bind_ip = 127\.0\.0\.1$/bind_ip = 192.168.48.103/&#x27; /etc/swift/account-server.conf /etc/swift/container-server.conf /etc/swift/object-server.conf#确保挂载点目录结构的正确所有权。chown -R swift:swift /srv/node#创建recon目录并确保其拥有正确的所有权。mkdir -p /var/cache/swiftchown -R root:swift /var/cache/swiftchmod -R 775 /var/cache/swift
sh swift-storage-1.sh
controller
操作节点[controller]
cd openstack-installvim swift-controller-2.sh
#!/bin/bash#创建和分发初始环#转到/etc/swift目录。(所以操作在此目录，执行)cd /etc/swift##第一部分（6202）创建用户环swift-ring-builder account.builder create 10 3 1#将每个存储节点添加到环中。swift-ring-builder account.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6202 --device sdc --weight 100swift-ring-builder account.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6202 --device sdd --weight 100swift-ring-builder account.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6202 --device sde --weight 100swift-ring-builder account.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6202 --device sdf --weight 100swift-ring-builder account.builder rebalanceswift-ring-builder account.builder##第二部分（6201）创建容器环swift-ring-builder container.builder create 10 3 1swift-ring-builder container.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6201 --device sdc --weight 100swift-ring-builder container.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6201 --device sdd --weight 100swift-ring-builder container.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6201 --device sde --weight 100swift-ring-builder container.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6201 --device sdf --weight 100swift-ring-builder container.builderswift-ring-builder container.builder rebalance##第三部分（6200）创建对象环swift-ring-builder object.builder create 10 3 1swift-ring-builder object.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6200 --device sdc --weight 100swift-ring-builder object.builder add \   --region 1 --zone 1 --ip 192.168.48.103 \   --port 6200 --device sdd --weight 100swift-ring-builder object.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6200 --device sde --weight 100swift-ring-builder object.builder add \   --region 1 --zone 2 --ip 192.168.48.103 \   --port 6200 --device sdf --weight 100swift-ring-builder object.builderswift-ring-builder object.builder rebalance#将account.ring.gz，container.ring.gz以及 object.ring.gz文件复制到每个存储节点和运行代理服务的任何其他节点上的/etc/swift目录。scp /etc/swift/account.ring.gz \     /etc/swift/container.ring.gz \     /etc/swift/object.ring.gz \     192.168.48.103:/etc/swiftmv  /etc/swift/swift.conf&#123;,.bak&#125;cat&gt; /etc/swift/swift.conf&lt;&lt;EOF[swift-hash]swift_hash_path_suffix = swiftswift_hash_path_prefix = swift[storage-policy:0]name = Policy-0default = yesEOF-------------------------------------------------------------------------------------#将控制节点的swift配置文件复制到存储节点（storage）sshpass -p &#x27;Lj201840.&#x27; scp /etc/swift/swift.conf 192.168.48.103:/etc/swift#swift_hash_path_suffix和swift_hash_path_prefix作为哈希算法的一部分用于确定数据在集群中的位置。#这些值应该保持机密，并且在部署集群之后不能更改丢失。可自定义-------------------------------------------------------------------------------------#在所有节点确保对配置目录拥有适当的所有权：####存储节点与控制节点同时执行（注意！！！！两个节点同时执行）#操作节点[controller，storage]chown -R root:swift /etc/swift yum install ansible -ycat &lt;&lt; EOF &gt;&gt; /etc/ansible/hosts[storage]192.168.48.103 ansible_user=rootEOFansible storage -m command -a &quot;chown -R root:swift /etc/swift&quot; -b --become-user root#在控制器节点和任何其他运行代理服务的节点上，启动对象存储代理服务及其相关性，并将它们配置为在系统启动时启动(存储节点无代理服务)#-------------------------------------------------------------------------------------#重启服务(操作节点[controller]systemctl enable openstack-swift-proxy.service memcached.service --nowsystemctl restart openstack-swift-proxy.service memcached.service
sh swift-controller-2.sh
Storage
cd openstack-installvim swift-storage-2.sh
#!/bin/bash#在存储节点启动所有服务 systemctl enable openstack-swift-account.service openstack-swift-account-auditor.service \  openstack-swift-account-reaper.service openstack-swift-account-replicator.service systemctl start openstack-swift-account.service openstack-swift-account-auditor.service \  openstack-swift-account-reaper.service openstack-swift-account-replicator.service systemctl enable openstack-swift-container.service \  openstack-swift-container-auditor.service openstack-swift-container-replicator.service \  openstack-swift-container-updater.service systemctl start openstack-swift-container.service \  openstack-swift-container-auditor.service openstack-swift-container-replicator.service \  openstack-swift-container-updater.service systemctl enable openstack-swift-object.service openstack-swift-object-auditor.service \  openstack-swift-object-replicator.service openstack-swift-object-updater.service systemctl start openstack-swift-object.service openstack-swift-object-auditor.service \  openstack-swift-object-replicator.service openstack-swift-object-updater.serviceyum install ansible -ycat &lt;&lt; EOF &gt;&gt; /etc/ansible/hosts[controller]192.168.48.101 ansible_user=rootEOFansible controller -m command -a &quot;systemctl restart httpd memcached&quot; -b --become-user rootansible controller -m command -a &quot;systemctl restart openstack-nova*&quot; -b --become-user root
sh swift-storage-2.sh
验证
操作节点[controller]
source /root/admin-openrccd /etc/swiftswift stat[root@controller swift]# swift stat               Account: AUTH_07a1ce96dca54f1bb0d3b968f1343617            Containers: 0               Objects: 0                 Bytes: 0       X-Put-Timestamp: 1684919814.32783           X-Timestamp: 1684919814.32783            X-Trans-Id: txd6f3affa0140455b935ff-00646dd605          Content-Type: text/plain; charset=utf-8X-Openstack-Request-Id: txd6f3affa0140455b935ff-00646dd605#测试上传镜像[root@controller swift]# cd[root@controller ~]# swift upload demo /root/openstack-install/iso/cirros-0.4.0-x86_64-disk.img --object-name imageimage
Heat
Heat是 OpenStack 自动编排服务，基于描述性的模板来编排复合云应用，也称为Orchestration Service。Heat 的各服务一般安装在Controller节点上。
操作节点[controller]
cd openstack-installvim heat-controller.sh
#！/bin/bashecho &quot;CREATE DATABASE heat;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON heat.* TO &#x27;heat&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;HEAT_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSecho &quot;GRANT ALL PRIVILEGES ON heat.* TO &#x27;heat&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;HEAT_DBPASS&#x27;;&quot; | mysql -u root -pMARIADB_PASSmysql -u root -pMARIADB_PASS -e &quot;FLUSH PRIVILEGES;&quot;source /root/admin-openrc#创建heat用户openstack user create --domain default --password HEAT_PASS heat#添加 admin 角色到 heat 用户上openstack role add --project service --user heat admin##创建heat和 heat-cfn 服务实体openstack service create --name heat \  --description &quot;Orchestration&quot; orchestrationopenstack service create --name heat-cfn \  --description &quot;Orchestration&quot;  cloudformation  ##创建 Orchestration 服务的 API 端点openstack endpoint create --region RegionOne \  orchestration public http://controller:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  orchestration internal http://controller:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  orchestration admin http://controller:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  cloudformation public http://controller:8000/v1openstack endpoint create --region RegionOne \  cloudformation internal http://controller:8000/v1openstack endpoint create --region RegionOne \  cloudformation admin http://controller:8000/v1  #创建stack管理的额外信息  #创建 heat domain  #控制节点#为栈创建 heat 包含项目和用户的域openstack domain create --description &quot;Stack projects and users&quot; heat#在 heat 域中创建管理项目和用户的heat_domain_admin用户：openstack user create --domain heat --password=HEAT_DOMAIN_USER_PASS heat_domain_admin#)添加admin角色到 heat 域 中的heat_domain_admin用户，启用heat_domain_admin用户#管理栈的管理权限openstack role add --domain heat --user-domain heat --user heat_domain_admin admin#为栈创建 heat 包含项目和用户的域openstack role create heat_stack_owner#添加heat_stack_owner 角色到demo 项目和用户，启用demo 用户管理栈。openstack role add --project demo --user demo heat_stack_owner#必须添加 heat_stack_owner 角色到每个管理栈的用户。#heat_stack_user 角色openstack role create heat_stack_userdnf install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine -ymv /etc/heat/heat.conf&#123;,.bak&#125;cat &gt; /etc/heat/heat.conf &lt;&lt; EOF[database]connection = mysql+pymysql://heat:HEAT_DBPASS@controller/heat  #HEAT_DBPASS是HEAT数据库密码[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controllerheat_metadata_server_url = http://controller:8000heat_waitcondition_server_url = http://controller:8000/v1/waitconditionstack_domain_admin = heat_domain_adminstack_domain_admin_password = HEAT_DOMAIN_PASSstack_user_domain_name = heat#RABBIT_PASS为Rabbitmq服务密码 用户名是openstack[keystone_authtoken]www_authenticate_uri = http://controller:5000auth_url = http://controller:5000memcached_servers = controller:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = heatpassword = HEAT_PASS#HEAT_PASS是heat用户密码[trustee]auth_type = passwordauth_url = http://controller:5000username = heatpassword = HEAT_PASS#HEAT_PASS是heat用户密码user_domain_name = default[clients_keystone]auth_uri = http://controller:5000EOFsu -s /bin/sh -c &quot;heat-manage db_sync&quot; heat##启动 Orchestration 编排服务heat组件并将其设置为随系统启动systemctl enable openstack-heat-api.service \  openstack-heat-api-cfn.service openstack-heat-engine.service --nowsystemctl restart openstack-heat-api.service \  openstack-heat-api-cfn.service openstack-heat-engine.servicesystemctl restart httpd memcached
sh heat-controller.sh
验证
source /root/admin-openrcsystemctl list-unit-files |grep openstack-heat*openstack service listopenstack orchestration service list#该输出显示表明在控制节点上有应该四个heat-engine组件。该输出显示表明在控制节点上有应该四个heat-engine组件。

创建实例
创建实例类型
左侧选择管理员，点击计算，点击实例类型，右侧点击创建实例类型。

根据以上图片步骤依次填入：实例名称、VCPU数量、内存大小、根磁盘大小，确认无误后点击创建实例类型。
创建镜像
测试镜像：https://download.cirros-cloud.net/0.6.2/cirros-0.6.2-x86_64-disk.img
有两种上传方式（二选一）！！！
1.Windows上传镜像方式
左侧选择管理员，点击计算，点击镜像，右侧点击创建镜像。
Windows下载到本地即可

根据以上图片步骤依次填入：镜像名称、选择文件、镜像格式，确认无误后点击创建镜像。
注：演示上传的 img 镜像格式需选用 QCOW2 - QEMU模拟器 才可正常加载。
2.Linux上传镜像方式
source admin-openrcwget https://download.cirros-cloud.net/0.6.2/cirros-0.6.2-x86_64-disk.img#可能会下载不到，可以复制链接到浏览器下载，然后移到/root/目录下glance image-create --name &quot;cirros&quot; \  --file cirros-0.6.2-x86_64-disk.img \  --disk-format qcow2 --container-format bare \  --visibility=publicopenstack image list[root@controller-1 ~]# openstack image list+--------------------------------------+--------+--------+| ID                                   | Name   | Status |+--------------------------------------+--------+--------+| 627761da-7f8c-4780-842a-e50e62f5c464 | cirros | active |+--------------------------------------+--------+--------+
创建内部网络
左侧选择管理员，点击网络，点击网络，右侧点击创建网络。



创建外部网络
左侧选择管理员，点击网络，点击网络，右侧点击创建网络。
如果你是按照本文档搭建的，就填provider



创建路由
左侧选择管理员，点击网络，点击路由，右侧点击创建路由。



添加安全组规则


最后效果长这样

创建实例




然后点击创建实例
分配浮动ip


结论：创建实例成功

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-总手册</title>
    <url>/posts/28626/</url>
    <content><![CDATA[
Python-总手册

Python环境准备
Python程序手册

Python环境准备
Thonny（首推，自用！！）
Thonny 由爱沙尼亚的 Tartu 大学开发，它采用了不同的方法，因为它的调试器是专为学习和教学编程而设计的。
该软件基于python内置图形库tkinter开发，体积小巧，界面直观，支持语法着色、代码自动补全、debug等强劲功能，并具备了一个友好的IDE，为您提供了几个有用的学习工具，所有这些都打包成一个直观的GUI，能够让你更快的熟悉Python编程语言。同时，thonny内置了Python3.7，因此只需要一个简单的安装程序，您就可以学习编程了，可谓称的上是最好的自助服务教学工具。
官网地址：Thonny，Python IDE初学者
进入官网下载


双击运行


接受安装协议，安装
请选择一个不带中文的路径存放他
这里的c盘仅做测试

创建桌面图标

选择中文

安装成功

Centos7部署Python
在 CentOS 7.9 上安装 Python，你可以使用 yum 包管理器和 EPEL 存储库来完成。以下是安装的步骤：

首先，确保你的系统已经安装了 EPEL 存储库。EPEL 是一个额外的软件源，提供了许多额外的软件包。如果你的系统尚未安装 EPEL 存储库，可以使用以下命令安装它：

sudo yum update -ysudo yum install epel-release
自选版本

安装 Python 3：CentOS 7 默认使用 Python 2.7，但是你可以安装 Python 3。使用以下命令安装 Python 3：

sudo yum install python3

安装 Python 2：如果你还需要安装 Python 2，可以使用以下命令安装：

sudo yum install python2

验证安装：安装完成后，你可以使用以下命令验证 Python 的安装：

python3 --versionpython2 --version
这些命令将显示安装的 Python 版本号，确认安装成功。
使用python
python
Pycham
安装教程：PyCharm2024.1安装教程 - 严千屹博客 (qianyios.top)
官网地址PyCharm：JetBrains为专业开发者提供的Python IDE
Python程序手册
Python程序基础
初识Python程序
新建一个hello.py
→
打开输入代码→运行

#格式print(输出项1,输出项2,······)
每个输出项可以是数值，字符串等
Python程序风格
一个程序往往有输入输出语句，还带有逻辑判断，现在介绍一个程序
例2.1 输入一个数，计算平方根
import maths=input(&quot;请输入一个数：&quot;)s=float(s)if s&gt;=0:    s=math.sqrt(s)    print(&quot;平方根是：&quot;,s)else:    print(&quot;负数不是平方根&quot;)print(&quot;The End&quot;)
在这可以很清晰看到python程序的风格，不会像c语言，需要先声明变量类型，才可以使用
如：
c语言：(可以看见没行语句，需要一个分号)
int sprintf(&quot;请输入一个数:&quot;);scanf(&quot;%d&quot;,&amp;s);

在这显得python更加简单快捷


开始分解

输入语句

s=input(&quot;请输入一个数：&quot;)
此时输入4之后，会存入到s，但是此时的s是个字符串，还不是数值，不能进行计算，需要转换类型

转化类型

s=float(s)
在这，需要将s（字符串）转化为实数，才可以计算

缩进

要注意缩进量，否则代码会串行

如：
错误代码：

正确显示结果：

通过之前修改代码变成else的语句之后，就没显示了，

必须输入负数之后才显示出来

所以要注意缩进量
Python注释
在 Python 中，注释用于在代码中添加解释、说明或提供文档。Python 支持两种类型的注释：单行注释和多行注释。

单行注释：以 # 开头，用于在一行中添加注释。

# 这是一个单行注释

多行注释：用三个单引号 ''' 或三个双引号 &quot;&quot;&quot; 包围的多行文本，用于添加多行注释。

&#x27;&#x27;&#x27;这是一个多行注释。可以在这里添加多行的说明。&#x27;&#x27;&#x27;
或者
&quot;&quot;&quot;这是一个多行注释。可以在这里添加多行的说明。&quot;&quot;&quot;
注释是非常有用的工具，可以提高代码的可读性和可维护性。它们可以用于解释代码的目的、算法、参数、返回值等信息，使其他人更容易理解和使用你的代码。
请注意，注释不会被 Python 解释器执行，它们只是用于代码的解释和文档目的。在运行程序时，注释部分会被忽略。
Python数据类型
数据类型
常量：
Python 中有许多内置的数据类型，用于存储和操作不同类型的数据。下面是 Python 的一些常见数据类型：

整数（int）：用于表示整数值，例如 42、-10、0 等。
浮点数（float）：用于表示带有小数部分的数值，例如 3.14、-0.5 等。
字符串（str）：用于表示文本数据，由一系列字符组成，例如 &quot;Hello, World!&quot;、'Python' 等。
列表（list）：用于存储多个有序的元素，可以包含不同类型的数据，例如 [1, 2, 3]、['apple', 'banana', 'cherry'] 等。

变量：

变量命名规则：


变量名由字母、数字和下划线组成。
变量名必须以字母或下划线开头，不能以数字开头。
变量名区分大小写，例如 count 和 Count 是不同的变量名。
避免使用 Python 的关键字（如 if、for、while 等）作为变量名。
建议使用有意义的变量名，以提高代码的可读性。


变量赋值：


使用赋值运算符 = 将一个值赋给一个变量。
变量在首次赋值时被创建，并根据赋值的值确定其数据类型。
可以将不同类型的数据赋给同一个变量，变量的类型会随着赋值而改变。

x = 42  # 整数y = 3.14  # 浮点数name = &quot;Alice&quot;  # 字符串

变量使用：


可以使用变量名来访问存储在变量中的值。
可以在表达式中使用变量，并对其进行操作。
变量的值可以随时改变，可以重新赋值给同一个变量。

x = 10y = x + 5print(y)  # 输出：15x = 20print(x)  # 输出：20
变量在 Python 中是一种非常重要的概念，它们允许我们存储和操作数据。通过合理使用变量，可以使代码更灵活、可读性更好，并且可以减少重复代码。
数据类型的转换
1.数值转换字符串
a=1b=1.2x=str(a)y=str(b)#此时，要是输出，他们在系统中是带引号的字符串#  &quot;1&quot;,&quot;1.2&quot;
2.字符串转换数值
a=&quot;1&quot;b=&quot;1.2&quot;x=int(a)y=float(b)  #实数（带小数）#此时，要是输出，他们在系统中是数值#  1,1.2
错误形态：
s=&quot;1a&quot;a=int(s)
在这种情况下，字符串 &quot;1a&quot; 包含了字母 &quot;a&quot;，因此无法将其转换为整数。如果你想要将一个合法的整数字符串转换为整数，确保字符串只包含数字字符。
整数格式化输出

使用 format() 方法格式化输出整数的示例：

x = 10y = 20print(&quot;x: &#123;&#125;, y: &#123;&#125;&quot;.format(x, y))
输出结果为：
x: 10, y: 20
在这个示例中，我们使用了 &quot;x: &#123;&#125;, y: &#123;&#125;&quot; 这个字符串作为格式化模板。在模板中的 &#123;&#125; 部分会被 format() 方法中的参数依次替换。

使用 f-string。下面是使用 f-string 格式化输出整数的示例：

x = 10y = 20print(f&quot;x: &#123;x&#125;, y: &#123;y&#125;&quot;)
输出结果也是：
x: 10, y: 20
在这个示例中，我们在字符串前面加上了 f，然后在字符串中使用花括号 &#123;&#125; 来引用变量。


使用使用 % 符号进行格式化输出整数的示例：

x = 10y = 20print(&quot;x: %d, y: %d&quot; % (x, y))
输出结果为：
x: 10, y: 20
在这个示例中，我们使用了 &quot;x: %d, y: %d&quot; 这个字符串作为格式化模板。%d 是整数的占位符。然后，我们将要格式化的整数值 (x, y) 作为元组传递给 % 运算符。
例：1.4.3.1输出年月日

浮点数格式化输出
使用 % 符号配合格式化字符串来实现。下面是一个示例代码：
num = 3.14159print(&quot;浮点数：%.2f&quot; % num)
在这个示例中，%.2f 是浮点数的格式化字符串。% 符号后的 .2f 表示将浮点数保留两位小数进行输出。如果要保留更多或更少的小数位数，只需相应地调整数字即可。
输出结果为：
浮点数：3.14
这样就实现了将浮点数格式化输出并保留指定小数位数。
Python表达式



类别
运算符
描述
实例




算术运算符
+
加法
2 + 3 = 5



-
减法
5 - 2 = 3



*
乘法
2 * 3 = 6



/
除法
6 / 2 = 3



%
取模（取余数）
7 % 3 = 1



**
幂运算
2 ** 3 = 8



//
整除（取商的整数部分）
7 // 3 = 2


赋值运算符
=
赋值
x = 5



+=
加法赋值
x += 3 （等价于 x = x + 3）



-=
减法赋值
x -= 2 （等价于 x = x - 2）



*=
乘法赋值
x *= 2 （等价于 x = x * 2）



/=
除法赋值
x /= 4 （等价于 x = x / 4）



%=
取模赋值
x %= 3 （等价于 x = x % 3）


比较运算符
==
等于
3 == 3 （返回 True）



!=
不等于
2 != 3 （返回 True）



&gt;
大于
5 &gt; 2 （返回 True）



&lt;
小于
2 &lt; 5 （返回 True）



&gt;=
大于等于
5 &gt;= 5 （返回 True）



&lt;=
小于等于
2 &lt;= 5 （返回 True）


逻辑运算符
and
与
True and False （返回 False）两者为真才为真



or
或
True or False （返回 True）一个为真就为真



not
非
not True （返回 False）


成员运算符
in
存在于
2 in [1, 2, 3] （返回 True）



not in
不存在于
4 not in [1, 2, 3] （返回 True）


身份运算符
is
是
x is None （返回 True，如果 x 为 None）



is not
不是
x is not None （返回 True，如果 x 不为 None）




 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack-Train双节点部署</title>
    <url>/posts/56647/</url>
    <content><![CDATA[
OpenStack-Train双节点部署
节点架构图（最小配置）



主机名
ip1（NAT）
ip2（仅主机）
硬盘
内存




controller-48
192.168.48.10
192.168.148.10
100G
8G


computer-48
192.168.48.20
192.168.148.20
100G
3G



双节点均采用CentOS-7-x86_64-DVD-2009.iso英文最小化安装，安装过程不做解释
Computer-48需要特别注意加硬盘
computer-48需要勾选处理器虚拟化

网络设置
控制节点网络设置
ens33

ens36

计算节点
原理和控制节点一样，第二张网卡不用设置网关
ens33

ens36

温馨提示（小贴士）

这里就说一下为什么第二张仅主机网卡不用设置网关，因为我们本意是通过NAT进行与外网做数据交换和获取外网资源可以连接互联网的，仅主机仅仅只是用于进行虚拟机内部资源的数据交换，不具备与外网连接的作用，是无法访问互联网的，如果两张网卡同时设置了网关，可能会造成无法访问openstack里创建的虚拟机无法访问互联网，或者本机无法访问互联网的情况，原因是默认路由可能会以仅主机网卡的网络进行与外网链接，但是没办法联网。所以请不要在第二块网卡设置网关

版本对照表



OpenStack 版本
CentOS 版本




Train 以及更早
7


Ussuri and Victoria
8


Wallaby 到 Yoga
Stream 8



安全性
基本用户信息
OpenStack 各组件都需要在控制节点数据库中注册专属账户以存放数据信息，故需要设置密码，强烈建议各组件的密码以及宿主机密码各不相同。



OpenStack 组件
密码




控制节点 root
123456


计算节点 root
123456


Metadata 元数据密钥
METADATA_SECRET


Mariadb root 账户
MARIADB_PASS


RabbitMQ 服务
RABBIT_PASS


OpenStack admin
ADMIN_PASS


Placement 服务
PLACEMENT_PASS


Keystone 数据库
KEYSTONE_DBPASS


Glance 服务
GLANCE_PASS


Glance 数据库
GLANCE_DBPASS


Nova 服务
NOVA_PASS


Nova 数据库
NOVA_DBPASS


Neutron 服务
NEUTRON_PASS


Neutron 数据库
NEUTRON_DBPASS


Cinder 服务
CINDER_PASS


Cinder 数据库
CINDER_DBPASS


Horizon 数据库
DASH_DBPASS


Swift服务
SWIFT_PASS


Heat服务
HEAT_PASS


Heat数据库服务
HEAT_DBPASS


heat_domain_admin用户
HEAT_DOMAIN_USER_PASS



身份验证
控制节点管理 OpenStack 服务时需要进行身份认证，可将认证信息导入到控制节点环境变量中，方便后续安装配置使用。
admin-openrc.sh 文件需提前编写并放入控制节点中，后续安装将不再说明由来
cat &gt;&gt; admin-openrc.sh &lt;&lt; EOFexport OS_PROJECT_DOMAIN_NAME=Defaultexport OS_USER_DOMAIN_NAME=Defaultexport OS_PROJECT_NAME=adminexport OS_USERNAME=adminexport OS_PASSWORD=123456export OS_AUTH_URL=http://controller-48:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOFcat &gt;&gt; user_dog-openrc.sh &lt;&lt; EOFexport OS_USERNAME=user_dogexport OS_PASSWORD=123456export OS_PROJECT_NAME=Trainexport OS_USER_DOMAIN_NAME=RegionOneexport OS_PROJECT_DOMAIN_NAME=RegionOneexport OS_AUTH_URL=http://controller-48:5000/v3export OS_IDENTITY_API_VERSION=3export OS_IMAGE_API_VERSION=2EOF# OS_USERNAME  登录 OpenStack 服务的用户名# OS_PASSWORD  登录 OpenStack 服务的用户密码# OS_PROJECT_NAME 登录时进入的项目名# OS_USER_DOMAIN_NAME  登录时进入的域名# OS_PROJECT_DOMAIN_NAME  登录时进入的项目域名# OS_AUTH_URL 指定 Keystone（身份认证服务）的 URL  # 如未部署 DNS 服务器，则需要在 hosts中指定 controller-48 映射，或将 controller-48 用控制节点 IP 替代# OS_IDENTITY_API_VERSION 身份认证服务的 API 版本号 # OS_IMAGE_API_VERSION 镜像服务的 API 版本号
测试用户



用户
密码




admin
123456


use_dog
123456



物理节点关闭顺序
给每台机都加上两个脚本
cat &gt;&gt; stop.sh &lt;&lt; EOF#!/bin/bash# 关闭所有 OpenStack 节点# 依次关闭计算节点、网络节点、控制节点for server in \$(openstack server list -f value -c ID); do    openstack server stop \$serverdone# 关闭计算节点echo &quot;Stopping compute services...&quot;systemctl stop openstack-nova-compute.servicesystemctl stop libvirtd.service# 关闭网络节点echo &quot;Stopping network services...&quot;systemctl stop openvswitch.servicesystemctl stop neutron-server.servicesystemctl stop neutron-linuxbridge-agent.servicesystemctl stop neutron-dhcp-agent.servicesystemctl stop neutron-metadata-agent.servicesystemctl stop neutron-l3-agent.service# 关闭控制节点echo &quot;Stopping control services...&quot;systemctl stop mariadb.servicesystemctl stop rabbitmq-server.servicesystemctl stop memcached.servicesystemctl stop httpd.servicesystemctl stop openstack-glance-api.servicesystemctl stop openstack-glance-registry.servicesystemctl stop openstack-cinder-api.servicesystemctl stop openstack-cinder-scheduler.servicesystemctl stop openstack-cinder-volume.servicesystemctl stop openstack-nova-api.servicesystemctl stop openstack-nova-scheduler.servicesystemctl stop openstack-nova-conductor.servicesystemctl stop openstack-nova-novncproxy.servicesystemctl stop openstack-nova-consoleauth.servicesystemctl stop openstack-keystone.servicesystemctl stop openstack-heat-api.servicesystemctl stop openstack-heat-api-cfn.servicesystemctl stop openstack-heat-engine.servicesystemctl stop openstack-swift-proxy.servicesystemctl stop openstack-swift-account.servicesystemctl stop openstack-swift-container.servicesystemctl stop openstack-swift-object.serviceecho &quot;Stopping all services...&quot;systemctl stop --all# 关闭电源echo &quot;Shutting down the system...&quot;poweroffEOFcat &gt;&gt; start.sh &lt;&lt; EOF#!/bin/bash# 重新启动 OpenStack 服务# 依次启动控制节点、网络节点、计算节点# 启动控制节点echo &quot;Starting control services...&quot;systemctl start mariadb.servicesystemctl start rabbitmq-server.servicesystemctl start memcached.servicesystemctl start httpd.servicesystemctl start openstack-glance-api.servicesystemctl start openstack-glance-registry.servicesystemctl start openstack-cinder-api.servicesystemctl start openstack-cinder-scheduler.servicesystemctl start openstack-cinder-volume.servicesystemctl start openstack-nova-api.servicesystemctl start openstack-nova-scheduler.servicesystemctl start openstack-nova-conductor.servicesystemctl start openstack-nova-novncproxy.servicesystemctl start openstack-nova-consoleauth.servicesystemctl start openstack-keystone.servicesystemctl start openstack-heat-api.servicesystemctl start openstack-heat-api-cfn.servicesystemctl start openstack-heat-engine.servicesystemctl start openstack-swift-proxy.servicesystemctl start openstack-swift-account.servicesystemctl start openstack-swift-container.servicesystemctl start openstack-swift-object.service# 启动网络节点echo &quot;Starting network services...&quot;systemctl start openvswitch.servicesystemctl start neutron-server.servicesystemctl start neutron-linuxbridge-agent.servicesystemctl start neutron-dhcp-agent.servicesystemctl start neutron-metadata-agent.servicesystemctl start neutron-l3-agent.service# 启动计算节点echo &quot;Starting compute services...&quot;systemctl start libvirtd.servicesystemctl start openstack-nova-compute.serviceEOF
（先给两个计算节点执行-最后等计算节点完全关闭，再给控制节点执行）
关闭物理机的时候运行sh stop.sh(运行的时候可能会提示你有些服务找不到，报错，这个没关系，一般情况下是没问题的
物理节点开启顺序

先给controller-48运行start.sh再给计算节点运行start.sh
sh start.sh

基础环境
修改主机名和防火墙
controller-48节点
hostnamectl set-hostname controller-48 &amp;&amp; bashsystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinuxsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configecho &quot;192.168.48.10 controller-48&quot; &gt;&gt; /etc/hostsecho &quot;192.168.48.20 computer-48&quot; &gt;&gt; /etc/hostssetenforce 0reboot
computer-48节点
hostnamectl set-hostname computer-48 &amp;&amp; bashsystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinuxsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configecho &quot;192.168.48.10 controller-48&quot; &gt;&gt; /etc/hostsecho &quot;192.168.48.20 computer-48&quot; &gt;&gt; /etc/hostssetenforce 0reboot
修改yum
controller-48和computer-48节点
rm -rf /etc/yum.repos.d/*curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repocurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repocat &gt;&gt;/etc/yum.repos.d/openstack.repo&lt;&lt;EOF[openstack]name=openstackbaseurl=https://mirrors.aliyun.com/centos/7/cloud/x86_64/openstack-train/gpgcheck=0 enabled=1EOFyum clean all &amp;&amp; yum makecacheyum update -y
SSH免密
#各节点yum install -y sshpass cat &gt; sshmianmi.sh &lt;&lt; &quot;EOF&quot;#!/bin/bash# 目标主机列表hosts=(&quot;controller-48&quot; &quot;computer-48&quot;)# 密码（注意修改）password=&quot;123456&quot;# 生成 SSH 密钥对ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    # 复制公钥到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -o StrictHostKeyChecking=no &quot;$host&quot;        # 验证免密登录    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot;doneEOFsh sshmianmi.sh
安装OpenStack包
#各节点yum -y install openstack-utils openstack-selinux python-openstackclientyum upgrade
依赖组件
四个组件安装在controller-48节点上
Mariadb数据库
yum install mariadb mariadb-server python2-PyMySQL -ycat &gt;&gt;/etc/my.cnf.d/openstack.cnf&lt;&lt;EOF[mysqld]bind-address =192.168.48.10default-storage-engine = innodbinnodb_file_per_table = onmax_connections =4096collation-server = utf8_general_cicharacter-set-server = utf8EOFsystemctl enable mariadb --nowmysql_secure_installationEnter current password for root (enter for none): 回车Set root password? [Y/n] y# 将要求输入数据库 root 账户密码 MARIADB_PASSRemove anonymous users? [Y/n] yDisallow root login remotely? [Y/n] nRemove test database and access to it? [Y/n] yReload privilege tables now? [Y/n] y# 验证mysql -u root -pMARIADB_PASS
Rabbitmq
yum install rabbitmq-server -ysystemctl enable rabbitmq-server --nowrabbitmqctl add_user openstack RABBIT_PASS# 注意将 RABBIT_PASS  修改为 Rabbitmq消息队列密码rabbitmqctl set_permissions openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;
Memcached
yum install memcached python-memcached -ysed -i &quot;s/OPTIONS=\&quot;-l 127.0.0.1,::1\&quot;/OPTIONS=\&quot;-l 127.0.0.1,::1,controller-48\&quot;/g&quot; /etc/sysconfig/memcachedsystemctl enable memcached --now
注意这里的-l 127.0.0.1,::1,controller-48中controller-48是你的主机名，后续不做解释
etcd
yum install -y etcdmv /etc/etcd/etcd.conf&#123;,.bak&#125; cat &gt;&gt; /etc/etcd/etcd.conf &lt;&lt; EOF#[Member]ETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;http://192.168.48.10:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;http://192.168.48.10:2379&quot;ETCD_NAME=&quot;controller-48&quot;#controller-48是你的主机名#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://192.168.48.10:2380&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;http://192.168.48.10:2379&quot;ETCD_INITIAL_CLUSTER=&quot;controller-48=http://192.168.48.10:2380&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster-01&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;EOFsystemctl enable etcd --now
Keystone(身份验证服务)
#controller-48节点mysql -u root -pMARIADB_PASSCREATE DATABASE keystone;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;flush privileges;exit# KEYSTONE_DBPASS  为 Keystone 数据库密码yum -y install yum-utilsyum -y install qpid-proton-c-0.26.0-2.el7.x86_64yum install -y openstack-keystone httpd mod_wsgi mv /etc/keystone/keystone.conf&#123;,.bak&#125;cat&gt;&gt; /etc/keystone/keystone.conf &lt;&lt; EOF[database]connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller-48/keystone[token]provider = fernetEOF#同步服务器su -s /bin/sh -c &quot;keystone-manage db_sync&quot; keystone#查看是否成功mysql -u keystone -p&quot;KEYSTONE_DBPASS&quot;use keystone;show tables;exit#有表就行#配置keystone-manage fernet_setup --keystone-user keystone --keystone-group keystonekeystone-manage credential_setup --keystone-user keystone --keystone-group keystonekeystone-manage bootstrap --bootstrap-password 123456 \  --bootstrap-admin-url http://controller-48:5000/v3/ \  --bootstrap-internal-url http://controller-48:5000/v3/ \  --bootstrap-public-url http://controller-48:5000/v3/ \  --bootstrap-region-id RegionOne# 123456 为 admin 账户密码cp /etc/httpd/conf/httpd.conf&#123;,.bak&#125;sed -i &quot;s/#ServerName www.example.com:80/ServerName controller-48/g&quot; /etc/httpd/conf/httpd.confln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/systemctl enable httpd  --now#创建域、项目、用户、角色source admin-openrc.sh# service 项目 创建在 default 用于 OpenStack 服务openstack project create --domain default \  --description &quot;Service Project&quot; service# 创建一个 RegionOne 域名作为后续云实例创建域名openstack domain create --description &quot;RegionOne Domain&quot; RegionOne# 在 RegionOne 域中创建一个 Train 项目openstack project create --domain RegionOne \  --description &quot;Train Project&quot; Train# 在 RegionOne 域中创建普通用户 user_dog openstack user create --domain RegionOne \  --password 123456 user_dog# 创建普通用户 user_dog  的规则 user_dog_roleopenstack role create user_dog_role# 将规则与用户绑定openstack role add --project Train --user user_dog user_dog_role# 注：可以重复上边步骤以创建更多项目、用户及规则# 验证服务可用性# 卸载 admin 用户的环境unset OS_AUTH_URL OS_PASSWORD# 验证 admin 用户可用性openstack --os-auth-url http://controller-48:5000/v3 \  --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-username admin token issue# 输入后将要求输入 管理员 admin 的密码# 返回  token 信息则服务正常# 验证 user_dog 用户可用性openstack --os-auth-url http://controller-48:5000/v3 \  --os-project-domain-name RegionOne --os-user-domain-name RegionOne --os-project-name Train --os-username user_dog token issuesource admin-openrc.sh# 列举当前所有域名openstack domain list+----------------------------------+-----------+---------+--------------------+| ID                               | Name      | Enabled | Description        |+----------------------------------+-----------+---------+--------------------+| 7fcb64a8c47f40a48265a9db94f0c963 | RegionOne | True    | RegionOne Domain   || default                          | Default   | True    | The default domain |+----------------------------------+-----------+---------+--------------------+
Glance(镜像服务)
#控制节点mysql -u root -pMARIADB_PASSCREATE DATABASE glance;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;GRANT ALL PRIVILEGES ON glance.* TO &#x27;glance&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;GLANCE_DBPASS&#x27;;flush privileges;exit#将 GLANCE_DBPASS 替换为 glance数据库服务的密码source admin-openrc.sh#创建用户服务和api端点openstack user create --domain default --password GLANCE_PASS glance#GLANCE_PASS 为 glance 服务的密码# 为 Glance 用户添加 admin 规则到系统项目 serviceopenstack role add --project service --user glance admin# 没有输出内容# 为 Glance 添加管理镜像的服务openstack service create --name glance \  --description &quot;OpenStack Image&quot; image# 为 RegionOne 域名添加服务接口openstack endpoint create --region RegionOne \  image public http://controller-48:9292openstack endpoint create --region RegionOne \  image internal http://controller-48:9292openstack endpoint create --region RegionOne \  image admin http://controller-48:9292#安装glance服务yum install openstack-glance -ymv /etc/glance/glance-api.conf&#123;,.bak&#125;cat &gt;&gt;/etc/glance/glance-api.conf &lt;&lt; EOF[DEFAULT]use_keystone_quotas = Truelog_file = /var/log/glance/glance.log[database]connection = mysql+pymysql://glance:GLANCE_DBPASS@controller-48/glance# GLANCE_DBPASS 为 Glance 服务的数据库账户密码[keystone_authtoken]www_authenticate_uri  = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = glancepassword = GLANCE_PASSservice_token_roles_required = true# GLANCE_PASS 为 Glance 服务的数据库账户密码[paste_deploy]flavor = keystone[glance_store]stores = file,httpdefault_store = filedefault_backend = &#123;&#x27;store_one&#x27;: &#x27;http&#x27;, &#x27;store_two&#x27;: &#x27;file&#x27;&#125;filesystem_store_datadir = /var/lib/glance/images/EOF# 同步 Glance 数据到数据库su -s /bin/sh -c &quot;glance-manage db_sync&quot; glancesystemctl enable openstack-glance-api  --now# 验证服务可用性source admin-openrc.shwget https://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img#可能会拉取失败，可以自行复制网址，去浏览器下载，然后上传到/root/目录下glance image-create --name &quot;cirros&quot; \  --file cirros-0.3.3-x86_64-disk.img \  --disk-format qcow2 --container-format bare \  --visibility=publicopenstack image list# +--------------------------------------+--------+--------+# | ID                                   | Name   | Status |# +--------------------------------------+--------+--------+# | 4e022193-03c2-40c4-872f-0adb606f31e4 | cirros | active |# +--------------------------------------+--------+--------+
Placement（资源调度）
mysql -u root -pMARIADB_PASSCREATE DATABASE placement;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;localhost&#x27;  IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;GRANT ALL PRIVILEGES ON placement.* TO &#x27;placement&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;PLACEMENT_DBPASS&#x27;;flush privileges;exit#PLACEMENT_DBPASS 为 placement 服务的密码source admin-openrc.shopenstack user create --domain default --password PLACEMENT_PASS placementopenstack role add --project service --user placement adminopenstack service create --name placement \  --description &quot;Placement API&quot; placementopenstack endpoint create --region RegionOne \  placement public http://controller-48:8778openstack endpoint create --region RegionOne \  placement internal http://controller-48:8778openstack endpoint create --region RegionOne \  placement admin http://controller-48:8778yum install openstack-placement-api -ymv /etc/placement/placement.conf&#123;,.bak&#125;cat &gt;&gt; /etc/placement/placement.conf &lt;&lt; EOF[placement_database]connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller-48/placement# PLACEMENT_DBPASS 为 placement 服务的数据库账户密码[api]auth_strategy = keystone[keystone_authtoken]auth_url = http://controller-48:5000/v3memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = placementpassword = PLACEMENT_PASS# PLACEMENT_PASS 为 placement 服务的密码EOF#同步数据库su -s /bin/sh -c &quot;placement-manage db sync&quot; placementcp /etc/httpd/conf.d/00-placement-api.conf&#123;,.bak&#125;cat &gt;&gt; /etc/httpd/conf.d/00-placement-api.conf &lt;&lt; EOF#在#SSLCertificateKeyFile ...下添加&lt;Directory /usr/bin&gt;&lt;IfVersion &gt;= 2.4&gt;	Require all granted&lt;/IfVersion&gt;&lt;IfVersion &lt; 2.4&gt;	Order allow,deny		Allow from all&lt;/IfVersion&gt;&lt;/Directory&gt;EOFsystemctl restart httpd# 验证服务source admin-openrc.shplacement-status upgrade check#安装pip osc组件验证资源yum install python-pip -ypip install osc-placement==2.2.0systemctl restart httpd# 验证openstack --os-placement-api-version 1.2 resource class list --sort-column name# +----------------------------------------+# | name                                   |# +----------------------------------------+# | DISK_GB                                |......openstack --os-placement-api-version 1.6 trait list --sort-column name# +---------------------------------------+# | name                                  |# +---------------------------------------+# | computer-48_ACCELERATORS                  |# | computer-48_ARCH_AARCH64                  |# ...
Nova(计算服务)
控制节点
#控制节点controller-48mysql -u root -pMARIADB_PASSCREATE DATABASE nova_api;CREATE DATABASE nova;CREATE DATABASE nova_cell0;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;GRANT ALL PRIVILEGES ON nova_api.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;GRANT ALL PRIVILEGES ON nova.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;GRANT ALL PRIVILEGES ON nova_cell0.* TO &#x27;nova&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;NOVA_DBPASS&#x27;;flush privileges;exit# NOVA_DBPASS 为 nova 服务的密码source admin-openrc.shopenstack user create --domain default --password NOVA_PASS novaopenstack role add --project service --user nova adminopenstack service create --name nova \  --description &quot;OpenStack Compute&quot; computeopenstack endpoint create --region RegionOne \  compute public http://controller-48:8774/v2.1openstack endpoint create --region RegionOne \  compute internal http://controller-48:8774/v2.1openstack endpoint create --region RegionOne \  compute admin http://controller-48:8774/v2.1mv /etc/yum.repos.d/epel.repo&#123;,.bak&#125; yum install -y \    openstack-nova-api \    openstack-nova-scheduler \    openstack-nova-conductor \    openstack-nova-novncproxymv /etc/yum.repos.d/epel.repo&#123;.bak,&#125; mv /etc/nova/nova.conf&#123;,.bak&#125;cat &gt;&gt; /etc/nova/nova.conf &lt;&lt;EOF[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:RABBIT_PASS@controller-48:5672/# RABBIT_PASS为 rabbitmq 密码my_ip = 192.168.48.10# 控制节点控制网络的 IPlog_file = /var/log/nova/nova-controller.logrootwrap_config = /etc/nova/rootwrap.conf[api_database]connection = mysql+pymysql://nova:NOVA_DBPASS@controller-48/nova_api# NOVA_DBPASS 为数据库 Nova 账户密码[database]connection = mysql+pymysql://nova:NOVA_DBPASS@controller-48/nova# NOVA_DBPASS 为数据库 Nova 账户密码[api]auth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller-48:5000/auth_url = http://controller-48:5000/memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword =NOVA_PASS# NOVA_PASS 为 Nova 服务的密码[vnc]enabled = trueserver_listen = \$my_ipserver_proxyclient_address = \$my_ip[glance]api_servers = http://controller-48:9292[oslo_concurrency]lock_path = /var/run/nova[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller-48:5000/v3username = placementpassword = PLACEMENT_PASS# PLACEMENT_PASS 为 placement 服务的密码EOFsu -s /bin/sh -c &quot;nova-manage api_db sync&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; novasu -s /bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; novasu -s /bin/sh -c &quot;nova-manage db sync&quot; nova# 验证su -s /bin/sh -c &quot;nova-manage cell_v2 list_cells&quot; novasystemctl enable --now \    openstack-nova-api.service \    openstack-nova-scheduler.service \    openstack-nova-conductor.service \    openstack-nova-novncproxy.service    systemctl status \    openstack-nova-api.service \    openstack-nova-scheduler.service \    openstack-nova-conductor.service \    openstack-nova-novncproxy.service    
计算节点
##computer-48计算节点cat &gt;&gt;/etc/yum.repos.d/CentOS-Base.repo&lt;&lt;EOF[Virt]name=CentOS-\$releasever - Basebaseurl=http://mirrors.aliyun.com/centos/7.9.2009/virt/x86_64/kvm-common/gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7EOFyum install qpid-proton-c-0.26.0-2.el7.x86_64 -yyum install openstack-nova-compute -ymv /etc/nova/nova.conf&#123;,.bak&#125;cat &gt;&gt; /etc/nova/nova.conf &lt;&lt;EOF[DEFAULT]enabled_apis = osapi_compute,metadatatransport_url = rabbit://openstack:RABBIT_PASS@controller-48my_ip = 192.168.48.20compute_driver=libvirt.LibvirtDriverlog_file = /var/log/nova/nova-compute.log# 192.168.48.20替换为 计算节点管理网络 IP 地址[api]auth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller-48:5000/auth_url = http://controller-48:5000/memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = Defaultuser_domain_name = Defaultproject_name = serviceusername = novapassword = NOVA_PASS#NOVA_PASS为nova服务密码[vnc]enabled = trueserver_listen = 0.0.0.0server_proxyclient_address = \$my_ipnovncproxy_base_url = http://192.168.48.10:6080/vnc_auto.html# 将 192.168.48.10修改为控制节点管理网络 IP [glance]api_servers = http://controller-48:9292[oslo_concurrency]lock_path = /var/lib/nova/tmp[placement]region_name = RegionOneproject_domain_name = Defaultproject_name = serviceauth_type = passworduser_domain_name = Defaultauth_url = http://controller-48:5000/v3username = placementpassword = PLACEMENT_PASS#PLACEMENT_PASS 为 Placement 服务密码[neutron]auth_url = http://controller-48:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = NEUTRON_PASS# NEUTRON_PASS 为 Neutron 服务密码EOFegrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo---------------------------------------------------------------------------------# 如果返回值大于 1 则说明已经开启硬件虚拟化，无需配置 qemu# 如等于 0 ，则需要配置 qemu 以代替默认的 kvmvi /etc/nova/nova.conf[libvirt]# ...virt_type = qemu# 以上配置仅当 egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo 结果为 0 时才进行配置---------------------------------------------------------------------------------systemctl enable libvirtd.service openstack-nova-compute.service --nowsystemctl status libvirtd.service openstack-nova-compute.service 
控制节点验证
# 在控制节点执行验证source admin-openrc.shopenstack compute service list --service nova-compute+----+--------------+----------+------+---------+-------+----------------------------+| ID | Binary       | Host     | Zone | Status  | State | Updated At                 |+----+--------------+----------+------+---------+-------+----------------------------+| 10 | nova-computer | computer-48 | nova | enabled | up    | 2023-04-02T17:17:08.000000 |+----+--------------+----------+------+---------+-------+----------------------------+# 在控制节点执行验证su -s /bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova####Found 2 cell mappings.Skipping cell0 since it does not contain hosts.Getting computer-48s from cell &#x27;cell1&#x27;: 89e02b18-2a3c-437a-8dd5-15deb98676a4Checking host mapping for computer-48 host &#x27;computer-48r-48&#x27;: e862bd61-8f56-4d3a-a2b2-21ab7db90edeCreating host mapping for computer-48 host &#x27;computer-48r-48&#x27;: e862bd61-8f56-4d3a-a2b2-21ab7db90edeFound 1 unmapped computer-48s in cell: 89e02b18-2a3c-437a-8dd5-15deb98676a4openstack compute service list[root@controller-48 ~]# openstack compute service list+----+----------------+---------------+----------+---------+-------+----------------------------+| ID | Binary         | Host          | Zone     | Status  | State | Updated At                 |+----+----------------+---------------+----------+---------+-------+----------------------------+|  1 | nova-conductor | controller-48 | internal | enabled | up    | 2023-05-27T17:44:38.000000 ||  4 | nova-scheduler | controller-48 | internal | enabled | up    | 2023-05-27T17:44:40.000000 ||  5 | nova-compute   | computer-48   | nova     | enabled | up    | 2023-05-27T17:44:43.000000 |+----+----------------+---------------+----------+---------+-------+----------------------------+openstack catalog list+-----------+-----------+----------------------------------------------------------------------+| Name      | Type      | Endpoints                                                            |+-----------+-----------+----------------------------------------------------------------------+| placement | placement | RegionOne                                                            ||           |           |   internal: http://controller-48:8778                                   ||           |           | RegionOne                                                            ||           |           |   admin: http://controller-48:8778                                      ||           |           | RegionOne                                                            ||           |           |   public: http://controller-48:8778                                     ||           |           |                                                                      || keystone  | identity  | RegionOne                                                            ||           |           |   admin: http://controller-48:5000/v3/                                  ||           |           | RegionOne                                                            ||           |           |   internal: http://controller-48:5000/v3/                               ||           |           | RegionOne                                                            ||           |           |   public: http://controller-48:5000/v3/                                 ||           |           |                                                                      || neutron   | network   | RegionOne                                                            ||           |           |   public: http://controller-48:9696                                     ||           |           | RegionOne                                                            ||           |           |   internal: http://controller-48:9696                                   ||           |           | RegionOne                                                            ||           |           |   admin: http://controller-48:9696                                      ||           |           |                                                                      || glance    | image     | RegionOne                                                            ||           |           |   admin: http://controller-48:9292                                      ||           |           | RegionOne                                                            ||           |           |   internal: http://controller-48:9292                                   ||           |           | RegionOne                                                            ||           |           |   public: http://controller-48:9292                                     ||           |           |                                                                      || nova      | computer-48   | RegionOne                                                            ||           |           |   admin: http://controller-48:8774/v2.1                                 ||           |           | RegionOne                                                            ||           |           |   internal: http://controller-48:8774/v2.1                              ||           |           | RegionOne                                                            ||           |           |   public: http://controller-48:8774/v2.1                                ||           |           |                                                                      ||           |           |                                                                      |+-----------+-----------+----------------------------------------------------------------------+openstack image list+--------------------------------------+--------+--------+| ID                                   | Name   | Status |+--------------------------------------+--------+--------+| 4e022193-03c2-40c4-872f-0adb606f31e4 | cirros | active |+--------------------------------------+--------+--------+nova-status upgrade check[root@controller-48 ~]# nova-status upgrade check+--------------------------------+| Upgrade Check Results          |+--------------------------------+| Check: Cells v2                || Result: Success                || Details: None                  |+--------------------------------+| Check: Placement API           || Result: Success                || Details: None                  |+--------------------------------+| Check: Ironic Flavor Migration || Result: Success                || Details: None                  |+--------------------------------+| Check: Cinder API              || Result: Success                || Details: None                  |+--------------------------------+#在控制节点修改自动注册nova-computer-48节点cat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF[scheduler]discover_hosts_in_cells_interval = 300EOF
Neutron（网络服务）
控制节点
##控制节点controller-48mysql -u root -pMARIADB_PASSCREATE DATABASE neutron;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;GRANT ALL PRIVILEGES ON neutron.* TO &#x27;neutron&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;NEUTRON_DBPASS&#x27;;flush privileges;exitsource admin-openrc.shopenstack user create --domain default --password NEUTRON_PASS neutronopenstack role add --project service --user neutron adminopenstack service create --name neutron \  --description &quot;OpenStack Networking&quot; networkopenstack endpoint create --region RegionOne \  network public http://controller-48:9696openstack endpoint create --region RegionOne \  network internal http://controller-48:9696openstack endpoint create --region RegionOne \  network admin http://controller-48:9696# 选择安装 大二层 网络yum install openstack-neutron openstack-neutron-ml2 \  openstack-neutron-linuxbridge ebtables -ymv /etc/neutron/neutron.conf&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/neutron.conf &lt;&lt;EOF[database]connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller-48/neutron#NEUTRON_DBPASS为 数据库 neutron 账户密码[DEFAULT]core_plugin = ml2service_plugins = routerallow_overlapping_ips = truetransport_url = rabbit://openstack:RABBIT_PASS@controller-48auth_strategy = keystonenotify_nova_on_port_status_changes = truenotify_nova_on_port_data_changes = true# RABBIT_PASS 为 消息队列密码[keystone_authtoken]www_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = NEUTRON_PASS# NEUTRON_PASS为 neutron 服务密码[nova]auth_url = http://controller-48:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = novapassword = NOVA_PASS# [nova]  没有则添加# NOVA_PASS为 Nova 服务密码[oslo_concurrency]EOFmv /etc/neutron/plugins/ml2/ml2_conf.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/plugins/ml2/ml2_conf.ini &lt;&lt; EOF[ml2]type_drivers = flat,vlan,vxlantenant_network_types = vxlanmechanism_drivers = linuxbridge,l2populationextension_drivers = port_security[ml2_type_flat]flat_networks = provider[ml2_type_vxlan]vni_ranges = 1:1000[securitygroup]enable_ipset = trueEOFmv /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini &lt;&lt;EOF[linux_bridge]physical_interface_mappings = provider:ens33# ens33 为第一块网卡名称[vxlan]enable_vxlan = truelocal_ip = 192.168.48.10l2_population = true# 192.168.48.10 为管理网络 控制节点的 IP  即 controller-48 IP[securitygroup]enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriverEOFmv /etc/neutron/l3_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/l3_agent.ini &lt;&lt; EOF[DEFAULT]interface_driver = linuxbridgeEOFmv /etc/neutron/dhcp_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/dhcp_agent.ini &lt;&lt; EOF[DEFAULT]interface_driver = linuxbridgedhcp_driver = neutron.agent.linux.dhcp.Dnsmasqenable_isolated_metadata = trueEOF----------------------modprobe br_netfiltercat &gt;&gt;/etc/rc.sysinit&lt;&lt;EOF#!/bin/bashfor file in /etc/sysconfig/modules/*.modules ; do[ -x $file ] &amp;&amp; $filedoneEOFecho &quot;modprobe br_netfilter&quot; &gt;/etc/sysconfig/modules/br_netfilter.moduleschmod 755 /etc/sysconfig/modules/br_netfilter.modulessysctl -a | grep net.bridge.bridge-nf-call----------------------mv /etc/neutron/metadata_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/metadata_agent.ini &lt;&lt; EOF[DEFAULT]nova_metadata_host = controller-48metadata_proxy_shared_secret = METADATA_SECRET# METADATA_SECRET 为 元数据 的密钥EOF-------------------cat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF#追加在末尾[neutron]auth_url = http://controller-48:5000auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultregion_name = RegionOneproject_name = serviceusername = neutronpassword = NEUTRON_PASSservice_metadata_proxy = truemetadata_proxy_shared_secret = METADATA_SECRET# NEUTRON_PASS  为 neutron 服务的密码# METADATA_SECRET 为上边设置的元数据密钥EOF-------------------ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.inisu -s /bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutronsudo ip route del defaultsudo ip route add default via 192.168.48.2 dev ens33#192.168.48.2为ens33网关systemctl enable --now neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service neutron-l3-agent.servicesystemctl status neutron-server.service  neutron-linuxbridge-agent.service neutron-dhcp-agent.service   neutron-metadata-agent.service  neutron-l3-agent.service
计算节点
###compute计算节点yum install openstack-neutron-linuxbridge ebtables ipset -y mv /etc/neutron/neutron.conf&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/neutron.conf &lt;&lt; EOF[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controller-48#RABBIT_PASS为 控制节点 消息队列 密码auth_strategy = keystone[keystone_authtoken]www_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = neutronpassword = NEUTRON_PASS# NEUTRON_PASS  为控制节点 neutron 服务密码[oslo_concurrency]lock_path = /var/lib/neutron/tmpEOFmv /etc/neutron/plugins/ml2/linuxbridge_agent.ini&#123;,.bak&#125;cat &gt;&gt; /etc/neutron/plugins/ml2/linuxbridge_agent.ini &lt;&lt;EOF[linux_bridge]physical_interface_mappings = provider:ens36# ens36 为 第二块网卡名字[vxlan]enable_vxlan = truelocal_ip = 192.168.48.20l2_population = true# 192.168.48.20  为 计算节点 管理网络的 IP 地址[securitygroup]enable_security_group = truefirewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriverEOF-------------------modprobe br_netfiltercat &gt;&gt;/etc/rc.sysinit&lt;&lt;EOF#!/bin/bashfor file in /etc/sysconfig/modules/*.modules ; do[ -x $file ] &amp;&amp; $filedoneEOFecho &quot;modprobe br_netfilter&quot; &gt;/etc/sysconfig/modules/br_netfilter.moduleschmod 755 /etc/sysconfig/modules/br_netfilter.modulessysctl -a | grep net.bridge.bridrge-nf-call-------------------systemctl enable neutron-linuxbridge-agent.service --nowsystemctl restart openstack-nova-compute.service neutron-linuxbridge-agent.servicesystemctl status neutron-linuxbridge-agent.service
控制节点验证
# 验证# 控制节点执行source admin-openrc.shopenstack network agent list###等几分钟[root@controller-48 ~]# openstack network agent list+--------------------------------------+--------------------+---------------+-------------------+-------+-------+---------------------------+| ID                                   | Agent Type         | Host          | Availability Zone | Alive | State | Binary                    |+--------------------------------------+--------------------+---------------+-------------------+-------+-------+---------------------------+| 201870b9-aac0-4830-9788-03da13b125c7 | Metadata agent     | controller-48 | None              | :-)   | UP    | neutron-metadata-agent    || 55ae2391-4cd6-4cd1-bf4f-4465f1b561a1 | L3 agent           | controller-48 | nova              | :-)   | UP    | neutron-l3-agent          || bae3fe77-a005-4cdf-aee6-8cfe3cf918ba | Linux bridge agent | controller-48 | None              | :-)   | UP    | neutron-linuxbridge-agent || f0bd6fbc-2889-4558-80fa-8f2a08989b74 | Linux bridge agent | computer-48   | None              | :-)   | UP    | neutron-linuxbridge-agent || f5546196-9950-4c5a-b709-060a1bba5944 | DHCP agent         | controller-48 | nova              | :-)   | UP    | neutron-dhcp-agent        |+--------------------------------------+--------------------+---------------+-------------------+-------+-------+---------------------------+# 确保以上五个 Agent 都为 :-) 及 UP
Horizon(Web管理页面)
systemctl restart neutron* openstack-nova*###控制节点yum install openstack-dashboard -ycp /etc/openstack-dashboard/local_settings&#123;,.bak&#125;#注释以下信息sed -i &#x27;s/^ALLOWED_HOSTS/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^OPENSTACK_HOST/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^OPENSTACK_KEYSTONE_URL/#&amp;/&#x27; /etc/openstack-dashboard/local_settingssed -i &#x27;s/^TIME_ZONE/#&amp;/&#x27; /etc/openstack-dashboard/local_settings追加内容cat &gt;&gt; /etc/openstack-dashboard/local_settings &lt;&lt;EOFALLOWED_HOSTS = [&#x27;*&#x27;]SESSION_ENGINE = &#x27;django.contrib.sessions.backends.cache&#x27;CACHES = &#123;    &#x27;default&#x27;: &#123;         &#x27;BACKEND&#x27;: &#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;,         &#x27;LOCATION&#x27;: &#x27;controller-48:11211&#x27;,    &#125;&#125;OPENSTACK_HOST = &quot;controller-48&quot;OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/identity/v3&quot; % OPENSTACK_HOSTOPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = TrueOPENSTACK_API_VERSIONS = &#123;    &quot;identity&quot;: 3,    &quot;image&quot;: 2,    &quot;volume&quot;: 3,&#125;OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &quot;Default&quot;OPENSTACK_KEYSTONE_DEFAULT_ROLE = &quot;user&quot;TIME_ZONE = &quot;Asia/Shanghai&quot;# 有则修改没有则添加EOFcp /etc/httpd/conf.d/openstack-dashboard.conf&#123;,.bak&#125;cat &gt;&gt; /etc/httpd/conf.d/openstack-dashboard.conf &lt;&lt; EOFWSGIApplicationGroup %&#123;GLOBAL&#125;EOF------------------------------------------------------------------------------------#把下面所有文件里面有WEBROOT = &#x27;/&#x27; 中的 / 改成 /dashboardsed -i.bak &quot;s#WEBROOT\s*=.*#WEBROOT = &#x27;/dashboard&#x27;#&quot; /usr/share/openstack-dashboard/openstack_dashboard/defaults.pysed -i.bak &quot;s#WEBROOT\s*=.*#WEBROOT = &#x27;/dashboard&#x27;#&quot;  /usr/share/openstack-dashboard/openstack_dashboard/test/settings.pysed -i.bak &#x27;s|WEBROOT\s*=.*|WEBROOT = &quot;/dashboard&quot;|&#x27; /usr/share/openstack-dashboard/static/dashboard/js/1453ede06e9f.js#如果第三条不行，注意一下1453ede06e9f.js是否存在，若不存在，则看下面三个文件中有WEBROOT = &#x27;/&#x27;替换文件名即可[root@controller-48 ~]# cd /usr/share/openstack-dashboard/static/dashboard/js/[root@controller-48 js]# lltotal 2472   #以下几个文件也要改 ，我这里就一个文件有-rw-r--r-- 1 root root  606959 May 17  2021 1453ede06e9f.js-rw-r--r-- 1 root root 1659039 May 17  2021 b5e88d434bd1.js-rw-r--r-- 1 root root  254022 May 17  2021 eb687af7228a.js------------------------------------------------------------------------------------systemctl restart httpd memcachedsystemctl status httpd memcached# 验证# 访问 http://192.168.48.10/dashboard  （控制节点ip）# 登录用户密码 可使用 admin 或 user_dog# 域名 使用 Default

cinder（块存储服务）
控制节点
###控制节点mysql -u root -pMARIADB_PASSCREATE DATABASE cinder;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;CINDER_DBPASS&#x27;;GRANT ALL PRIVILEGES ON cinder.* TO &#x27;cinder&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;CINDER_DBPASS&#x27;;exit# CINDER_DBPASS 为 cinder 数据库账户密码source admin-openrc.shopenstack user create --domain default --password CINDER_PASS cinderopenstack role add --project service --user cinder admin  openstack service create --name cinderv3 \  --description &quot;OpenStack Block Storage&quot; volumev3openstack endpoint create --region RegionOne \  volumev3 public http://controller-48:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 internal http://controller-48:8776/v3/%\(project_id\)sopenstack endpoint create --region RegionOne \  volumev3 admin http://controller-48:8776/v3/%\(project_id\)syum install openstack-cinder -ymv /etc/cinder/cinder.conf&#123;,.bak&#125;cat &gt;&gt; /etc/cinder/cinder.conf &lt;&lt; EOF[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controller-48auth_strategy = keystonemy_ip = 192.168.48.10# 控制节点管理网络 IP[database]connection = mysql+pymysql://cinder:CINDER_DBPASS@controller-48/cinder# CINDER_DBPASS 为数据库 Cinder 账户密码[keystone_authtoken]www_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = cinderpassword = CINDER_PASS# CINDER_PASS 为 Cinder 服务密码[oslo_concurrency]lock_path = /var/lib/cinder/tmpEOFsu -s /bin/sh -c &quot;cinder-manage db sync&quot; cindercat &gt;&gt; /etc/nova/nova.conf &lt;&lt; EOF[cinder]os_region_name = RegionOneEOFsystemctl restart openstack-nova-api.servicesystemctl status openstack-nova-api.servicesystemctl enable --now openstack-cinder-api.service openstack-cinder-scheduler.servicesystemctl status openstack-cinder-api.service openstack-cinder-scheduler.service
计算节点
###computer-48节点添加一块物理磁盘[root@computer-48 ~]# lsblkNAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsda               8:0    0  100G  0 disk├─sda1            8:1    0    1G  0 part /boot└─sda2            8:2    0   99G  0 part  ├─centos-root 253:0    0   50G  0 lvm  /  ├─centos-swap 253:1    0  3.6G  0 lvm  [SWAP]  └─centos-home 253:2    0 45.4G  0 lvm  /homesdb               8:16   0  100G  0 disksr0              11:0    1 1024M  0 romyum install lvm2 device-mapper-persistent-data -ysystemctl enable lvm2-lvmetad.service --now# 如显示不存在则说明系统默认安装了 lvm  以上步骤可忽略#创建/dev/sdb卷组pvcreate /dev/sdb# Physical volume &quot;/dev/sdb&quot; successfully created.vgcreate cinder-volumes /dev/sdb# Volume group &quot;cinder-volumes&quot; successfully created# sdb 为划分给块存储使用的磁盘# 如有多个磁盘，则需重复以上两个命令cp /etc/lvm/lvm.conf&#123;,.bak&#125;sed -i &#x27;130 a\filter = [ &quot;a/sdb/&quot;,&quot;r/.*/&quot;]&#x27; /etc/lvm/lvm.conf#sdb是上面添加的新的物理磁盘# 如有多个磁盘，则将磁盘编号以固定格式添加到过滤设备中，例如有两个磁盘 sdb sdc ，则为 filter = [ &quot;a/sdb/&quot;, &quot;a/sdc/&quot;,&quot;r/.*/&quot;]yum install openstack-cinder targetcli python-keystone -ymv /etc/cinder/cinder.conf&#123;,.bak&#125;cat &gt;&gt; /etc/cinder/cinder.conf &lt;&lt; EOF[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controller-48auth_strategy = keystonemy_ip = 192.168.48.20enabled_backends = lvmglance_api_servers = http://controller-48:9292# 192.168.48.20  为块存储节点 computer-48管理网络 的接口IP[database]connection = mysql+pymysql://cinder:CINDER_DBPASS@controller-48/cinder# CINDER_DBPASS 为数据库 Cinder 账户密码[keystone_authtoken]www_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = cinderpassword = CINDER_PASS# CINDER_PASS 为 cinder 数据库账户密码[lvm]volume_driver = cinder.volume.drivers.lvm.LVMVolumeDrivervolume_group = cinder-volumestarget_protocol = iscsitarget_helper = lioadm# [lvm]  没有则新建[oslo_concurrency]lock_path = /var/lib/cinder/tmpEOFsystemctl enable openstack-cinder-volume.service target.service --nowsystemctl status openstack-cinder-volume.service target.service
控制节点验证
# 验证# 控制节点执行source admin-openrc.shopenstack volume service listsystemctl restart httpd memcached[root@controller-48 ~]# openstack volume service list+------------------+-------------+------+---------+-------+----------------------------+| Binary           | Host        | Zone | Status  | State | Updated At                 |+------------------+-------------+------+---------+-------+----------------------------+| cinder-scheduler | controller-48  | nova | enabled | up    | 2023-05-24T08:24:18.000000 || cinder-volume    | computer-48@lvm | nova | enabled | up    | 2023-05-24T08:24:17.000000 |+------------------+-------------+------+---------+-------+----------------------------+
Swift（对象存储）
控制节点
###控制节点source admin-openrc.shopenstack user create --domain default --password SWIFT_PASS swiftopenstack role add --project service --user swift admin#创建swift服务实体：openstack service create --name swift \  --description &quot;OpenStack Object Storage&quot; object-store#创建swift服务实体：openstack endpoint create --region RegionOne \object-store public http://controller-48:8080/v1/AUTH_%\(project_id\)sopenstack endpoint create --region RegionOne \object-store internal http://controller-48:8080/v1/AUTH_%\(project_id\)sopenstack endpoint create --region RegionOne \object-store admin http://controller-48:8080/v1#安装swift组件yum install -y openstack-swift-proxy python-swiftclient \  python-keystoneclient python-keystonemiddleware \  Memcachedmv /etc/swift/proxy-server.conf&#123;,.bak&#125;cat&gt; /etc/swift/proxy-server.conf&lt;&lt;EOF[DEFAULT]bind_ip = 0.0.0.0bind_port = 8080user = swift[pipeline:main]pipeline = catch_errors gatekeeper healthcheck proxy-logging cache container_sync bulk ratelimit authtoken keystoneauth container-quotas account-quotas slo dlo versioned_writes proxy-logging proxy-server[app:proxy-server]use = egg:swift#proxyallow_account_management = trueaccount_autocreate = true#Keystone auth info[filter:authtoken]paste.filter_factory = keystonemiddleware.auth_token:filter_factorywww_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000/v3memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = swiftpassword = SWIFT_PASSdelay_auth_decision = trueservice_token_roles_required = True[filter:keystoneauth]use = egg:swift#keystoneauthoperator_roles = admin,user[filter:healthcheck]use = egg:swift#healthcheck[filter:cache]use = egg:swift#memcachememcache_servers = controller-48:11211[filter:ratelimit]use = egg:swift#ratelimit[filter:domain_remap]use = egg:swift#domain_remap[filter:catch_errors]use = egg:swift#catch_errors[filter:cname_lookup]use = egg:swift#cname_lookup[filter:staticweb]use = egg:swift#staticweb[filter:tempurl]use = egg:swift#tempurl[filter:formpost]use = egg:swift#formpost[filter:name_check]use = egg:swift#name_check[filter:list-endpoints]use = egg:swift#list_endpoints[filter:proxy-logging]use = egg:swift#proxy_logging[filter:bulk]use = egg:swift#bulk[filter:slo]use = egg:swift#slo[filter:dlo]use = egg:swift#dlo[filter:container-quotas]use = egg:swift#container_quotas[filter:account-quotas]use = egg:swift#account_quotas[filter:gatekeeper]use = egg:swift#gatekeeper[filter:container_sync]use = egg:swift#container_sync[filter:xprofile]use = egg:swift#xprofile[filter:versioned_writes]use = egg:swift#versioned_writesEOF
computer-48
添加4张硬盘


#conpute节点yum install xfsprogs rsync -ylsblk#将/dev/sdb和/dev/sdc设备格式化为XFS：mkfs.xfs /dev/sdcmkfs.xfs /dev/sddmkfs.xfs /dev/sdemkfs.xfs /dev/sdf#创建安装点目录结构：mkdir -p /srv/node/sdcmkdir -p /srv/node/sddmkdir -p /srv/node/sdemkdir -p /srv/node/sdfcat &gt;&gt; /etc/fstab &lt;&lt; EOF/dev/sdc /srv/node/sdc xfs noatime,nodiratime,nobarrier,logbufs=8 0 2/dev/sdd /srv/node/sdd xfs noatime,nodiratime,nobarrier,logbufs=8 0 2/dev/sde /srv/node/sde xfs noatime,nodiratime,nobarrier,logbufs=8 0 2/dev/sdf /srv/node/sdf xfs noatime,nodiratime,nobarrier,logbufs=8 0 2EOF#安装设备mount /srv/node/sdcmount /srv/node/sddmount /srv/node/sdemount /srv/node/sdfcat&gt;/etc/rsyncd.conf&lt;&lt;EOFuid = swiftgid = swiftlog file = /var/log/rsyncd.logpid file = /var/run/rsyncd.pidaddress = 192.168.148.20[account]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/account.lock[container]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/container.lock[object]max connections = 2path = /srv/node/read only = Falselock file = /var/lock/object.lockEOF#重启服务systemctl enable rsyncd.servicesystemctl start rsyncd.service#安装swift组件yum install -y openstack-swift-account openstack-swift-container \  openstack-swift-object  mv /etc/swift/account-server.conf&#123;,.bak&#125;cat&gt; /etc/swift/account-server.conf&lt;&lt;EOF[DEFAULT]bind_ip = 192.168.148.20bind_port = 6202user = swiftswift_dir = /etc/swiftdevices = /srv/nodemount_check = true[pipeline:main]pipeline = healthcheck recon account-server[app:account-server]use = egg:swift#account[filter:healthcheck]use = egg:swift#healthcheck[filter:recon]use = egg:swift#reconrecon_cache_path = /var/cache/swift[account-replicator][account-auditor][account-reaper][filter:xprofile]use = egg:swift#xprofileEOFmv /etc/swift/container-server.conf&#123;,.bak&#125;cat&gt; /etc/swift/container-server.conf&lt;&lt;EOF[DEFAULT]bind_ip = 192.168.148.20bind_port = 6201user = swiftswift_dir = /etc/swiftdevices = /srv/nodemount_check = true[pipeline:main]pipeline = healthcheck recon container-server[app:container-server]use = egg:swift#container[filter:healthcheck]use = egg:swift#healthcheck[filter:recon]use = egg:swift#recon[container-replicator][container-updater][container-auditor][container-sync][filter:xprofile]use = egg:swift#xprofile[container-sharder]EOFmv /etc/swift/object-server.conf&#123;,.bak&#125;cat&gt; /etc/swift/object-server.conf&lt;&lt;EOF[DEFAULT]bind_ip = 0.0.0.0bind_port = 6200user = swiftswift_dir = /etc/swiftdevices = /srv/nodemount_check = true[pipeline:main]pipeline = healthcheck recon object-server[app:object-server]use = egg:swift#objectrecon_cache_path = /var/cache/swiftrecon_lock_path = /var/lock[filter:healthcheck]use = egg:swift#healthcheck[filter:recon]use = egg:swift#recon[object-replicator][object-reconstructor][object-updater][object-expirer][filter:xprofile]use = egg:swift#xprofile[object-relinker][object-auditor]log_name = object-auditorlog_facility = LOG_LOCAL0log_level = INFOlog_address=/dev/log   EOF#确保对安装点目录结构拥有适当的所有权：chown -R swift:swift /srv/node#创建recon目录并确保对其拥有适当的所有权： mkdir -p /var/cache/swift chown -R root:swift /var/cache/swift chmod -R 775 /var/cache/swift # 在防火墙中启用必要的访问(实验忽略)firewall-cmd --permanent --add-port=6200/tcpfirewall-cmd --permanent --add-port=6201/tcpfirewall-cmd --permanent --add-port=6202/tcp
创建和分发初始环 controller-48
#控制节点转到/etc/swift目录。(所以操作在此目录，执行)创建用户环account.builder文件：cd /etc/swift##第一部分（6202）创建用户环swift-ring-builder account.builder create 10 3 1swift-ring-builder account.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6202 --device sdc --weight 100swift-ring-builder account.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6202 --device sdd --weight 100swift-ring-builder account.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6202 --device sde --weight 100swift-ring-builder account.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6202 --device sdf --weight 100swift-ring-builder account.builder##重新平衡环且验证swift-ring-builder account.builder rebalanceswift-ring-builder account.builder##第二部分（6201）创建容器环swift-ring-builder container.builder create 10 3 1swift-ring-builder container.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6201 --device sdc --weight 100swift-ring-builder container.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6201 --device sdd --weight 100swift-ring-builder container.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6201 --device sde --weight 100swift-ring-builder container.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6201 --device sdf --weight 100swift-ring-builder container.builderswift-ring-builder container.builder rebalance##第三部分（6200）创建对象环swift-ring-builder object.builder create 10 3 1swift-ring-builder object.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6200 --device sdc --weight 100swift-ring-builder object.builder add \   --region 1 --zone 1 --ip 192.168.148.20 --port 6200 --device sdd --weight 100swift-ring-builder object.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6200 --device sde --weight 100swift-ring-builder object.builder add \   --region 1 --zone 2 --ip 192.168.148.20 --port 6200 --device sdf --weight 100swift-ring-builder object.builderswift-ring-builder object.builder rebalance将swift目录下生成三个.gz文件复制到存储节点的swift目录下scp account.ring.gz container.ring.gz object.ring.gz 192.168.148.20:/etc/swift##完成安装 controller-48mv  /etc/swift/swift.conf&#123;,.bak&#125;cat&gt; /etc/swift/swift.conf&lt;&lt;EOF[swift-hash]swift_hash_path_suffix = swiftswift_hash_path_prefix = swift[storage-policy:0]name = Policy-0default = yesEOF#复制到存储节点scp swift.conf 192.168.148.20:/etc/swiftswift_hash_path_suffix和swift_hash_path_prefix作为哈希算法的一部分用于确定数据在集群中的位置。这些值应该保持机密，并且在部署集群之后不能更改丢失。可自定义在所有节点确保对配置目录拥有适当的所有权：####存储节点与控制节点同时执行（注意！！！！两个节点同时执行）chown -R root:swift /etc/swift 在控制器节点和任何其他运行代理服务的节点上，启动对象存储代理服务及其相关性，并将它们配置为在系统启动时启动(存储节点无代理服务)#重启服务systemctl enable openstack-swift-proxy.service memcached.service --nowsystemctl restart openstack-swift-proxy.service memcached.service
计算节点
在存储节点启动所有服务 systemctl enable openstack-swift-account.service openstack-swift-account-auditor.service \  openstack-swift-account-reaper.service openstack-swift-account-replicator.service systemctl start openstack-swift-account.service openstack-swift-account-auditor.service \  openstack-swift-account-reaper.service openstack-swift-account-replicator.service systemctl enable openstack-swift-container.service \  openstack-swift-container-auditor.service openstack-swift-container-replicator.service \  openstack-swift-container-updater.service systemctl start openstack-swift-container.service \  openstack-swift-container-auditor.service openstack-swift-container-replicator.service \  openstack-swift-container-updater.service systemctl enable openstack-swift-object.service openstack-swift-object-auditor.service \  openstack-swift-object-replicator.service openstack-swift-object-updater.service systemctl start openstack-swift-object.service openstack-swift-object-auditor.service \  openstack-swift-object-replicator.service openstack-swift-object-updater.service
验证
[root@controller-48 swift]# swift stat               Account: AUTH_07a1ce96dca54f1bb0d3b968f1343617            Containers: 0               Objects: 0                 Bytes: 0       X-Put-Timestamp: 1684919814.32783           X-Timestamp: 1684919814.32783            X-Trans-Id: txd6f3affa0140455b935ff-00646dd605          Content-Type: text/plain; charset=utf-8X-Openstack-Request-Id: txd6f3affa0140455b935ff-00646dd605[root@controller-48 swift]# cd[root@controller-48 ~]# swift upload demo cirros-0.5.2-x86_64-disk.img --object-name imageimage##重启nova服务sudo systemctl restart openstack-nova*
Heat（编排）
控制节点
#创建heat数据库和用户mysql -u root -pMARIADB_PASSCREATE DATABASE heat;GRANT ALL PRIVILEGES ON heat.* TO &#x27;heat&#x27;@&#x27;localhost&#x27; \  IDENTIFIED BY &#x27;HEAT_DBPASS&#x27;;GRANT ALL PRIVILEGES ON heat.* TO &#x27;heat&#x27;@&#x27;%&#x27; \  IDENTIFIED BY &#x27;HEAT_DBPASS&#x27;;flush privileges;exitsource admin-openrc.shopenstack user create --domain default --password HEAT_PASS heat#添加 admin 角色到 heat 用户上openstack role add --project service --user heat admin##创建heat和 heat-cfn 服务实体openstack service create --name heat \  --description &quot;Orchestration&quot; orchestrationopenstack service create --name heat-cfn \  --description &quot;Orchestration&quot;  cloudformation  ##创建 Orchestration 服务的 API 端点openstack endpoint create --region RegionOne \  orchestration public http://controller-48:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  orchestration internal http://controller-48:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  orchestration admin http://controller-48:8004/v1/%\(tenant_id\)sopenstack endpoint create --region RegionOne \  cloudformation public http://controller-48:8000/v1openstack endpoint create --region RegionOne \  cloudformation internal http://controller-48:8000/v1openstack endpoint create --region RegionOne \  cloudformation admin http://controller-48:8000/v1
为了管理栈，在认证服务中Orchestration需要更多信息
#控制节点#为栈创建 heat 包含项目和用户的域openstack domain create --description &quot;Stack projects and users&quot; heat#在 heat 域中创建管理项目和用户的heat_domain_admin用户：openstack user create --domain heat --password=HEAT_DOMAIN_USER_PASS heat_domain_admin#)添加admin角色到 heat 域 中的heat_domain_admin用户，启用heat_domain_admin用户#管理栈的管理权限openstack role add --domain heat --user-domain heat --user heat_domain_admin admin#为栈创建 heat 包含项目和用户的域openstack role create heat_stack_owner#添加heat_stack_owner 角色到demo 项目和用户，启用demo 用户管理栈。openstack role add --project demo --user demo heat_stack_owner#必须添加 heat_stack_owner 角色到每个管理栈的用户。#heat_stack_user 角色openstack role create heat_stack_user
安装并配置Heat组件相关软件
#控制节点yum install openstack-heat-api openstack-heat-api-cfn \  openstack-heat-engine -ymv /etc/heat/heat.conf&#123;,.bak&#125;cat &gt;&gt; /etc/heat/heat.conf &lt;&lt; EOF[database]connection = mysql+pymysql://heat:HEAT_DBPASS@controller-48/heat  #HEAT_DBPASS是HEAT数据库密码[DEFAULT]transport_url = rabbit://openstack:RABBIT_PASS@controller-48#RABBIT_PASS为Rabbitmq服务密码 用户名是openstack[keystone_authtoken]www_authenticate_uri = http://controller-48:5000auth_url = http://controller-48:5000memcached_servers = controller-48:11211auth_type = passwordproject_domain_name = defaultuser_domain_name = defaultproject_name = serviceusername = heatpassword = HEAT_PASS#HEAT_PASS是heat用户密码[trustee]auth_type = passwordauth_url = http://controller-48:5000username = heatpassword = HEAT_PASS#HEAT_PASS是heat用户密码user_domain_name = default[clients_keystone]auth_uri = http://controller-48:5000[DEFAULT]heat_metadata_server_url = http://controller-48:8000heat_waitcondition_server_url = http://controller-48:8000/v1/waitcondition[DEFAULT]stack_domain_admin = heat_domain_adminstack_domain_admin_password = HEAT_DOMAIN_USER_PASSstack_user_domain_name = heatEOFsu -s /bin/sh -c &quot;heat-manage db_sync&quot; heat##启动 Orchestration 编排服务heat组件并将其设置为随系统启动systemctl enable openstack-heat-api.service \  openstack-heat-api-cfn.service openstack-heat-engine.servicesystemctl restart openstack-heat-api.service \  openstack-heat-api-cfn.service openstack-heat-engine.service  [root@controller-48 ~]# systemctl list-unit-files |grep openstack-heat*openstack-heat-api-cfn.service                enabledopenstack-heat-api.service                    enabledopenstack-heat-engine.service                 enabled
验证
cdsource admin-openrc.shopenstack service listopenstack orchestration service list该输出显示表明在控制节点上有应该四个heat-engine组件。[root@controller-48 ~]# openstack orchestration service list+------------+-------------+--------------------------------------+------------+--------+----------------------------+--------+| Hostname   | Binary      | Engine ID                            | Host       | Topic  | Updated At                 | Status |+------------+-------------+--------------------------------------+------------+--------+----------------------------+--------+| controller-48 | heat-engine | 230ae8e8-3c9f-4b82-b0ca-caef3d5497f1 | controller-48 | engine | 2023-05-27T14:42:52.000000 | up     || controller-48 | heat-engine | 626e74a4-918b-46b8-8993-d6db92eb861e | controller-48 | engine | 2023-05-27T14:42:52.000000 | up     || controller-48 | heat-engine | f648e766-cdb9-4e06-b190-a713baf33df8 | controller-48 | engine | 2023-05-27T14:42:52.000000 | up     || controller-48 | heat-engine | 2cb3dfd3-0636-432c-8d59-f22d850510d5 | controller-48 | engine | 2023-05-27T14:42:52.000000 | up     |+------------+-------------+--------------------------------------+------------+--------+----------------------------+--------+
创建实例
创建实例类型
左侧选择管理员，点击计算，点击实例类型，右侧点击创建实例类型。

根据以上图片步骤依次填入：实例名称、VCPU数量、内存大小、根磁盘大小，确认无误后点击创建实例类型。
创建镜像
测试镜像：https://download.cirros-cloud.net/0.6.2/cirros-0.6.2-x86_64-disk.img
有两种上传方式（二选一）！！！
1.Windows上传镜像方式
左侧选择管理员，点击计算，点击镜像，右侧点击创建镜像。
Windows下载到本地即可

根据以上图片步骤依次填入：镜像名称、选择文件、镜像格式，确认无误后点击创建镜像。
注：演示上传的 img 镜像格式需选用 QCOW2 - QEMU模拟器 才可正常加载。
2.Linux上传镜像方式
source admin-openrcwget https://download.cirros-cloud.net/0.6.2/cirros-0.6.2-x86_64-disk.img#可能会下载不到，可以复制链接到浏览器下载，然后移到/root/目录下glance image-create --name &quot;cirros&quot; \  --file cirros-0.6.2-x86_64-disk.img \  --disk-format qcow2 --container-format bare \  --visibility=publicopenstack image list[root@controller-1 ~]# openstack image list+--------------------------------------+--------+--------+| ID                                   | Name   | Status |+--------------------------------------+--------+--------+| 627761da-7f8c-4780-842a-e50e62f5c464 | cirros | active |+--------------------------------------+--------+--------+
创建内部网络
左侧选择管理员，点击网络，点击网络，右侧点击创建网络。



创建外部网络
左侧选择管理员，点击网络，点击网络，右侧点击创建网络。
如果你是按照本文档搭建的，就填provider



创建路由
左侧选择管理员，点击网络，点击路由，右侧点击创建路由。



添加安全组规则


最后效果长这样

创建实例




然后点击创建实例
分配浮动ip


结论：创建实例成功

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Rancher容器管理平台</title>
    <url>/posts/e650e0d0/</url>
    <content><![CDATA[
Rancher容器管理平台

Rancher 中文文档: https://docs.rancher.cn/
什么是 Rancher？
Rancher 是一个 Kubernetes 管理工具，让你能在任何地方和任何提供商上部署和运行集群。
Rancher 可以创建来自 Kubernetes 托管服务提供商的集群，创建节点并安装 Kubernetes，或者导入在任何地方运行的现有 Kubernetes 集群。
Rancher 基于 Kubernetes 添加了新的功能，包括统一所有集群的身份验证和 RBAC，让系统管理员从一个位置控制全部集群的访问。
此外，Rancher 可以为集群和资源提供更精细的监控和告警，将日志发送到外部提供商，并通过应用商店（Application Catalog）直接集成  Helm。如果你拥有外部 CI/CD 系统，你可以将其与 Rancher 对接。没有的话，你也可以使用 Rancher 提供的 Fleet  自动部署和升级工作负载。
Rancher 是一个 全栈式 的 Kubernetes 容器管理平台，为你提供在任何地方都能成功运行 Kubernetes 的工具。
Docker部署Rancher
仅需三步！开启Rancher之旅
准备一台Linux主机 要求4GB内存，并且已经安装Docker
安装教程：使用 Docker 将 Rancher 安装到单个节点中

**Docker 安装在生产环境中不支持。**这些说明仅用于测试和开发目的。请不要使用此方法在生产环境中安装 Rancher。Rancher 的 Docker 安装仅推荐用于开发和测试环境中

1.基础配置
Rancher 容器内部启动了 k3s，它依赖于底层宿主机具备 iptables 支持（用于网络转发、容器间通信等），否则会因为 缺少 iptable_nat / iptable_filter 模块 而导致：
yum install -y iptablesmodprobe iptable_natmodprobe iptable_filtersudo tee /etc/modules-load.d/modules.conf &gt;/dev/null &lt;&lt;EOF iptable_natiptable_filterEOFreboot
1.创建rancher挂在目录
docker rm -f qianyios_rancherrm -rf /data/rancher_home/rancher/*rm -rf /data/rancher_home/auditlog/*mkdir -p /data/rancher_home/ranchermkdir -p /data/rancher_home/auditlog
2.安装rancher
docker run -d --privileged --restart=unless-stopped \  -p 8080:80 -p 4431:443 \  -v /data/rancher_home/rancher:/var/lib/rancher \  -v /data/rancher_home/auditlog:/var/log/auditlog \  --name qianyios_rancher registry.cn-guangzhou.aliyuncs.com/qianyios/rancher:stable
-p 8080:80   外部端口：8080（宿主机端口）：内部端口：80（容器端口）
-p 4431:443  外部端口：4431（宿主机端口）：内部端口：443（容器端口）
registry.cn-guangzhou.aliyuncs.com/qianyios/rancher:stable是我自己构建的镜像（不定期更新，可能会落后版本），如果有条件可以下载原版镜像 rancher/rancher:stable
或者用国内构建的官方镜像registry.cn-hangzhou.aliyuncs.com/qianyios/rancher:版本号这个你需要携带版本号
--privileged 标志会给容器内的进程几乎相同于宿主机的特权。这意味着容器内的进程可以访问宿主机的所有设备，并且可以执行一些通常需要特权的操作，比如加载内核模块等

访问地址：https://192.168.48.10:4431


查看密码
docker logs qianyios_rancher  2&gt;&amp;1 | grep &quot;Bootstrap Password:&quot;
qianyios_rancher是我前面创建容器的一个名字

Bootstrap Password: 5qnwrp6gm9q28zsqnkbd2ktjxpkqkbt9rdbpb46c5xzf5qqkr8snx7

设置自定义密码


首页就这样了，安装成功
设置中文

添加已
在Kubernetes上部署Rancher
在此之前添加一个环境变量
操作节点：[所有的server]
在root用户下
sudo echo &quot;export KUBECONFIG=/etc/rancher/k3s/k3s.yaml&quot; &gt;&gt; /etc/profilesudo echo &quot;export KUBECONFIG=/etc/rancher/k3s/k3s.yaml&quot; &gt;&gt; ~/.bashrcsource /etc/profilesource ~/.bashrcsudo kubectl config view --raw &gt;&gt;~/.kube/configecho $KUBECONFIG
先决条件

helm3
[Kubernetes 集群](#Kubernetes 集群)
[Ingress Controller](#Ingress Controller)
CLI 工具

Helm3
建议所有的server节点都安装
官网教程：Helm3 安装
本教材默认你使用的是helm3，如果没安装请按照以下教程安装，安装了就略过
sudo curl https://qygit.qianyisky.cn/https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

Kubernetes 集群
自行部署一个Kubernetes集群
已经测试过的Kubernetes
基于OpenEuler部署K3S
基于Centos7部署k3s
OpenEuler-K8S高可用集群（内部etcd）
Ingress Controller
Rancher UI 和 API 通过 Ingress 公开。换言之，安装 Rancher 的 Kubernetes 集群必须包含一个 Ingress Controller。
对于 RKE、RKE2 和 K3s，你不需要手动安装 Ingress Controller，因为它是默认安装的。
对于默认不包含 Ingress Controller 的发行版（例如 EKS、GKE 或 AKS 等托管 Kubernetes 集群），你必须先部署  Ingress Controller。请注意，Rancher Helm Chart 默认情况下不会在 Ingress 上设置 ingressClassName。因此，你必须将 Ingress Controller 配置为在没有 ingressClassName 的情况下也可以监视 Ingress。
上面的 Amazon EKS、AKS 和 GKE 教程中包含了示例。
如果不是RKE、RKE2 和 K3s的Kubernetes，你需要按照一下教程安装Ingress Controller
sudo helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginxsudo helm repo updatesudo helm search repo ingress-nginx -l
安装 Rancher Helm Chart
Rancher 是使用 Kubernetes 的 Helm 包管理器安装的。Helm Chart 为 Kubernetes YAML 清单文件提供了模板语法。通过 Helm，用户可以创建可配置的 deployment，而不仅仅只能使用静态文件。
如果系统无法直接访问互联网，请参见离线环境：Kubernetes 安装。
如果要指定安装的 Rancher 版本，请参见选择 Rancher 版本。
如果要指定用于安装 Rancher 的 Helm 版本，请参见Helm 版本要求。
本安装指南假定你使用的是 Helm 3。
添加 Helm Chart 仓库
操作节点：[server1]
Latest：建议用于试用最新功能
sudo helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
Stable：建议用于生产环境(本实验实验这个)
sudo helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
Alpha：即将发布的实验性预览。
sudo helm repo add rancher-alpha https://releases.rancher.com/server-charts/alpha
注意：不支持升级到 Alpha 版、从 Alpha 版升级或在 Alpha 版之间升级。
为 Rancher 创建命名空间
kubectl create namespace cattle-system
选择 SSL 配置
Rancher Management Server 默认需要 SSL/TLS 配置来保证访问的安全性。
你可以从以下三种证书来源中选择一种，用于在 Rancher Server 中设置 TLS：

Rancher 生成的 TLS 证书：要求你在集群中安装 cert-manager。Rancher 使用 cert-manager 签发并维护证书。Rancher 会生成自己的 CA 证书，并使用该 CA 签署证书。然后 cert-manager负责管理该证书。
Let’s Encrypt：Let’s Encrypt 选项也需要使用 cert-manager。但是，在这种情况下，cert-manager 与 Let’s Encrypt 的特殊颁发者相结合，该颁发者执行获取 Let’s Encrypt 颁发的证书所需的所有操作（包括请求和验证）。此配置使用 HTTP 验证（HTTP-01），因此负载均衡器必须具有可以从互联网访问的公共 DNS 记录。
你已有的证书：使用已有的 CA 颁发的公有或私有证书。Rancher 将使用该证书来保护 WebSocket 和 HTTPS 流量。在这种情况下，你必须上传名称分别为 tls.crt 和 tls.key的 PEM 格式的证书以及相关的密钥。如果你使用私有 CA，则还必须上传该 CA 证书。这是由于你的节点可能不信任此私有 CA。Rancher  将获取该 CA 证书，并从中生成一个校验和，各种 Rancher 组件将使用该校验和来验证其与 Rancher 的连接。




配置
Helm Chart 选项
是否需要 cert-manager




Rancher 生成的证书（默认）
ingress.tls.source=rancher
是


Let’s Encrypt
ingress.tls.source=letsEncrypt
是


你已有的证书
ingress.tls.source=secret
否



安装 cert-manager
建议提前下载这个镜像rancher/mirrored-library-traefik:3.3.6
如果你使用自己的证书文件（ingress.tls.source=secret）或使用外部负载均衡器的 TLS 设置，你可以跳过此步骤。
仅在使用 Rancher 生成的证书（ingress.tls.source=rancher）或 Let’s Encrypt 颁发的证书（ingress.tls.source=letsEncrypt）时，才需要安装 cert-manager。
# 如果你手动安装了CRD，而不是在 Helm 安装命令（下面最后一条安装命令）中添加了 `--set installCRDs=true` 选项，你应该在升级 Helm Chart 之前升级 CRD 资源。sudo kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/&lt;版本号&gt;/cert-manager.crds.yaml# 添加 Jetstack Helm 仓库sudo helm repo add jetstack https://charts.jetstack.io# 更新本地 Helm Chart 仓库缓存sudo helm repo update# 安装 cert-manager Helm Chartsudo helm install cert-manager jetstack/cert-manager \  --namespace cert-manager \  --create-namespace \  --set installCRDs=true \  --kubeconfig /etc/rancher/k3s/k3s.yaml

这里可能要等个一两分钟
sudo kubectl get pods --namespace cert-manager
[abc@server1 ~]$ sudo kubectl get pods --namespace cert-managerNAME                                       READY   STATUS    RESTARTS   AGEcert-manager-7ccbc46c67-w6bpt              1/1     Running   0          118scert-manager-cainjector-655bb66698-gsqm6   1/1     Running   0          118scert-manager-webhook-586666dcd7-mhcmn      1/1     Running   0          118s
如果要卸载就用下面的命令
helm uninstall cert-manager --namespace cert-managerkubectl delete namespace cert-manager
根据你选择的证书选项，通过 Helm 安装 Rancher
日期：2025年6月30日
目前他会用到的进行过是rancher/rancher:v2.11.3但是拉去很慢。那你就用下面的命令，后面如果更新了，我就不知道了，下面是我自己构建的镜像，如果版本变量，你就自己构建镜像，然后自己打tag就行了
sudo docker pull registry.cn-guangzhou.aliyuncs.com/qianyios/rancher:v2.11.3sudo docker rmi rancher/rancher:v2.11.3sudo docker tag registry.cn-guangzhou.aliyuncs.com/qianyios/rancher:v2.11.3 rancher/rancher:v2.11.3
不同的证书配置需要使用不同的 Rancher 安装命令。
但是，无论证书如何配置，Rancher 在 cattle-system 命名空间中的安装名称应该总是 rancher。

测试和开发：
这个安装 Rancher 的最终命令需要一个将流量转发到 Rancher 的域名。如果你使用 Helm CLI 设置概念证明，则可以在传入 hostname 选项时使用伪域名。伪域名的一个例子是 &lt;IP_OF_LINUX_NODE&gt;.sslip.io，这会把 Rancher 暴露在它运行的 IP 上。生产安装中要求填写真实的域名。

这里就用Rancher 生成的证书的方式，其他的方式需要自行访问官网根据你选择的证书选项，通过 Helm 安装 Rancher
#添加 Rancher 的 Helm 仓库sudo helm uninstall rancher --namespace cattle-systemsudo helm repo add rancher-stable https://releases.rancher.com/server-charts/stablesudo helm repo update
域名安装方式
默认情况是使用 Rancher 生成 CA，并使用 cert-manager 颁发用于访问 Rancher Server 接口的证书。
由于 rancher 是 ingress.tls.source 的默认选项，因此在执行 helm install 命令时，我们不需要指定 ingress.tls.source。

将 hostname 设置为解析到你的负载均衡器的 DNS 名称。
将 bootstrapPassword 设置为 admin 用户独有的值。
如果你需要安装指定的 Rancher 版本，使用 --version 标志，例如 --version 2.7.0。
对于 Kubernetes v1.25 或更高版本，使用 Rancher v2.7.2-v2.7.4 时，将 global.cattle.psp.enabled 设置为 false。对于 Rancher v2.7.5 及更高版本来说，这不是必需的，但你仍然可以手动设置该选项。

你要自行更改域名
sudo helm install rancher rancher-stable/rancher \  --namespace cattle-system \  --create-namespace \  --set hostname=qianyios.top \  --set bootstrapPassword=admin \  --set global.cattle.psp.enabled=false
如果你安装的是 alpha 版本，Helm 会要求你在安装命令中添加 --devel 选项：

如果你希望使用域名访问 Rancher，可以在宿主机上配置 hosts 文件，并将 Helm 安装命令中的 hostname 参数改为域名。
NodePort（本实验用这个）
如果你不想配置域名，也可以通过配置 Kubernetes 的 NodePort 或 LoadBalancer 来访问 Rancher。
sudo helm install rancher rancher-stable/rancher \  --namespace cattle-system \  --create-namespace \  --set hostname=192.168.48.200 \  --set bootstrapPassword=admin \  --set global.cattle.psp.enabled=false \  --set ingress.enabled=false \  --set service.type=NodePort
sudo kubectl get pods,svc -n cattle-system

Rancher的访问地址就是https://192.168.48.200:32684
LoadBalancer

如果你的 Kubernetes 环境支持 LoadBalancer，可以将 service.type 设置为 LoadBalancer：

sudo helm install rancher rancher-stable/rancher \  --namespace cattle-system \  --create-namespace \  --set hostname=192.168.48.200 \  --set bootstrapPassword=admin \  --set global.cattle.psp.enabled=false \  --set ingress.enabled=false \  --set service.type=LoadBalancer
等待 Rancher 运行：
kubectl -n cattle-system rollout status 
[root@server1 ~]# kubectl -n cattle-system rollout status deploy/rancherdeployment &quot;rancher&quot; successfully rolled out[root@server1 ~]#
Rancher Chart 有许多选项，用于为你的具体环境自定义安装。以下是一些常见的高级方案：

HTTP 代理
私有容器镜像仓库
外部负载均衡器上的 TLS 终止

如需获取完整的选项列表，请参见 Chart 选项。
验证 Rancher Server 是否部署成功
kubectl -n cattle-system get deploy rancher
[root@server1 ~]# kubectl -n cattle-system get deploy rancherNAME      READY   UP-TO-DATE   AVAILABLE   AGErancher   3/3     3            3           36m[root@server1 ~]#
DESIRED 和 AVAILABLE的个数应该相同。
页面访问


设置中文

添加已有集群



未完待续

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>Samba服务器实战</title>
    <url>/posts/a8a56b19/</url>
    <content><![CDATA[
Samba服务器实战
Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置“NetBIOS over TCP/IP”使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。
主机拓扑



主机名
os
ip
内存
硬盘




qianyios
Openeuler22.03LTS
192.168.48.101
2G
100G



安装Samba
dnf  install -y samba#关闭防火墙systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0
Samba共享服务的匿名访问
配置文件
samba服务器最主要的配置文件其实只有一个，就是/etc/samba/samb.conf，这个配置文件可以分为两个部分，一个部分是全局参数，一部分是共享资源相关参数。
vim /etc/samba/smb.conf
先取消[homes]、[printers]的项目，添加[share]项目如下
[global]        #与主机名相关的设置        #工作组名称        workgroup = SAMBA        security = user        passdb backend = tdbsam        printing = cups        printcap name = cups        load printers = yes        cups options = raw        ##添加此项，开启匿名用户访问        map to guest = Bad User        include = /etc/samba/usershares.conf[share]	#设置共享路径        path = /abc         ##公共访问	 public=yes	 ##能够访问        browseable=yes        ##写权限        writable=yes        ##设置权限        create mask=0644        directory mask=0755
创建共享路径，并给权限
mkdir /abcchmod 777 /abcsystemctl enable --now smb.service#linux创建测试文件,客户端查看echo &quot;text&quot; &gt;&gt; /abc/test.txt
文件夹地址栏输入\192.168.48.101\share,他会提示你输入用户和密码，用户名是nobody，密码不用输，然后就客户端就可以看见linux创建的测试文件

客户端创建文件夹，linux查看


Samba共享服务的用户身份验证
配置文件
vim /etc/samba/smb.conf
[global]        #与主机名相关的设置        #工作组名称        workgroup = SAMBA        security = user        passdb backend = tdbsam        printing = cups        printcap name = cups        load printers = yes        cups options = raw        ##添加此项，开启匿名用户访问       ## map to guest = Bad User   #（删除匿名访问）        include = /etc/samba/usershares.conf[share]	#设置共享路径        path = /abc        ##公共访问        # public=yes   #（删除公共访问）         ##能够访问        browseable=yes        ##写权限        #writable=yes  #（删除写入权限）        ##设置权限        create mask=0644        directory mask=0755        ##允许访问的用户        valid users=qianyios, qianyios1        ##允许写入的用户        write list=qianyios
创建smb用户
useradd qianyiosuseradd qianyios1smbpasswd -a qianyios#有以下提示New SMB password:    ##设置密码Retype new SMB password:   ##确认密码Added user qianyios.#qianyios1也是这样的操作smbpasswd -a qianyios1

列出smb用户列表
pdbedit -L

#重启systemctl restart smb.service 
用linux的smb客户端进行测试
dnf install -y samba-client


刚好根据前面的配置文件
##允许访问的用户valid users=qianyios, qianyios1##允许写入的用户write list=qianyios
qianyios可创建文件qianyios1不可以创建，但是可以读取文件
windows客户的测试
由于之前做匿名测试连接
要在cmd清理网络驱动器缓存
net use * /del


在qianyios用户下可以创建文件夹

用qianyios1试一下

可查看文件但不能创建文件

Samba共享服务的账户名映射（账户别名登录）
配置映射文件和Samba配置文件
cat &gt; /etc/samba/smbusers &lt;&lt;&quot;EOF&quot;qianyios = qyosqianyios1 = qyos1EOF
vim /etc/samba/smb.conf#添加以下内容在对应位置username map = /etc/samba/smbusers

重启服务
systemctl restart smb.service
windows客户端测试
cmd清理缓存
net use * /del

qyos可以登入

qyos1也可以登入

Samba共享服务的访问控制列表
禁止某个网段访问
hosts deny=192.168.48.  ##添加拒绝192.168.48段访问share
或者如果你想允许除了192.168.48.0/24之外的所有主机访问：
hosts allow = ALL EXCEPT 192.168.48.
vim /etc/samba/smb.conf
[share]        #设置共享路径        path = /abc        ##公共访问        # public=yes   #（删除公共访问）         ##能够访问        browseable=yes        ##写权限        #writable=yes  #（删除写入权限）        ##设置权限        create mask=0644        directory mask=0755        ##允许访问的用户        valid users=qianyios,qianyios1        ##允许写入的用户        write list=qianyios        ##添加拒绝192.168.48段访问share	 hosts deny=192.168.48.  
##重启Samba服务systemctl restart smb.service  
windows就不测试了用linux的smb客户端来测试一下
smbclient //192.168.48.101/share -U qyos

我们本机是192.168.48.101的，因为禁用了192.168.48.0/24的网段访问，所以都访问不了
将samba挂载到linux使用
记得取消的禁止访问哦
#创建挂载点mkdir -p /opt/share#安装附属yum install cifs-utils  -y#将共享文件夹挂载到挂载点mount.cifs //192.168.48.101/share /opt/share -o username=qianyiosdf -hls /opt/share

已挂载成功

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Samba</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 24.04.02 LTS 初始化安装</title>
    <url>/posts/14363/</url>
    <content><![CDATA[
Ubuntu 24.04.02 LTS 初始化安装
镜像下载
桌面版：ubuntu-24.04.2-desktop-amd64.iso
本次实验选用的是桌面版
使用的虚拟化软件 VMware Workstation
创建虚拟机



加装镜像

先别启动，接下来设置网络
配置NAT网卡

开启虚拟机安装系统
启动之后，会有一个黑色界面有一个选项是Try or install ubuntu默认是第一个，直接回车就行了







这是一个终端工具，接下来我就不在这里运行了，我会给出代码，你照着在上面那张图运行就行了
设置root用户密码

#允许root用户远程登入sed -i &#x27;/^#PermitRootLogin prohibit-password/s/^#//&#x27; /etc/ssh/sshd_configsed -i &#x27;/^PermitRootLogin/s/prohibit-password/yes/&#x27; /etc/ssh/sshd_config
配置静态ip
直接去那个终端运行就行了，我不截图了
安装必要工具
sudo apt-get install network-manager openssh-server vim inetutils-ping net-tools -y
查看需要配置的网卡，输入
ip a

vim /etc/netplan/01-network-manager-all.yaml
# Let NetworkManager manage all devices on this systemnetwork:  ethernets:    ens33:      addresses: [192.168.48.128/24]      dhcp4: false      nameservers:          addresses: [192.168.48.2, 114.114.114.114]      routes:        - to: default          via: 192.168.48.2  version: 2  renderer: NetworkManager

这个ip192.168.48.128最后一位128你随意设置，192.168.48.这是网段对应前面配置NAT网卡你的网段，自行修改，网关（routes）也是
最后按esc，然后按shift+冒号键，输入wq保存退出
netplan apply

静态ip已经配置好了
关闭防火墙
1. 查看防火墙状态：
要查看 Ubuntu 中 ufw 防火墙的状态，可以执行以下命令：
sudo ufw status
这将显示当前防火墙规则的状态，包括是否启用和允许的规则。
2. 开启防火墙：
如果防火墙没有启用，可以使用以下命令来启用 ufw 防火墙：
sudo ufw enable
启用防火墙后，它将按照默认规则开始工作，通常会拒绝所有传入连接，但允许所有传出连接。
3. 关闭防火墙：
要关闭 ufw 防火墙，可以执行以下命令：
sudo ufw disable
关闭防火墙后，所有传入和传出的连接将被允许，不再受到防火墙的限制。
4. 永久关闭防火墙：
如果想永久关闭 ufw 防火墙，可以执行以下步骤：


停止 ufw 服务：
sudo systemctl stop ufw


禁用 ufw 服务的自动启动：
sudo systemctl disable ufw --now


重启系统，以确保防火墙不会在系统启动时重新启用。


设置阿里源
全部复制粘贴就行了
cat &gt;/etc/apt/sources.list&lt;&lt;&quot;EOF&quot;deb https://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ noble main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ noble-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ noble-updates main restricted universe multiverse# deb https://mirrors.aliyun.com/ubuntu/ noble-proposed main restricted universe multiverse# deb-src https://mirrors.aliyun.com/ubuntu/ noble-proposed main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiversedeb-src https://mirrors.aliyun.com/ubuntu/ noble-backports main restricted universe multiverseEOFsudo apt-get update
设置模板
进行关机
sudo poweroff


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/posts/24229/</url>
    <content><![CDATA[
Shell
概述
Shell是一个命令行解释器，他接收应用程序/用户命令，然后调用操作系统内核

Shell还是一个功能相当强大的编辑语言，易编写，易调试，灵活性强。
Shell解析器
Linux提供的Shell解析器有6种：
[root@Shell ~]# cat /etc/Shells/bin/sh/bin/bash/usr/bin/sh/usr/bin/bash/bin/tcsh/bin/csh
bash和sh的关系是
[root@Shell ~]# ll /bin/ | grep bash-rwxr-xr-x. 1 root root     964536 4月   1 2020 bashlrwxrwxrwx. 1 root root          4 9月  28 07:56 sh -&gt; bash软连接
Centos默认的解析器是bash
[root@Shell ~]# echo $Shell/bin/bash
Shell脚本入门
脚本格式
脚本以#!/bin/bash开头（指向解析器）
第一个Shell脚本：helloworld
需求：创建一个Shell脚本，输出helloworld
实例操作：
[root@Shell ~]# mkdir datas          ---创建一个脚本文件夹[root@Shell ~]# cd datas/            ---以后所有脚本放在这[root@Shell datas]# touch helloworld.sh[root@Shell datas]# vi helloworld.sh#!/bin/bashecho &quot;helloworld  严千屹&quot;~[root@Shell datas]# sh helloworld.sh        ---相对路径helloworld  严千屹[root@Shell ~]# bash datas/helloworld.sh    ---绝对路径helloworld  严千屹#上面都是bash和sh帮你执行脚本，脚本本身不需要执行权限。#下面本质是脚本需要自己执行，所以需要执行权限[root@Shell datas]# ./helloworld.sh-bash: ./helloworld.sh: 权限不够[root@shell datas]# chmod 777 helloworld.sh   ---给予权限[root@shell datas]# ./helloworld.shhelloworld  严千屹
第二个Shell脚本：多命令处理
需求：
在/root/datas/目录下创建一个qianyi.txt,在 qianyi.txt 文件中增加“qianyios”
[root@shell datas]# touch qy.sh[root@shell datas]# vi qy.sh#!/bin/bashcd /root/datas/touch qianyi.txtecho &quot;qianyios&quot; &gt;&gt; qianyi.txt[root@shell datas]# bash qy.sh#执行完成后会出现qianyi.txt[root@shell datas]# ll总用量 12-rwxrwxrwx 1 root root 43 1月  25 17:06 helloworld.sh-rw-r--r-- 1 root root  9 1月  25 17:22 qianyi.txt-rw-r--r-- 1 root root 76 1月  25 17:22 qy.sh[root@shell datas]# cat qianyi.txtqianyios
Shell中的变量
常用的系统变量
​	$HOME   $PWD   $SHELL  $USER等
实例操作
查看系统变量的值
[root@shell datas]# echo $HOME/root显示家目录
显示当前Shell中所有的变量：set
[root@shell datas]# setABRT_DEBUG_LOG=/dev/nullBASH=/usr/bin/bashBASH_ALIASES=()BASH_ARGC=()BASH_ARGV=()BASH_CMDS=()......
自定义变量
基本语法

定义变量：变量=值
撤销变量：unset 变量
声明静态变量：readonly 变量   注意不能unset

变量定义规则

变量名称可以有字母，数字和下划线组成，但是不能以数字开头，环境变量名建议全部大写
等号两侧不能有空格
在bash中，变量默认类型都是字符串类型，无法直接进行数值运算
变量的值如果有空格，需要使用双引号或单引号括起来

实例操作
#自定义变量[root@shell ~]# QY=qianyi[root@shell ~]# echo $QYqianyi[root@shell ~]# QY=&quot;qian yi&quot;[root@shell ~]# echo $QYqian yi变量为空和未定义变量是两个不同的概念[root@shell ~]# echo $age      ---未定义[root@shell ~]# age=&quot;&quot;[root@shell ~]# echo $age      ---已定义#两个没办法辨认[root@shell ~]# set -u        ---调用为声明变量会报错[root@shell ~]# echo $add-bash: add: unbound variable[root@shell ~]# add=123[root@shell ~]# echo $add123#删除变量  不需要加$add[root@shell ~]# echo $add123[root@shell ~]# unset add[root@shell ~]# echo $add-bash: add: unbound variable
环境变量

环境变量设置

[root@shell ~]# export qyage=&quot;18&quot;#使用export声明的变量即是环境变量

环境变量查询  set可以查看所有变量，env只能查看环境变量

[root@shell ~]# env | grep qyageqyage=18

系统默认环境变量

[root@shell ~]# envXDG_SESSION_ID=10HOSTNAME=shellTERM=xtermSHELL=/bin/bashHISTSIZE=1000qyage=18

PATH变量：系统查找命令的路径

先查询下PATH环境变量的值：
[root@shell ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
PATH 变量的值是用“:”分割的路径，这些路径就是系统查找命令的路径。也就是说当我们输入了一个程序名，如果没有写入路径，系统就会到 PATH 变量定义的路径中去寻找，是否有可以执行的程序。如果找到则执行，否则会报“命令没有发现”的错误。
那么是不是我们把自己的脚本拷贝到 PATH 变量定义的路径中，我们自己写的脚本也可以不输入路径而直接运行呢?
[root@shell ~]# cp datas/helloworld.sh /usr/bin/[root@shell ~]# helloworld.shhelloworld  严千屹[root@shell ~]# rm -rf /usr/bin/helloworld.sh[root@shell ~]# helloworld.sh-bash: /usr/bin/helloworld.sh: 没有那个文件或目录
那么我们是不是可以修改 PATH变量的值，而不是把程序脚本复制到/bin/目录中。当然是可以的,我们通过变量的叠加就可以实现了:
[root@shell ~]# PATH=&quot;$PATH&quot;:/root/datas[root@shell ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/datas[root@shell ~]# helloworld.shhelloworld  严千屹
PS1变量：命令提示符设置
PS1是一个很有意思的变量，是用来定义命令行的提示符，可以安装我们自己的需求来定义自己喜欢的提示符。PS1可以支持以下这些选项：
\d ：#代表日期，格式为weekday month date，例如：&quot;Mon Aug 1&quot;   \H ：#完整的主机名称。   \h ：#仅取主机的第一个名字。 \t ：#显示时间为24小时格式，如：HH：MM：SS   \T ：#显示时间为12小时格式   \A ：#显示时间为24小时格式：HH：MM   \u ：#当前用户的账号名称   \v ：#BASH的版本信息   \w ：#完整的工作目录名称。家目录会以 ~代替   \W ：#利用basename取得工作目录名称，所以只会列出最后一个目录 \# ：#下达的第几个命令   \$ ：#提示字符，如果是root时，提示符为：# ，普通用户则为：$  
格式 PS1=&#x27;[ ]\$ &#x27;     \$空格&#x27;  有个空格  一定要单引号
[root@shell ~]# echo $PS1[\u@\h \W]\$[root@shell ~]# PS1=&#x27;[\u@\t \w]\$ &#x27;[root@20:14:51 ~]# cd datas/[root@20:14:54 ~/datas]#
位置参数变量



位置参数变量
作用




$n
表示第n个参数，$1则表示第一个参数，$2表示第二个参数……如果有10以上的参数用${10}


$0
当前程序的名称，也就是命令本身。


$*
传递给程序的所有参数组成的字符串（参数）。


$@
以“参数1”、“参数2”……保存所有的参数。


$#
代表命令行中所有参数个数


$?
上一个代码或者Shell程序在Shell中退出的情况，如果正常退出则返回0，否则返回非0值。


$$
本程序的（进程ID）PID。


$!
上一个命令的PID。



实例操作
[root@shell datas]# vi count.sh#!/bin/basha=$1b=$2sum=$(($a+$b))#$((  ))双小括号才能进行数字运算，$( )运行命令echo $sumecho $0[root@shell datas]# chmod 755 count.sh[root@shell datas]# ./count.sh 22 3355./count.sh       #$0输出命令本身
[root@shell datas]# vi para.sh#!/bin/bashecho &quot;\$* is $*&quot;echo &quot;\$@ is $@&quot;echo &quot;\$# is $#&quot;[root@shell datas]# chmod 777 para.sh[root@shell datas]# ./para.sh 11 22 33 44$* is 11 22 33 44   #&#123;11 22 33 44&#125;看成一个整体 $@ is 11 22 33 44   #&#123;11&#125;,&#123;22&#125;,&#123;33&#125;,&#123;44&#125;$# is 4             #个数验证过程[root@shell datas]# vi para2.sh#!/bin/bash#for循环，有多少次出现多少次for i in  &quot;$*&quot;      do        echo $i      doneecho &quot;------------------&quot;for y in  &quot;$@&quot;        do         echo $y      done[root@shell datas]# ./para2.sh 11 22 33 4411 22 33 44             #整体，循环1次------------------11                      #4个，循环4次223344
预定义变量



$?
最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行:如果这个变量的值为非 0(具体是哪个数，由命令自己来决定)，则证明上一个命令执行不正确了。




$$
当前进程的进程号(PID)


$!
后台运行的最后一个进程的进程号(PID)



[root@shell ~]# lsanaconda-ks.cfg  bin  datas  repo.bak[root@shell ~]# echo $?0[root@shell ~]# sjkdhasjkd-bash: sjkdhasjkd: 未找到命令[root@shell ~]# echo $?127
read键盘接收
定义
[root@shell datas]# read --help
-bash: read: --: 无效选项
read: 用法:   read [选项] [变量名]
read [-ers]
[-a 数组]
[-d 分隔符]
[-i 缓冲区文字]
[-n 读取字符数]
[-N 读取字符数]
[-p 提示符]
[-t 超时]
[-u 文件描述符]
[名称 …]名称指的是变量名
[root@shell datas]# vi count2.sh#!/bin/bashread -t 30 -p &quot;请输入第一个数字：&quot; num1read -t 30 -p &quot;请输入第二个数字：&quot; num2sum=$(($num1+$num2))echo $sum[root@shell datas]# chmod 777 count2.sh[root@shell datas]# ./count2.sh请输入第一个数字：1请输入第二个数字：12#########前者需要回车，下面的不需要回车[root@shell datas]# vi count2.sh#!/bin/bashread -n 1 -t 30 -p &quot;请输入第一个数字：&quot; num1   #-n 1 限制输入1个字符数echo -e &quot;\n&quot;read -s -t 30 -p &quot;请输入第二个数字：&quot; num2     #-s 是隐藏echo -e &quot;\n&quot;sum=$(($num1+$num2))echo $sum[root@shell datas]# ./count2.sh请输入第一个数字：1请输入第二个数字：         #我这里输入的是1213
declare声明变量类型
定义
既然所有变量的默认类型是字符串型，那么只要我们把变量声明为整数型不就可以运算了吗？

-:给变量设定类型属性
+:取消变量的类型属性
-a:将变量声明为数组型
-i:将变量声明为整数型(integer)
-x:将变量声明为环境变量
-r:将变量声明为只读变量，注意，一旦设置为只读变量，既不能修改变量的值，也不能删除变量，甚至不能通过+r取消只读属性
-p:显示指定变量的被声明的类型、

声明数值进行运算
[root@shell datas]# a=1[root@shell datas]# b=2[root@shell datas]# c=$a+$b[root@shell datas]# echo $c1+2[root@shell datas]# declare -i c=$a+$b      #声明整数类型才可以进行数值运行[root@shell datas]# echo $c3
数组
[root@shell datas]# declare -a name[0]=&quot;qy&quot;  #声明数组[root@shell datas]# name[1]=&quot;qy1&quot;   #也可以不用declare，就知道你在声明数组[root@shell datas]# name[2]=&quot;qy2&quot;[root@shell datas]# echo $&#123;name[*]&#125;qy qy1 qy2
环境变量
两个声明变量作用一样[root@shell datas]# export test[root@shell datas]# declare -x test=&quot;123&quot;
只读属性
注意，一旦设置为只读变量，既不能修改变量的值，也不能删除变量，甚至不能通过+r取消只读属性
[root@shell datas]# declare -r test        #添加只读属性[root@shell datas]# declare -p......declare -rx test=&quot;123&quot;[root@shell datas]# echo $test123[root@shell datas]# test=1           #无法改值-bash: test: 只读变量[root@shell datas]# unset test        #无法删除变量-bash: unset: test: 无法反设定: 只读 variable[root@shell datas]# declare +r test      #无法删除属性-bash: declare: test: 只读变量
不过好在这个变量是命令行声明的，所以重启或重新登入，这个变量就会消失
数值运算
使用expr或let数值运算工具
[root@shell ~]# aa=11[root@shell ~]# bb=22[root@shell ~]# dd=$(expr $aa + $bb)[root@shell ~]# echo $dd33#dd的值是aa和bb的和。注意“+”号两侧比有空格#如果是let呢[root@shell ~]# let e=$aa+$bb[root@shell ~]# echo $e33
使用双小括号 $((运算式子))  或$[运算式子] 的方式运算 （看个人习惯，看你喜欢用哪种）

区分单小括号$(  )调用的是系统命令  双小括号是计算数学运算的

[root@shell ~]# aa=11[root@shell ~]# bb=22[root@shell ~]# ff=$(($aa+$bb))[root@shell ~]# echo $ff33[root@shell ~]# gg=$[$aa+$bb][root@shell ~]# echo $gg33
Shell常用运算符



优先级
运算符
说明




13
-，+
单目负，单目正


12
!,~
逻辑非，按位取反或补码


11
*,/,%
乘、除、取模


10
+,-
加、减


9
&lt;&lt;,&gt;&gt;
按位左移，按位右移


8
&lt; = ,&gt; = ,&lt; , &gt;
小于或等于、大于或等于、小于、大于


7
==, !=
等于


6
&amp;
按位与


5
^
按位异或


4
|
按位或


3
&amp;&amp;
逻辑与


2
||
逻辑或


1
=,=,-=,=,/=,%=,&amp;=,^=,|=,&lt;&lt;=,&gt;&gt;=
赋值，运算且赋值



取模运算
[root@shell ~]# bb=$((14%5))[root@shell ~]# echo $bb4#14不能被5整除，余数是4
逻辑与
[root@shell ~]# cc=$((1&amp;&amp;0))[root@shell ~]# echo $cc0逻辑与运算只有想与的两边都是1，与的结果才是1，否则与的结果是0
四则运算练习
[root@shell ~]# vi count3.sh#!/bin/bashvaule=$(($1 $2 $3))echo $vaule[root@shell ~]# ./count3.sh 11 + 1122[root@shell ~]# ./count3.sh 11 / 111
但是上面会有bug不能用
[root@shell datas]# vi count4.sh#!/bin/bashread -t 30 -p &quot;please input num1:&quot; num1read -t 30 -p &quot;please input num2:&quot; num2read -n 1 -t 30 -p &quot;please inpute operato[+-*/]:&quot; operecho -e “\n”[ &quot;$oper&quot; == &quot;+&quot; ] &amp;&amp; echo &quot;$(($num1 + $num2))&quot; &amp;&amp; exit[ &quot;$oper&quot; == &quot;-&quot; ] &amp;&amp; echo &quot;$(($num1 - $num2))&quot; &amp;&amp; exit[ &quot;$oper&quot; == &quot;*&quot; ] &amp;&amp; echo &quot;$(($num1 * $num2))&quot; &amp;&amp; exit[ &quot;$oper&quot; == &quot;/&quot; ] &amp;&amp; echo &quot;$(($num1 / $num2))&quot; &amp;&amp; exitecho &quot;please input right oper&quot;[空格&quot;$oper&quot;空格==空格&quot;+&quot;空格]
变量的测试与内容置换



变量置换方式
变量y没有设置
变量y为空值
变量y设置值




x=${y-新值}
x= 新值
x 为空
x=$y


x=${y:-新值}
x= 新值
x= 新值
x=$y


x=${y+新值}
x 为空
x= 新值
x=新值


x=${y:+新值}
x 为空
x 为空
x=新值


x=${y=新值}
x= 新值
x 为空
x=$y


同上
y= 新值
y 值不变
y值不变


x=${y:=新值}
x= 新值
X= 新值
x=$y


同上
y= 新值
y= 新值
y值不变


x=${y?新值}
新值输出到标准错误输出（屏幕）
x 为空
x=$y


x=${y:?新值}
新值输出到标准错误输出
新值输出到标准错误输出
x=$y



假设我们要测b变量，现在b变量我们从来没有设置过
以下可以判断变b不存在[root@shell ~]# x=$&#123;b-new&#125;[root@shell ~]# echo $xnew以下可以判断是否为空[root@shell ~]# b=&quot;&quot;[root@shell ~]# x=$&#123;b-new&#125;[root@shell ~]# echo $x以下可以判断是否有值[root@shell ~]# b=123[root@shell ~]# x=$&#123;b-new&#125;[root@shell ~]# echo $x123
环境变量配置文件
1、让环境变量生效的命令  source 配置文件  或  . 配置文件
2、环境变量配置文件
登录时生效的环境变量配置文件
在 Linux 系统登录时主要生效的环境变量配置文件有以下五个:
/etc/profile
/etc/profile.d/*.sh
/etc/bashrc
~/.bash_profile
~/.bashrc
写在前三个的配置文件对所有用户生效，写在最后两个对当前用户生效
基础正则
基础正则表达式



元字符
作	用




*
前一个字符匹配 0 次或任意多次。


.
匹配除了换行符外任意一个字符。


^
匹配行首。例如：^hello 会匹配以 hello 开头的行。


$
匹配行尾。例如：hello&amp;会匹配以 hello 结尾的行。


[]
匹配中括号中指定的任意一个字符，只匹配一个字符。例如：[aoeiu] 匹配任意一个元音字母，[0-9] 匹配任意一位数字，[a-z][0-9]匹配小写字和一位数字构成的两位字符。


[^]
匹配除中括号的字符以外的任意一个字符。例如：[^0-9] 匹配任意一位非数字字符，[^a-z] 表示任意一位非小写字母。


\
转义符。用于取消讲特殊符号的含义取消。


{n}
表示其前面的字符恰好出现 n 次。例如：[0-9]{4} 匹配 4 位数字，[1][3-8][0-9]{9} 匹配手机号码。


{n,}
表示其前面的字符出现不小于 n 次。例如： [0-9]{2,} 表示两位及以上的数字。


{n,m}
表示其前面的字符至少出现n 次，最多出现m 次。例如：[a-z]{6,8}匹配 6 到 8 位的小写字母。



~/.bashrc 文件中建立这个别名：
实现grep能显示颜色
echo &quot;alias grep=\&#x27;grep --color=auto\&#x27;&quot; &gt;&gt; /root/.bashrc 
建立练习文档
[root@shell datas]# vi test.txtMr. Li Ming said:he was the most honest man.123despise him.googlegoooooglegglegoglesoooooidBut since Mr. shen Chao came, he never saaaid those words. 5555nice!because,actuaaaally,Mr. Shen Chao is the most honest manLater,Mr. Li ming soid his hot body.hello ishello was
练习*号
# a*意思是最少包含0个a或无数个a[root@shell datas]# grep &quot;a*&quot; test.txtMr. Li Ming said:he was the most honest man.123despise him.But since Mr. shen Chao came, he never saaaid those words. 5555nice!because,actuaaaally,Mr. Shen Chao is the most honest manLater,Mr. Li ming soid his hot body.# aa*意思是最少包含1个a或无数个a[root@shell datas]# grep &quot;aa*&quot; test.txtMr. Li Ming said:he was the most honest man.But since Mr. shen Chao came, he never saaaid those words. 5555nice!because,actuaaaally,Mr. Shen Chao is the most honest manLater,Mr. Li ming soid his hot body.# aaa*意思是最少包含2个a或无数个a[root@shell datas]# grep &quot;aaa*&quot; test.txtBut since Mr. shen Chao came, he never saaaid those words. 5555nice!because,actuaaaally,grep &quot;a&quot; count4.sh   也行
练习 . 号   正则表达式“.”只能匹配一个字符，这个字符可以是任意字符
[root@shell datas]# grep &quot;s..d&quot; test.txtMr. Li Ming said:Later,Mr. Li ming soid his hot body.
[root@shell datas]# grep “s.*d” test.txt
Mr. Li Ming said:
But since Mr. shen Chao came, he never saaaid those words. 5555nice!
Later,Mr. Li ming soid his hot body.
“[]”会匹配中括号中指定任意一个字符，注意只能匹配一个字符。比如[ao]要不会匹配一个 a
字符，要不会匹配一个 o 字符：
[root@shell datas]# grep &quot;s[ao]id&quot; test.txtMr. Li Ming said:Later,Mr. Li ming soid his hot body.[root@shell datas]# grep &quot;[0-9]&quot; test.txt123despise him.But since Mr. shen Chao came, he never saaaid those words. 5555nice!
扩展正则



扩展元字符
作	用




+
前一个字符匹配 1 次或任意多次。如“go+gle”会匹配“gogle”、“google”或“gooogle”，当然如果“o”有更多个，也能匹配。


？
前一个字符匹配 0 次或 1 次。如“colou?r”可以匹配“colour”或“color”。


|
匹配两个或多个分支选择。如“was|his”会匹配既包含“was”的行，也匹配包含“his”的行。


（）
匹配其整体为一个字符，即模式单元。可以理解为由多个单个字符组成的大字符。如“(dog)+”会匹配“dog”、“dogdog”、“dogdogdog”等，因为被（）包含的字符会当成一个整体。但“hello （world|earth）”会匹配“hello world”及“hello earth”。



grep 参数列表

-i : 忽略大小写
-v : 查找不包含指定字符串的所有行（取反）
-r : 递归查找文件夹下的文件
-n : 显示匹配行所在位置（行号）
-l : 只显示包含搜索字符串的文件名，而非每个匹配行
-c : 统计符合条件的行数
-e pattern : 指定要查找的正则表达式模式
-w : 匹配整个单词，即只匹配独立的单词而非单词内的字符
-A num : 输出匹配行后 N 行内容
-B num : 输出匹配行前 N 行内容
-C[num] 或者 --context[=num]: 输出匹配行前后总共 N 行内容。
--exclude : 排除指定文件类型，多个文件类型用 “,” 隔开

[root@localhost sh]# grep -E &quot;go*gle&quot; test.txtgooglegoooooglegglegogle[root@localhost sh]# grep -E &quot;go+gle&quot; test.txtgooglegoooooglegogle[root@localhost sh]# grep -E &quot;go?gle&quot; test.txtgglegogle[root@localhost sh]# grep -E &quot;go+&quot; test.txtgooglegoooooglegogle[root@localhost sh]# grep -E &quot;g(oo)+&quot; test.txtgooglegooooogle[root@localhost sh]# grep -E &quot;g(ooo)+&quot; test.txtgooooogle[root@localhost sh]# grep -E &quot;hello (was|is)&quot; test.txthello ishello was
匹配邮箱
grep -E &quot;[0-9a-zA-Z_]+@[0-9a-zA-Z_]+(\.[0-9a-zA-Z_]+)&#123;1,3&#125;&quot; test.txt
字符截取和替换命令
[root@localhost ~]# cut [选项] 文件名选项：-f 列号：          提取第几列-d 分隔符：	     按照指定分隔符分割列-c 字符范围：    不依赖分隔符来区分列，而是通过字符范围（行首为 0）来进行字段提取。“n-”表示从第 n 个字符到行尾；“n-m”从第 n 个字符到第 m个字符；“-m”表示从第 1 个字符到第 m 个字符。
测试文件
[root@localhost ~]# cat student.txtID      Name    gender  Mark1       Liming  M       862       Sc      M       903       Tg      M       83用tab键隔开所有列，不要空格
测试
[root@localhost ~]# cut -f 2 student.txtNameLimingScTg#提取多列[root@localhost ~]# cut -f 2,3 student.txtName    genderLiming  MSc        MTg       M##cut 可以按照字符进行提取，需要注意“8-”代表的是提取所有行的第八个字符开始到行尾，而 “10-20”代表提取所有行的第十个字符到第二十个字符，而“-8”代表提取所有行从行首到第八个字符：[root@localhost ~]# cut -c 9- student.txtgender Mark M 8603[root@localhost ~]# cut -c -9 student.txtID Name g1 Liming2 Sc M 903 Tg M 83
awk编程
printf 格式化输出
[root@localhost ~]# printf ‘输出类型输出格式’ 输出内容输出类型：%ns：	输出字符串。n 是数字指代输出几个字符%ni：	输出整数。n 是数字指代输出几个数字%m.nf：	输出浮点数。m 和 n 是数字，指代输出的整数位数和小数位数。如%8.2f代表  共输出 8 位数，其中 2 位是小数，6 位是整数。输出格式：\a:	输出警告声音\b:	输出退格键，也就是 Backspace 键\f:	清除屏幕\n:	换行\r:	回车，也就是 Enter 键\t:	水平输出退格键，也就是 Tab 键\v:	垂直输出退格键，也就是 Tab 键
建立测试文件
vi student.txtID       Name    PHP     Linux   MySQL   Average1        Liming   82      95      86      87.662        Sc        74      96      87      85.663        Tg        99      83      93      91.66
不指定格式输出
[root@localhost ~]# printf &#x27;%s&#x27; $(cat student.txt)IDNamePHPLinuxMySQLAverage1Liming82958687.662Sc74968785.663Tg99839391.66#乱作一锅粥
指定格式输出
[root@localhost ~]# printf &#x27;%s\t %s\t %s\t %s\t %s\t %s\t \n&#x27; $(cat student.txt)ID       Name    PHP     Linux   MySQL   Average1        Liming  82      95      86      87.662        Sc      74      96      87      85.663        Tg      99      83      93      91.66
awk条件
[root@localhost ~]# awk &#x27;条件 1&#123;动作 1&#125; 条件 2&#123;动作 2&#125;…&#x27; 文件名
awk条件（Pattern）
一般使用关系表达式作为条件。这些关系表达式非常多，具体参考表 12-3 所示，例如：
x &gt; 10 判断变量 x 是否大于 10
x == y 判断变量 x 是否等于变量 y
A ~ B	判断字符串 A 中是否包含能匹配 B 表达式的子字符串
A !~ B 判断字符串 A 中是否不包含能匹配 B 表达式的子字符串
动作（Action）：
格式化输出 流程控制语句

awk内置变量

例子：
[root@localhost ~]# awk &#x27;&#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&#x27; student.txt#输出第二列和第六列
假设我要提取根分区/dev/sda1 第五列的使用率[root@localhost ~]# df -hFilesystem               Size  Used Avail Use% Mounted ondevtmpfs                 475M     0  475M   0% /devtmpfs                    487M     0  487M   0% /dev/shmtmpfs                    487M  7.7M  479M   2% /runtmpfs                    487M     0  487M   0% /sys/fs/cgroup/dev/mapper/centos-root   50G  1.5G   49G   3% //dev/mapper/centos-home   47G   33M   47G   1% /home/dev/sda1               1014M  141M  874M  14% /boottmpfs                     98M     0   98M   0% /run/user/0[root@localhost ~]# df -h | grep &quot;/dev/sda1&quot;| awk &#x27;&#123;print $5&#125;&#x27;| cut -d &quot;%&quot; -f 114
Begin
[root@localhost ~]# awk &#x27;BEGIN&#123;printf &quot;11111111\n&quot; &#125; &#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&#x27; student.txt11111111Name    AverageLiming  87.66Sc      85.66Tg      91.66
End
[root@localhost ~]# awk &#x27;END&#123;printf &quot;111111111\n&quot; &#125; &#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&#x27; student.txtName    AverageLiming  87.66Sc      85.66Tg      91.66111111111
假设我想看看平均成绩大于等于 87 分的学员是谁
[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66[root@localhost ~]# cat student.txt | grep -v &quot;Name&quot; | awk &#x27;$6 &gt;= 87&#123;print $2&#125;&#x27;LimingTg

加入了条件之后，只有条件成立动作才会执行，如果条件不满足，则动作则不运行。通过这个实验，大家可以发现，虽然 awk 是列提取命令，但是也要按行来读入的。这个命令的执行过程是这样的：
1） 如果有 BEGIN 条件，则先执行 BEGIN 定义的动作
2） 如果没有 BEGIN 条件，则读入第一行，把第一行的数据依次赋予$0、$1、$2 等变量。其中$0代表此行的整体数据，$1 代表第一字段，$2 代表第二字段。
3） 依据条件类型判断动作是否执行。如果条件符合，则执行动作，否则读入下一行数据。如果没有条件，则每行都执行动作。
4） 读入下一行数据，重复执行以上步骤。

例子 2：[root@localhost ~]# awk &#x27;$2 ~ /Sc/ &#123;printf $6 &quot;\n&quot;&#125;&#x27; student.txt#如果第二字段中输入包含有“Sc”字符，则打印第六字段数据85.66
这里要注意在 awk 中，使用“//”包含的字符串，awk 命令才会查找。也就是说字符串必须用“//”包含，awk 命令才能正确识别。
如果要想让 awk 识别字符串，必须使用“//”包含，例如：
[root@localhost ~]# awk &#x27;/Liming/ &#123;print&#125;&#x27; student.txt1       Liming  82      95      86      87.66#打印 Liming 的成绩
当使用 df 命令查看分区使用情况是，如果我只想查看真正的系统分区的使用状况，而不想查看光盘和临时分区的使用状况，则可以：
[root@localhost ~]# df -h | awk &#x27;/sda[0-9]/ &#123;printf $1 &quot;\t&quot; $5 &quot;\n&quot;&#125; &#x27;/dev/sda1       14%#查询包含有 sda 数字的行，并打印第一字段和第五字段
查看/etc/passwd文件
[root@localhost ~]# useradd user1[root@localhost ~]# useradd user2[root@localhost ~]# cat /etc/passwd | grep &quot;/bin/bash&quot;root:x:0:0:root:/root:/bin/bashuser1:x:1000:1000::/home/user1:/bin/bashuser2:x:1001:1001::/home/user2:/bin/bash[root@localhost ~]# cat /etc/passwd | grep &quot;/bin/bash&quot; |  awk &#x27;&#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;root:x:0:0:root:/root:/bin/bashuser1user2#第一行root好像没有以冒号为分割读取第一列是因为awk 先把第一行数据读取了才进行&#123;FS=&quot;:&quot;&#125;直到上一步之后，才发现要以冒号作为分隔符后面的user1 user2 才正常###所以正确写法是BEGIN &#123;FS=&quot;:&quot;&#125;  在读取数据之前，先执行&#123;FS=&quot;:&quot;&#125;[root@localhost ~]# cat /etc/passwd | grep &quot;/bin/bash&quot; |  awk &#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;rootuser1user2
[root@localhost ~]# cat /etc/passwd | grep &quot;/bin/bash&quot; | awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125; $3==&quot;1000&quot; &#123;print $1&#125;&#x27;user1判断是否相等 要用双＝号
[root@localhost ~]# cat /etc/passwd | grep &quot;/bin/bash&quot; | \&gt; awk &#x27;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;printf $1 &quot;\t&quot; $3 &quot;\t 行号：&quot; NR &quot;\t 字段数：&quot; NF &quot;\n&quot;&#125;&#x27;root    0        行号：1         字段数：7user1   1000     行号：2         字段数：7user2   1001     行号：3         字段数：7#如果我只想看sshd[root@localhost ~]# cat /etc/passwd | awk &#x27;BEGIN &#123;FS=&quot;:&quot;&#125; $1==&quot;sshd&quot; &#123;printf $1 &quot;\t&quot; $3 &quot;\t 行号：&quot;NR &quot;\t 字段数：&quot;NF &quot;\n&quot;&#125;&#x27;sshd    74       行号：20        字段数：7
Sed
sed命令
[root@localhost ~]# sed [选项] ‘[动作]’ 文件名选项：-n：  一般 sed 命令会把所有数据都输出到屏幕，如果加入此选择，则只会把经过 sed 命令处理		的行输出到屏幕。-e：	允许对输入数据应用多条 sed 命令编辑。-f     脚本文件名： 从 sed 脚本中读入 sed 操作。和 awk 命令的-f 非常类似。-r：	在 sed 中支持扩展正则表达式。-i：	用 sed 的修改结果直接修改读取数据的文件，而不是由屏幕输出动作：a \： 追加，在当前行后添加一行或多行。添加多行时，除最后 一行外，每行末尾需要用“\”代表数据未完结。c \： 行替换，用 c 后面的字符串替换原数据行，替换多行时，除最后一行外，每行末尾需用“\”代表数据未完结。i \：插入，在当期行前插入一行或多行。插入多行时，除最后 一行外，每行末尾需要用“\”代表数据未完结。d：删除，删除指定的行。
打印p
[root@localhost ~]# sed 2p student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.661       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66#你会发现第二行多打印了一遍，只有加-n才不会[root@localhost ~]# sed -n &#x27;2p&#x27; student.txt1       Liming  82      95      86      87.66
删除d（删除2到4行）
此操作并不会写入文件中，只是输出的时候删除了
[root@localhost ~]# sed &#x27;2,4d&#x27; student.txtID      Name    PHP     Linux   MySQL   Average[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66若想直接修改读取数据到文件的话加入 -i[root@localhost ~]# sed -i &#x27;2,4d&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average
前追加i
#在第二行前面插入内容[root@localhost ~]# sed &#x27;2i 前面新内容1  \&gt; 前面新内容（大量） 2222222222222222222 &#x27; student.txtID      Name    PHP     Linux   MySQL   Average前面新内容1前面新内容（大量） 22222222222222222221       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66
后追加a
在第二行后追加内容[root@localhost ~]# sed -i &#x27;2a 新内容&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.66新内容2       Sc      74      96      87      85.663       Tg      99      83      93      91.66
替换c
#把2行新内容替换为其他数据[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66[root@localhost ~]# sed &#x27;2c 0 xiaoshan 83 55 11 44.2&#x27; student.txtID      Name    PHP     Linux   MySQL   Average0 xiaoshan 83 55 11 44.22       Sc      74      96      87      85.663       Tg      99      83      93      91.66#我前面是空格，若对齐用\t且\t后没有空格[root@localhost ~]# sed &#x27;2c 0 \txiaos\t83 \t55 \t11 \t44.2&#x27; student.txtID      Name    PHP     Linux   MySQL   Average0       xiaos   83      55      11      44.22       Sc      74      96      87      85.663       Tg      99      83      93      91.66
多命令执行e
[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average前面新内容1前面新内容11       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66##同时删除第二和第三行[root@localhost ~]# sed  -i -e &#x27;2d;3d&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Liming  82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66
替换字符串 s/旧内容/新内容/g
#替换Liming为Lm[root@localhost ~]# sed -i &#x27;s/Liming/Lm/g&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Lm      82      95      86      87.662       Sc      74      96      87      85.663       Tg      99      83      93      91.66#多命令执行，分号隔开[root@localhost ~]# sed -i &#x27;s/Sc/sc1/g; s/Tg/Eg/g&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1       Lm      82      95      86      87.662       sc1     74      96      87      85.663       Eg      99      83      93      91.66#也可以多行执行[root@localhost ~]# sed -i &#x27;s/Sc/sc1/gs/Tg/Eg/g&#x27; student.txt#替换字符串为空值[root@localhost ~]# sed -i &#x27;s/Lm//g&#x27; student.txt[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1                 82      95      86      87.662       sc1     74      96      87      85.663       Eg      99      83      93      91.66
字符串处理命令
sort排序命令
[root@localhost ~]# sort [选项] 文件名选项：-f：	忽略大小写-b：	忽略每行前面的空白部分-n：	以数值型进行排序，默认使用字符串型排序-r：	反向排序-u：	删除重复行。就是 uniq 命令-t：	指定分隔符，默认是分隔符是制表符-k n[,m]： 按照指定的字段范围排序。从第 n 字段开始，m 字段结束（默认到行尾）
#默认按开头字符排序[root@localhost ~]# sort /etc/passwdabrt:x:173:173::/etc/abrt:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinbin:x:1:1:bin:/bin:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologin#反向排序[root@localhost ~]# sort -r /etc/passwduser2:x:1001:1001::/home/user2:/bin/bashuser1:x:1000:1000::/home/user1:/bin/bashtcpdump:x:72:72::/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/sync
指定字段排序
#如UID[root@localhost ~]# sort -t &quot;:&quot; -k 3,3 /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologinuser1:x:1000:1000::/home/user1:/bin/bashuser2:x:1001:1001::/home/user2:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinabrt:x:173:173::/etc/abrt:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologin#你会发现他先排第一位数字1，再排2。、#就是1  12  13  到  2  22 23 并没有123456排下去#所以要加上 -n    -n：以数值型进行排序，默认使用字符串型排序[root@localhost ~]# sort -nt &quot;:&quot; -k 3,3 /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologin
uniq取消重复行
uniq 命令是用来取消重复行的命令，其实和“sort -u”选项是一样的。命令格式如下
[root@localhost ~]# uniq [选项] 文件名选项：-i：	忽略大小写
[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1               82      95      86      87.661               82      95      86      87.662       sc1     74      96      87      85.663       Eg      99      83      93      91.66[root@localhost ~]# uniq student.txtID      Name    PHP     Linux   MySQL   Average1               82      95      86      87.662       sc1     74      96      87      85.663       Eg      99      83      93      91.66
wc统计命令
[root@localhost ~]# wc [选项] 文件名选项：-l：	只统计行数-w：	只统计单词数-m：	只统计字符数
[root@localhost ~]# cat student.txtID      Name    PHP     Linux   MySQL   Average1               82      95      86      87.661               82      95      86      87.662       sc1     74      96      87      85.663       Eg      99      83      93      91.66[root@localhost ~]# wc -l student.txt5 student.txt[root@localhost ~]# wc -w student.txt28 student.txt[root@localhost ~]# wc -m student.txt109 student.txt
条件判断（test命令）

按照文件类型进行判断(test)




测试选项
作	用




-b 文件
判断该文件是否存在，并且是否为块设备文件（是块设备文件为真）


-c 文件
判断该文件是否存在，并且是否为字符设备文件（是字符设备文件为真）


-d 文件
判断该文件是否存在，并且是否为目录文件（是目录为真）


-e 文件
判断该文件是否存在（存在为真）


-f 文件
判断该文件是否存在，并且是否为普通文件（是普通文件为真）


-L 文件
判断该文件是否存在，并且是否为符号链接文件（是符号链接文件为真）


-p 文件
判断该文件是否存在，并且是否为管道文件（是管道文件为真）


-s 文件
判断该文件是否存在，并且是否为非空（非空为真）


-S 文件
判断该文件是否存在，并且是否为套接字文件（是套接字文件为真）



[root@localhost ~]# lsanaconda-ks.cfg  file.txt  file.txtn  netstart.bak  student.txt第一种格式：#-e 判断该文件是否存在（存在为真）[root@localhost ~]# test -e file.txt#输出为0即为真[root@localhost ~]# echo $?0第一种格式：#-e 判断不存在的文件[root@localhost ~]# [ -e abc ][root@localhost ~]# echo $?1#输出为非0即为假
###判断该文件是否存在，并且是否为目录文件[root@localhost ~]# [ -d student.txt ] &amp;&amp; echo yes || echo nono###判断该文件是否存在，并且是否为普通文件[root@localhost ~]# [ -f student.txt ] &amp;&amp; echo yes || echo noyes
###判断文件是否有数据[root@localhost ~]# [ -s abc ] &amp;&amp; echo yes || echo nono[root@localhost ~]# echo 111 &gt;&gt; abc[root@localhost ~]# [ -s abc ] &amp;&amp; echo yes || echo noyes

按照文件权限判断




测试选项
作    用




-r 文件
判断该文件是否存在，并且是否该文件拥有读权限（有读权限为真）


-w 文件
判断该文件是否存在，并且是否该文件拥有写权限（有写权限为真）


-x 文件
判断该文件是否存在，并且是否该文件拥有执行权限（有执行权限为真）


-u 文件
判断该文件是否存在，并且是否该文件拥有  SUID 权限（有 SUID 权限为真）


-g 文件
判断该文件是否存在，并且是否该文件拥有  SGID 权限（有 SGID 权限为真）


-k 文件
判断该文件是否存在，并且是否该文件拥有  SBit 权限（有 SBit 权限为真）



##判断文件是否有写的权限[root@localhost ~]# [ -w abc ] &amp;&amp; echo yes || echo noyes[root@localhost ~]# [ -u abc ] &amp;&amp; echo yes || echo nono##判断文件是否有SUID的权限[root@localhost ~]# chmod u+s abc[root@localhost ~]# [ -u abc ] &amp;&amp; echo yes || echo noyes[root@localhost ~]# lltotal 24-rwSr--r--  1 root root    4 May  2 03:02 abc

两个文件之间进行比较




测试选项
作    用




文件 1 -nt 文件 2
判断文件 1 的修改时间是否比文件 2 的新（如果新则为真）


文件 1 -ot 文件 2
判断文件 1 的修改时间是否比文件 2 的旧（如果旧则为真）


文件 1 -ef 文件 2
判断文件 1 是否和文件 2 的 Inode 号一致，可以理解为两个文件是否  为同一个文件。这个判断用于判断硬链接是很好的方法



##判断两个文件是否是硬链接[root@localhost ~]# ln /root/abc /tmp/abc[root@localhost ~]# ll /tmp/abc-rw-r--r-- 2 root root 4 May  2 03:02 /tmp/abc[root@localhost ~]# [ /root/abc -ef /tmp/abc ] &amp;&amp; echo yes || echo noyes

两个整数之间比较




测试选项
作    用




整数 1 -eq 整数 2
判断整数 1 是否和整数 2 相等（相等为真）


整数 1 -ne 整数 2
判断整数 1 是否和整数 2 不相等（不相等位置）


整数 1 -gt 整数 2
判断整数 1 是否大于整数 2（大于为真）


整数 1 -lt 整数 2
判断整数 1 是否小于整数 2（小于位置）


整数 1 -ge 整数 2
判断整数 1 是否大于等于整数 2（大于等于为真）


整数 1 -le 整数 2
判断整数 1 是否小于等于整数 2（小于等于为真）



-eq: equal : 相等               -ne: not equal : 不相等
-gt: greater than : 大于       -lt: less than : 小于
##判断整数1是否等于整数2[root@localhost ~]# [ 22 -eq 22 ] &amp;&amp; echo yes || echo noyes##判断整数1是否小于整数2[root@localhost ~]# [ 22 -lt 22 ] &amp;&amp; echo yes || echo nono[root@localhost ~]# [ 21 -lt 22 ] &amp;&amp; echo yes || echo noyes

字符串判断




测试选项
作    用




-z 字符串
判断字符串是否为空（为空返回真）


-n 字符串
判断字符串是否为非空（非空返回真）


字串 1 ==字串 2
判断字符串  1 是否和字符串 2 相等（相等返回真）


字串 1 != 字串 2
判断字符串  1 是否和字符串 2 不相等（不相等返回真）



##判断两个字符串相等[root@localhost ~]# aa=11[root@localhost ~]# bb=22[root@localhost ~]# [ &quot;$aa&quot; == 8 ] &amp;&amp; echo yes || echo nono[root@localhost ~]# [ $aa == $bb ] &amp;&amp; echo yes || echo nono[root@localhost ~]# [ &quot;$aa&quot; == 11 ] &amp;&amp; echo yes || echo noyes##判断字符是否为空[root@localhost ~]# name=xx[root@localhost ~]# [ -z $name ] &amp;&amp; echo yes || echo nono

多重条件判断




测试选项
作    用




判断 1 -a 判断 2
逻辑与，判断  1 和判断 2 都成立，最终的结果才为真


判断 1 -o 判断 2
逻辑或，判断  1 和判断 2 有一个成立，最终的结果就为真


！判断
逻辑非，使原始的判断式取反



#先给aa赋值[root@localhost ~]# aa=24#-n先判断是否为空，明显不为空则为真，真就继续判断是否大于23[root@localhost ~]# [ -n &quot;$aa&quot; -a &quot;$aa&quot; -gt 23 ] &amp;&amp; echo yes || echo noyes
##逻辑非[root@localhost ~]# [ ! -n &quot;$aa&quot; ] &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;no#本来“-n”选项是变量 aa 不为空，返回值就是真。#加入！之后，判断值就会取反，所以当变量 aa 有值时，返回值是假
流程控制
if条件判断

单分支 if 条件语句

单分支条件语句最为简单，就是只有一个判断条件，如果符合条件则执行某个程序，否则什么事情都不做。语法如下：
if [ 条件判断式 ];then     程序fi
单分支条件语句需要注意几个点：
·if 语句使用 fi 结尾，和一般语言使用大括号结尾不同
· [ 条件判断式 ]就是使用 test 命令判断，所以中括号和条件判断式之间必须有空格
· then 后面跟符合条件之后执行的程序，可以放在[]之后，用“；”分割。也可以换行写入，就不需要“；”了，比如单分支 if 语句还可以这样写：
if [ 条件判断式 ]   then     程序fi
例子：判断sda1并设置警告信息
[root@localhost ~]# df -hFilesystem               Size  Used Avail Use% Mounted on/dev/sda1               1014M  141M  874M  14% /boot[root@localhost ~]# df -h | grep &quot;/dev/sda1&quot; | awk &#x27;&#123;print $5&#125;&#x27; | cut -d &quot;%&quot; -f 114[root@localhost ~]# vi if1.sh#!/bin/bash#统计分区使用率rate=$(df -h | grep &quot;/dev/sda1&quot; | awk &#x27;&#123;print $5&#125;&#x27;| cut -d &quot;%&quot; -f 1)#把根分区使用率作为变量值赋予变量rateif [ $rate -ge 14 ]#判断 rate 的值如果大于等于 14，则执行then 程序thenecho &quot;Warning! /dev/sda1 快满了!&quot;#打印警告信息。在实际工作中，也可以向管理员发送邮件。fi[root@localhost ~]# sh if1.shWarning! /dev/sda1 快满了!

双分支if语句

if [ 条件判断式 ]       then		条件成立时，执行的程序	else		条件不成立时，执行的另一个程序fi
数据备份的例子
#备份mysql数据库（并不完善，但可以使用）[root@localhost ~]# vi sh/bakmysql.sh #!/bin/bash#备份 mysql 数据库。#同步系统时间ntpdate asia.pool.ntp.org &amp;&gt;/dev/null#把当前系统时间按照“年月日”格式赋予变量datedate=$(date +%y%m%d)#统计 mysql 数据库的大小，并把大小赋予size 变量size=$(du -sh /var/lib/mysql)if [ -d /tmp/dbbak ]    #判断备份目录是否存在，是否为目录  then    #如果判断为真，执行以下脚本	echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/dbinfo.txt	#把当前日期写入临时文件	echo &quot;Data size : $size&quot; &gt;&gt; /tmp/dbbak/dbinfo.txt	#把数据库大小写入临时文件	cd /tmp/dbbak	#进入备份目录	tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt;/dev/null	#打包压缩数据库与临时文件，把所有输出丢入垃圾箱（不想看到任何输出）	rm -rf /tmp/dbbak/dbinfo.txt	#删除临时文件  else	mkdir /tmp/dbbak	#如果判断为假，则建立备份目录	echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/dbinfo.txt echo &quot;Data size : $size&quot; &gt;&gt; /tmp/dbbak/dbinfo.txt #把日期和数据库大小保存如临时文件	cd /tmp/dbbak	tar -zcf mysql-lib-$date.tar.gz dbinfo.txt /var/lib/mysql &amp;&gt;/dev/null	#压缩备份数据库与临时文件	rm -rf /tmp/dbbak/dbinfo.txt	#删除临时文件fi
常用字符表
echo
在 echo 命令中如果使用了“-e”选项，则可以支持控制字符，如表 11-2 所示：



控制字符
作	用




\
输出\本身


\a
输出警告音


\b
退格键，也就是向左删除键


\c
取消输出行末的换行符。和“-n”选项一致


\e
ESCAPE 键


\f
换页符


\n
换行符


\r
回车键


\t
制表符，也就是 Tab 键


\v
垂直制表符


\0nnn
按照八进制 ASCII 码表输出字符。其中 0 为数字零，nnn 是三位八进制数


\xhh
按照十六进制 ASCII 码表输出字符。其中 hh 是两位十六进制数



Bash常用快捷键



快捷键
作	用




ctrl+A
把光标移动到命令行开头。如果我们输入的命令过长，想要把光标移动到命令行开头时使用。


ctrl+E
把光标移动到命令行结尾。


ctrl+C
强制终止当前的命令。


ctrl+L
清屏，相当于 clear 命令。


ctrl+U
删除或剪切光标之前的命令。我输入了一行很长的命令，不用使用退格键一个一个字符的删除，使用这个快捷键会更加方便


ctrl+K
删除或剪切光标之后的内容。


ctrl+Y
粘贴 ctrl+U 或 ctrl+K 剪切的内容。


ctrl+R
在历史命令中搜索，按下ctrl+R 之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索。






ctrl+D
退出当前终端。




ctrl+Z
暂停，并放入后台。这个快捷键牵扯工作管理的内容，我们在系统管理章节详细介绍。


ctrl+S
暂停屏幕输出。


ctrl+Q
恢复屏幕输出。



基础正则表达式



元字符
作	用




*
前一个字符匹配 0 次或任意多次。


.
匹配除了换行符外任意一个字符。


^
匹配行首。例如：^hello 会匹配以 hello 开头的行。


$
匹配行尾。例如：hello&amp;会匹配以 hello 结尾的行。


[]
匹配中括号中指定的任意一个字符，只匹配一个字符。例如：[aoeiu] 匹配任意一个元音字母，[0-9] 匹配任意一位数字，[a-z][0-9]匹配小写字和一位数字构成的两位字符。


[^]
匹配除中括号的字符以外的任意一个字符。例如：[^0-9] 匹配任意一位非数字字符，[^a-z] 表示任意一位非小写字母。


\
转义符。用于取消讲特殊符号的含义取消。


{n}
表示其前面的字符恰好出现 n 次。例如：[0-9]{4} 匹配 4 位数字，[1][3-8][0-9]{9} 匹配手机号码。


{n,}
表示其前面的字符出现不小于 n 次。例如： [0-9]{2,} 表示两位及以上的数字。


{n,m}
表示其前面的字符至少出现n 次，最多出现m 次。例如：[a-z]{6,8}匹配 6 到 8 位的小写字母。



扩展正则



扩展元字符
作	用




+
前一个字符匹配 1 次或任意多次。如“go+gle”会匹配“gogle”、“google”或“gooogle”，当然如果“o”有更多个，也能匹配。


？
前一个字符匹配 0 次或 1 次。如“colou?r”可以匹配“colour”或“color”。


|
匹配两个或多个分支选择。如“was|his”会匹配既包含“was”的行，也匹配包含“his”的行。


（）
匹配其整体为一个字符，即模式单元。可以理解为由多个单个字符组成的大字符。如“(dog)+”会匹配“dog”、“dogdog”、“dogdogdog”等，因为被（）包含的字符会当成一个整体。但“hello （world|earth）”会匹配“hello world”及“hello earth”。



grep 参数列表

-i : 忽略大小写
-v : 查找不包含指定字符串的所有行（取反）
-r : 递归查找文件夹下的文件
-n : 显示匹配行所在位置（行号）
-l : 只显示包含搜索字符串的文件名，而非每个匹配行
-c : 统计符合条件的行数
-e pattern : 指定要查找的正则表达式模式
-w : 匹配整个单词，即只匹配独立的单词而非单词内的字符
-A num : 输出匹配行后 N 行内容
-B num : 输出匹配行前 N 行内容
-C[num] 或者 --context[=num]: 输出匹配行前后总共 N 行内容。
--exclude : 排除指定文件类型，多个文件类型用 “,” 隔开

cut
[root@localhost ~]# cut [选项] 文件名选项：-f 列号：          提取第几列-d 分隔符：	     按照指定分隔符分割列-c 字符范围：    不依赖分隔符来区分列，而是通过字符范围（行首为 0）来进行字段提取。“n-”表示从第 n 个字符到行尾；“n-m”从第 n 个字符到第 m个字符；“-m”表示从第 1 个字符到第 m 个字符。
awk条件（Pattern）

awk内置变量


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ZeroTier免费远控工具</title>
    <url>/posts/a735afbd/</url>
    <content><![CDATA[
ZeroTier免费远控工具
ZeroTier，分分钟异地实现组网的远控工具，这个工具有免费计划的
免费计划里有3个网络和10个设备。
例子：在ZeroTier网页后台添加一个网络，就是在两个设备下载ZeroTier客户端，两个设备都加入到网络，就形成了一个局域网，最后在网页后台进行设备加入的授权加入，就会形成一个ip，只需要输入这个ip就可以实现远控了。
这个网络，相当于一个巨型的局域网，在免费计划里可以加入10个设备。

注册ZeroTier
在Sign in to ZeroTier注册一个账号，有很多方式，自己选一个就行了

创建网络
点击创建网络，下面就会有一个网络id，这个id是所有设备加入网络需要的输入的id

各个设备下载客户端
在你需要远控的各个设备，下载客户端Download - ZeroTier
你的设备是什么系统，你就下载对应系统的软件

我这里双方都是windows，linux有教程，你可以自己看看
windows安装之后是没有桌面图标的，你要在开始菜单里才能看见
        
打开之后再小托盘里就可以看见了
客户端加入网络
复制这个网络id，然后在小托盘右键ZeroTier，点击Join New Network输入网络id就可以成功加入网络，各个需要远控的设备都要安装ZeroTier和输入网络id，才能成功加入这个网络



授权设备

进行远控
按win+r输入mstsc

然后输入你要控制对方的托管ip即可远控

登入一下就可以了

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>组网</category>
      </categories>
  </entry>
  <entry>
    <title>基于Docker部署Hexo框架</title>
    <url>/posts/25850/</url>
    <content><![CDATA[基于Docker部署Hexo框架
创建dockerfile文件夹
mkdir dockerfile
使用vim创建和编辑Dockerfile
vim dockerfile/Dockerfile
# 使用最新的node镜像作为基础环境  FROM node:latest  # 设置临时工作目录  WORKDIR /usr/blog# 配置 npm 镜像站点  RUN npm config set registry https://registry.npm.taobao.org  # 安装 hexo-cli  RUN npm install hexo-cli -g  # 初始化 hexo blog  RUN hexo init  # hexo 默认端口号 4000  EXPOSE 4000
构建镜像
docker build -t hexo-image /root/dockerfile/
创建容器
docker run -itd -v /root/blog:/usr/blog -p 4000:4000 --name hexo-blog hexo-image
-v /root/blog:/usr/blog  可以实现把容器中的/usr/blog挂载到宿主机的/root/blog，非常方便
docker update hexo-blog --restart=always #增加开机自启动属性
查看容器id
docker ps -a
加入容器
docker exec -it 容器id /bin/bash#也可以是名字docker exec -it hexo-blog /bin/bash
开启服务
hexo s

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Centos 8</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql笔记</title>
    <url>/posts/43761/</url>
    <content><![CDATA[Mysql笔记
数据库的创建和管理
创建数据库
create database 数据库名字default character set 字符集名字Default collate 排序规则名 ;例子：create database webinfodefault character set utf8mb4Default collate utf8mb4_general_ci;
显示当前所有的数据库列表
Show databases;
指定默认的数据库列表
Use 数据库名字;
use stuinfo;
使用alter database 语句修改数据库
Alter database 数据库名字Default character set 字符集名Default collate 排序规则名字;例子：Alter database stuinfoDefault character set utf8Default collate utf8_general_ci;
删除数据库
Drop database 数据库名字;
数据表的创建和管理
使用create table 语句创建数据表
Create table 表名 (字段名1 数据类型 \[属性\] \[索引\] ,字段名1 数据类型 \[属性\] \[索引\],.......字段名1 数据类型 \[属性\] \[索引\]);例子：Create table student (Id int unsigned not null auto_increment comment &#x27;学生ID&#x27;,sNo char(10) not null comment &#x27;学号&#x27;,sName varchar(20) not null comment &#x27;姓名&#x27;,sex char(1) not null default &#x27;男&#x27; comment &#x27;性别&#x27;,birthday Date not null comment &#x27;出生日期&#x27;,depyName varchar(30) not null comment &#x27;班级名称&#x27;,remark Varchar(80) comment &#x27;备注&#x27;,primary key (id), /    \*设置id为主键\*/unique (sNo), /        \*设置sNo为唯一性索引\*/index (sName) /         \*设置sName为普通索引\*/); ENGINE=InnoDB;
Not null 不为空 unsigned无符号 auto_increment自动增加
查看数据表
Show tables;
复制数据表
Create table 新表名 like 旧表名;
创建临时表
新建之后，当mysql关闭后会自动删除
Create temporary table student (Id int unsigned not null auto_increment comment &#x27;学生ID&#x27;,sNo char(10) not null comment &#x27;学号&#x27;,sName varchar(20) not null comment &#x27;姓名&#x27;,sex char(1) not null default &#x27;男&#x27; comment &#x27;性别&#x27;,birthday Date not null comment &#x27;出生日期&#x27;,depyName varchar(30) not null comment &#x27;班级名称&#x27;,remark Varchar(80) comment &#x27;备注&#x27;,primary key (id), /            \*设置id为主键\*/unique (sNo), /                \*设置sNo为唯一性索引\*/index (sName) /                \*设置sName为普通索引\*/); ENGINE=InnoDB;
Not null 不为空 unsigned无符号 auto_increment自动增加
查看表结构
Describe | desc 表名;
例子：
desc 表名;
查看表的结构  sql语句
Show create table 表名;
修改表结构
使用alter table 修改表结构
Alter table 表名
Add字段名 数据类型 [属性] [索引] [First | after 字段名] --添加新字段
Modify 字段名 数据类型 [属性] [索引] ---更改指定数据类型
Change 字段名 新字段名 数据类型 [属性] [索引] ---更改指定数据类型同时更改名字
Drop 字段名 ----删除指定字段
Rename as 新表名 ---用来给数据表重新命名
例子：

使用insert操作表中数据
Insert into 表名 (字段名1，字段名2，字段名3)
Values (值1, 值2, 值3 ), (值1, 值2, 值3 ), (值1, 值2, 值3 )
例子：



使用update修改表中数据
Update 表名
Set 字段名1=值1 , 字段名2=值2[,…]
[where 条件]

使用delete删除表中数据
Delete from 表名
[where 条件]
例子：
Delete from student where sNo=&#x27;1308013105&#x27;;

会删除所在字段（sNo）的那一行的数据，不是只单单删除sNo

使用truncate语句清空表中数据
Truncate [table] 表名
删除表
Use 数据库名字;Drop table 表名;
创建索引
定义
MySQL 的索引类型主要有以下几种。
• 普通索引（NDEX）：最基本的索引，它没有任何限制，是用来提升数据库性能、提高
数据查询效率的一项重要的技术。
• 唯一性索引（UNIQUE)）：索引列的值必须唯一，但允许有空值。一张表中可以有多个
唯一性索引。如果是组合索引，则列值的组合必须唯一。
• 主键索引（PRIMARY KEY)：一种特殊的唯一性索引，但不允许有空值。一张表中只能
有一个主键。为了有效实现数据的管理，每张表都应该有自己的主键，一般是在建表的
同时创建主键索引。
• 全文索引（FULLITEXT)：主要用来查找文本中的关键字，而不是直接与索引中的值相
比较。全文索引跟其他索引大不相同，它更像是一个搜索引擎，而不是简单的 WHERE
语句的参数匹配。全文索引配合 MATCH AGAINST 操作使用，而不是一般的 WHERE
语句加 LIKE。目前只有 CHAR、VARCHAR、TEXT 列上可以创建全文索引。
在create table创建索引
Create table 表名 (
字段名1 | 索引项…,
)
索引项的语法：
Primary key 索引名 (字段名)
Unique 索引名 (字段名)
Index | key 索引名 (字段名)
Fulltext 索引名 (字段名)
例子
Create table student (Id int unsigned not null auto_increment comment &#x27;学生ID&#x27;,sNo char(10) not null comment &#x27;学号&#x27;,sName varchar(20) not null comment &#x27;姓名&#x27;,sex char(1) not null default &#x27;男&#x27; comment &#x27;性别&#x27;,birthday Date not null comment &#x27;出生日期&#x27;,depyName varchar(30) not null comment &#x27;班级名称&#x27;,remark Varchar(80) comment &#x27;备注&#x27;,primary key (id), /         \*设置id为主键\*/unique (sNo), /             \*设置sNo为唯一性索引\*/index (sName) /             \*设置sName为普通索引\*/); ENGINE=InnoDB;
Not null 不为空 unsigned无符号 auto_increment自动增加
使用alter table 语句创建索引
Alter table 表名
​	Add 索引项;
例子:
Alter table course    Add unique ux_cNo(cNo),   Add index ix_cName(cName);
使用create index语句创建索引
Create [unique] | [fulltext] index 索引名
On 表名 (字段名)
例子：
在成绩表上创建唯一性索引（组合索引）
Create unique index ux_sId_cId  ON score (sId,cId);
使用Show index 语句查看索引
Show index from &lt;表名&gt; [from &lt;数据库名字&gt;]
例子：
Show index from student;
查看学生表中的索引
Select查询
应该是到这会用到sql语句，[点此下载]
选择字段进行查询
Select 字段1 [,字段2,字段3] from 表名;
例子：
Select deptname,name,sNo,sex from student;
定义字段别名
Select sNo AS &#x27;学号&#x27; , sName AS &#x27;姓名&#x27; from student;
条件查询



使用like模糊查询

使用in 进行范围查询

使用order by 子句对查询结果
降序

中文名拼音排序

先按班级升序排列，同一个班级内出生日期降序排列

使用limit子句限制返回记录的行数

使用distinct关键字过滤重复记录

内连接

使用统计函数对数据进行统计汇总


使用group by进行分组查询

使用having子句对分组汇总结果进行筛选

使用exists关键字创建子查询
查询选修课程的女生名单

薄弱盲区
复制表到新表

向表中插入子查询结果

带子查询的修改语句

带子查询的删除语句


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s部署Prometheus+Grafana</title>
    <url>/posts/25424/</url>
    <content><![CDATA[
k8s部署Prometheus+Grafana




主机名
ip1（NAT）
系统
磁盘
内存




master1
192.168.48.101
Centos7.9
100G
4G


master2
192.168.48.102
Centos7.9
100G
4G


master3
192.168.48.103
Centos7.9
100G
4G


node01
192.168.48.104
Centos7.9
100G
6G


node02
192.168.48.105
Centos7.9
100G
6G



做这个之前你要拥有一个k8s集群，参考以下教程
K8S高可用集群（内部etcd） - 严千屹博客 (qianyios.top)
K8S高可用集群（外部etcd） - 严千屹博客 (qianyios.top)
部署Prometheus
创建命名空间
操作节点[master1]
kubectl create namespace prometheus-work
部署Prometheus deploy
操作节点[master1]
cat &gt;prome_deploy.yml&lt;&lt; &quot;EOF&quot;apiVersion: apps/v1kind: Deploymentmetadata:  name: prometheus  namespace: prometheus-work  labels:    app: prometheusspec:  selector:    matchLabels:      app: prometheus  template:    metadata:      labels:        app: prometheus    spec:      securityContext:                                   #指定运行的用户为root        runAsUser: 0      serviceAccountName: prometheus      containers:      - image: prom/prometheus:v2.30.2        name: prometheus        args:        - &quot;--config.file=/etc/prometheus/prometheus.yml&quot; #通过volume挂载prometheus.yml        - &quot;--storage.tsdb.path=/prometheus&quot;              #通过vlolume挂载目录/prometheus        - &quot;--storage.tsdb.retention.time=24h&quot;        - &quot;--web.enable-admin-api&quot;                       #控制对admin HTTP API的访问        - &quot;--web.enable-lifecycle&quot;                       #支持热更新，直接执行localhost:9090/-/reload立即生效        ports:        - containerPort: 9090          name: http        volumeMounts:        - mountPath: &quot;/etc/prometheus&quot;          name: config-volume        - mountPath: &quot;/prometheus&quot;          name: data        resources:          requests:            cpu: 100m            memory: 512Mi          limits:            cpu: 100m            memory: 512Mi      volumes:      - name: data        persistentVolumeClaim:          claimName: prometheus-data  #本地存储      - name: config-volume        configMap:          name: prometheus-config     #定义的prometeus.yamlEOFkubectl apply -f prome_deploy.yml
部署Prometheus service
操作节点[master1]
cat&gt; prome_svc.yml&lt;&lt; &quot;EOF&quot;apiVersion: v1kind: Servicemetadata:  name: prometheus  namespace: prometheus-work  labels:    app: prometheusspec:  selector:    app: prometheus  type: NodePort  ports:    - name: web      port: 9090      targetPort: httpEOFkubectl apply -f prome_svc.yml
部署configmap
操作节点[master1]
cat &gt; prome_cfg.yml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: ConfigMapmetadata:  name: prometheus-config  namespace: prometheus-workdata:  prometheus.yml: |    global:      scrape_interval: 15s      scrape_timeout: 15s    scrape_configs:    - job_name: &#x27;prometheus&#x27;      static_configs:      - targets: [&#x27;localhost:9090&#x27;]EOF kubectl apply -f prome_cfg.yml
部署PV，PVC
操作节点[node01]
#在node01节点上执行mkdir /data/k8s/prometheus -p
操作节点[master1]
cat &gt; prome_pvc.yml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: PersistentVolumemetadata:  name: prometheus-local  labels:    app: prometheusspec:  accessModes:  - ReadWriteOnce  capacity:    storage: 5Gi  storageClassName: local-storage  local:    path: /data/k8s/prometheus  #在node01节点创建此目录  nodeAffinity:    required:      nodeSelectorTerms:      - matchExpressions:        - key: kubernetes.io/hostname          operator: In          values:          - node01   #指定运行在node节点  persistentVolumeReclaimPolicy: Retain---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: prometheus-data  namespace: prometheus-workspec:  selector:    matchLabels:      app: prometheus  accessModes:  - ReadWriteOnce  resources:    requests:      storage: 5Gi  storageClassName: local-storageEOFkubectl apply -f prome_pvc.yml
配置rabc
操作节点[master1]
cat &gt; prome_rabc.yml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: ServiceAccountmetadata:  name: prometheus  namespace: prometheus-work---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRole        #创建一个clusterrolemetadata:  name: prometheusrules:- apiGroups:  - &quot;&quot;  resources:  - nodes  - services  - endpoints  - pods  - nodes/proxy  verbs:  - get  - list  - watch- apiGroups:  - &quot;extensions&quot;  resources:    - ingresses  verbs:  - get  - list  - watch- apiGroups:  - &quot;&quot;  resources:  - configmaps  - nodes/metrics  verbs:  - get- nonResourceURLs:  - /metrics  verbs:  - get---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: prometheusroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: prometheussubjects:- kind: ServiceAccount  name: prometheus  namespace: prometheus-workEOFkubectl apply -f prome_rabc.yml
查看部署的Prometheus服务
操作节点[master1]
[root@master1 ~]# kubectl get pod,svc,configmap,sa -n prometheus-workNAME                             READY   STATUS    RESTARTS   AGEpod/prometheus-db4b5c549-6gb7d   1/1     Running   0          4m39sNAME                 TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGEservice/prometheus   NodePort   10.103.99.200   &lt;none&gt;        9090:30512/TCP   15m    #注意这个30512是后面要访问的端口NAME                          DATA   AGEconfigmap/kube-root-ca.crt    1      17mconfigmap/prometheus-config   1      14mNAME                        SECRETS   AGEserviceaccount/default      0         17mserviceaccount/prometheus   0         12m
在浏览器访问Prometheus
访问地址是node节点IP加上service的nodeport端口
192.168.48.104:30512

部署grafana
部署deployment
cat &gt;grafana.yml &lt;&lt;&quot;EOF&quot;kind: DeploymentapiVersion: apps/v1metadata:  labels:    app: grafana  name: grafana  namespace: prometheus-workspec:  replicas: 1  revisionHistoryLimit: 10  selector:    matchLabels:      app: grafana  template:    metadata:      labels:        app: grafana    spec:      securityContext:        runAsNonRoot: true        runAsUser: 10555        fsGroup: 10555      containers:        - name: grafana          image: grafana/grafana:8.4.4          imagePullPolicy: IfNotPresent          env:            - name: GF_AUTH_BASIC_ENABLED              value: &quot;true&quot;            - name: GF_AUTH_ANONYMOUS_ENABLED              value: &quot;false&quot;          readinessProbe:            httpGet:              path: /login              port: 3000          volumeMounts:            - mountPath: /var/lib/grafana              name: grafana-data-volume          ports:            - containerPort: 3000              protocol: TCP      volumes:        - name: grafana-data-volume          emptyDir: &#123;&#125;EOFkubectl apply -f grafana.yml
部署svc
cat &gt;grafana_svc.yml&lt;&lt;&quot;EOF&quot;kind: ServiceapiVersion: v1metadata:  labels:    app: grafana  name: grafana-service  namespace: prometheus-workspec:  ports:    - port: 3000      targetPort: 3000  selector:    app: grafana  type: NodePortEOFkubectl apply -f grafana_svc.yml
查看服务
[root@master1 ~]# kubectl get pod,svc -n prometheus-work |grep grafanapod/grafana-5d475d9d7-ctb2t      1/1     Running   0          5m18sservice/grafana-service   NodePort   10.99.157.212   &lt;none&gt;        3000:31163/TCP   5m12s#查看grafana的pod在哪个节点[root@master1 1]# kubectl describe pod -n prometheus-work grafana-5d475d9d7-ctb2t | grep Node:Node:             node02/192.168.48.105[root@master1 1]#
访问页面http://192.168.48.105:31163
首次登录grafana，用户名和密码都是admin，登陆之后会要求修改admin的密码，也可以不修改




监控开始
以下测试均已监控node01来做测试

GitHub - prometheus/node_exporter: Exporter for machine metrics
监控linux服务器
主要监控指标：

CPU
内存
硬盘
网络流量
系统负载
系统服务

安装采集器
从上图得知监控linux需要使用Node exporter采集器
下载Node exporter采集器

操作节点[node01]
wget -P /usr/local/ https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz#也可以自己先下载上传到/usr/local/ 下
cd /usr/local/tar -xvf node_exporter-1.7.0.linux-amd64.tar.gzmv node_exporter-1.7.0.linux-amd64 node_exportercd /usr/local/node_exporter./node_exporter
出现以下没关系

访问采集器
http://192.168.48.104:9100/

设置采集器开机自启动
加入systemd管理
cat &gt; /usr/lib/systemd/system/node_exporter.service &lt;&lt; &quot;EOF&quot;[Unit]Description=node_exporter[Service]#ExecStart=/usr/local/node_exporter/node_exporter --web.config=/usr/local/node_exporter/config.ymlExecStart=/usr/local/node_exporter/node_exporterExecReload=/bin/kill -HUP $MAINPIDKillMode=processRestart=on-failure[Install]WantedBy=multi-user.targetEOF# 重新加载systemctl daemon-reload# 启动systemctl start node_exporter# 加入开机自启systemctl enable node_exporter
Prometheus配置
配置文件修改
操作节点[master1]
在Prometheus配置文件添加被监控端cat &gt; prome_cfg.yml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: ConfigMapmetadata:  name: prometheus-config  namespace: prometheus-workdata:  prometheus.yml: |    global:      scrape_interval: 15s      scrape_timeout: 15s    scrape_configs:    - job_name: &#x27;prometheus&#x27;      static_configs:      - targets: [&#x27;localhost:9090&#x27;]    - job_name: &#x27;test&#x27;      static_configs:      - targets: [&#x27;192.168.48.104:9100&#x27;]EOFkubectl apply -f prome_cfg.yml
热加载更新
操作节点[node01]加的是哪个节点就在哪个节点进行热加载
#实现Prometheus热更新curl -X POST http://192.168.48.104:30512/-/reload
访问prometheus页面查看http://192.168.48.104:30512

可以看到有记录了
Grafana展示
展示数据需要配置仪表盘，仪表盘可以自己制作导入，也可以从官方下载使用。
进入grafana  http://192.168.48.105:31163

这里直接输入9276仪表盘id，然后点击load



默认情况下网络这部分是没有数据的



点击右上角的save保存



监控多台linux

复制安装文件

远程复制到新增的机器
假设我还要监控node02
操作节点[node01]
scp -r /usr/local/node_exporter root@192.168.48.105:/usr/local/scp /usr/lib/systemd/system/node_exporter.service root@192.168.48.105:/usr/lib/systemd/system/
操作节点[node02]
# 重新加载systemctl daemon-reload# 启动systemctl start node_exporter# 加入开机自启systemctl enable node_exporter
添加采集器信息
操作节点[master1]
在Prometheus配置文件添加被监控端cat &gt; prome_cfg.yml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: ConfigMapmetadata:  name: prometheus-config  namespace: prometheus-workdata:  prometheus.yml: |    global:      scrape_interval: 15s      scrape_timeout: 15s    scrape_configs:    - job_name: &#x27;prometheus&#x27;      static_configs:      - targets: [&#x27;localhost:9090&#x27;]    - job_name: &#x27;test&#x27;      static_configs:      - targets: [&#x27;192.168.48.104:9100&#x27;,&#x27;192.168.48.105:9100&#x27;]#以逗号分割添加新的node02地址的采集器EOFkubectl apply -f prome_cfg.yml
热加载更新
操作节点[node02]
#实现Prometheus热更新curl -X POST http://192.168.48.104:30512/-/reload



 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>K8s</tag>
        <tag>Prometheus</tag>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>基于K8S1.28.2实验rook部署ceph</title>
    <url>/posts/58032/</url>
    <content><![CDATA[
基于K8S1.28.2实验rook部署ceph
Rook 支持 Kubernetes v1.22 或更高版本。
rook版本1.12.8
K8S版本1.28.2
部署出来ceph版本是quincy版本



主机名
ip1（NAT）
系统
新硬盘
磁盘
内存




master1
192.168.48.101
Centos7.9
100G
100G
4G


master2
192.168.48.102
Centos7.9

100G
4G


master3
192.168.48.103
Centos7.9

100G
4G


node01
192.168.48.104
Centos7.9
100G
100G
6G


node02
192.168.48.105
Centos7.9
100G
100G
6G



我这里是五台机，本应该ceph（三节点）是需要部署在三台node上的，这里为了测试方便，仅部署在master1，node01，node02上所以需要给这三台加一个物理硬盘
注意！使用之前，请确定是否去掉master节点的污点
【去污点方法】
以下所有操作都在master进行
前期准备
克隆仓库
git clone --single-branch --branch v1.12.8 https://github.com/rook/rook.gitcd rook/deploy/examples
查看所需镜像
[root@master1 examples]# cat operator.yaml | grep IMAGE:  # ROOK_CSI_CEPH_IMAGE: &quot;quay.io/cephcsi/cephcsi:v3.9.0&quot;  # ROOK_CSI_REGISTRAR_IMAGE: &quot;registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.8.0&quot;  # ROOK_CSI_RESIZER_IMAGE: &quot;registry.k8s.io/sig-storage/csi-resizer:v1.8.0&quot;  # ROOK_CSI_PROVISIONER_IMAGE: &quot;registry.k8s.io/sig-storage/csi-provisioner:v3.5.0&quot;  # ROOK_CSI_SNAPSHOTTER_IMAGE: &quot;registry.k8s.io/sig-storage/csi-snapshotter:v6.2.2&quot;  # ROOK_CSI_ATTACHER_IMAGE: &quot;registry.k8s.io/sig-storage/csi-attacher:v4.3.0&quot;  # ROOK_CSIADDONS_IMAGE: &quot;quay.io/csiaddons/k8s-sidecar:v0.7.0&quot;  [root@master1 examples]# cat operator.yaml | grep image:          image: rook/ceph:v1.12.8


基本都是国外的镜像，在这里通过阿里云+github方式构建镜像仓库解决（以下是添加为自己私人构建的镜像）
sed -i &#x27;s/# ROOK_CSI_CEPH_IMAGE: &quot;quay.io\/cephcsi\/cephcsi:v3.9.0&quot;/ROOK_CSI_CEPH_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/cephcsi:v3.9.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSI_REGISTRAR_IMAGE: &quot;registry.k8s.io\/sig-storage\/csi-node-driver-registrar:v2.8.0&quot;/ROOK_CSI_REGISTRAR_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/csi-node-driver-registrar:v2.8.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSI_RESIZER_IMAGE: &quot;registry.k8s.io\/sig-storage\/csi-resizer:v1.8.0&quot;/ROOK_CSI_RESIZER_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/csi-resizer:v1.8.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSI_PROVISIONER_IMAGE: &quot;registry.k8s.io\/sig-storage\/csi-provisioner:v3.5.0&quot;/ROOK_CSI_PROVISIONER_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/csi-provisioner:v3.5.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSI_SNAPSHOTTER_IMAGE: &quot;registry.k8s.io\/sig-storage\/csi-snapshotter:v6.2.2&quot;/ROOK_CSI_SNAPSHOTTER_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/csi-snapshotter:v6.2.2&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSI_ATTACHER_IMAGE: &quot;registry.k8s.io\/sig-storage\/csi-attacher:v4.3.0&quot;/ROOK_CSI_ATTACHER_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/csi-attacher:v4.3.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/# ROOK_CSIADDONS_IMAGE: &quot;quay.io\/csiaddons\/k8s-sidecar:v0.7.0&quot;/ROOK_CSIADDONS_IMAGE: &quot;registry.cn-hangzhou.aliyuncs.com\/qianyios\/k8s-sidecar:v0.7.0&quot;/g&#x27; operator.yamlsed -i &#x27;s/image: rook\/ceph:v1.12.8/image: registry.cn-hangzhou.aliyuncs.com\/qianyios\/ceph:v1.12.8/g&#x27; operator.yaml
开启自动发现磁盘（用于后期扩展）
sed -i &#x27;s/ROOK_ENABLE_DISCOVERY_DAEMON: &quot;false&quot;/ROOK_ENABLE_DISCOVERY_DAEMON: &quot;true&quot;/&#x27; /root/rook/deploy/examples/operator.yaml
建议提前下载镜像
docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/cephcsi:v3.9.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/csi-node-driver-registrar:v2.8.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/csi-resizer:v1.8.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/csi-provisioner:v3.5.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/csi-snapshotter:v6.2.2docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/csi-attacher:v4.3.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/k8s-sidecar:v0.7.0docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/ceph:v1.12.8
安装rook+ceph集群
开始部署

创建crd&amp;common&amp;operator

kubectl create -f crds.yaml -f common.yaml -f operator.yaml


创建cluster（ceph）

修改配置：等待operator容器和discover容器启动，配置osd节点
先注意一下自己的磁盘（lsblk）根据自身情况修改下面的配置文件

#更改为国内镜像sed -i &#x27;s#image: quay.io/ceph/ceph:v17.2.6#image: registry.cn-hangzhou.aliyuncs.com/qianyios/ceph:v17.2.6#&#x27; cluster.yaml
vim cluster.yaml------------------------------------- - 修改镜像    image: registry.cn-hangzhou.aliyuncs.com/qianyios/ceph:v17.2.6 - 改为false，并非使用所有节点所有磁盘作为osd- 启用deviceFilter- 按需配置config- 会自动跳过非裸盘  storage: # cluster level storage configuration and selection    useAllNodes: false    useAllDevices: false    deviceFilter:    config:    nodes:      - name: &quot;master1&quot;        deviceFilter: &quot;sda&quot;      - name: &quot;node01&quot;        deviceFilter: &quot;sda&quot;      - name: &quot;node02&quot;        deviceFilter: &quot;^sd.&quot;  #自动匹配sd开头的裸盘
这里的三个节点，是我们开头讲到的三台机，自行根据修改调整，注意这里的名字是k8s集群的名字可以在kubectl get nodes查看


部署cluster
kubectl create -f cluster.yaml
查看状态
- 实时查看pod创建进度kubectl get pod -n rook-ceph -w - 实时查看集群创建进度kubectl get cephcluster -n rook-ceph rook-ceph -w - 详细描述kubectl describe cephcluster -n rook-ceph rook-ceph

安装ceph客户端工具
- 进入工作目录cd rook/deploy/examples/- 查看所需镜像[root@master1 examples]# cat toolbox.yaml | grep image:          image: quay.io/ceph/ceph:v17.2.6- 更改为国内镜像sed -i &#x27;s#image: quay.io/ceph/ceph:v17.2.6#image: registry.cn-hangzhou.aliyuncs.com/qianyios/ceph:v17.2.6#&#x27; toolbox.yaml- 创建toolboxkubectl  create -f toolbox.yaml -n rook-ceph - 查看podkubectl  get pod -n rook-ceph -l app=rook-ceph-tools - 进入podkubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bash - 查看集群状态ceph status - 查看osd状态ceph osd status - 集群空间用量ceph df


暴露dashboard
cat &gt; rook-dashboard.yaml &lt;&lt; EOF---apiVersion: v1kind: Servicemetadata:  labels:    app: rook-ceph-mgr    ceph_daemon_id: a    rook_cluster: rook-ceph  name: rook-ceph-mgr-dashboard-np  namespace: rook-cephspec:  ports:  - name: http-dashboard    port: 8443    protocol: TCP    targetPort: 8443    nodePort: 30700  selector:    app: rook-ceph-mgr    ceph_daemon_id: a  sessionAffinity: None  type: NodePortEOFkubectl apply -f rook-dashboard.yaml
查看dashboard密码
kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath=&quot;&#123;[&#x27;data&#x27;][&#x27;password&#x27;]&#125;&quot; | base64 --decode &amp;&amp; echoQmu/!$ZvfQTAd-aCuHF+
访问dashboard
https://192.168.48.200:30700

如果出现以下报错（可以按下面解决，反之跳过）
消除HEALTH_WARN警告

查看警告详情

AUTH_INSECURE_GLOBAL_ID_RECLAIM_ALLOWED: mons are allowing insecure global_id reclaim
MON_DISK_LOW: mons a,b,c are low on available space





官方解决方案：https://docs.ceph.com/en/latest/rados/operations/health-checks/


AUTH_INSECURE_GLOBAL_ID_RECLAIM_ALLOWED

方法一：- 进入toolboxkubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bashceph config set mon auth_allow_insecure_global_id_reclaim false方法二：kubectl get configmap rook-config-override -n rook-ceph -o yamlkubectl edit configmap rook-config-override -n rook-ceph -o yamlconfig: |    [global]    mon clock drift allowed = 1    #删除podkubectl -n rook-ceph delete pod $(kubectl -n rook-ceph get pods -o custom-columns=NAME:.metadata.name --no-headers| grep mon)#显示一下信息pod &quot;rook-ceph-mon-a-557d88c-6ksmg&quot; deletedpod &quot;rook-ceph-mon-b-748dcc9b89-j8l24&quot; deletedpod &quot;rook-ceph-mon-c-5d47c664-p855m&quot; deleted#最后查看健康值ceph -s


MON_DISK_LOW：根分区使用率过高，清理即可。


Ceph存储使用
三种存储类型



存储类型
特征
应用场景
典型设备




块存储（RBD）
存储速度较快 不支持共享存储 [ReadWriteOnce]
虚拟机硬盘
硬盘 Raid


文件存储（CephFS）
存储速度慢（需经操作系统处理再转为块存储） 支持共享存储 [ReadWriteMany]
文件共享
FTP NFS


对象存储（Object）
具备块存储的读写性能和文件存储的共享特性 操作系统不能直接访问，只能通过应用程序级别的API访问
图片存储 视频存储
OSS



块存储
创建CephBlockPool和StorageClass

文件路径：/root/rook/deploy/examples/csi/rbd/storageclass.yaml
CephBlockPool和StorageClass都位于storageclass.yaml 文件
配置文件简要解读：

cd /root/rook/deploy/examples/csi/rbd[root@master1 rbd]# grep -vE &#x27;^\s*(#|$)&#x27; storageclass.yamlapiVersion: ceph.rook.io/v1kind: CephBlockPoolmetadata:  name: replicapool  namespace: rook-ceph # namespace:clusterspec:  failureDomain: host              # host级容灾  replicated:    size: 3                              # 默认三个副本    requireSafeReplicaSize: true---apiVersion: storage.k8s.io/v1kind: StorageClass                 # sc无需指定命名空间metadata:  name: rook-ceph-blockprovisioner: rook-ceph.rbd.csi.ceph.com    # 存储驱动parameters:  clusterID: rook-ceph # namespace:cluster  pool: replicapool                  # 关联到CephBlockPool  imageFormat: &quot;2&quot;  imageFeatures: layering  csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner  csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph # namespace:cluster  csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner  csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph # namespace:cluster  csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node  csi.storage.k8s.io/node-stage-secret-namespace: rook-ceph # namespace:cluster  csi.storage.k8s.io/fstype: ext4allowVolumeExpansion: true                          # 是否允许扩容reclaimPolicy: Delete                                    # PV回收策略[root@master1 rbd]#
创建CephBlockPool和StorageClass
kubectl create -f storageclass.yaml
查看
- 查看sckubectl get sc - 查看CephBlockPool（也可在dashboard中查看）kubectl get cephblockpools -n rook-ceph


块存储使用示例

Deployment单副本+PersistentVolumeClaim

cat &gt; nginx-deploy-rbd.yaml &lt;&lt; &quot;EOF&quot;apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx-deploy-rbd  name: nginx-deploy-rbdspec:  replicas: 1  selector:    matchLabels:      app: nginx-deploy-rbd  template:    metadata:      labels:        app: nginx-deploy-rbd    spec:      containers:      - image: registry.cn-hangzhou.aliyuncs.com/qianyios/nginx:latest        name: nginx        volumeMounts:        - name: data          mountPath: /usr/share/nginx/html      volumes:      - name: data        persistentVolumeClaim:          claimName: nginx-rbd-pvc---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: nginx-rbd-pvcspec:  storageClassName: &quot;rook-ceph-block&quot;   #就是这里指定了前面的创建的sc  accessModes:    - ReadWriteOnce  resources:    requests:      storage: 5GiEOF
kubectl create -f nginx-deploy-rbd.yamlkubectl exec -it nginx-deploy-rbd-7886bf6666-qhw74 bashecho &quot;hello,nginx-deploy-rbd&quot; &gt; /usr/share/nginx/html/index.htmlexitkubectl get pod -o wide | grep nginx#测试完就删除kubectl delete -f nginx-deploy-rbd.yaml




StatefulSet多副本+volumeClaimTemplates

cat &gt; nginx-ss-rbd.yaml &lt;&lt; &quot;EOF&quot; apiVersion: apps/v1kind: StatefulSetmetadata:  name: nginx-ss-rbdspec:  selector:    matchLabels:      app: nginx-ss-rbd   serviceName: &quot;nginx&quot;  replicas: 3   template:    metadata:      labels:        app: nginx-ss-rbd     spec:      containers:      - name: nginx        image: registry.cn-hangzhou.aliyuncs.com/qianyios/nginx:latest        ports:        - containerPort: 80          name: web        volumeMounts:        - name: www          mountPath: /usr/share/nginx/html  volumeClaimTemplates:  - metadata:      name: www    spec:      accessModes: [ &quot;ReadWriteOnce&quot; ]      storageClassName: &quot;rook-ceph-block&quot;  #就是这里指定了前面的创建的sc      resources:        requests:          storage: 2GiEOF
部署
kubectl create -f nginx-ss-rbd.yamlkubectl get pod -o wide | grep nginx-sskubectl exec -it nginx-ss-rbd-0 bashecho &quot;hello,nginx-ss-rbd-0&quot; &gt; /usr/share/nginx/html/index.html &amp;&amp; exitkubectl exec -it nginx-ss-rbd-1 bashecho &quot;hello,nginx-ss-rbd-1&quot; &gt; /usr/share/nginx/html/index.html &amp;&amp; exitkubectl exec -it nginx-ss-rbd-2 bashecho &quot;hello,nginx-ss-rbd-2&quot; &gt; /usr/share/nginx/html/index.html &amp;&amp; exit#测试完就删除kubectl delete -f nginx-ss-rbd.yaml这里可能需要手动删除一下pvc[root@master1 ~]# kubectl get pvcNAME                 STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGEwww-nginx-ss-rbd-0   Bound    pvc-4a75f201-eec0-47fa-990c-353c52fe14f4   2Gi        RWO            rook-ceph-block   6m27swww-nginx-ss-rbd-1   Bound    pvc-d5f7e29f-79e4-4d1e-bcbb-65ece15a8172   2Gi        RWO            rook-ceph-block   6m21swww-nginx-ss-rbd-2   Bound    pvc-8cce06e9-dfe4-429d-ae44-878f8e4665e0   2Gi        RWO            rook-ceph-block   5m53s[root@master1 ~]# kubectl delete  pvc www-nginx-ss-rbd-0persistentvolumeclaim &quot;www-nginx-ss-rbd-0&quot; deleted[root@master1 ~]# kubectl delete  pvc www-nginx-ss-rbd-1persistentvolumeclaim &quot;www-nginx-ss-rbd-1&quot; deleted[root@master1 ~]# kubectl delete  pvc www-nginx-ss-rbd-2persistentvolumeclaim &quot;www-nginx-ss-rbd-2&quot; deleted


共享文件存储
部署MDS服务
创建Cephfs文件系统需要先部署MDS服务，该服务负责处理文件系统中的元数据。

文件路径：/root/rook/deploy/examples/filesystem.yaml

配置文件解读
cd /root/rook/deploy/examples[root@master1 examples]# grep -vE &#x27;^\s*(#|$)&#x27; filesystem.yamlapiVersion: ceph.rook.io/v1kind: CephFilesystemmetadata:  name: myfs  namespace: rook-ceph # namespace:clusterspec:  metadataPool:    replicated:      size: 3            # 元数据副本数      requireSafeReplicaSize: true    parameters:      compression_mode:        none  dataPools:    - name: replicated      failureDomain: host      replicated:        size: 3             # 存储数据的副本数        requireSafeReplicaSize: true      parameters:        compression_mode:          none  preserveFilesystemOnDelete: true  metadataServer:    activeCount: 1        # MDS实例的副本数，默认1，生产环境建议设置为3    activeStandby: true  ......省略kubectl create -f filesystem.yamlkubectl get pod -n rook-ceph | grep mds

- 进入podkubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bash - 查看集群状态ceph status

配置存储(StorageClass)
配置文件：/root/rook/deploy/examples/csi/cephfs/storageclass.yaml
cd /root/rook/deploy/examples/csi/cephfskubectl apply -f storageclass.yaml

共享文件存储使用示例
cat &gt; nginx-deploy-cephfs.yaml &lt;&lt; &quot;EOF&quot; apiVersion: apps/v1kind: Deploymentmetadata:  labels:    app: nginx-deploy-cephfs  name: nginx-deploy-cephfsspec:  replicas: 3  selector:    matchLabels:      app: nginx-deploy-cephfs  template:    metadata:      labels:        app: nginx-deploy-cephfs    spec:      containers:      - image: registry.cn-hangzhou.aliyuncs.com/qianyios/nginx:latest        name: nginx        volumeMounts:        - name: data          mountPath: /usr/share/nginx/html      volumes:      - name: data        persistentVolumeClaim:          claimName: nginx-cephfs-pvc---apiVersion: v1kind: PersistentVolumeClaimmetadata:  name: nginx-cephfs-pvcspec:  storageClassName: &quot;rook-cephfs&quot;  accessModes:    - ReadWriteMany  resources:    requests:      storage: 1GiEOFkubectl apply -f nginx-deploy-cephfs.yamlkubectl get pod -o wide | grep cephfskubectl exec -it nginx-deploy-cephfs-6dc8797866-4s564 bashecho &quot;hello cephfs&quot; &gt; /usr/share/nginx/html/index.html &amp;&amp; exit#测试完删除 kubectl delete -f nginx-deploy-cephfs.yaml

在K8S中直接调用出ceph命令
#安装epel源yum install epel-release -y#安装ceph仓库yum install https://mirrors.aliyun.com/ceph/rpm-octopus/el7/noarch/ceph-release-1-1.el7.noarch.rpm -yyum list ceph-common  --showduplicates |sort -r#安装ceph客户端yum install ceph-common -y
同步ceph中的认证文件
kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bash[root@master1 ~]# kubectl -n rook-ceph exec -it deploy/rook-ceph-tools -- bashbash-4.4$  cat /etc/ceph/ceph.conf[global]mon_host = 10.97.121.57:6789,10.104.235.210:6789,10.96.136.90:6789[client.admin]keyring = /etc/ceph/keyringbash-4.4$ cat /etc/ceph/keyring[client.admin]key = AQC241lltDbVKBAANrzwgqZd1A2eY+8h1A+BOg==bash-4.4$注意这两个文件，复制内容之后exit退出

直接在master1创建这两个文件（这里的master1是指我要在master1可以调用ceph的客户端）cat &gt; /etc/ceph/ceph.conf &lt;&lt; &quot;EOF&quot;[global]mon_host = 10.97.121.57:6789,10.104.235.210:6789,10.96.136.90:6789[client.admin]keyring = /etc/ceph/keyringEOFcat &gt; /etc/ceph/keyring &lt;&lt; &quot;EOF&quot;[client.admin]key = AQC241lltDbVKBAANrzwgqZd1A2eY+8h1A+BOg==EOF
当你添加完之后直接调用ceph的命令

删除pvc，sc及对应的存储资源
- 按需删除pvc、pvkubectl get pvc -n [namespace] | awk &#x27;&#123;print $1&#125;;&#x27; | xargs kubectl delete pvc -n [namespace]kubectl get pv | grep Released | awk &#x27;&#123;print $1&#125;;&#x27; | xargs kubectl delete pv - 删除块存储及SCkubectl delete -n rook-ceph cephblockpool replicapoolkubectl delete storageclass rook-ceph-block

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>先电IaaS2.2部署OpenStack</title>
    <url>/posts/52877/</url>
    <content><![CDATA[
先电IaaS2.2私有云部署OpenStack
前期准备
ip拓扑



主机名
ip1（NAT）
ip2（仅主机）
硬盘
内存




controller-48
192.168.48.10
192.168.148.10
100G
8G


computer-48
192.168.48.20
192.168.148.20
100G
3G



基础镜像
CentOS-7-x86_64-DVD-2009.iso
chinaskills_cloud_iaas.iso
[root@localhost ~]# lltotal 4758568-rw-r--r--  1 root root  861155328 Jun 19 03:06 CentOS-7-x86_64-DVD-2009.iso-rw-r--r--  1 root root 3799093248 Jun 19 03:06 chinaskills_cloud_iaas.iso
虚拟机硬件配置

controller

computer

sdb和sdc是分别作为cinder服务和swift服务的存储磁盘。
配置主机名和hosts，关闭防火墙和永久关闭selinux
controller
hostnamectl set-hostname controller &amp;&amp; bashsystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinuxsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configecho &quot;192.168.48.10 controller&quot; &gt;&gt; /etc/hostsecho &quot;192.168.48.20 computer&quot; &gt;&gt; /etc/hostssetenforce 0
computer
hostnamectl set-hostname computer &amp;&amp; bashsystemctl disable firewalld --nowsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/sysconfig/selinuxsed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/configecho &quot;192.168.48.10 controller&quot; &gt;&gt; /etc/hostsecho &quot;192.168.48.20 computer&quot; &gt;&gt; /etc/hostssetenforce 0
确保两者可以互通！
格式化compute磁盘（在compute中操作）
mkfs.xfs /dev/sdbmkfs.xfs /dev/sdc
配置yum源
controller
rm -rf /etc/yum.repos.d/*cat &gt;&gt; /etc/yum.repos.d/centos.repo &lt;&lt; EOF[centos]name=centosbaseurl=file:///qianyios/centosgpgcheck=0enabled=1[iaas]name=iaasbaseurl=file:///qianyios/iaas-repogpgcheck=0enabled=1EOF
computer
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/cat &gt;&gt; /etc/yum.repos.d/centos.repo &lt;&lt; EOF[centos]name=centosbaseurl=ftp://192.168.48.10/centosgpgcheck=0enabled=1[iaas]name=iaasbaseurl=ftp://192.168.48.10/iaas-repogpgcheck=0enabled=1EOF
挂载iso镜像文件
#控制节点mkdir /qianyios/centos -pmount -o loop CentOS-7-x86_64-DVD-2009.iso /mnt/cp -rvf /mnt/* /qianyios/centos/umount /mnt/mount -o loop chinaskills_cloud_iaas.iso /mnt/cp -rvf /mnt/* /qianyios/umount /mnt/yum clean all &amp;&amp; yum makecache
搭建ftp服务器
控制节点yum install vsftpd -ycat&gt;&gt; /etc/vsftpd/vsftpd.conf &lt;&lt;EOFanon_root=/qianyios/EOFsystemctl start vsftpd &amp;&amp; systemctl enable vsftpd
验证操作
1.清理yum缓存
#各节点yum clean all &amp;&amp; yum makecache
2.在文件资源管理器输入ftp://192.168.48.10/

编辑xiandian变量
#各节点yum install iaas-xiandian -y#使用sed命令批量去除第一个#注释符为空sed -i -e &#x27;s/^#//&#x27;g /etc/xiandian/openrc.sh使用sed命令批量修改密码默认000000sed -i -e &#x27;s/PASS=/PASS=000000/&#x27;g /etc/xiandian/openrc.sh
grep -v &quot;^#&quot; /etc/xiandian/openrc.sh | grep -v &quot;^$&quot;HOST_IP=192.168.48.10HOST_PASS=123456#ssh登入密码HOST_NAME=controllerHOST_IP_NODE=192.168.48.20HOST_PASS_NODE=123456#ssh登入密码HOST_NAME_NODE=computernetwork_segment_IP=192.168.48.0/24RABBIT_USER=openstackRABBIT_PASS=000000DB_PASS=000000DOMAIN_NAME=demoADMIN_PASS=000000DEMO_PASS=000000KEYSTONE_DBPASS=000000GLANCE_DBPASS=000000GLANCE_PASS=000000NOVA_DBPASS=000000NOVA_PASS=000000NEUTRON_DBPASS=000000NEUTRON_PASS=000000METADATA_SECRET=000000INTERFACE_IP=192.168.48.10#复制到第二台机的时候，记得改成192.168.48.20INTERFACE_NAME=ens36#第二块网卡的名字Physical_NAME=providerminvlan=2maxvlan=300CINDER_DBPASS=000000CINDER_PASS=000000BLOCK_DISK=sdbSWIFT_PASS=000000OBJECT_DISK=sdcSTORAGE_LOCAL_NET_IP=192.168.48.20HEAT_DBPASS=000000HEAT_PASS=000000ZUN_DBPASS=000000ZUN_PASS=000000KURYR_DBPASS=000000KURYR_PASS=000000CEILOMETER_DBPASS=000000CEILOMETER_PASS=000000AODH_DBPASS=000000AODH_PASS=000000BARBICAN_DBPASS=000000BARBICAN_PASS=000000
scp /etc/xiandian/openrc.sh computer:/etc/xiandian/openrc.sh #以下在计算节点sed -i &#x27;s/INTERFACE_IP=192.168.48.10/INTERFACE_IP=192.168.48.20/g&#x27; /etc/xiandian/openrc.sh
安装平台基本服务
[root@controller ~]# iaas-pre-host.sh [root@compute ~]# iaas-pre-host.sh #双节点reboot# 可同时执行，执行完毕后脚本会提示重启，不然rabbitmq服务会报错！！！此脚本会初始化虚拟机环境，如修改主机名、主机映射、时间同步等，自己可去尝试解读脚本，手工搭建平台！！！！，由于重启可能导致平台出现问题可用ssh连接自己的IP地址重新登陆，只要出现屏幕登录时间以及看到屏幕欢迎界面即可Controller节点iaas-install-mysql.shiaas-install-keystone.shiaas-install-glance.shController节点iaas-install-nova-controller.shCompute节点iaas-install-nova-compute.shController节点sed -i &#x27;s/yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables -y/yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables -y --skip-broken/g&#x27; /usr/local/bin/iaas-install-neutron-controller.shiaas-install-neutron-controller.shCompute节点iaas-install-neutron-compute.shController节点iaas-install-dashboard.sh从Ftp服务器上下载镜像到本地。（在controller中操作）source /etc/keystone/admin-openrc.shglance image-create --name CentOS7.5 --disk-format qcow2 --container-format bare --progress &lt; /qianyios/images/CentOS_7.5_x86_64_XD.qcow2
访问页面http://192.168.48.10/dashboard/

更多服务
#所以安装脚本都在/usr/local/bin/目录下#按照自己需求安装安装Swift对象存储服务iaas-install-swift-controller.sh安装Heat编配服务iaas-install-heat.sh安装Zun服务iaas-install-zun-controller.sh安装Ceilometer监控服务iaas-install-ceilometer-controller.sh安装Aodh监控服务iaas-install-aodh.sh

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>OpenStack</tag>
        <tag>Iaas</tag>
      </tags>
  </entry>
  <entry>
    <title>基于CentOS Stream 8一键安装OpenStack Yoga版本</title>
    <url>/posts/11354/</url>
    <content><![CDATA[
基于CentOS Stream 8一键安装OpenStack Yoga版本
主机拓扑



主机名
ip
内存
cpu
硬盘
OS




openstack
192.168.48.100
8G
2v2c
100G+100G
CentOS Stream 8




本机镜像可以进入这里下载CentOS-Stream-8-x86_64-latest-boot.iso
注意！Centos Stream 8已经停止更新了，此实验可以用作测试，不可用于生产
网络配置
[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens160TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=eui64NAME=ens160UUID=025bf07f-8fc9-41eb-b26e-13218b0d434bDEVICE=ens160ONBOOT=yesIPADDR=192.168.48.100PREFIX=24GATEWAY=192.168.48.2DNS1=192.168.48.2DNS2=114.114.114.114
基础配置
#设置主机名hostnamectl set-hostname openstack &amp;&amp; bash#添加本地名称解析cat &gt;&gt;/etc/hosts &lt;&lt; &quot;EOF&quot;192.168.48.100 openstack EOF#关闭防火墙systemctl disable firewalld --nowsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0#值得需要注意的是，openstack不允许使用NetworkManager，而是需要使用Network，所以我们还需要安装Network的服务。dnf install -y network-scripts systemctl disable --now NetworkManagersystemctl restart networksystemctl enable --now network#启用powertools库dnf config-manager --enable powertools#重建以下缓存dnf clean all &amp;&amp; dnf makecache #升级软件包dnf -y updatereboot
安装openstack
[root@openstack ~]#  dnf search release-openstack........centos-release-openstack-yoga.noarch : OpenStack from the CentOS Cloud SIG repo configs#安装最新的yoga版本dnf install -y centos-release-openstack-yoga.noarch#安装packstack软件包并生成应答文件dnf install -y openstack-packstackpackstack --gen-answer-file /root/openstack-answer.txt#修改应答文件#一键替换，若有其他需要根据需要自行修改其中的值sed -i &#x27;s/CONFIG_HEAT_INSTALL=n/CONFIG_HEAT_INSTALL=y/g; s/CONFIG_PROVISION_DEMO=y/CONFIG_PROVISION_DEMO=n/g; s/CONFIG_NEUTRON_OVN_BRIDGE_IFACES=/CONFIG_NEUTRON_OVN_BRIDGE_IFACES=br-ex:ens160/g&#x27; /root/openstack-answer.txtsed -i &#x27;s/CONFIG_KEYSTONE_ADMIN_PW=.*/CONFIG_KEYSTONE_ADMIN_PW=admin/g&#x27; /root/openstack-answer.txt#也可以手动替换vi /root/openstack-answer.txt-------------------------CONFIG_HEAT_INSTALL=y           #安装heat模板服务CONFIG_PROVISION_DEMO=n         #我们不要提供的demo项目CONFIG_KEYSTONE_ADMIN_PW=admin  #设置登陆密码CONFIG_NEUTRON_OVN_BRIDGE_IFACES=br-ex:ens160            #OVN端口映射，就是云主机连接外网时通过那块网卡进行数据包的转发-------------------------#开始安装packstack --answer-file /root/openstack-answer.txt 
然后你就可以通过http://192.168.48.100/dashboard访问页面了

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 8 stream</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建你的免费图床系统</title>
    <url>/posts/aaddb3d/</url>
    <content><![CDATA[
从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + 图床工具）
文章来源自：从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + PicGo） · Pseudoyu
背景
陆陆续续两三年了，建立博客至今也有诸多文章了，有一个问题就是图片如果放在本地显示会很慢，特别是放在服务器，如果没有cdn的话，就没有如今的效果，我现在的模式就是hexo（github page+公益cdn），后话了，先回到这这里，由于图片一多，造成发送图片源位置移动的话，还要重新找，特别是我在hexo里static下的img文件夹，本身markdown显示的都是相对路径，管理起来很麻烦，如今我了解到图床的概念，不但可以统一进行管理，还能减少博客仓库的体积，提升网站速度，（虽然我现在依然保持着，源图和文档在一起，源图片直接上传到github，毕竟上传到别人服务器的数据，就怕突然有一天倒闭了，就没了，所以我依然有着备份原图片在本地的习惯），所以我接下来讲的，只是适用于，不那么重要的项目
阿里云OSS+Picgo
阿里云oss，我个人使用来说，很方便，速度很快，结合图床来使用也是很方便的，就是唯一的缺点就是大多都是按量付费，如果内容一多，对于本身就是非盈利性的我来说，就很不妥当，通过picgo或兰空图床进行上传图片到阿里云oss，访问速度也很快，针对国内用户的访问速度明显提升（费用：存储加公网访问流量费用）
还有一个办法就是设置反向代理，你需要购买一台同区域的esc，保持和你存储桶是一个区域的，这样经过的流量就是内网流量，不会计费，但是会计算存储费用
图床搭建说明
Cloudflare R2 + WebP Cloud + 图床工具 的方案尽管牵扯到了多个组件和平台，但所有操作都在 Free Plan 中，也是我最终选定的方案，下面将从零开始介绍如何搭建这个免费图床系统。
Cloudflare R2
R2 是 Cloudflare 推出的免费对象存储服务，需要免费注册一个 Cloudflare 账号才能使用，注册登录后，点击左侧边栏的 R2 访问服务，但需要注意的是开通 R2 服务需要绑定信用卡（国内外主流信用卡皆可），但并不会扣费，主要是为了验证用户身份使用。但是我最近发现他有了paypal验证方式，有了paypal，可以直接绑定国内储蓄卡，就可以通过R2验证的银行卡验证了

创建存储桶
开通 R2 服务后，点击右上角「创建存储桶」按钮进行创建。

进入创建配置界面后，需要填写存储桶（Bucket）名称，建议有一些辨识度，后续在配置上传时会用到。
位置则选择「自动」，但可以额外多配置一个位置提示，由于我后续还将使用「WebP Cloud」服务的美西机房进行图片代理优化，所以在此处选择的是「北美洲西部（WNAM）」，根据需求选其他区域也可以，但 Cloudflare 并不保证一定会分配到所指定的区域。

进入设置

首先我们需要打开「R2.dev 子域」，这是为了后续访问图片时需要的公网地址，点击「允许访问」，并按照提示输入「allow」即可开启。

完成后会显示一个以 r2.dev 结尾的公网网址，即我们后续访问图片的网址。
自定义图床域名（可选）
但是分配的网址比较长，不易于记忆，我们可以通过「自定义域」来绑定我们的专属域名，点击「连接域」按钮，填入想要访问的域名

然后在你域名服务商那添加dns解析，由于我是将域名托管到了cloudflare，直接自动添加解析了

效果就是这样了


配置存储桶访问api
当我们回到对象页面，上传一张测试图片

就有链接可以进行访问了

但是如果每次都打开cloudflare手动上传图片的话都会很麻烦。R2 提供了 S3 兼容的 API，可以方便地使用一些客户端/命令行工具进行上传、删除等操作。



这时候就会有api令牌信息，这里的内容只会出现一次，可以记下来，但是不要给别人哦

至此，我们需要在 Cloudflare R2 上配置的部分就完成了，接下来我们需要配置图床工具吧。
PicGo（可选，无需服务器）
PicGo 是一个用于快速上传并获取图片 URL 的工具软件，有着较为丰富的插件生态，支持多种图床服务，其 GitHub 仓库为「GitHub - Molunerfinn/PicGo」，可以下载对应平台客户端使用。
配置 R2 图床
PicGo 本体并不包括 S3 图床，但可以通过「GitHub - wayjam/picgo-plugin-s3」插件来支持。
windows下的稳定版2.3.1会出现搜索不到插件的情况,下载里面的beta版本就行了
Bug: 插件设置页无法搜索到插件 · Issue #1297 · Molunerfinn/PicGo
我只能安装1.0.2的，第一个安装不了，无关紧要

然后填写信息

这里有几项配置需要尤其注意。

应用密钥 ID，填写 R2 API 中的 Access Key ID（访问密钥 ID）
应用密钥，填写 R2 API 中的 Secret Access Key（机密访问密钥）
桶名，填写 R2 中创建的 Bucket 名称，如我上文的 blog-r2
文件路径，上传到 R2 中的文件路径，我选择使用 &#123;fileName&#125;.&#123;extName&#125; 来保留原文件的文件名和扩展名。
自定义节点，填写 R2 API 中的「为 S3 客户端使用管辖权地特定的终结点」，即 xxx.r2.cloudflarestorage.com 格式的 S3 Endpoint
自定义域名，填写上文生成的 xxx.r2.dev 格式的域名或自定义域名，如我配置的 image.qianyisky.cn


其他配置保持默认即可，确认参数无误后点击「确定」与「设置为默认图床」即可。
图片上传

完成上述配置后，我们就可以在「上传区」直接拖入文件进行图片上传了，如上传后显示无误则为配置成功，生成的链接会自动在系统剪贴板中，直接在需要的地方粘贴即可。
根据你想要的链接格式，我这里是markdown，就选择markdown格式，然后在相册里复制链接，在markdown文档看看


Lsky Pro图床（可选，需要服务器）
官网：Lsky Pro+ - 属于您自己的云上相册。
部署教程：Lsky Pro图床 | 严千屹博客
我这里就展示自己搭建好lsky pro图床进行演示了
创建存储策略


确认即可
图片上传
设置上传图片的限制大小为10M


点击保存即可


两者路径修改位置

这就是统一管理的方便性
这是lsky pro设置上传路径的位置

这是PicGo设置上传路径的位置

再去测试上传看看

效果

当然你可以在设置里选择这两个



WebP Cloud 图片优化
至此我们已经完成了整个图床的搭建、配置和上传，但通常我们本地截图或是相机拍摄的图片体积较大，对于访客来说加载时间会较长，并不直接适合互联网发布。
根据从零开始搭建你的免费图床系统（Cloudflare R2 + WebP Cloud + PicGo） · Pseudoyu写到WebP Cloud的方法
它可以实现图片的压缩，加快页面显示的速度

简单来说这是一个类 CDN 的图片代理 SaaS 服务，可以在几乎不改变画质的情况下大幅缩小图片体积，加快整体站点加载速度。发展到现在除了图片体积减少外，还提供了缓存、添加水印、图片滤镜等更多实用的功能，并提供了自定义 Header 等配置选项。
配置webp cloud
首先通过 GitHub 授权登录 WebP Cloud 平台。


回到主页，点击创建代理


为了优化国内访问，我「Proxy Region」选择的是美西「Hillsboro, OR」区域
「Proxy Name」填写一个自定义名称即可
「Proxy Origin URL」，比较重要，需要填写上文我们配置好的 R2 自定义域名，如我填写的是 image.qianyisky.cn，如果没配置自定义域名则填写 R2 提供的 xxx.r2.dev 格式的域名


之后点击你创建的代理，将代理地址更新到存储策略的配置里
PicGo配置

Lsky Pro配置

再进行上传图片的测试

就是我们通过图床工具上传的图片上传了之后，就可以通过这个WebP Cloud Services提供的代理节点进行访问
如果觉得默认代理地址不好看，可以进行设置自定义域名



最后确认，等待十分钟这样子，点击刷新按钮，就会更新代理地址了，然后点击启用


这时候你就可以去修改之前的图床工具的代理地址了
https://images.qianyisky.cn/PicGo/test.png
WebP Cloud 用量
免费用户每天有 3000 Free Quota，即能够代理 3000 次图片访问请求，并提供 200M 的图片缓存，对于一般用户来说完全够用，如有一些流量较大的特定时期也可以购买额外 Quota，价格很便宜。
如超过了 Quota，访问则会被 301 转发到源站图片地址，不经 WebP Cloud 服务压缩，但依然可用；超过 200M 的缓存则会按照 LRU 算法清理，所以依然能够保障一些高频请求的图片能够有较好的访问体验。
总结
以上就是Pseudoyu的图床系统搭建方案，如果你的项目是在国内的服务器上，用这个方法勉强够用哦，基本都是免费订阅的
那么接下来就要讲到安全这几块了
以下内容来自使用 WebP Cloud 与 Cloudflare WAF 为你的图床添加隐私和版权保护 · Pseudoyu
可以看看作者的一个图片被盗用的经历，就可以知道隐私保护的重要性
使用 WebP Cloud 与 Cloudflare WAF 为你的图床添加隐私和版权保护
在使用 WebP Cloud 的过程中，Pseudoyu发现它还提供了自定义 Proxy User Agent、水印等功能，于是萌生了一个想法，是不是可以通过 WebP Cloud 对Pseudoyu的图床源站链接进行保护，使 WebP Cloud 的代理链接成为访问我所有图片的唯一入口，并统一添加Pseudoyu的专属版权水印。
本文是对这一实践的记录，也算是图床搭建番外篇了。
需求分析

理论上两个地址都可以进行访问到我图床里的图片，但是前者是代理后经过处理的图，后者是直接访问cloudflare R2的原图
隐私保护
事实上我们通过手机、数码相机等设备拍摄的照片都会携带 EXIF(EXchangeable Image File Format) 信息，通常会包含拍摄设备、时间和地点等敏感信息，我们可以通过一些技术方式手动去除这些元数据，但操作十分繁琐且容易遗漏。
Pseudoyu查阅了一下 WebP Cloud 的文档，发现它果然提供自动擦除 EXIF 信息的功能，无须额外配置操作，但其实访客依然可以可以通过 Cloudflare R2 暴露出的源站信息访问到原图，为了避免这一点，我们需要限制用户只能通过 WebP Cloud 代理链接进行请求，访问 Cloudflare R2 源站链接时获取不到任何有用信息。
版权保护
这是作者图片被盗用的经历

实现方案
需求清晰了，其实主要分为两部分：

让用户只能通过 WebP Cloud 代理链接访问到我的图片，禁止直接访问原图链接
在 WebP Cloud 代理层面为所有的图片统一自动添加自己的版权水印，无须手动操作

以下是我的实现方案与详细步骤。
WebP 自定义 User Agent + Cloudflare WAF
WebP Cloud 配置
当我们访问互联网上的网页或图片链接时，请求通常会包含一个 User Agent 字段，一般包含浏览器版本等信息，网站可针对不同的 User Agent 进行一些特定逻辑处理。
WebP Cloud 默认会使用 WebP Cloud Services/1.0 作为值，也就是不论用户访问图片时使用的是什么终端设备和浏览器，请求到 Cloudflare R2 时都会被统一为 WebP Cloud 定义的 User Agent 值，而这个值又是用户可以自定义的。

因此，我们登录 WebP Cloud 的控制台，将「Proxy User Agent」字段设置为一个自定义值，如 ABC.com/1.0。
随后更新代理
Cloudflare WAF 配置
WAF（Web Application Firewall） 是 Cloudflare 提供的一个防火墙服务，可以自定义规则来限制特定请求以保护网站安全，登录 Cloudflare 后在左侧边栏点击「网站」，点击进入需要保护的域名，选择侧边栏「安全性」 - 「WAF」即可免费使用（注：不是最外层的账户级 WAF），免费账户可设定五个自定义规则。


点击右侧的「编辑表达式」，填入以下规则：
(http.user_agent ne &quot;ABC.com/1.0&quot;) and (http.host eq &quot;image.qianyisky.cn&quot;)

其他默认，然后点击保存

方便理解：
1.代理链接的User Agent会包含在网络请求里，也就是设置了ABC.com/1.0（A钥匙）
2.cloudflare WAF：设置了只有A钥匙才可以访问
3.一般用户浏览网页的User Agent是这样的
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36
也就是说没有A钥匙，是访问不了的
4.所以在代理链接设置了A钥匙，那么他会把访问原地址的流量请求加入A钥匙，达到访问的目的，如果没有A钥匙直接访问原地址就会出现如下图


所以完成配置后，当我们再次访问原地址image.qianyisky.cn的时候就会被拦截，例如：
原地址：https://image.qianyisky.cn/PicGo/test.png
代理地址：https://images.qianyisky.cn/PicGo/test.png
完美实现了我们的需求。
设置水印
我这里就设置了一个灰色的水印


设置好后保存

由于，刚设置，只会对新上传的图片添加水印，如果你要之前上传的图片都要打上水印，你就要清除缓存，最后重新访问图片就会有水印了

缓存的规则：目前所有代理都会有 200.00 MiB 缓存，如果超出这个限制，我们将使用“最近最少使用”（LRU）算法进行驱逐，也就是说，最少请求的内容将从缓存中驱逐。
代理地址：https://images.qianyisky.cn/PicGo/test.png


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>华为ensp模拟器安装教程</title>
    <url>/posts/f8bb3dfe/</url>
    <content><![CDATA[
华为ensp模拟器安装教程
请留意：经过多年，Windows系统已经推出多个新版本，因此可能会出现各种不相容的状况，故此此文仅供参考，如有疑问，请自行处理。eNSP模拟器从2019年开始不再有新版本更新，最近的版本是1.3.00.100 V100R003C00SPC100。
安装准备
下载地址1：自建   速度较慢
下载地址2：ensp及依赖安装包
这个下载之后是ensp及依赖安装包.exe123，重命名把后面的123删除即可
安装环境检查
检查之前是否已经安装过 eNSP 和依赖软件，如果有先请卸载，包括依赖软件一起卸载。
如果之前安装过 eNSP ，请使用注册表清理工具清理一下注册表【此步骤谨慎操作，注册表比较重要，请在有备份的情况下清理，清理出错可能会导致系统不可用】。
eNSP安装和使用过程中请将 Windows 防火墙关闭。
Windows11安装需要关闭内核隔离选项。

安装winPcap
双击安装包，一直下一步到这，保持默认，继续下一步


点击finish即可
安装Wireshark
双击安装包打开，一直下一步，到这，保持默认，继续下一步

保持默认，继续下一步

可以自行选择安装路径，但是不建议,我这里是c盘内存不多了

保持默认，下一步

保持默认，下一步

安装过程中，会跳出一个安装节目，保持默认，下一步即可

都不选下一步

最后点击finish，返回wireshark安装界面
啥也不选，点击finish

安装VirtualBox
双击安装包打开，一直下一步，到这，保持默认，继续下一步（自行选择安装路径，也可以默认）



然后点击安装到这




安装ensp




然后一直下一步，安装即可

打开ensp


有报错了，启动一个AR


因为刚刚安装VirtualBox最后没有重启电脑，你重启一下电脑就行了
要确保是这个地址

然后你再去启动就可以启动了
如果还是不行，AR路由器还是启动不了，你才执行下面的操作
按win键搜索运行输入regedit

你直接导航到
计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\VBoxDrv
将Start的值改成3，然后重启电脑


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>eNSP</tag>
      </tags>
  </entry>
  <entry>
    <title>公共留言区</title>
    <url>/posts/22484/</url>
    <content><![CDATA[


        
            
        
        
            千屹留言区
        
                
            
        
    
 
    这里是公共留言区，有什么问题和建议都可以畅所欲言，在下面留言哦！


]]></content>
      <tags>
        <tag>Public</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Centos7部署k3s</title>
    <url>/posts/df961508/</url>
    <content><![CDATA[
基于Centos7部署k3s
主机拓扑



主机名
ip
CPU
内存




Server1
192.168.48.101
≧2
2G


Server2
192.168.48.102
≧2
2G


Server3
192.168.48.103
≧2
2G


Agent1
192.168.49.104
≧1
512MB



如果你是只用单serve1只需要创建server1和若干台agent，部署教程请跳转3.基础k3s
如果你是高可用一定需要保留≥3台的server节点，部署教程请跳转6.高可用k3s
前提是要完成2.基础配置
基础配置
高可用和基础k3s都要运行
系统初始化
操作节点:[所有节点]
sudo vi system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.更新yum源软件包缓存&quot;yum clean all &amp;&amp; yum makecacheecho &quot;5.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 Server1192.168.48.102 Server2192.168.48.103 Server3192.168.48.104 Agent1EOFecho &quot;6.必备工具安装&quot;yum install wget psmisc vim net-tools telnet socat device-mapper-persistent-data lvm2 git gcc -yecho &quot;7.重启系统&quot;reboot
sudo chmod +x system_init.sh[Server1] sudo sh system_init.sh Server1 101[Server2] sudo sh system_init.sh Server2 102[Server3] sudo sh system_init.sh Server3 103[Agent1] sudo sh system_init.sh Agent1 104
安装容器工具
请你考虑好，你的集群要以什么为运行时，下面提供了，docker和containerd，自行选择
只能二选一！！！
只能二选一！！！
只能二选一！！！
安装docker
操作节点:[所有节点]
sudo curl -L &quot;https://qygit.qianyisky.cn/https://github.com/docker/compose/releases/download/v2.35.1/docker-compose-linux-x86_64&quot; -o /usr/local/bin/docker-compose#卸载旧版本sudo yum -y remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum remove docker-ce docker-ce-cli containerd.io docker-compose docker-machine docker-swarm -ysudo rm /etc/yum.repos.d/docker-ce.reposudo rm -rf /var/lib/dockersudo yum install -y yum-utils device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo yum install docker-ce -ysudo systemctl enable --now dockersudo chmod +x /usr/local/bin/docker-composesudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,    &quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart dockersudo docker-compose --versionsudo docker version
安装containerd
操作节点:[所有节点]
sudo yum install -y yum-utilssudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo yum clean all &amp;&amp; yum makecachesudo yum install -y containerd.iosudo mkdir -p /etc/containerd/certs.d/docker.iosudo mkdir -p /etc/containerd/certs.d/registry.k8s.iosudo mkdir -p /etc/containerd/certs.d/k8s.gcr.iosudo mkdir -p /etc/containerd/certs.d/ghcr.iosudo mkdir -p /etc/containerd/certs.d/gcr.iosudo mkdir -p /etc/containerd/certs.d/quay.iosudo mkdir -p /etc/containerd/certs.d/registry-1.docker.iosudo tee /etc/containerd/certs.d/docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://docker.io&quot; [host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry-1.docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://registry-1.docker.io&quot;[host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/k8s.gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://k8s.gcr.io&quot;[host.&quot;https://registry.aliyuncs.com/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/ghcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://ghcr.io&quot;[host.&quot;https://ghcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://gcr.io&quot;[host.&quot;https://gcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry.k8s.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;registry.k8s.io&quot;[host.&quot;k8s.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;, &quot;push&quot;][host.&quot;https://registry.aliyuncs.com/v2/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/quay.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://quay.io&quot;[host.&quot;https://quay.tencentcloudcr.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo sh -c &#x27;containerd config default &gt; /etc/containerd/config.toml&#x27;sudo sed -i &#x27;s#sandbox_image = &quot;registry.k8s.io/pause:.*&quot;#sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.10&quot;#&#x27; /etc/containerd/config.tomlsudo sed -i &#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27; /etc/containerd/config.tomlsed -i &#x27;/\[plugins\.&quot;io\.containerd\.grpc\.v1\.cri&quot;\.registry\]/!b;n;s/config_path = &quot;&quot;/config_path = &quot;\/etc\/containerd\/certs.d&quot;/&#x27; /etc/containerd/config.toml# 重启 containerd 服务sudo systemctl daemon-reloadsudo systemctl restart containerd.servicesudo ctr image ls
添加镜像源
操作节点:[所有节点]
sudo mkdir -p /etc/rancher/k3ssudo tee /etc/rancher/k3s/registries.yaml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;mirrors:  docker.io:    endpoint:      - &quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;       - &quot;https://docker.xuanyuan.me&quot;       - &quot;https://docker.m.daocloud.io&quot;       - &quot;https://docker.1ms.run&quot;       - &quot;https://docker.1panel.live&quot;       - &quot;https://hub.rat.dev&quot;       - &quot;https://docker-mirror.aigc2d.com&quot;       - &quot;https://docker.qianyios.top/&quot;  quay.io:    endpoint:      - &quot;https://quay.tencentcloudcr.com/&quot;     registry.k8s.io:    endpoint:      - &quot;https://registry.aliyuncs.com/v2/google_containers&quot;     gcr.io:    endpoint:      - &quot;https://gcr.m.daocloud.io/&quot;     k8s.gcr.io:    endpoint:      - &quot;https://registry.aliyuncs.com/google_containers&quot;     ghcr.io:    endpoint:      - &quot;https://ghcr.m.daocloud.io/&quot;   EOF
建议在这里打个快照
基础k3s
确保所有节点都下载了k3s安装脚本
sudo wget https://rancher-mirror.rancher.cn/k3s/k3s-install.shsudo chmod +x k3s-install.sh
这里目前只需要用到Server1和Agent1，也就是单server1情况
部署Server
操作节点：[Server1]
如需在单个服务器上安装 K3s，可以在 server 节点上执行如下操作：
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
sudo \INSTALL_K3S_MIRROR=cn \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh --docker \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot;

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
sudo \INSTALL_K3S_MIRROR=cn \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot;

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
部署Agent节点
操作节点：[Server1]
查看token
sudo cat /var/lib/rancher/k3s/server/node-token

K107eca1d1c601a2d308c7dd0b639ef08fa9414f729c720c0cc04337126aa966884::server:035b03761950e59b30e9f5310b92310c

要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
基于docker
操作节点：[Agent1]
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
sudo \INSTALL_K3S_MIRROR=cn \K3S_URL=https://192.168.48.101:6443  \K3S_TOKEN=035b03761950e59b30e9f5310b92310c \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh --docker
· 035b03761950e59b30e9f5310b92310c 是前面server1获取的token
· 192.168.48.101是server1的ip

这时候在server1查看是否成功加入集群
sudo kubectl get nodes

如果需要部署dashboard请跳转7.安装dashboard
基于containerd
操作节点：[Agent1]
如果有参数的值数错了，可以改一下，然后重新运行命令即可
sudo \INSTALL_K3S_MIRROR=cn \K3S_URL=https://192.168.48.101:6443  \K3S_TOKEN=035b03761950e59b30e9f5310b92310c \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh 
· 035b03761950e59b30e9f5310b92310c 是前面server1获取的token
· 192.168.48.101是server1的ip

这时候在server1查看是否成功加入集群
sudo kubectl get nodes

如果需要部署dashboard请跳转7.安装dashboard
高可用k3s
确保所有节点都下载了k3s安装脚本
sudo wget https://rancher-mirror.rancher.cn/k3s/k3s-install.shsudo chmod +x k3s-install.sh
配置集群负载均衡器
官方教程：集群负载均衡器
按理来说我们需要两台额外的节点来做负载均衡和高可用vip节点，但是为了测试方便，我们直接部署在
server节点，也就是图中的第二种方法

操作节点：[所有的server]
sudo yum install -y haproxy keepalivedsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;frontend k3s-frontend    bind *:16443    mode tcp    option tcplog    default_backend k3s-backendbackend k3s-backend    mode tcp    option tcp-check    balance roundrobin    timeout connect 5s    timeout server 30s    timeout client 30s    default-server inter 10s downinter 5s    server server-1 192.168.48.101:6443 check    server server-2 192.168.48.102:6443 check    server server-3 192.168.48.103:6443 checkEOF
操作节点:[Server1]
sudo tee /etc/keepalived/keepalived.conf &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state MASTER    #这里要改 server1是Master 其他都是Backup    priority 200    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点:[Server2]
sudo tee /etc/keepalived/keepalived.conf &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state BACKUP    #这里要改 server1是Master 其他都是Backup    priority 150    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点:[Server3]
sudo tee /etc/keepalived/keepalived.conf &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state BACKUP    #这里要改 server1是Master 其他都是Backup    priority 100    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点：[所有的Server]
sudo systemctl restart haproxy keepalivedsudo systemctl enable --now haproxy keepalived
现在来查看vip是否生成
操作节点：[Server1]
ip a

初始化第一个server
操作节点:[server1]
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可

--docke一定要放在所有参数的最前面

sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh --docker --cluster-init - server  \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--tls-san= 192.168.48.200 
qianyiosQianyios12345是作为集群间的共享密钥，可自定义

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh  --cluster-init - server \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为集群间的共享密钥，可自定义
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
其他server加入集群
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh --docker \--server https://192.168.48.101:6443  \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为第一个server1共享出来的密钥
–server https://192.168.48.101:6443 改成serve1的ip地址即可
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--server https://192.168.48.101:6443  \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为第一个server1共享出来的密钥
–server https://192.168.48.101:6443 改成serve1的ip地址即可
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
其他Agent加入集群
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \K3S_URL=https://192.168.48.101:6443  \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh --docker - agent 
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
sudo \INSTALL_K3S_MIRROR=cn \K3S_TOKEN=qianyiosQianyios12345 \K3S_URL=https://192.168.48.101:6443  \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \./k3s-install.sh - agent
这时候在Server可以查看node情况
sudo kubectl get nodes

安装dashboard
在基础或高可用k3s都可以使用
操作节点:[Server1]
sudo wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml &amp;&amp; \sudo sed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yaml sleep 3sudo sed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml sudo sed -i &#x27;/targetPort: 8443/a\      nodePort: 30001&#x27; recommended.yaml sudo sed -i &#x27;/nodePort: 30001/a\  type: NodePort&#x27; recommended.yaml
运行pod
sudo kubectl apply -f recommended.yaml
创建token
#创建service account并绑定默认cluster-admin管理员群角色#创建用户sudo kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权sudo kubectl create clusterrolebinding dashboard-admin \--clusterrole=cluster-admin \--serviceaccount=kubernetes-dashboard:dashboard-admin#临时获取用户Token（默认只有 30 分钟 ）sudo kubectl create token dashboard-admin -n kubernetes-dashboard#永久获取用户Tokensudo cat &lt;&lt;EOF | sudo kubectl apply -f -apiVersion: v1kind: Secretmetadata:  name: dashboard-admin-token  namespace: kubernetes-dashboard  annotations:    kubernetes.io/service-account.name: dashboard-admintype: kubernetes.io/service-account-tokenEOFKUBECONFIG_FILE=&quot;dashboard-kubeconfig.yaml&quot;# 自动获取 API Server 地址APISERVER=$(sudo kubectl config view --minify -o jsonpath=&#x27;&#123;.clusters[0].cluster.server&#125;&#x27;)# 自动获取 CA 证书CA_CERT=$(sudo kubectl config view --raw -o jsonpath=&#x27;&#123;.clusters[0].cluster.certificate-authority-data&#125;&#x27;)# 自动从 Secret 获取 Token（你提到的正确方式）TOKEN=$(sudo kubectl get secret dashboard-admin-token -n kubernetes-dashboard -o jsonpath=&#x27;&#123;.data.token&#125;&#x27; | base64 --decode)# 生成 kubeconfig 文件sudo cat &lt;&lt;EOF &gt; $&#123;KUBECONFIG_FILE&#125;apiVersion: v1kind: Configclusters:  - name: kubernetes    cluster:      server: $&#123;APISERVER&#125;      certificate-authority-data: $&#123;CA_CERT&#125;users:  - name: dashboard-admin    user:      token: $&#123;TOKEN&#125;contexts:  - name: dashboard-context    context:      cluster: kubernetes      user: dashboard-admincurrent-context: dashboard-contextEOFecho &quot;✅ kubeconfig 文件已生成：$&#123;KUBECONFIG_FILE&#125;&quot;
这时候就会提示你
✅ kubeconfig 文件已生成：dashboard-kubeconfig.yaml
你就把这个文件上传到dashboard的kubeconfig就可以免密登入了
这个192.168.48.200是高可用地址

高可用模拟宕机测试
查看dashboard部署在哪个节点
sudo kubectl get pods -A -l k8s-app=kubernetes-dashboard -o widesudo kubectl get nodes
我这里显示的是dashboard部署在Server1
那么我们就对Server1进行powerof关机，来模拟宕机看看dashboard能否被k3s自动调度到其他节点
但是我发现pod还在running的状态,且server1的状态还是ready


server2 已经被标记为 NotReady
说明 Kubernetes 已感知到它不可用（可能是关机、网络不通或 kubelet 崩溃等），但：

如果 Pod 的副本数是 1，Kubernetes 不会自动创建新的 Pod 。
默认的节点失联容忍时间较长（5分钟），所以即使节点 NotReady，也不会立刻触发 Pod 驱逐。


方案一 等待五分钟
经过漫长等待，dashboard的pod进行了重新分配

kubectl get pods -A -l k8s-app=kubernetes-dashboard -o wide
经过查看已经被调度到了Agent1节点

而且，原本server1的高可用ip，现已经漂移到了server2了，同样也可以用高可用ip访问k3s内的所有pod

结论：高可用实验，实验成功，且页面可以正常访问
方案二 手动删除 Pod 强制重建（推荐测试）
由于刚刚经过方案一的测试，被调度到了Agent1，所以这次对Agent1进行模拟宕机，然后手动删除pod
sudo kubectl delete pod -n kubernetes-dashboard pod名字

经过手动删除，立马触发自动调度，已经被调度到了Server3节点
结论：高可用实验，实验成功，且页面可以正常访问
方案三 缩短节点失联容忍时间（适用于生产环境）
如果你希望 Kubernetes 更快地响应节点故障，可以在 K3s 启动参数中添加以下内容：
--node-monitor-grace-period=20s \--pod-eviction-timeout=30s
⚠️ 注意：这会影响整个集群的行为，适用于生产环境或需要快速故障恢复的场景。
修改启动参数
如果你在安装的时候有些参数输入错了，或者想改，可以在这里改
首先，停止 K3s 服务以避免在更新过程中出现冲突：
sudo systemctl stop k3s
修改k3s启动参数
sudo vi /etc/systemd/system/k3s.service

假设你的–tls-san的高可用地址输入错了，要改成别的，你就改完，记得保存
然后删除旧证书
sudo rm -f /var/lib/rancher/k3s/server/tls/serving-kube-apiserver*sudo rm -f /var/lib/rancher/k3s/server/tls/server*
重启服务
sudo systemctl daemon-reloadsudo systemctl start k3s
卸载K3S
官方教程：Uninstalling K3s | K3s
卸载Server
要从服务器节点卸载 K3s，请运行：
/usr/local/bin/k3s-uninstall.sh
卸载Agent
要从代理节点卸载 K3s，请运行：
/usr/local/bin/k3s-agent-uninstall.sh
解决非root用户使用kubectl等命令显示无命令的办法
这时候运行查看节点命令，提示找不到命令
sudo kubectl get nodes
一看发现只有具体到指定路径才可以正常运行，并且用户和权限组都是root

这时候在普通用户查看visudo
sudo visudo

一看地址，他并没有/usr/local/bin的路径，所以普通用户是没办法继承root的路径的，所以你要设置普通用户默认的环境变量（生成环境，建议仔细斟酌要不要添加，不然就只能用绝对路径）
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

这时候再次运行k3s命令
sudo kubectl get nodessudo crictl images


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Centos 7</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云容器服务构建私人docker镜像</title>
    <url>/posts/54563/</url>
    <content><![CDATA[
基于阿里云容器服务构建私人docker镜像
前情提要
你是否被国外镜像拉取速度慢的情况所折磨，甚至一个小时都未必能下载好或者下载不到。
接下来我们通过阿里云容器服务构建这些海外镜像为私人镜像

使用之前，要有自己的阿里云账户，且要有一定的dockerfile知识
Docker笔记 - 严千屹博客 (qianyios.top)
原理图：

创建海外镜像Dockerfile
Codeup · 企业级代码管理平台 (aliyun.com)
注册账号过程不解释，自行探索

添加文件

创建dockerfile
假设这里是你遇到的海外镜像，拉取很慢的镜像

提交之后我们就可以看见文件了

去个人中心设置里设置你的克隆密码


创建个人访问令牌


下面构建镜像要用到这个个人访问令牌（这个只会出现一次，要记下来）
阿里容器服务构建镜像
容器镜像服务 (aliyun.com)
同样，注册账号过程不做解释
创建个人实例，并点击

创建命名空间

创建镜像仓库（仓库名称=docker镜像名称），并点击进去

绑定代码源（一定要勾选海外构建镜像）

用codeup获取的克隆账号


填写信息

构建镜像，过一会他会自己构建好

获取镜像地址

registry.cn-hangzhou.aliyuncs.com/qianyios/pause:3.1
验证
docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/pause:3.1

你会发现已经下载好了！还很快！
以下是一个k8s部署实例文件，有时候会因为镜像拉取慢，我们就可以替换为我们自己构建的镜像


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>华为配置专题</title>
    <url>/posts/1c79e7d0/</url>
    <content><![CDATA[
华为配置专题
基础配置（送分题）：system-view、sysname、interface vlanif、写个IP地址
高频配置（一定要会）：VLAN 、DHCP、ACL、策略路由、NAT、静态/默认/RIP/OSPF
偏门的考点（尽力而为）：IPv6、4G、WLAN（缺少这个案例）、IPSEC（不全，少了动态配置）
topo下载：华为配置专题案例
基础配置
基础配置视图

华为登入配置
&lt;AR&gt; system-view //进入系统模式
[AR]sysname Huawei //设备命名为Huawei
[Huawei] telnet server enable //开启设备telnet功能
[Huawei] user-interface vty 0 4 //开启登录端口0-4
[Huawei-ui-vty0-4] protocol inbound telnet //通过telnet协议登录
[Huawei-ui-vty0-4] authentication-mode aaa //认证方式为aaa
[Huawei] aaa //启用aaa
[Huawei-aaa] local-user admin123 password admin123 //配置用户名密码
[Huawei-aaa] local-user admin123 service-type telnet //用户用于telnet
[Huawei-aaa] local-user admin123 privilege level 15 //用户等级为15
[Huawei-aaa] quit //退出来
[Huawei]
VLAN与VLANIF地址配置
&lt;HUAWEI&gt; system-view //进入系统模式
[HUAWEI] sysname Switch //交换机重命名
[Switch] vlan 100 //创建vlan 100（批量创建命令：vlan batch 10 20）
[Switch-vlan100] quit //退出vlan模式
[Switch] interface gigabitethernet 0/0/1 //进入接口
[Switch-GigabitEthernet0/0/1] port link-type access //把交换机接口模式设置为access
[Switch-GigabitEthernet0/0/1] port default vlan 100 //把接口划入vlan100
[Switch-GigabitEthernet0/0/1] quit //退出
[Switch] interface vlanif 100 //进入三层vlanif接口
[Switch-Vlanif100] ip address 172.16.1.1 24 //配置IP地址
[Switch-Vlanif100] quit //退出
[Switch]
DHCP配置命令
&lt;SwitchA&gt; system-view //进入系统模式
[SwitchA] dhcp enable //启用dhcp服务
[SwitchA] ip pool 1 //系统视图下创建IP地址池1
[SwitchA-ip-pool-1] network 10.1.1.0 mask 255.255.255.128 //配置地址池范围
[SwitchA-ip-pool-1] dns-list 10.1.1.1 //配置DNS
[SwitchA-ip-pool-1] gateway-list 10.1.1.1 //配置PC电脑网关
[SwitchA-ip-pool-1] excluded-ip-address 10.1.1.2 //保留IP地址
[SwitchA-ip-pool-1] excluded-ip-address 10.1.1.4 //保留IP地址
[SwitchA-ip-pool-1] lease 10 // 配置租期
[SwitchA-ip-pool-1] quit //退出
配置VLANIF10接口下的客户端从全局地址池ip pool 1中获取IP地址。
[SwitchA] interface vlanif 10 //进入VLAN10接口
[SwitchA-Vlanif10] ip address 10.1.1.254 255.255.255.128 //配置VLAN网关
[SwitchA-Vlanif10] dhcp select global/interface //全局或接口dhcp服务器
ACL访问控制列表配置
//配置时间段，周一到周五早上8:30到下午18:00
[Huawei] time-range workday 8:30 to 18:00 working-day
//启用编号为2000的ACL
[Huawei] acl 2000
//只允许192.168.1.10这一个用户在工作日可以telnet交换机
[Huawei-acl-basic-2000] rule permit source 192.168.1.10 0 time-range workday
//这个地方rule deny可以不用写，acl在这种场景下最后隐含有一条deny any的语句
[Huawei-acl-basic-2000] rule deny
//进入虚拟接口0-4
[Huawei] user-interface vty 0 4
//应用ACL，只允许匹配acl数据流的的用户telent登陆交换机，没有被permit的全部被deny
[Huawei-ui-vty0-4] acl 2000 inbound
NAT地址转换配置
[Router] nat address-group 1 2.2.2.100 2.2.2.200 //配置NAT地址池1
[Router] nat address-group 2 2.2.2.80 2.2.2.83 //配置NAT地址池2
[Router] acl 2000 //配置ACL2000
//设置ACL200编号为5的规则，允许上述源地址通过
[Router-acl-basic-2000] rule 5 permit source 192.168.20.0 0.0.0.255
[Router-acl-basic-2000] quit
[Router] acl 2001 //配置ACL2001
//设置ACL2001中编号为5的规则，允许上述地址通过
[Router-acl-basic-2001] rule 5 permit source 10.0.0.0 0.0.0.255
[Router-acl-basic-2001] quit
[Router] interface gigabitethernet 3/0/0 //进入接口
//将设置ACL2000匹配的源地址，转换为地址池1的地址，并且不开启端口NAT
[Router-GigabitEthernet3/0/0] nat outbound 2000 address-group 1 no-pat
//将设置ACL2001匹配的源地址，转换为地址池2的地址
[Router-GigabitEthernet3/0/0] nat outbound 2001 address-group 2
[Router-GigabitEthernet3/0/0] quit
[Router]
动态主机配置协议 DHCP


DHCP概念和工作原理



基于接口地址池的DHCP配置

基于全局地址池的DHCP配置

DHCP接口地址池配置案例

DHCP全局地址池配置案例

DHCP案例
三层交换机跨vlan通信案例


system-viewsysname SWvlan batch 10 20interface vlanif10ip address 192.168.10.254 24interface vlanif20ip address 192.168.20.254 24interface GigabitEthernet 0/0/1port link-type accessport default vlan 10interface GigabitEthernet 0/0/2port link-type accessport default vlan 20

DHCP接口和全局配置
还是上面那个图，左边实现dhcp接口地址池，右边实现全局配置
我们就用SW交换机来做dhcp服务端给下面的客户端分配IP地址

基础vlan配置
system-viewsysname SWvlan batch 10 20interface vlanif10ip address 192.168.10.254 24interface vlanif20ip address 192.168.20.254 24interface GigabitEthernet 0/0/1port link-type accessport default vlan 10interface GigabitEthernet 0/0/2port link-type accessport default vlan 20
vlanif10 实现接口dhcp
system-viewdhcp enableinterface vlanif 10dhcp select interfacedhcp server dns-list 8.8.8.8#排除192.168.10.101到192.168.10.253这些地址，其他可分配dhcp server excluded-ip-address 192.168.10.101 192.168.10.253dhcp server lease day 8

对PC1的E0/0/1接口进行抓包，并且设置dhcp模式并且应用


这时候他就可以从可选地址里从大到小分配地址，这是华为才会的，思科则会从小到大进行分配

vlanif20 实现全局dhcp
system-viewinterface vlanif 20dhcp select globalqip pool 20network 192.168.20.0 mask 24gateway-list 192.168.20.254dns-list 9.9.9.9lease 10excluded-ip-address 192.168.20.151 192.168.20.253qdis cu

对pc2进行设置自动获取ip模式


成功，而且两台机子互通

对左边的接口dhcp进行修改成全局dhcp
system-viewinterface vlan 10undo dhcp select interface#输入ydhcp select globalqip pool 10network 192.168.10.0 mask 24gateway-list 192.168.10.254dns-list 8.8.8.8lease 8


这次我没有排除ip地址，所以他会从这个网段下的所有可用地址进行分配
扩展知识点
7.8.4 Option 43 应用举例
7.8.7 DHCP中继（DHCP Relay）
7.8.8 DHCP Snooping
ACL原理与配置
ACL概述


ACL工作原理
ACL由若干条permit或deny语句组成。
• 每条语句就是该ACL的一条规则，每条语句中的permit或deny就是与这条规则相对应的处理动作。

规则编号

匹配符


ACL分类

基本ACL和高级ACL

ACL的匹配机制

ACL的匹配顺序及匹配结果

ACL的应用位置

入站 (Inbound)及出站 (Outbound)方向

ACL配置及应用


高级ACL命令（1）


进阶案例：使用高级ACL限制不同网段的用户互访 (1)


1.下列选项中，哪一项才是一条合法的基本ACL的规则?©
A. rule permit ip
B. rule deny ip
C. rule permit source any
D. rule deny tcp source any
2.高级ACL可以基于哪些条件来定义规则?

源IP地址
目的IP地址
源端口号
目的端口号
协议类型（如TCP、UDP、ICMP等）
数据包优先级（DSCP、ToS等）
ICMP消息类型和代码
时间范围（基于时间的ACL）
片段标记（非首片分片）
数据包长度
TCP标志位（如SYN、ACK、FIN等）
VLAN ID
源MAC地址
目的MAC地址
以太网协议类型

章节总结
ACL是一种应用非常广泛的网络技术。它的基本原理是:配置了ACL的网络设备根据事先设定好的报文匹配规则对经过该设备的报文进行匹配，然后对匹配上的报文执行事先设定好的处理动作。这些匹配规则及相应的处理动作是根据具体的网络需求而设定的。处理动作的不同以及匹配规则的多样性，使得ACL可以发挥出各种各样的功效。
ACL技术总是与防火墙、路由策略、QoS、流量过滤等其他技术结合使用。
在本章节中，主要介绍了ACL的相关技术知识，包括:ACL的作用，ACL的组成、匹配和分类、通配符的使用方法，以及ACL的基本配置及应用。
案例

某公司为保证财务数据安全，禁止研发部门访问财务服务器，但总裁办不受限制
中间的路由器添加了一个百兆网卡接口




配置路由器各个接口的ip地址
Router
system-viewsysname Routerinterface GigabitEthernet 0/0/0ip address 192.168.1.254 24interface GigabitEthernet 0/0/1ip address 192.168.2.254 24interface GigabitEthernet 0/0/2ip address 1.1.1.254 24interface Ethernet 4/0/0ip address 192.168.3.254 24
互联网
system-viewsysname hlwinterface GigabitEthernet 0/0/0ip address 1.1.1.1 24
为啥ping不通

因为pc1的流量可以走到互联网这台路由器，但是回来的流量没有啊，因为互联网这台路由器里没有pc1网段的路由

system-viewip route-static 0.0.0.0 0 1.1.1.254


现在所有网络都通了，接下来要配置acl实现访问策略了

某公司为保证财务数据安全，禁止研发部门访问财务服务器，但总裁办不受限制

Router
system-viewacl 3000#禁止源网段192.168.1.0访问192.168.3.100rule 10 deny ip source 192.168.1.0 0.0.0.255 destination 192.168.3.100 0.0.0.0#允许源网段192.168.2.0访问192.168.3.100rule 20 permit ip source 192.168.2.0 0.0.0.255 destination 192.168.3.100 0.0.0.0#禁止互联网的所有流量访问192.168.3.100rule 30 deny ip source any destination 192.168.3.100 0.0.0.0
配置完后测试一下PC1能不能访问财务部

还能访问为什么，因为你的acl还没有应用到接口上

Router
system-viewinterface Ethernet 4/0/0traffic-filter outbound acl 3000

目的达成，且两台pc访问互联网是没有影响的

网络地址转换NAT
技术背景
随着Internet的发展和网络应用的增多，有限的IPv4公有地址已经成为制约网络发展的瓶颈。为解决
这个问题，NAT（Network Address Translation，网络地址转换）技术应需而生。
NAT技术主要用于实现内部网络的主机访问外部网络。
本章节我们将了解NAT的技术背景， 学习不同类型NAT的技术原理、使用场景。
NAT概述

私有IP地址

NAT技术原理

静态NAT
静态NAT原理

静态NAT转换示例

静态NAT配置介绍

静态NAT配置示例

动态NAT
动态NAT原理

动态NAT转换示例 (出去流量)

动态NAT转换示例 (回程流量)

动态NAT配置介绍

动态NAT配置示例

NAPT、Easy-IP
NAPT原理


NAPT转换示例 (出去流量)

NAPT转换示例 (回程流量)

NAPT配置示例

Easy IP

Easy IP配置示例

NAT Server
NAT Server使用场景

NAT Server转换示例

NAT Server配置示例

何种NAT转换可以让外部网络主动访问内网服务器？
1.静态NAT通过固定映射内网IP到公网IP实现外网访问，适合长期对外服务的服务器；
2.端口映射(NAPT)则通过指定公网IP和端口号将流量转发到内网服务器，节省公网IP资源且灵活性高。
NAPT相比较于No-PAT有哪些优点？
1.NAPT相比No-PAT的优点在于能够通过端口复用技术让多个内网设备共享一个公网IP地址，从而大幅节省公网IP资源，同时支持更多内网设备访问外网。而No-PAT仅进行IP地址转换，每个内网设备需占用一个独立的公网IP，资源利用率低。
章节总结

NAT案例


基本配置
AR1
system-viewun in ensysname AR1interface GigabitEthernet 0/0/1ip address 12.1.1.1 24interface GigabitEthernet 0/0/0ip address 192.168.1.254 24
AR2
system-viewun in ensysname AR2interface GigabitEthernet 0/0/0ip address 12.1.1.254 24
静态NAT
功能就是内网地址和公网地址一一对应
有两个方法
1.在接口下配
AR1
system-viewun in eninterface GigabitEthernet 0/0/1 nat static global 12.1.1.2 inside 192.168.1.1
2.不在接口下配，也就是系统视图下,也就是说你虽然创建了静态nat规则，但是你没有在接口应用
system-viewun in ennat static global 12.1.1.2 inside 192.168.1.1interface GigabitEthernet 0/0/1 nat static enable
二者的区别就是，你要是在接口试图下配置nat是不用输入nat static enable
12.1.1.2是公网地址，这里的12.1.1.0/24是公网网段，也就是说 global我定义这个网段的哪一个地址都行，生产中没有这么多地址，这里就以12.1.1.2到12.1.1.10为公网地址

动态nat
有公网地址池概念，也是内网地址和公网一一对应，但是公网地址会有空闲的
删掉静态NAT的配置
AR1
在接口下配
system-viewun in eninterface GigabitEthernet 0/0/1 undo nat static global 12.1.1.2 inside 192.168.1.1
不在接口下配
system-viewun in enundo nat static global 12.1.1.2 inside 192.168.1.1interface GigabitEthernet 0/0/1 undo nat static enable
快开始配置NAT
AR1
1.创建地址池，编号为1，范围是12.1.1.2到12.1.1.10
2.创建地址转换acl
3.在接口下应用acl,并且设置为no-pat（非端口地址转换）
system-viewun in ennat address-group 1 12.1.1.2 12.1.1.10acl 2000rule 10 permit source 192.168.1.0 0.0.0.255interface GigabitEthernet 0/0/1nat outbound 2000 address-group 1 no-pat

NAPT
接口地址转换，带端口的,这种情况只适合公网地址不多的情况，一般小公司只有一个公网地址的情况，要给公司所有内网电脑去使用，咋办呢，这时候就有了带端口的地址转换
删除动态nat的配置，前面加个undo就行了
AR1
system-viewun in ennat address-group 1 12.1.1.2 12.1.1.2acl 2000rule 10 permit source 192.168.1.0 0.0.0.255interface GigabitEthernet 0/0/1nat outbound 2000 address-group 1


Easy-Ip
适用于没有固定的公网ip的网络，原理跟NAPT一样也是基于端口转换,把规则应用到出接口就行了，以出接口的地址为公网地址做转换
system-viewun in enacl 2000rule 10 permit source 192.168.1.0 0.0.0.255interface GigabitEthernet 0/0/1nat outbound 2000
pc1一样可以ping外网

NAT Server
上面几种方法都是内访问外，我们内网主动去访问外网的，而且有了nat技术，可以保护内网地址，这样外网就不知道我们的内网地址，只知道一个公网的nat地址，那么接下来就有一种是外访问内的
一般叫它端口映射，比如说pc2是一台服务器，你部署了一个网页，那我们就把内网80端口映射到外网的80端口，这样用户就可以通过公网：80访问到我们的服务器
system-view un in eninterface GigabitEthernet 0/0/1nat server protocol tcp global 12.1.1.2 80 inside 192.168.1.2 80

VRRP
VRRP概述与原理
VRRP技术背景：单网关面临的问题

VRRP概述

VRRP的基本概念



VRRP典型应用
VRRP负载分担

VRRP与MSTP结合应用

VRRP监视上行端口

VRRP与BFD联动

VRRP基本配置




VRRP案例

设置pc

acsw
system-viewun in ensysname acswvlan 10interface GigabitEthernet 0/0/3port link-type accessport default vlan 10interface GigabitEthernet 0/0/1port link-type trunkport trunk allow-pass vlan allinterface GigabitEthernet 0/0/2port link-type trunkport trunk allow-pass vlan all
coresw1
system-viewun in ensysname coresw1vlan batch 10 100interface GigabitEthernet 0/0/1port link-type trunkport trunk allow-pass vlan allinterface GigabitEthernet 0/0/3port link-type trunkport trunk allow-pass vlan allinterface GigabitEthernet 0/0/2port link-type accessport default vlan 100interface vlanif 10ip address 192.168.10.252 24interface vlanif 100ip address 192.168.100.1 30
coresw2
system-viewun in ensysname coresw2vlan batch 10 200interface GigabitEthernet 0/0/1port link-type trunkport trunk allow-pass vlan allinterface GigabitEthernet 0/0/3port link-type trunkport trunk allow-pass vlan allinterface GigabitEthernet 0/0/2port link-type accessport default vlan 200interface Vlanif 10ip address 192.168.10.253 24interface Vlanif 200ip address 192.168.200.1 30
配置VRRP
coresw1
interface Vlanif 10vrrp vrid 10 virtual-ip 192.168.10.254 vrrp vrid 10 priority 120vrrp vrid 10 preempt-mode timer delay 20
coresw2
这里就配置优先级了，默认100
interface Vlanif 10vrrp vrid 10 virtual-ip 192.168.10.254 

AR1配置ip地址
system-viewsysname AR1un in eninterface GigabitEthernet 0/0/0ip address 100.1.1.2 30interface GigabitEthernet 0/0/1ip address 192.168.100.2 30interface GigabitEthernet 0/0/2ip address 192.168.200.2 30
互联网配置ip地址
system-viewsysname hlwun in eninterface GigabitEthernet 0/0/0ip address 100.1.1.1 30
测试pc1是否能与互联网互通

发现不能互通，经tracert检测，路由只到了coresw1，这时候查看coresw1的路由表

发现并没有指向100.1.1.0/30网段的路由，也就是说他只停留在了coresw1，这时候可以配一个默认路由，将所有流量指向AR1的入接口，两个核心交换机都要指向出口路由器AR1
coresw1
ip route-static 0.0.0.0 0 192.168.100.2
coresw2
ip route-static 0.0.0.0 0 192.168.200.2
测试pc1是否能与互联网互通


结论：抓包信息可以看到，路由可以到达互联网，但是互联网没有返程路由也就是pc1的路由，那就要给互联网配置返程路由指向AR1的如接口
hlw
ip route-static 192.168.10.0 24 100.1.1.2 
测试pc1是否能与互联网互通

结论：返程路由192.168.10.0到了AR1，查询自己的路由表没有这个表项就丢弃了，所以要在AR1配置静态路由指向coresw1，而且也要指向coresw2
AR1
ip route-static 192.168.10.0 24 192.168.100.1ip route-static 192.168.10.0 24 192.168.200.1
测试pc1是否能与互联网互通

测试给coresw1设置到90优先级
interface vlanif10vrrp vrid 10 priority 90

测试延迟抢占
当优先级变回120时，coresw1并没有那么快进行抢占，因为前面配置了一个20秒的延迟，等延迟过后，就会变回master
vrrp vrid 10 preempt-mode timer delay 20

测试监视上行接口
coresw1
监视g0/0/2，如果g0/0/2  down掉了，那么coresw1的优先级就会减30变成90，则coresw2的优先级默认就是100就会大于coresw1，变成master
interface vlanif10vrrp vrid 10 track interface g0/0/2 reduced 30interface GigabitEthernet 0/0/2shutdown

浮动路由与BFD监视
目的：在出口路由器配置默认路由指向联通和电信，主要实现，当电信挂了，默认路由就会指向电信路由器，以此达到浮动路由的目的

配置IP地址
route2000
system-viewsysname routeun in eninterface GigabitEthernet 0/0/0ip address 192.168.10.254 24interface GigabitEthernet 0/0/1ip address 192.168.20.254 24interface GigabitEthernet 0/0/2ip address 12.1.1.1 30interface GigabitEthernet 4/0/0ip address 13.1.1.1 30
dianxin2001
system-viewsysname dianxinun in eninterface GigabitEthernet 0/0/0ip address 12.1.1.2 30interface GigabitEthernet 0/0/1ip address 100.1.1.1 30
liantong2002
system-viewsysname liantongun in eninterface GigabitEthernet 0/0/0ip address 13.1.1.2 30interface GigabitEthernet 0/0/1ip address 200.1.1.1 30
互联网2003
system-viewsysname hlwun in eninterface GigabitEthernet 0/0/0ip address 100.1.1.2 30interface GigabitEthernet 0/0/1ip address 200.1.1.2 30interface LoopBack 0ip address 22.22.22.22 32
配置OSPF
dianxing，互联网，liantong
这样做的目的，会把自己直连的路由宣告出去
ospf 1area 0network 0.0.0.0 0.0.0.0qdis ospf peer brief


电信路由器，已经学到了ospf区域内设备的直连路由，其他设备也一样
配置nat
接着，在route（角色：出口路由器）配置nat，假设他不具备固定的公网ip地址，把内网路由转换到出接口
route
acl 2000rule 10 permit source 192.168.10.0 0.0.0.255rule 20 permit source 192.168.20.0 0.0.0.255qinterface GigabitEthernet 0/0/2nat outbound 2000interface GigabitEthernet 4/0/0nat outbound 2000
还要配两条静态路由指向运营商，考点：出口路由器都要配置默认路由
ip route-static 0.0.0.0 0 12.1.1.2ip route-static 0.0.0.0 0 13.1.1.2

由于我使用的路由器是AR2000系列的，中低端路由器，他是不支持基于包来做流量的负载均衡，所以，当进行tracert 22.22.22.22你会发现，他的每一次路径都是走联通的，了解一下就行了
配置浮动路由
原先配置了两条等价路由，现在为了达到，开头的目的，就必须先把走向联通的路由器的优先级调高，这样越小越优先，就会走向电信路由器
route
ip route-static 0.0.0.0 0 13.1.1.2 preference 100dis ip rou

这时候你会发现，只有一条指向电信的路由了，这就是浮动路由，调成100的优先级就不优先了，就会被隐藏起来，当你电信的默认路由，掉了，指向联通的路由才会显现出来，接下来就模拟这个浮动路由的实验
int g0/0/2shutdowndis ip rou

这时候指向联通路由就会出来，保证了业务的连续性
int g0/0/2undo shutdown

等几秒就会回来了
而且，不管是以下图片哪个接口down了，他都会实现浮动路由到联通

BFD监测网络状态
背景
背景：我们前面不是配置了指向电信的默认路由吗，但是现实情况，不可能说出口路由器直接与运营商去互联的，中间肯定经过很多层交换机，路由器啥的，现在就来模拟这个实验，就会影响我们的浮动路由

这时候将电信路由器的g0/0/0口断掉，查看情况
dianxin
sysun in eninterface GigabitEthernet 0/0/0shutdown

配置bfd
接下来就在dianxin和route配置bfd，来达到双向检测，如果监测断掉之后，就可以实现浮动路由
route
bfdbfd 1 bind peer-ip 12.1.1.2 source-ip 12.1.1.1 autocommitdis bfd session all
dianxin
配置这个之前，你要把原来的g0/0/0接口打开，不然即使创建了规则，也会报错
int g0/0/0undo shutdownbfdbfd 1 bind peer-ip 12.1.1.1 source-ip 12.1.1.2 autobfd 1commitdis bfd session all
接口没打开，你配置了就会报这个错，接口开启来就行了，没事


接下来在指向电信路由器的默认路由配置bfd监视，当这个bfd 1的监视器出现了down的情况，那么这个默认路由就会被删掉，从而实现浮动路由
route
ip route-static 0.0.0.0 0 12.1.1.2 track bfd-session 1
当dianxin的g0/0/0接口断掉之后

走的是联通服务器

路由综合实验RIP OSPF BGP
目的：中间通过ospf或rip，然后经过bgp之间学习路由，达到PC可以互通

配置IP地址
PC1、PC2

R1
system-viewsysname R1un in eninterface GigabitEthernet 0/0/0ip address 100.1.1.254 24interface GigabitEthernet 0/0/1ip add 12.1.1.1 30int g0/0/2ip add 13.1.1.1 30dis ip in br

R2
syssysname R2un in enint g0/0/1ip add 12.1.1.2 30int g0/0/2ip add 23.1.1.1 30dis ip in br

R3
syssysname R3un in enint g0/0/2ip add 23.1.1.2 30int g0/0/1ip add 13.1.1.2 30int g0/0/0ip add 34.1.1.1 30dis ip in br
R4
sys sysname R4un in enint g0/0/0ip add 34.1.1.2 30int g0/0/1ip add 45.1.1.1 30dis ip in br
R5
sys sysname R5un in enint g0/0/0ip add 200.1.1.254 24int g0/0/1ip add 45.1.1.2 30dis ip in br
配置RIP(与osfp二选一)
配置rip宣告网段时，例如R2宣告12.1.1.0的网段时，会报错，一般生产中都会配置ripv2，由于他的路由自动汇总，他会把12.1.1.0汇总到更大的网络12.0.0.0，因为这些地址都是A类地址，所以rip就默认自动汇总到12.0.0.0，目的是减少路由表的大小，提高网络的可扩展性。
A类地址范围：1.0.0.0-126.0.0.0   /8
B类地址范围：128.0.0.0-191.255.0.0  /16
C类地址范围：192.0.0.0-223.255.255.0  /24
R1
sysrip 1version 2network 100.0.0.0network 12.0.0.0network 13.0.0.0
R2
sysrip 1version 2network 12.0.0.0network 23.0.0.0
R3
sysrip 1version 2network 13.0.0.0network 23.0.0.0
配置完检查一下3个路由的路由表
dis ip rou



RIP区域内的路由器，通过rip学习到各个路由器宣告的路由，但是如果其中有自己直连的路由信息，就没有rip路由显示，本身就是直连的嘛，只会学习到没有的
配置OSPF(与RIP二选一)
由于我前面配置了rip，这里要演示ospf我就删掉前面的rip配置，如果你没有敲前面的rip就不用执行下面的删除rip配置的命令
R1,R2,R3
sysundo rip 1#会提示你是否删除，你输入Y就行了Warning: The RIP process will be deleted. Continue?[Y/N]y
接下来正式配置ospf,它宣告网段的方式和rip是不一样的，要加上反掩码，而且没有rip的自动汇总，是可以直接写网段的
R1
sysospf 1area 0network 100.1.1.0 0.0.0.255network 13.1.1.0 0.0.0.3network 12.1.1.0 0.0.0.3
R2
sysospf 1area 0network 23.1.1.0 0.0.0.3network 12.1.1.0 0.0.0.3
R3
sysospf 1area 0network 23.1.1.0 0.0.0.3network 13.1.1.0 0.0.0.3
dis ospf peer brief



这时候查看路由表
dis ip rou



ospf也和rip一样，就可以学习到其他路由器宣告的，非直连的路由
以上是RIP和OSPF的配置过程，就是了配置IGP协议进行一个自治系统（AS）内部交换路由信息的协议
IGP可以进一步划分为两类：距离矢量路由协议和链路状态路由协议。常见的IGP协议包括RIP（路由信息协议）、OSPF（开放最短路径优先）和IS-IS（中间系统到中间系统）等。

RIP：使用跳数作为路径选择的度量标准，适用于小型网络。
OSPF：基于链路状态的协议，使用Dijkstra算法来计算最短路径，适用于中型到大型网络。
IS-IS：也是一种基于链路状态的协议，类似于OSPF，通常用于ISP和大型企业网络中。

配置bgp

BGP：边界网关协议（Border Gateway Protocol）是一种具体的外部网关协议，是EGP的一种实现。BGP是互联网中使用最广泛的外部网关协议，用于在自治系统之间进行路由信息交换。取代EGP

R3 他在BGP AS 100 ,要填写领居也就是对端的信息，构建领居关系
sysbgp 100peer 34.1.1.2 as-number 200
R4
sysbgp 200peer 34.1.1.1 as-number 100peer 45.1.1.2 as-number 200
R4
sysbgp 200peer 45.1.1.1 as-number 200
等待片刻，查看R4是否与R3和R5建立领居关系

Established相当于ospf的full，图中已经成功建立了，查看R4的路由表
dis ip rou

这时候并没有bgp的路由，为啥，因为bgp的特殊性，需要手动宣告和将其他路由器学到的路由导入到本路由器才行
接下来会演示两种方法
手动宣告路由
R5将200.1.1.0的网段宣告进IBGP里，在BGP中，通过ipv4-family unicast命令进入IPv4单播地址族视图后，可以使用network命令来宣告哪些IPv4网络将被加入到BGP的路由表中，并向其他BGP对等体发布。这样其他bgp路由器就可以学习到这个网段
sysbgp 200ipv4-family unicastnetwork 200.1.1.0 24


一看，R3和R4都学到了这个路由
引进路由
首先我们可以先，pc各自的网关，是否有对方网段的路由
dis ip rou


也就是说，pc1无法ping   pc2的，各自的网关都没有对端的路由。
但是R3刚刚不是经过R5手动宣告路由学到了200.1.1.0的路由吗，这是R3要将右边学到的bgp路由信息引入到ospf里
sysospf 1import-route bgp
如果是rip，就进入到rip version2里一样的输入import-route bgp
这时候查看R1的路由表,已经学习到了200的路由了
dis ip rou

但是我们pc1要ping到pc2，pc2的网关R5没有100的路由啊，是ping不了的
dis ip rou

所以我们要在R3上，将ospf 进程1的路由引入到bgp里
sysbgp 100import-route ospf 1
查看R4,R5的路由表，发现下一跳不可达到，就没办法加入到R5的路由表

这时候有两个办法，一个是配置R5配置静态路由指向34.1.1.0网段或者R4在bgp里设置R5的下一跳为45.1.1.2口
第一种R5
ip route-static 34.1.1.0 30 45.1.1.1
这时候就能学到100的路由了

第二种R4
R5删除静态路由
undo ip route-static 34.1.1.0 30 45.1.1.1
R4
bgp 200peer 45.1.1.2 next-hop-local

这时候R5已经学到100的路由了
这里就有个疑问，为什么我配置的是啥45.1.1.2为下一跳，而表里显示的45.1.1.1
因为45.1.1.2指的是R4这个IBGP里的bgp对等体，就是直接把45.1.1.2当做了R4，经过R4配置了peer 45.1.1.2 next-hop-local那么R4在把自己学到的ospf里路由通告给R5时，会把R5里的下一跳改成自己R4接口（45.1.1.1）
验证pc互通


当我们对R1的g0/0/2进行断开之后
R1
sysint g0/0/2shutdown

这时候就会多了两条路径，就是走的是R2
实验成功
综合实验[DHCP NAT BFD 策略路由等]


配置IP地址和vlan，dhcp

acsw
system-viewsysname acseundo info-center enablevlan batch 10 20interface GigabitEthernet 0/0/1port link-type accessport default vlan 10interface GigabitEthernet 0/0/2port link-type accessport default vlan 20interface GigabitEthernet 0/0/3port link-type trunkport trunk allow-pass vlan 10 20
coresw
system-viewsysname coreswundo info-center enablevlan batch 10 20 30interface GigabitEthernet 0/0/3port link-type trunkinterface GigabitEthernet 0/0/1port link-type accessport default vlan 30interface vlanif 10 ip address 192.168.10.254 24interface vlanif 20ip address 192.168.20.254 24interface vlanif 30ip address 192.168.30.254 24
coresw
配置dhcp服务器
排除192.168.10.2-192.168.10.253，因为我们pc1只有一台嘛，我们只想让他分配一个地址
dhcp enableip pool 10network 192.168.10.0 mask 24gateway-list 192.168.10.254dns-list 8.8.8.8lease day 8excluded-ip-address 192.168.10.2 192.168.10.253interface vlanif10dhcp select globalqip pool 20network 192.168.20.0 mask 24gateway-list 192.168.20.254dns-list 114.114.114.114lease day 8excluded-ip-address 192.168.20.2 192.168.20.253interface vlanif20dhcp select global

也能互通

pc1  ping pc2的过程
1.首先判断是否在同一网段
很明显不在同一网段，那么acsw就会把路由交给网关（核心交换机coresw）
2.那么核心交换机就会查自己的路由表，发现有目的网段，就会把流量转发过去

route
system-viewsysname routeun in enint g0/0/1ip address 192.168.30.3 24int g0/0/0ip address 12.1.1.3 24int g0/0/2ip address 23.1.1.3 24
dianxin
system-viewsysname dianxinun in enint g0/0/1ip address 100.1.1.1 24int g0/0/0ip address 12.1.1.1 24
liantong
system-viewsysname liantongun in enint g0/0/1ip address 100.1.1.2 24int g0/0/2ip address 23.1.1.2 24
配置静态路由或动态路由(三选一)
背景
此时测试pc1 ping route

因为流量虽然能到route但是没有返程路由，就ping不通

以下有三种方法三选一
静态路由
这时候要配置静态ip指向10网段的路由，下一跳是192.168.30.254
route
ip route-static 192.168.10.0 24 192.168.30.254

pc1能ping通route了

这是pc2也不能ping了

这时候也要配一个静态路由指向20的网段
ip route-static 192.168.20.0 24 192.168.30.254

配置Rip
route
rip 1version 2network 192.168.30.0
coresw
rip 1version 2network 192.168.10.0network 192.168.20.0network 192.168.30.0
这时候route通过coresw宣告的路由学习到了10和20到网段里


两个都能ping通
配置ospf
route
sysospf 1area 0network 192.168.30.0 0.0.0.255
coresw
sysospf 1area 0network 192.168.10.0 0.0.0.255network 192.168.20.0 0.0.0.255network 192.168.30.0 0.0.0.255
现在二者已经构建了领居关系

这时候route已经通过ospf学习到了路由


配置运营商之间的动态路由
电信路由器和联通路由器配置环回口，相当于，各种接了一台服务器
dianxin
sysint loopback 0ip address 1.1.1.1 24
liantong
sysint loopback 0ip address 2.2.2.2 24
由于我们在测试，dianxin和liantong的路由器里的其他路由，如果互ping肯定是不通的，现实环境下，两个肯定互通，因为可能运行着bgp等协议，我们这里测试，我们就配一个动态路由，让彼此学习到各自的路由就行了，可以选择rip，ospf，bgp
配置RIP
dianxin 由于是a类地址，只能宣告a类网段，这是rip的规则，我前面一个实验也有说过
rip 1version 2network 100.0.0.0network 12.0.0.0network 1.0.0.0
liantong
rip 1version 2network 100.0.0.0network 23.0.0.0network 2.0.0.0
各自都学到了自己的路由

配置nat
在出口路由器配置nat的easyip
route
sysacl 2000rule 10 permit source 192.168.10.0 0.0.0.255rule 20 permit source 192.168.20.0 0.0.0.255qint g0/0/0nat outbound 2000int g0/0/2nat outbound 2000
这时候我们去跟踪路由信息，pc ping 电信的1.1.1.1环回口

发现他只能到网关，因为网关的路由表里没有目的1.1.1.1的路由，到了网关这里无路可走，就会丢弃，但是我们要让他可走，就要把流量丢给他的老大也就是出口路由器

一般我们在生产中会在网关配置默认路由到出口路由器的

coresw
ip route-static 0.0.0.0 0 192.168.30.3

配置了不通，但是至少，我们的流量已经到了出口路由器了，但是出口路由器的路由表也没有目的1.1.1.1的路由

考试重点：在出口路由器都要配置默认路由指向运营商的


这时候我们回顾一下，这里的场景一，默认走电信，出故障走联通

配置场景1
所以我们要配置两个静态路由，则设置电信的优先级最小，因为越小越优先，普通的默认路由优先级是60
route
#指向电信的默认路由，设置低于60的优先级ip route-static 0.0.0.0 0 12.1.1.1 preference 50#指向联通的默认路由ip route-static 0.0.0.0 0 23.1.1.2

这里只有一条，当这条指向电信的默认路由故障了，才会走向联通，但是还要配置bfd去进行监测才能实现故障转移
配置BFD
dianxin和route配置bfd检测对端接口活动情况
route
undo ip route-static 0.0.0.0 0 12.1.1.1bfdbfd dianxin bind peer-ip 12.1.1.1 source 12.1.1.3 autocommit
dianxin
bfdbfd dianxin bind peer-ip 12.1.1.3 source 12.1.1.1 autocommit
等待几秒建立连接
dis bfd session all

route配置bfd策略
如果 BFD 检测到链路故障下一跳12.1.1.1不可达，这条静态路由会自动从路由表中移除，从而避免流量被错误转发。
ip route-static 0.0.0.0 0 12.1.1.1 preference 50 track bfd-session dianxin
模拟一下12.1.1.1  down状态
dianxin
int g0/0/0shutdown
route
dis ip rou

这时候走向电信的默认路由因为出现故障而被bfd自动删除，取而代之的就是走向联通的路由
配置场景2
教学楼流量走电信出口，宿舍楼流程走联通出口。
做这个要删掉前面配置的静态路由哦，每个场景都是独立的
route
undo ip route-static 0.0.0.0 0 12.1.1.1undo ip route-static 0.0.0.0 0 23.1.1.2
配置acl，匹配流量
以下都在出口路由器配置
acl 2010rule 10 permit source 192.168.10.0 0.0.0.255acl 2020rule 10 permit source 192.168.20.0 0.0.0.255
流分类
分类出两个流量，一个是教学的一个是宿舍的，每个流量应用相应的acl
traffic classifier jiaoxueif-match acl 2010traffic classifier susheif-match acl 2020
流行为
创建两种种行为，重定向电信的下一跳是12.1.1.1，重定向联通的下一跳是23.1.1.2
traffic behavior re-dianxinredirect ip-nexthop 12.1.1.1traffic behavior re-liantongredirect ip-nexthop 23.1.1.2
流策略
我们要将流行为和流策略绑定在一起
traffic policy pclassifier jiaoxue behavior re-dianxinclassifier sushe behavior re-liantong
入接口应用策略路由
interface GigabitEthernet 0/0/1traffic-policy p inbound

总结一下流量过程，假设我们是教学楼，我们去ping电信服务器1.1.1.1时，流量到了出口路由器的入接口，那么经过流分类中的教学里的acl识别到是教学楼10网段的流量，就成功匹配，然后进行流行为，重定向流量到dianxin，下一跳指向12.1.1.1（电信接口）。其他流量也一样
配置场景3
访问电信的服务器走电信出口，访问联通服务器走联通出口。
route
删除前面的配置
interface GigabitEthernet 0/0/1undo traffic-policy inboundqundo traffic policy pundo traffic behavior re-dianxinundo traffic behavior re-liantongundo traffic classifier jiaoxueundo traffic classifier susheundo acl 2010undo acl 2020
就其实和前面那个场景是差不多，唯一不同的是在acl我们只需要定义目的地址是联通或者电信的就行了，源流量设置为any，这样教学楼和宿舍不管源地址是啥，只要ping哪个服务器，就会被带到哪个路由器
acl 3010rule 10 permit ip source any destination 1.1.1.0 0.0.0.255acl 3020rule 10 permit ip source any destination 2.2.2.2 0.0.0.255traffic classifier dianxinif-match acl 3010traffic classifier liantongif-match acl 3020traffic behavior re-dianxinredirect ip-nexthop 12.1.1.1traffic behavior re-liantongredirect ip-nexthop 23.1.1.2traffic policy pclassifier dianxin behavior re-dianxinclassifier liantong behavior re-liantongint g0/0/1traffic-policy p inbound

IPsec实验





看着上面的表配，这里就不说了
配置静态路由和NAT

一般出口路由器都要配置一条默认路由指向运营商

R1
sysun in enip route-static 0.0.0.0 0 100.1.1.2acl 2000rule 10 permit source 192.168.10.0 0.0.0.255qint g0/0/1nat outbound 2000
R2
sysun in enip route-static 0.0.0.0 0 200.1.1.2acl 2000rule 10 permit source 192.168.20.0 0.0.0.255qint g0/0/1nat outbound 2000

可以ping通互联网，但是不能互通pc，这时候我们要通过配置ipsec把这两个内网打通
手动配置ipsec
配置acl
定义需要保护的数据流，那条路的路由需要保护，就圈起来
R1
sysacl 3000rule 10 permit ip source 192.168.10.0 0.0.0.255 destination 192.168.20.0 0.0.0.255 
R2
sysacl 3000rule 10 permit ip source 192.168.20.0 0.0.0.255 destination 192.168.10.0 0.0.0.255
配置ipsec提议
对你即将要建立的隧道，设置认证和加密算法，采用什么算法和方式进行保护，一般默认都是隧道模式，加密用的是加密算法
R1
ipsec提议名字cd（成都）
认证算法采用sha2-256
加密算法采用des
ipsec proposal cdesp authentication-algorithm sha2-256esp encryption-algorithm desdis ipsec proposal

R2
ipsec prpoosal bjesp authentication-algorithm sha2-256esp encryption-algorithm desdis ipsec proposal

配置ipsec手动安全策略

这里涉及两个SA编号，在R1的角度上入方向是54321，出方向是12345
那到了R2，你就不能按照R1的来了，你要反着写，入方向是12345，出方向是54321。
都是反着来，一一对应的，千万别搞错
R1
sysipsec policy chengdu 10 manualsecurity acl 3000proposal cdtunnel local 100.1.1.1tunnel remote 200.1.1.1sa spi inbound esp 54321sa string-key inbound esp cipher qianyiossa spi outbound esp 12345sa string-key outbound esp cipher qianyios
//配置IPSEC策略chegndu，方式为手动
//包含acl3000的流量
//采用ipsec 提议 cd
//配置隧道本地地址100.1.1.1
//配置隧道远端地址 200.1.1.1
//配置入方向SA编号54321
//配置入方向SA的认证密钥为qianyios
//配置出方向SA编号12345
//配置出方向SA的认证密钥为qianyios
R2
sysipsec policy beijing 10 manualsecurity acl 3000proposal bjtunnel local 200.1.1.1tunnel remote 100.1.1.1sa spi inbound esp 12345sa string-key inbound esp cipher qianyiossa spi outbound esp 54321sa string-key outbound esp cipher qianyios
//配置IPSEC策略beijing，方式为手动
//包含acl3000的流量
//采用ipsec 提议 bj
//配置隧道本地地址 200.1.1.1
//配置隧道远端地址 100.1.1.1
//配置入方向SA编号12345
//配置入方向SA的认证密钥为qianyios
//配置出方向SA编号54321
//配置出方向SA的认证密钥为qianyios
在接口上应用
R1
sysint g0/0/1ipsec policy chengdu
R2
sysint g0/0/1ipsec policy beijing
隧道已经建立了，去测试主机是否互通

发现不行
问题分析:R1上配置了ACL2000和ACL3000，其中ACL2000用于匹配内部需要NAT的地址，ACL3000用于匹配需要通过VPN隧道加密的流量，两条ACL重合，即ACL2000 会把需要进行 VPN 传递的流量匹配出来，进行 NAT。


我们不可能说所有电脑都要建立隧道，只有部分电脑是需要建立隧道的，acl2000在前期本身就是给所有内部流量去做nat转换的这其中就包括要建立隧道的pc1流量，那我们就应该重新做acl，换成高级acl 3001来做nat转换，就是在acl 3001，把需要建立隧道的流量设置成deny，其他流量运行通过，应用在nat转换就好了，这样子就不会匹配他了，就可以匹配acl3000做隧道转换了，这个理论在R2也要重新推翻acl 2000去重做acl 3001
R1
sysint g0/0/1undo nat outbound 2000qundo acl 2000acl 3001rule 10 deny ip source 192.168.10.0 0.0.0.255 destination 192.168.20.0 0.0.0.255rule 20 permit ip int g0/0/1nat outbound 3001
acl 3001就是禁止192.168.10.0到192.168.20.0到流量，接着匹配其他ip允许通过，然后应用在出口路由器的nat转换
在R2也是一样的道理，删掉acl 2000，重做acl 3001
R2
sysint g0/0/1undo nat outbound 2000qundo acl 2000acl 3001rule 10 deny ip source 192.168.20.0 0.0.0.255 destination 192.168.10.0 0.0.0.255rule 20 permit ipint g0/0/1nat outbound 3001
已经可以互通了


手动配置ipsec成功
防火墙配置

这里的防火墙用的是USG6000V，首次运行需要防火墙导入包，要下载一个vdi下载地址，下载完导入即可
这里首先要输入的默认用户名：admin
然后回车，再输入默认密码：Admin@123
再回车，会询问你是否要修改密码，输入“y”表示yes
再回车，先输入一遍旧密码
再回车，输入新密码 qianyios@123
再回车，再输入一次新密码

配置要求
(1)防火墙接口的 IP地址如拓扑所示，将接口划入相应的安全区域。
(2)内网主机PC1可以主动访问Internet，但Internet无法主动访问PC1。
(3)出口防火墙进行NAT，NAT 公网地址池 100.1.1.10-100.1.1.20。
(4)Internet 可以通过公网地址100.1.1.100/24访问目的地址为 192.168.2.100/24的内部 Web 服务。
配置IP地址
本次实验就只用pc1做实验，都一样的，pc2就配置ip地址了



Internet
syssysname Internetun in enint g0/0/0ip add 100.1.1.2 24
Firewalld
前面的配置防火墙密码登入之后，再进行下面的操作
syssysname Firewallun in enint g1/0/1ip add 192.168.1.254 24int g1/0/2ip add 192.168.2.254 24int g1/0/3ip add 100.1.1.1 24
防火墙安全域
firewalld
把接口加入到相应的区域去
sysfirewall zone trustadd int g1/0/1firewall zone dmzadd int g1/0/2firewall zone untrustadd int g1/0/3
安全策略的配置
firewalld
syssecurity-policyrule name trust_to_untrustsource-zone trustdestination-zone untrustsource-address 192.168.1.0 24destination-address anyaction permitqq
做完之后，pc1是无法访问互联网的，因为出口没有做NAT,开启端口转换
nat address-group natgroup1mode patsection 0 100.1.1.10 100.1.1.20qnat-policyrule name policy_nat1source-zone trustdestination-zone untrustsource-address 192.168.1.0 24destination-address anyaction source-nat address-group natgroup1qq
pc1成功访问互联网


配置pc访问dmz
firewall
配置trust流量运行访问dmz区域，也就是服务器区域
syssecurity-policyrule name trust_to_dmzsource-zone trustdestination-zone dmzaction permit

配置端口映射
firewall
把内网web服务映射到公网地址
sysnat server policy_web protocol tcp global 100.1.1.100 80 inside 192.168.2.100 80
这时候测试internet通过公网100.1.1.100:80去访问服务器的80端口

不行，因为untrust没有放行流量到dmz区域
syssecurity-policyrule name untrust_to_dmzsource-zone untrustdestination-zone dmzdestination-address 192.168.2.100 32action permit

路由策略


配置ip地址
R1
syssysname R1un in enint g0/0/0ip address 12.1.1.1 30int LoopBack0ip add 10.1.1.1 24int LoopBack1ip add 10.1.2.1 24int LoopBack2ip add 10.1.3.1 24
R2
syssysname R2un in enint g0/0/0ip add 12.1.1.2 30int g0/0/1ip add 23.1.1.1 30
R3
syssysname R3un in enint g0/0/1ip add 23.1.1.2 30int LoopBack 0ip add 30.1.1.1 24int LoopBack 1ip add 30.1.2.1 24int LoopBack 2ip add 30.1.3.1 24
配置RIP和OSPF
R1
rip 1version 2network 12.0.0.0network 10.0.0.0
R2
rip 1version 2network 12.0.0.0qospf 1area 0network 23.1.1.0 0.0.0.3
R3
ospf 1area 0network 23.1.1.0 0.0.0.3network 30.1.1.0 0.0.0.255network 30.1.2.0 0.0.0.255network 30.1.3.0 0.0.0.255
在R2上查看路由表，已经通过RIP和OSPF分别学到了3条路由
dis ip rou

配置路由引入和路由策略以及设置开销
R2
acl 2000rule 10 permit source 30.1.1.0 0.0.0.255rule 20 permit source 30.1.2.0 0.0.0.255rule 30 permit source 30.1.3.0 0.0.0.255route-policy 10 permit node 10if-match acl 2000apply cost 10rip 1version 2import-route ospf 1 route-policy 10
R1上查看从何R2学到的rip路由，开销是11，也就是前面在R2引入ospf的路由，本身开销是10，而R2本身算一跳，所以开销就是11

R2上配置路由引入和路由策略，进行路由过滤
acl 2001rule 10 permit source 10.1.2.0 0.0.0.255rule 20 permit source 10.1.3.0 0.0.0.255qroute-policy 20 permit node 20if-match acl 2001ospf 1import-route rip route-policy 20
R3上查看路由学习情况,通过路由策略过滤,R3只学到了10.1.2.0/24和10.1.3.0/24,没有学到 10.1.1.0/24，实验成功!


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>基于K8S的CICD系统实现</title>
    <url>/posts/40462/</url>
    <content><![CDATA[
基于K8S的CICD系统实现
前情提要
在此声明，这个项目需要有32G+以上的运行内存，不然继续不了，32G运行内存电脑勉强能（阉割版流畅）运行，而且也是关了一台harbor2才能勉强运行，关了没事的，因为harbor是高可用集群，有一台harbor1就行了。
系统拓扑图
运行内存严格按照我的以下的内存规格来填写，这是勉强能运行的配置参数，如果内存多的话自行加多即可
K8S集群



主机名
ip1（NAT）
系统
磁盘1
磁盘2
内存
cpu




master1
192.168.48.101
OpenEuler-22.04-LTS
100G
100G
6.2G
2v2c


master2
192.168.48.102
OpenEuler-22.04-LTS
100G
100G
6.2G
2v2c


master3
192.168.48.103
OpenEuler-22.04-LTS
100G
100G
6.2G
2v2c


node01
192.168.48.104
OpenEuler-22.04-LTS
100G

9.9G
2v2c


高可用ip
192.168.48.200








harbor集群



角色
主机名
ip
系统
资源最低要求




Harbor1nginxKeepalived1
harbor1
192.168.48.106
OpenEuler-22.04-LTS
CPU：1核 内存：1G 硬盘：40G


Harbor2nginxKeepalived2
harbor2
192.168.48.107
OpenEuler-22.04-LTS
CPU：1核 内存：1G 硬盘：40G


postgresqlRedisNFS共享
zujian
192.168.48.108
OpenEuler-22.04-LTS
CPU：1核 内存：1G 硬盘：40G


高可用ip
192.168.48.100






系统架构图

系统流程图

部署K8S高可用集群
OpenEuler-部署K8S高可用集群（内部etcd） - 严千屹博客 (qianyios.top)
部署ceph集群

注意：原文章是部署在master1，node01，node02，由于硬件原因，现在需要部署在三台master，所以原文章开头加硬盘，你也只需要加在三台master上，请自己注意在2.1-2位置修改集群名称和硬盘名称。包括要下载的镜像，就在三台master下载就行了，接着你就可以继续做了

基于K8S1.28.2实验rook部署ceph - 严千屹博客 (qianyios.top)
以下进行cephfs存储做存储声明即Storageclass，方便后续jenkins和gitlab调用
创建cephfs文件系统
操作节点[master1]
cdcd rook/deploy/examplescat &gt;rook-cephfs.yaml &lt;&lt; &quot;EOF&quot;apiVersion: ceph.rook.io/v1kind: CephFilesystemmetadata:  name: rook-cephfs      #修改名字  namespace: rook-ceph spec:  metadataPool:    replicated:      size: 3      requireSafeReplicaSize: true # 参数指示是否要求副本数量必须是偶数    parameters:      compression_mode:        none  dataPools:    - name: replicated      failureDomain: host      replicated:        size: 3        requireSafeReplicaSize: false      parameters:        compression_mode:          none  preserveFilesystemOnDelete: true #当删除CephFilesystem资源时，是否保留Ceph集群中的实际文件系统。若设为true则保留，方便后续恢复使用。  metadataServer:    activeCount: 3    activeStandby: true    placement:      podAntiAffinity:        preferredDuringSchedulingIgnoredDuringExecution:          - weight: 100            podAffinityTerm:              labelSelector:                matchExpressions:                  - key: app                    operator: In                    values:                      - rook-ceph-mds              topologyKey: topology.kubernetes.io/zone    priorityClassName: system-cluster-critical    livenessProbe:      disabled: false    startupProbe:      disabled: falseEOFkubectl apply -f rook-cephfs.yaml kubectl get pod -n rook-ceph | grep rook-cephfs
可能要一分钟才会创建好
为什么我能直接在k8s直接运行ceph指令，而不进入pod，自行去第二步开通看部署ceph集群的

快捷链接：在K8S中直接调用出ceph命令
[root@master1 examples]# ceph fs statusrook-cephfs - 0 clients===========RANK      STATE            MDS          ACTIVITY     DNS    INOS   DIRS   CAPS 0        active      rook-cephfs-f  Reqs:    0 /s    10     13     12      0 1        active      rook-cephfs-c  Reqs:    0 /s     0      0      0      0 2        active      rook-cephfs-d  Reqs:    0 /s    10     12     11      00-s   standby-replay  rook-cephfs-a  Evts:    0 /s     0      0      0      02-s   standby-replay  rook-cephfs-b  Evts:    0 /s     0      0      0      01-s   standby-replay  rook-cephfs-e  Evts:    0 /s     0      0      0      0         POOL             TYPE     USED  AVAIL rook-cephfs-metadata   metadata     0   94.9Grook-cephfs-replicated    data       0   94.9GMDS version: ceph version 17.2.6 (d7ff0d10654d2280e08f1ab989c7cdf3064446a5) quincy (stable)[root@master1 examples]# ceph fs lsname: rook-cephfs, metadata pool: rook-cephfs-metadata, data pools: [rook-cephfs-replicated ][root@master1 examples]#
rook-cephfs-replicated是下面存储声明需要用到的 pool
创建Storageclass
是k8s调用ceph的声明，通过这个Storageclass才能去调用ceph
cd cd rook/deploy/examplescat &gt; rook-cephfs-sc.yaml &lt;&lt;&quot;EOF&quot;apiVersion: storage.k8s.io/v1kind: StorageClassmetadata:  name: rook-cephfs-scprovisioner: rook-ceph.cephfs.csi.ceph.comparameters:  clusterID: rook-ceph #ceph集群命名空间  fsName: rook-cephfs  #cephfs，刚刚创建的文件系统  pool: rook-cephfs-replicated   #刚刚创建的fs所包含的pool  csi.storage.k8s.io/provisioner-secret-name: rook-csi-cephfs-provisioner  csi.storage.k8s.io/provisioner-secret-namespace: rook-ceph  csi.storage.k8s.io/controller-expand-secret-name: rook-csi-cephfs-provisioner  csi.storage.k8s.io/controller-expand-secret-namespace: rook-ceph  csi.storage.k8s.io/node-stage-secret-name: rook-csi-cephfs-node  csi.storage.k8s.io/node-stage-secret-namespace: rook-cephreclaimPolicy: DeleteallowVolumeExpansion: trueEOFkubectl apply -f rook-cephfs-sc.yaml kubectl get sc

部署harbor进群
Harbor共享存储高可用 - 严千屹博客 (qianyios.top)
配置仓库地址
部署好后，需要将K8s各个节点，和harbor各个节点都要进行配置仓库地址
操作节点：[所有节点]
vim /etc/docker/daemon.json
# 客户端默认使用的是https协议，所以需要对docker做以下修改,在文件末尾添加insecure-registries[root@qianyios ~]# vim /etc/docker/daemon.json&#123;   ................  &quot;registry-mirrors&quot;: [],#无关紧要，不用看,  &quot;insecure-registries&quot;: [ &quot;192.168.48.100&quot; ],#重要加这行，别忘了如果他不是最后一行一定要在末尾加逗号 ................&#125;# 修改后，重启docker使其生效systemctl daemon-reloadsystemctl restart docker# 利用docker info查看是否添加上[root@qianyios ~]# docker infoContainers: 10 Running: 1 Paused: 0 Stopped: 9Images: 37... Experimental: false Insecure Registries:  192.168.48.100   ###要确保有这个才行  127.0.0.0/8 Registry Mirrors:

测试免密登入
接下来测试免密登入，第一次登入要密码，第二次登入就不用了，第二次之后就是免密登入
docker login 192.168.48.100

免密登入成功！
部署jenkins
操作节点:[masetr1]
创建rabc验证
cd cd jenkinscat &gt; jenkins-rabc.yaml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: ServiceAccountmetadata:  name: jenkins-admin  namespace: jenkins---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata:  name: jenkins-adminroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:- kind: ServiceAccount  name: jenkins-admin  namespace: jenkinsEOFkubectl apply -f jenkins-rabc.yaml
创建jenkins用户的secret
cd cd jenkinscat &gt;jenkins-admin-secret.yaml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: Secretmetadata:  name: jenkins-admin-secret  namespace: jenkins  annotations:    kubernetes.io/service-account.name: jenkins-admintype: kubernetes.io/service-account-tokenEOFkubectl apply -f jenkins-admin-secret.yamlkubectl get secret -n jenkins[root@master1 jenkins]# kubectl get secret -n jenkinsNAME                   TYPE                                  DATA   AGEjenkins-admin-secret   kubernetes.io/service-account-token   3      15s
创建pvc
#创建命名空间cdkubectl create namespace jenkinsmkdir jenkinscd jenkinscat &gt; pvc.yaml &lt;&lt; EOFkind: PersistentVolumeClaimapiVersion: v1metadata:  name: jenkins-pvc  namespace: jenkinsspec:  storageClassName: rook-cephfs-sc  #这个是第4步部署完ceph集群创建的Storageclass  resources:    requests:      storage: 3Gi  accessModes:  - ReadWriteManyEOFkubectl apply -f pvc.yamlkubectl get pvc -n jenkins

部署jenkins
自行在harbor仓库创建好cicd仓库

构建jenkins镜像
docker pull jenkins/jenkins
可能会出现拉取缓慢现象，也可以用以下方法进行构建
基于阿里云容器服务构建私人docker镜像 - 严千屹博客 (qianyios.top)
构建之后就要进行拉取下载打标签，以下是我自己构建的，你可以用这个
#下载镜像docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/jenkins:latest#打标签docker tag registry.cn-hangzhou.aliyuncs.com/qianyios/jenkins:latest 192.168.48.100/cicd/jenkins:latest#查看镜像[root@master1 jenkins]# docker images | grep jenk192.168.48.100/cicd/jenkins                                            latest    786c9e8a0cb8   6 days ago      472MBregistry.cn-hangzhou.aliyuncs.com/qianyios/jenkins                     latest    786c9e8a0cb8   6 days ago      472MB[root@master1 jenkins]##推送镜像到harbor仓库docker push 192.168.48.100/cicd/jenkins:latest

#给所有master节点打上master标签kubectl label node master1 k8s-type=masterkubectl label node master2 k8s-type=masterkubectl label node master3 k8s-type=master
cd cd jenkinscat &gt;jenkins-deploy.yaml &lt;&lt; &quot;EOF&quot;apiVersion: apps/v1kind: Deploymentmetadata:  name: jenkins  namespace: jenkinsspec:  replicas: 1  selector:    matchLabels:      app: jenkins-server  template:    metadata:      labels:        app: jenkins-server    spec:      securityContext:            fsGroup: 995            runAsUser: 1000      serviceAccountName: jenkins-admin      nodeSelector:        k8s-type: master      containers:        - name: jenkins          image: 192.168.48.100/cicd/jenkins:latest          imagePullPolicy: IfNotPresent          resources:            limits:              memory: &quot;2Gi&quot;              cpu: &quot;1000m&quot;            requests:              memory: &quot;500Mi&quot;              cpu: &quot;500m&quot;          ports:            - name: httpport              containerPort: 8080            - name: jnlpport              containerPort: 50000          livenessProbe:            httpGet:              path: &quot;/login&quot;              port: 8080            initialDelaySeconds: 90            periodSeconds: 10            timeoutSeconds: 5            failureThreshold: 5          readinessProbe:            httpGet:              path: &quot;/login&quot;              port: 8080            initialDelaySeconds: 60            periodSeconds: 10            timeoutSeconds: 5            failureThreshold: 3          volumeMounts:            - name: jenkins-data              mountPath: /var/jenkins_home            - name: kubectl              mountPath: /usr/bin/kubectl            - name: kube-config              mountPath: /root/.kube            - name: docker              mountPath: /usr/bin/docker            - name: docker-sock              mountPath: /var/run/docker.sock      volumes:        - name: jenkins-data          persistentVolumeClaim:              claimName: jenkins-pvc        - name: kubectl          hostPath:            path: /usr/bin/kubectl        - name: kube-config          hostPath:            path: /root/.kube        - name: docker          hostPath:            path: /usr/bin/docker        - name: docker-sock          hostPath:            path: /var/run/docker.sockEOFkubectl apply -f jenkins-deploy.yaml kubectl get pods -n jenkins
创建svc
cd cd jenkinscat &gt;jenkins-svc.yaml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: Servicemetadata:  name: jenkins-service  namespace: jenkins  annotations:      prometheus.io/scrape: &#x27;true&#x27;      prometheus.io/path:   /      prometheus.io/port:   &#x27;8080&#x27;spec:  selector:    app: jenkins-server  type: NodePort  ports:  - port: 8080    targetPort: 8080    nodePort: 32000    name: httpport  - name: jnlpport    port: 50000    targetPort: 50000EOFkubectl apply -f jenkins-svc.yamlkubectl get svc -n jenkins
访问页面
http://192.168.48.200:32000/

kubectl get pods -n jenkins#查看你的pod名字替换下面的名字即可(jenkins-799dc7cd88-d2n4k)#进入容器kubectl exec -it -n jenkins jenkins-799dc7cd88-d2n4k -- bash#修改Update Center源sed -i &#x27;s#https://updates.jenkins.io/update-center.json#http://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json#g&#x27; /var/jenkins_home/hudson.model.UpdateCenter.xml #替换插件源地址： sed -i &#x27;s#https://updates.jenkins.io/download#http://mirrors.aliyun.com/jenkins#g&#x27; /var/jenkins_home/updates/default.json#替换谷歌地址： sed -i &#x27;s#http://www.google.com#http://www.baidu.com#g&#x27; /var/jenkins_home/updates/default.json#查看网页密码jenkins@jenkins-546cf958bd-kq5f2:~$ cat /var/jenkins_home/secrets/initialAdminPasswordebfc1b12835f43c8a8c2677728e4aa55

先点无，这里先不安装，后面再安装

使用admin账户继续

默认下一步

自行去设置修改admin密码

配置k8s等插件和实现功能
安装插件
安装插件：Git / Git Parameter/Pipeline/Config File Provider/Gitlab/Generic Webhook Trigger/Blue Ocean/Localization: Chinese /Kubernetes
在首页点击系统管理然后点击插件管理-----安装Kubernetes插件

安装之后需要等待他重启


配置K8s代理节点
配置jenkins连接kubernetes
点击系统管理-cloud

点击Clouds-添加New cloud

点击create

查看Kubernetes 服务证书 key
[root@master1 jenkins]# cat /etc/kubernetes/pki/ca.crt
-----BEGIN CERTIFICATE-----
MIIDBTCCAe2gAwIBAgIIcJ+z+Wx0m20wDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
AxMKa3ViZXJuZXRlczAeFw0yNDA5MjgxMTI5NDJaFw0zNDA5MjYxMTM0NDJaMBUx
EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQDYeRyEbAJRMqWyAmQf0LfK9wecWoQSyKYX+gHDUvZMaQK/nkAfrEme5Wot
J8lcODlNAj0OImRRKkCzfBwlZl5WMYH3Roonn8z9j4hkUAX/EgTwMun1q0G/D1yV
zxcRSUxxiFDKlRCVsPxIsuHIUvTrAHkU0qpz1S4cITisF9o9hCvqZZZ/5fCudn7I
sLlDhxzL1TAI5R2hqZKFdondpoGxYF5oc2wuk+0g/3GJZeaGEO/9p5ySX/glamil
e5npU/EvLsG4er2UQqB7dc9wfxOT2p0Qlj7UjHcqgY8E6ufhd7GqYVKNDXSmKXiP
BZI5ba6/kZJj0nsSz3GnVdhFxUD1AgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBT5qTcFwRrY/VSJtfAZK85ZCp2ViTAV
BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQDX+1q8NXKb
HWnfR75MORrQJ898B9M1FBoHfLRdsmmCJVrSQXbBbKn1zVoJL6YLdjDOx2NfWa8o
f1Y7KSme9Z6B4j57tGFQ/4LST4Cwk4PPh1v6nrwVesW6xE6ClHVZ0N1S4ggZi8ll
Wcv3ZCgdGrjSQm15xsRr4oN7XGY/B1kAZWU4defpcxhtIMtLQ7/m74hfYo/P5L/b
Wu1knzRSs1/Cna2GFkWx3BYfbG78ZPBIh17mN4vFAt/x8ZOZCJ+bb0Ey6upYnhjP
H2jiNrHcyJVnnDO4N6kMII9sh2n+gYvK45u+/Vw8nPElf72LkHFHOyQc8QD9opXF
LC9bmhoJuU9v
-----END CERTIFICATE-----


获取凭证

不是低版本，请跳到下一步！！！！
低版本获取凭证方法，低版本会自动生成一个secret

[root@master1 ~]# SECRET_NAME=$(kubectl get serviceaccount jenkins-admin  -o=jsonpath='&#123;.secrets[0].name&#125;' -n jenkins)
[root@master1 ~]# kubectl get secrets $SECRET_NAME  -o=jsonpath='&#123;.data.token&#125;' -n jenkins | base64 -d


k8s1.28获取凭证方法，需要手动创建secret
使用kubectl create token获取的token会过期
这里手动创建secret，并查看相关token值

编写jenkins-admin用户secret清单,并创建
cd /root/jenkins
cat &gt;jenkins-admin-secret.yaml&lt;&lt; &quot;EOF&quot;
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-admin-secret
  namespace: jenkins
  annotations:
    kubernetes.io/service-account.name: jenkins-admin
type: kubernetes.io/service-account-token
EOF
 kubectl apply -f jenkins-admin-secret.yaml

查看secret
kubectl get secret -n jenkins


获取token
[root@master1 jenkins]# kubectl get secrets jenkins-admin-secret  -o=jsonpath='&#123;.data.token&#125;' -n jenkins | base64 -d
eyJhbGciOiJSUzI1NiIsImtpZCI6ImpaNkJTN3d0M0pFblBCSVBaaGFoNzdUTVNLMHZiTERxY09Ibmg4WEtFNTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJqZW5raW5zIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImplbmtpbnMtYWRtaW4tc2VjcmV0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImplbmtpbnMtYWRtaW4iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI3MTg2Mzg1Mi1jNDkwLTQyMDEtYTA2OS1lM2ZhOTcyNTgwODYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6amVua2luczpqZW5raW5zLWFkbWluIn0.sfofmctQos9fcEAf0hZEfEKN2WiG7GklOW6NMEdXbiJHkg5SNe8-MuJK4c4JtubyIA9IFhHo6PfQoFl8-2smuFaojjSKZKn2esJJ5enT_WNsbIdXmu4tg8a2571EikotiGKLpGHuLEZOLdTyswTsQW-FSQH7K16VmfUSzHCkKjV5eXNK3gpRj9p3voGWlBRQ3Jqfm6NWSKp_1_XZqFyi_KM8DOaMHhffN24ejwC2lvIzKNcZp80yY2rW4BkCI0dLN2GqUNlzB9QXYUslLtsigObukCdjY8EefCc34Rh68kq2UQVpXb9eTkyK50J9HEFJtLiuameD3Yx8gNE9xWJ4Vw


配置kubernetes相关信息



Name: 这个自定义， 默认的是kubernetes




Kubernetes URL: https://kubernetes.default- 这个一般是从你的 service account 自动配置的




Kubernetes 服务证书 key： 如果您有 Kubernetes 集群 CA 证书，您可以添加它以实现安全连接。您可以从 pod 位置获取证书/var/run/secrets/kubernetes.io/serviceaccount/ca.crt。如果您没有证书，您可以启用“ disable https certificate check”(禁用HTTPS证书检查)选项




Kubernetes Namespace: 一般是 default 除非你要在一个特殊的命名空间 ，否则不要动他.因为我的jenkins部署在了jenkin命名空间，就用了jenkins




Credentials（凭据）: 为了让 Jenkins 与 Kubernetes 集群通信，我们需要一个服务帐户令牌，该令牌具有在设置的命名空间中部署 pod 的权限




Jenkins URL: http://&lt;your_jenkins_hostname&gt;:port




Jenkins tunnel: &lt;your_jenkins_hostname&gt;:50000 - 这就是用来和 Jenkins 启动的 agent 进行交互的端口



修改名称和kubernetes地址及服务证书key

此Kubernetes由于Jenkins 服务器在同一个 Kubernetes 集群中运行，这里直接通过service进行通讯
此服务证书key就是前几步获取的key

添加凭证
点击添加-&gt;jenkins


选择Domain为全局凭据
类型选择为secret txt
范围选择为全局
secret就是刚才获取的凭据
描述 就是凭据的名称


点击添加
选择凭据为刚才添加的,点击测试链接，验证 Kubernetes 集群的连接性

配置 Jenkins URL 详细信息

对于在k8s集群内部运行的 Jenkins master，您可以使用 Kubernetes 集群的 Service 端点作为 Jenkins URL，因为代理 pod 可以通过内部服务 DNS 连接到集群
url语法：http://.:8080
jenkins-service.jenkins:8080
注意：Jenkins 通道（Jenkins tunnel）链接不需要加http://，否则无法正常通讯


创建成功

创建Jenkins代理镜像
拉取jenkins代理镜像并上传到harbor仓库
docker pull jenkins/inbound-agent
#如果下不到可以用我的
docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/inbound-agent:latest
docker tag registry.cn-hangzhou.aliyuncs.com/qianyios/inbound-agent:latest 192.168.48.100/library/inbound-agent:latest
docker push 192.168.48.100/library/inbound-agent:latest
docker images | grep inbound

部署gitlab
创建gitlab的secret
#长度为8个字符[root@master1 ~]# echo -n &#x27;qianyios&#x27; | base64cWlhbnlpb3M=#qianyios将会成为gitlab页面的登入密码
mkdir /root/gitlabcd /root/gitlab#创建namespacekubectl create namespace gitlab
cat &gt;gitlab-secret-pwd.yaml &lt;&lt; &quot;EOF&quot;apiVersion: v1data:  password: cWlhbnlpb3M=  #换成刚刚前面生成的密码kind: Secretmetadata:  creationTimestamp: null  name: gitlab-pwd  namespace: gitlabEOFkubectl apply -f gitlab-secret-pwd.yamlkubectl get secret -n gitlab

创建pvc
cat &gt; gitlab-pvc.yaml &lt;&lt;&quot;EOF&quot;kind: PersistentVolumeClaimapiVersion: v1metadata:  name: gitlab-pvc-logs  namespace: gitlabspec:  storageClassName: rook-cephfs-sc  resources:    requests:      storage: 5Gi  accessModes:  - ReadWriteOnce---kind: PersistentVolumeClaimapiVersion: v1metadata:  name: gitlab-pvc-config  namespace: gitlabspec:  storageClassName: rook-cephfs-sc  resources:    requests:      storage: 1Gi  accessModes:  - ReadWriteOnce---kind: PersistentVolumeClaimapiVersion: v1metadata:  name: gitlab-pvc-data  namespace: gitlabspec:  storageClassName: rook-cephfs-sc  resources:    requests:      storage: 10Gi  accessModes:  - ReadWriteOnceEOF  kubectl apply -f gitlab-pvc.yaml kubectl get pvc -n gitlab

部署gitlab
#下载gitlab-ce镜像，镜像很大要1个G多 docker pull gitlab/gitlab-ce# 如果下不了用我构建的镜像docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/gitlab:latest#镜像打标签#这个里我用了自己构建的镜像，你要是用这个gitlab/gitlab-ce自行替换docker tag registry.cn-hangzhou.aliyuncs.com/qianyios/gitlab:latest 192.168.48.100/cicd/gitlab:latest#推送镜像docker push 192.168.48.100/cicd/gitlab:latest
给node节点打上k8s-type=node标签kubectl label nodes node01 k8s-type=node
cat &gt; gitlab-deploy.yaml &lt;&lt; &quot;EOF&quot;apiVersion: apps/v1kind: Deploymentmetadata:  creationTimestamp: null  labels:    app: gitlab  name: gitlab  namespace: gitlabspec:  replicas: 1  selector:    matchLabels:      app: gitlab  strategy: &#123;&#125;  template:    metadata:      creationTimestamp: null      labels:        app: gitlab    spec:      nodeSelector:        k8s-type: node      containers:      - image: 192.168.48.100/cicd/gitlab:latest  #更换镜像        imagePullPolicy: IfNotPresent        name: gitlab-ce        env:        - name: GITLAB_ROOT_PASSWORD          valueFrom:            secretKeyRef:              name: gitlab-pwd              key: password        - name: GITLAB_ROOT_MAIL          value: xiaoohu2002@126.com        ports:        - name: gitlab80          containerPort: 80        - name: gitlab22          containerPort: 22        - name: gitlab443          containerPort: 443        volumeMounts:        - name: gitlab-logs          mountPath: /var/log/gitlab        - name: gitlab-config          mountPath: /etc/gitlab        - name: gitlab-data          mountPath: /var/opt/gitlab      volumes:      - name: gitlab-logs        persistentVolumeClaim:          claimName: gitlab-pvc-logs      - name: gitlab-config        persistentVolumeClaim:          claimName: gitlab-pvc-config      - name: gitlab-data        persistentVolumeClaim:          claimName: gitlab-pvc-datastatus: &#123;&#125;EOFkubectl apply -f  gitlab-deploy.yamlkubectl get pod -n gitlab
创建svc
cat &gt; gitlab-svc.yaml &lt;&lt; &quot;EOF&quot;apiVersion: v1kind: Servicemetadata:  creationTimestamp: null  labels:    app: gitlab  name: gitlab  namespace: gitlabspec:  ports:  - name: 80-80    port: 80    protocol: TCP    targetPort: 80    nodePort: 30880  - name: 443-443    port: 443    protocol: TCP    targetPort: 443  - name: 22-22    port: 22    protocol: TCP    targetPort: 22  selector:    app: gitlab  type: NodePortstatus:  loadBalancer: &#123;&#125;EOFkubectl apply -f  gitlab-svc.yamlkubectl get svc -n gitlab
访问页面
http://192.168.48.200:30880/

页面测试
设置中文

创建项目


项目推送
操作节点:[master1]
yum install -y gitmkdir /root/cicd/cd /root/cicd/mkdir chatgpt &amp;&amp; cd chatgpt/
上传Chatgpt镜像站源码
项目地址：ChatGPTNextWeb
cd /root/cicd/chatgpt/wget https://github.com/ChatGPTNextWeb/ChatGPT-Next-Web/archive/refs/heads/main.zip
[root@master1 chatgpt]# ls main.zip
解压源代码压缩包
unzip /root/cicd/chatgpt/main.zipmv ChatGPT-Next-Web-main/* ./rm -rf ChatGPT-Next-Web-main main.zip
Git全局设置
git config --global user.name &quot;Administrator&quot;git config --global user.email &quot;XiaooHu2002@163.com&quot;
添加版本库
cd /root/cicd/chatgpt/git init
添加远程仓库
要注意是哪个主分支哦！这里的是main

git remote add origin http://192.168.48.200:30880/root/chatgpt.git#跟踪所有改动过的文件git add . #提交所有更新过的文件git commit -m &quot;first commit&quot;#将代码推送到远程仓库（主分支main）#如果主分支是main则直接执行下一步#首先我本地的主分支是master，我需要切换，可以通过git branch查看git branch -m master main#推送main分支git push -u origin main#会提示你让你输入gitlab的账号密码Username for &#x27;http://192.168.48.200:30880&#x27;: rootPassword for &#x27;http://root@192.168.48.200:30880&#x27;:#密码是qianyios


Jenkins对接gitlab
创建gitlab Secret令牌
进入gitlab创建Secret令牌


创建成功Secret令牌，并复制令牌

此令牌需要保存好，后面jenkins还需要用到
glpat-vLZgV6Z1nbC_96yyZdyp


Jenkins创建流水线
点击新建任务，输入名称并选择为流水线，并点击确定

在general中找到Generic Webhook Trigger 并勾选且复制webhook链接

http://JENKINS_URL/generic-webhook-trigger/invoke


添加gitlab凭据



配置Webhook
配置允许Webhook和服务对本地网络的请求
进入管理员-设置-网络

勾选允许来自 webhooks 和集成对本地网络的请求并保存更改即可

接下来配置webhooks
进入到项目中

填写相关信息

网址：就是刚才jenkins创建项目的时候复制的链接，这里只是对其进行修改了，因为jenkins和gitlab都是部署在同一个k8s集群中我这里将域名修改成了service的地址
原地址：http://JENKINS_URL/generic-webhook-trigger/invoke
修改后的地址:http://jenkins-service.jenkins:8080/generic-webhook-trigger/invoke

jenkins-service：这是服务的名称，它在 Kubernetes 集群内部用于标识 Jenkins 服务。
.jenkins：这是 Jenkins 服务所在的命名空间（namespace）。在 Kubernetes 中，服务的 DNS 名称会包含其命名空间。
:8080：这是服务暴露的端口号，Jenkins 默认使用 8080 端口提供 Web 服务。

自己可以根据自己的deployment去修改
Secret 令牌：就是刚创建的个人令牌
推送事件：指定只有推送到某个仓库时才触发，留空则全部分支

先看更改地址，这一步不需要操作什么，看清楚，替换了啥JENKINS_URL➡️jenkins-service.jenkins:8080

部署webhook


然后添加webhook即可，然后测试推送事件

配置jenkins流水线
添加harbor用户


输入相关信息并点击create创建

类型选择Username with password
范围选择全局
用户名为Harbor仓库用户名
密码为Harbor仓库用户密码
描述为此凭据的名称



创建好后，接下来配置流水线
先获取项目仓库地址

但是我们要对其中的地址改一下，改成

http://gitlab.gitlab/root/chatgpt.git

回到jenkins任务
点击Dashboard-&gt;ChatGPT-&gt;设置-&gt;并点击流水线


点击添加凭据

Domain 选择全局凭据
类型选择Username with password
范围选择全局
用户名即是gitlab账号
密码即是gitlab账号密码
描述为此凭据的名称


往下滑

保存即可
harbor新建项目
输入相关信息并点击确定

用于存放业务镜像
访问级别设置成公开
存储容量为-1即代表不限制存储容量


项目镜像准备
docker pull node:18-alpine#如果下载不了可以用我的docker pull registry.cn-hangzhou.aliyuncs.com/qianyios/node:18-alpinedocker tag registry.cn-hangzhou.aliyuncs.com/qianyios/node:18-alpine 192.168.48.100/library/node:18-alpinedocker push 192.168.48.100/library/node:18-alpine
编写业务部署清单
[root@master1 ~]# echo -n &quot;https://xiaoai.plus&quot; | base64aHR0cHM6Ly94aWFvYWkucGx1cw==[root@master1 ~]# echo -n &quot;sk-K19c1kSqZZ92sXp13d042aD4E2B74a60B749E717Ed69449e&quot; | base64c2stSzE5YzFrU3FaWjkyc1hwMTNkMDQyYUQ0RTJCNzRhNjBCNzQ5RTcxN0VkNjk0NDll
key是ChatGPTkey，这里已经对其base64加密
baseurl是chatgpt第三方服务商提供的代理地址，这里已经对其base64加密
cd /root/cicd/chatgptkubectl create deploy chatgpt --image=chatgpt-next-web --dry-run=client -oyamlkubectl create svc nodeport  chatgpt --tcp=3000:3000 --dry-run=client -oyaml &gt;&gt; deploy.yamlvim deploy.yaml
apiVersion: v1data:  key: c2stSzE5YzFrU3FaWjkyc1hwMTNkMDQyYUQ0RTJCNzRhNjBCNzQ5RTcxN0VkNjk0NDll  baseurl: aHR0cHM6Ly94aWFvYWkucGx1cw==kind: Secretmetadata:  creationTimestamp: null  name: chat-config---apiVersion: apps/v1kind: Deploymentmetadata:  creationTimestamp: null  labels:    app: chatgpt  name: chatgptspec:  replicas: 1  selector:    matchLabels:      app: chatgpt  strategy: &#123;&#125;  template:    metadata:      creationTimestamp: null      labels:        app: chatgpt    spec:      containers:      - image: chatgpt-next-web        name: chatgpt        ports:        - containerPort: 3000        imagePullPolicy: IfNotPresent        env:        - name: OPENAI_API_KEY          valueFrom:            secretKeyRef:              name: chat-config              key: key        - name: BASE_URL          valueFrom:            secretKeyRef:              name: chat-config              key: baseurl---apiVersion: v1kind: Servicemetadata:  creationTimestamp: null  labels:    app: chatgpt  name: chatgptspec:  ports:  - name: 3000-3000    port: 3000    protocol: TCP    targetPort: 3000  selector:    app: chatgpt  type: NodePortstatus:  loadBalancer: &#123;&#125;
编写镜像构建文件
cd /root/cicd/chatgptsed -i &#x27;s|https://registry.yarnpkg.com/|https://registry.npmmirror.com/|g&#x27; yarn.lockcat &gt; Dockerfile &lt;&lt;&quot;EOF&quot;# 基础镜像FROM 192.168.48.100/library/node:18-alpine AS base# 设置国内镜像源RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositoriesRUN apk add --no-cache libc6-compat proxychains-ngWORKDIR /app# 依赖阶段COPY package.json yarn.lock ./RUN npm config set registry https://registry.npmmirror.comRUN yarn config set registry https://registry.npmmirror.com --global# 替换 yarn.lock 文件中的源地址RUN sed -i &#x27;s|https://registry.yarnpkg.com/|https://registry.npmmirror.com/|g&#x27; yarn.lockRUN sed -i &#x27;s|https://registry.npmjs.org/|https://registry.npmmirror.com/|g&#x27; yarn.lock# 清除缓存并安装依赖RUN yarn config list  # 查看当前的 Yarn 配置RUN yarn install# 更新 caniuse-liteRUN npx update-browserslist-db@latest# 构建阶段FROM base AS builderRUN apk update &amp;&amp; apk add --no-cache gitENV OPENAI_API_KEY=&quot;&quot;ENV BASE_URL=&quot;&quot;WORKDIR /appCOPY . .RUN yarn add @svgr/webpack@latest --frozen-lockfileRUN yarn add sharp  # 添加 sharp 包RUN yarn build# 运行阶段FROM base AS runnerWORKDIR /appRUN apk add proxychains-ngENV PROXY_URL=&quot;&quot;ENV OPENAI_API_KEY=&quot;&quot;ENV BASE_URL=&quot;&quot;COPY --from=builder /app/public ./publicCOPY --from=builder /app/.next/standalone ./COPY --from=builder /app/.next/static ./.next/staticCOPY --from=builder /app/.next/server ./.next/serverEXPOSE 3000CMD if [ -n &quot;$PROXY_URL&quot; ]; then \        export HOSTNAME=&quot;127.0.0.1&quot;; \        protocol=$(echo $PROXY_URL | cut -d: -f1); \        host=$(echo $PROXY_URL | cut -d/ -f3 | cut -d: -f1); \        port=$(echo $PROXY_URL | cut -d: -f3); \        conf=/etc/proxychains.conf; \        echo &quot;strict_chain&quot; &gt; $conf; \        echo &quot;proxy_dns&quot; &gt;&gt; $conf; \        echo &quot;remote_dns_subnet 224&quot; &gt;&gt; $conf; \        echo &quot;tcp_read_time_out 15000&quot; &gt;&gt; $conf; \        echo &quot;tcp_connect_time_out 8000&quot; &gt;&gt; $conf; \        echo &quot;localnet 127.0.0.0/255.0.0.0&quot; &gt;&gt; $conf; \        echo &quot;localnet ::1/128&quot; &gt;&gt; $conf; \        echo &quot;[ProxyList]&quot; &gt;&gt; $conf; \        echo &quot;$protocol $host $port&quot; &gt;&gt; $conf; \        cat /etc/proxychains.conf; \        proxychains -f $conf node server.js; \    else \        node server.js; \    fiEOF
编写流水线脚本

withCredentials 块来引用一个名为 my-credentials 的凭据，该凭据的类型是用户名密码。usernameVariable 和 passwordVariable 参数分别指定了在代码块中使用凭据时的变量名。
在 withCredentials 块内部，你可以执行需要使用凭据的操作，比如在 Shell 脚本中使用用户名和密码进行身份验证。
请注意，credentialsId 参数需要指定你在 Jenkins 中创建的凭据的 ID。确保凭据 ID 正确，并且具有访问该凭据的权限。
使用 withCredentials 块可以确保凭据的安全性，因为凭据的值不会明文显示在日志中，而是以变量的形式传递给代码块中的操作。这样可以避免凭据泄露的风险。
以下内容，自行修改，对照，每一行都去看
Harbor-passwd是jenkins创建的harbor的用户凭据

cd /root/cicd/chatgptcat &gt; Jenkinsfile&lt;&lt;&quot;EOF&quot;pipeline&#123;    agent &#123;        kubernetes &#123;            inheritFrom &quot;jenkins-slave&quot;            yaml &#x27;&#x27;&#x27;apiVersion: v1kind: Podmetadata:  name: jenkins-slavespec:  securityContext:    fsGroup: 0    runAsUser: 0  nodeSelector:    k8s-type: master  containers:  - name: jnlp    image: &quot;192.168.48.100/library/inbound-agent:latest&quot;    imagePullPolicy: IfNotPresent    volumeMounts:    - name: kubectl      mountPath: /usr/bin/kubectl    - name: kube-config      mountPath: /root/.kube    - name: docker      mountPath: /usr/bin/docker    - name: docker-sock      mountPath: /var/run/docker.sock  volumes:  - name: kubectl    hostPath:      path: /usr/bin/kubectl  - name: kube-config    hostPath:      path: /root/.kube  - name: docker    hostPath:      path: /usr/bin/docker  - name: docker-sock    hostPath:      path: /var/run/docker.sock&#x27;&#x27;&#x27;        &#125;    &#125;    environment &#123;        NPM_REGISTRY = &quot;https://registry.npmmirror.com/&quot;        YARN_REGISTRY = &quot;https://registry.npmmirror.com/&quot;    &#125;    stages&#123;        stage(&#x27;git clone&#x27;) &#123;            steps &#123;                sh &#x27;git version&#x27;            &#125;        &#125;        stage(&#x27;image-build&#x27;)&#123;            steps&#123;                withCredentials([usernamePassword(credentialsId: &#x27;Harbor-passwd&#x27;, usernameVariable: &#x27;USERNAME&#x27;, passwordVariable: &#x27;PASSWORD&#x27;)] &#123;                    sh &#x27;docker build -t 192.168.48.100/chatgpt/chatgpt:v1-$BUILD_NUMBER -f Dockerfile .&#x27;                    sh &#x27;docker login 192.168.48.100 -u $USERNAME -p $PASSWORD&#x27;                    sh &#x27;docker push 192.168.48.100/chatgpt/chatgpt:v1-$BUILD_NUMBER&#x27;                &#125;            &#125;        &#125;        stage(&#x27;cloud-deploy&#x27;)&#123;            steps&#123;                sh &#x27;sed -i &quot;s#chatgpt-next-web#192.168.48.100/chatgpt/chatgpt:v1-$BUILD_NUMBER#g&quot; deploy.yaml&#x27;                sh &#x27;cat deploy.yaml&#x27;                sh &#x27;kubectl get pod -A&#x27;                sh &#x27;kubectl get secret,deploy,svc -A&#x27;                sh &#x27;kubectl apply -f deploy.yaml&#x27;                sh &#x27;kubectl get -f deploy.yaml&#x27;            &#125;        &#125;    &#125;&#125;EOF
通过git上传代码
cd /root/cicd/chatgptgit add .git commit -m &quot;add Jenkinsfile Dockerfile and deploy.yaml&quot;git push -u origin mainUsername for &#x27;http://192.168.48.200:30880&#x27;: rootPassword for &#x27;http://root@192.168.48.200:30880&#x27;:


测试
通过刚刚的上传deploy.yaml，流水线已经开始执行
进入jenkins页面可以看到jenkins建的项目正在执行，并且可以看到右下角有一个jenkins代理，说明新建了一个jenkins代理执行


Harbor仓库也有构建好的镜像

测试项目部署成功

jenkins部署日志也显示成功


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Ceph</tag>
        <tag>OpenEuler</tag>
        <tag>Harbor</tag>
        <tag>K8s</tag>
        <tag>Jenkins</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>基于OpenEuler部署K3S</title>
    <url>/posts/998bbc2f/</url>
    <content><![CDATA[
基于OpenEuler部署K3S
介绍
什么是K3s
K3s 是一个轻量级的 Kubernetes 发行版，它针对边缘计算、物联网等场景进行了高度优化。K3s 有以下增强功能：

打包为单个二进制文件。
使用基于 sqlite3 的轻量级存储后端作为默认存储机制。同时支持使用 etcd3、MySQL 和 PostgreSQL 作为存储机制。
封装在简单的启动程序中，通过该启动程序处理很多复杂的 TLS 和选项。
默认情况下是安全的，对轻量级环境有合理的默认值。
添加了简单但功能强大的batteries-included功能，例如：本地存储提供程序，服务负载均衡器，Helm controller 和 Traefik Ingress controller。
所有 Kubernetes control-plane 组件的操作都封装在单个二进制文件和进程中，使 K3s 具有自动化和管理包括证书分发在内的复杂集群操作的能力。
最大程度减轻了外部依赖性，K3s 仅需要 kernel 和 cgroup 挂载。

openeuler社区教程：K3s部署指南 | openEuler社区 | v24.03_LTS
K3s的更多用法可以参考K3s官网
https://rancher.com/docs/k3s/latest/en/
https://docs.rancher.cn/k3s/
K3s官网采用下载对应架构二进制可执行文件的格式，通过install.sh脚本进行离线安装，openEuler社区将该二进制文件的编译过程移植到社区中，并编译出RPM包。此处可通过yum命令直接进行下载安装。
主机拓扑



主机名
ip
CPU
内存




Server1
192.168.48.101
≧2
2G


Server2
192.168.48.102
≧2
2G


Server3
192.168.48.103
≧2
2G


Agent1
192.168.49.104
≧1
512MB



如果你是只用单serve1只需要创建server1和若干台agent，部署教程请跳转4.基础k3s
如果你是高可用一定需要≥3台的server节点，部署教程请跳转5.高可用K3S（内部etcd）
前提是要完成3.基础配置
基础配置
系统初始化
确保server节点及agent节点主机名不一致
vi system_init.sh
#!/bin/bashif [ $# -eq 2 ];then  echo &quot;设置主机名为：$1&quot;  echo &quot;ens33设置IP地址为：192.168.48.$2&quot;else  echo  &quot;使用方法：sh $0 主机名 主机位&quot;  exit 2fiecho &quot;--------------------------------------&quot;echo &quot;1.正在设置主机名：$1&quot;hostnamectl set-hostname $1echo &quot;2.正在关闭firewalld、selinux&quot;systemctl disable firewalld &amp;&gt; /dev/nullsystemctl stop firewalldsed -i &quot;s#SELINUX=enforcing#SELINUX=disabled#g&quot; /etc/selinux/configsetenforce 0echo &quot;3.正在设置ens33：192.168.48.$2&quot;cat &gt; /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;&lt;EOFTYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noNAME=ens33UUID=53b402ff-5865-47dd-a853-7afcd6521738DEVICE=ens33ONBOOT=yesIPADDR=192.168.48.$2GATEWAY=192.168.48.2PREFIX=24DNS1=192.168.48.2DNS2=114.114.114.114EOFnmcli c reloadnmcli c up ens33echo &quot;4.更新yum源软件包缓存&quot;yum clean all &amp;&amp; yum makecacheecho &quot;5.添加hosts解析&quot;cat &gt; /etc/hosts &lt;&lt;EOF127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.48.101 Server1192.168.48.102 Agent1EOFecho &quot;6.必备工具安装&quot;yum install wget psmisc vim net-tools telnet socat device-mapper-persistent-data lvm2 git gcc -yecho &quot;7.重启系统&quot;reboot
sh system_init.sh 主机名  主机位[Server1] sh system_init.sh Server1 101[Agent1] sh system_init.sh Agent1 102
安装容器工具
请你考虑好，你的集群要以什么为运行时，下面提供了，docker和containerd，自行选择
只能二选一！！！
只能二选一！！！
只能二选一！！！
安装docker
操作节点:[所有节点]
sudo curl -L &quot;https://qygit.qianyisky.cn/https://github.com/docker/compose/releases/download/v2.35.1/docker-compose-linux-x86_64&quot; -o /usr/local/bin/docker-compose#卸载旧版本sudo yum -y remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum remove docker-ce docker-ce-cli containerd.io docker-compose docker-machine docker-swarm -ysudo rm /etc/yum.repos.d/docker-ce.reposudo rm -rf /var/lib/dockersudo yum install -y device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.reposudo sed -i &#x27;s/\$releasever/8/g&#x27; /etc/yum.repos.d/docker-ce.reposudo yum install docker-ce docker-ce-cli containerd.io -ysudo systemctl enable --now dockersudo chmod +x /usr/local/bin/docker-composesudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,    &quot;https://docker.qianyios.top&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart dockerdocker-compose --versiondocker version
安装containerd
操作节点:[所有节点]
sudo yum install -y yum-utilssudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo yum clean all &amp;&amp; yum makecachesudo yum install -y containerd.iosudo mkdir -p /etc/containerd/certs.d/docker.iosudo mkdir -p /etc/containerd/certs.d/registry.k8s.iosudo mkdir -p /etc/containerd/certs.d/k8s.gcr.iosudo mkdir -p /etc/containerd/certs.d/ghcr.iosudo mkdir -p /etc/containerd/certs.d/gcr.iosudo mkdir -p /etc/containerd/certs.d/quay.iosudo mkdir -p /etc/containerd/certs.d/registry-1.docker.iosudo tee /etc/containerd/certs.d/docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://docker.io&quot; [host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry-1.docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://registry-1.docker.io&quot;[host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/k8s.gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://k8s.gcr.io&quot;[host.&quot;https://registry.aliyuncs.com/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/ghcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://ghcr.io&quot;[host.&quot;https://ghcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://gcr.io&quot;[host.&quot;https://gcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry.k8s.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;registry.k8s.io&quot;[host.&quot;k8s.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;, &quot;push&quot;][host.&quot;https://registry.aliyuncs.com/v2/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/quay.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://quay.io&quot;[host.&quot;https://quay.tencentcloudcr.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo sh -c &#x27;containerd config default &gt; /etc/containerd/config.toml&#x27;sudo sed -i &#x27;s#sandbox_image = &quot;registry.k8s.io/pause:.*&quot;#sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.10&quot;#&#x27; /etc/containerd/config.tomlsudo sed -i &#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27; /etc/containerd/config.tomlsed -i &#x27;/\[plugins\.&quot;io\.containerd\.grpc\.v1\.cri&quot;\.registry\]/!b;n;s/config_path = &quot;&quot;/config_path = &quot;\/etc\/containerd\/certs.d&quot;/&#x27; /etc/containerd/config.toml# 重启 containerd 服务sudo systemctl daemon-reloadsudo systemctl restart containerd.servicesudo ctr image ls
添加镜像源
操作节点:[所有节点]
sudo mkdir -p /etc/rancher/k3ssudo tee /etc/rancher/k3s/registries.yaml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;mirrors:  docker.io:    endpoint:      - &quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;       - &quot;https://docker.xuanyuan.me&quot;       - &quot;https://docker.m.daocloud.io&quot;       - &quot;https://docker.1ms.run&quot;       - &quot;https://docker.1panel.live&quot;       - &quot;https://hub.rat.dev&quot;       - &quot;https://docker-mirror.aigc2d.com&quot;       - &quot;https://docker.qianyios.top/&quot;  quay.io:    endpoint:      - &quot;https://quay.tencentcloudcr.com/&quot;     registry.k8s.io:    endpoint:      - &quot;https://registry.aliyuncs.com/v2/google_containers&quot;     gcr.io:    endpoint:      - &quot;https://gcr.m.daocloud.io/&quot;     k8s.gcr.io:    endpoint:      - &quot;https://registry.aliyuncs.com/google_containers&quot;     ghcr.io:    endpoint:      - &quot;https://ghcr.m.daocloud.io/&quot;   EOF
建议在这里打个快照
基础K3S
部署K3s
由于OpenEuler已经编译好RPM的包了，可以直接安装
操作节点：[所有节点]
yum install -y k3s
部署server节点
操作节点：[Server1]
如需在单个服务器上安装 K3s，可以在 server 节点上执行如下操作：
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --docker \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot;

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot;

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
查看镜像列表和pod情况
crictl imageskubectl get pod -A

部署Agent节点
操作节点：[Server1]
查看token
cat /var/lib/rancher/k3s/server/node-token

K10ed18fcd528981577fe508d419bd28fefeef1c372ccc246a79fff1fa4b371e5e1::server:a02d22a5169cdc2465bd989360029283

基于docker
操作节点：[Agent1]
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
INSTALL_K3S_SKIP_DOWNLOAD=true \K3S_URL=https://192.168.48.101:6443  \K3S_TOKEN=a02d22a5169cdc2465bd989360029283 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --docker
· a02d22a5169cdc2465bd989360029283 是前面server1获取的token
· 192.168.48.101是server1的ip

这时候在server1查看是否成功加入集群
sudo kubectl get nodes

如果需要部署dashboard请跳转6.安装dashboard
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
操作节点：[Agent1]
INSTALL_K3S_SKIP_DOWNLOAD=true \K3S_URL=https://192.168.48.101:6443  \K3S_TOKEN=a02d22a5169cdc2465bd989360029283 \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh 
· a02d22a5169cdc2465bd989360029283 是前面server1获取的token
· 192.168.48.101是server1的ip

如果需要部署dashboard请跳转6.安装dashboard
高可用K3S（内部etcd）
官方教程：高可用嵌入式 etcd
具有嵌入式 etcd 的 HA K3s 集群由以下部分组成：

三个或多个 Server 节点为 Kubernetes API 提供服务并运行其他 control plane 服务，以及托管嵌入式 etcd 数据存储。
可选：零个或多个 Agent 节点，用于运行你的应用和服务
可选：固定注册地址，供 Agent 节点注册到集群

主机拓扑



主机名
ip
CPU
内存




Server1
192.168.48.101
≧2
2G


Server2
192.168.48.102
≧2
2G


Server3
192.168.48.103
≧2
2G


Agent1
192.168.49.104
≧1
512MB



现在所有的机子都从5.1部署K3s克隆这个部署好K3s的快照，也就是说现在所有机子的起点都在5.1部署K3s
记得给agent改ip哈
配置集群负载均衡器
官方教程：集群负载均衡器
按理来说我们需要两台额外的节点来做负载均衡和高可用vip节点，但是为了测试方便，我们直接部署在
server节点，也就是图中的第二种方法

操作节点：[所有的server]
yum install -y haproxy keepalivedcat &gt; /etc/haproxy/haproxy.cfg &lt;&lt;&quot;EOF&quot;frontend k3s-frontend    bind *:16443    mode tcp    option tcplog    default_backend k3s-backendbackend k3s-backend    mode tcp    option tcp-check    balance roundrobin    timeout connect 5s    timeout server 30s    timeout client 30s    default-server inter 10s downinter 5s    server server-1 192.168.48.101:6443 check    server server-2 192.168.48.102:6443 check    server server-3 192.168.48.103:6443 checkEOF
操作节点:[Server1]
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;&quot;EOF&quot;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state MASTER    #这里要改 server1是Master 其他都是Backup    priority 200    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点:[Server2]
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;&quot;EOF&quot;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state BACKUP    #这里要改 server1是Master 其他都是Backup    priority 150    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点:[Server3]
cat &gt; /etc/keepalived/keepalived.conf &lt;&lt;&quot;EOF&quot;global_defs &#123;  enable_script_security  script_user root&#125;vrrp_script chk_haproxy &#123;    script &#x27;killall -0 haproxy&#x27;    interval 2&#125;vrrp_instance haproxy-vip &#123;    interface ens33  #这里要改，是你的网卡    state BACKUP    #这里要改 server1是Master 其他都是Backup    priority 100    virtual_router_id 51    virtual_ipaddress &#123;        192.168.48.200/24      #高可用ip    &#125;    track_script &#123;        chk_haproxy    &#125;&#125;EOF
操作节点：[所有的Server]
sudo systemctl restart haproxy keepalivedsudo systemctl enable --now haproxy keepalived
现在来查看vip是否生成
操作节点：[Server1]
ip a

初始化第一个Server1
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
要注意你选的是哪个容器工具哈
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可

--docke一定要放在所有参数的最前面

K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --docker --cluster-init - server \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为集群间的共享密钥，可自定义

自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
操作节点：[Server1]
K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --cluster-init - server \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为集群间的共享密钥，可自定义
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
更多参数：K3s Server 配置参考
其他server加入集群
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --docker - server \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--server https://192.168.48.101:6443  \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为第一个server1共享出来的密钥
–server https://192.168.48.101:6443 改成serve1的ip地址即可
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
K3S_TOKEN=qianyiosQianyios12345 \INSTALL_K3S_SKIP_DOWNLOAD=true \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh - server \--system-default-registry &quot;registry.cn-hangzhou.aliyuncs.com&quot; \--server https://192.168.48.101:6443  \--tls-san= 192.168.48.200
qianyiosQianyios12345是作为第一个server1共享出来的密钥
–server https://192.168.48.101:6443 改成serve1的ip地址即可
自行完成 9.解决非root用户使用kubectl等命令显示无命令的办法
其他Agent加入集群
基于docker
如果有参数的值数错了，可以改一下，然后重新运行命令即可
--docke一定要放在所有参数的最前面
INSTALL_K3S_SKIP_DOWNLOAD=true \K3S_TOKEN=qianyiosQianyios12345 \K3S_URL=https://192.168.48.101:6443  \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh --docker - agent
基于containerd
如果有参数的值数错了，可以改一下，然后重新运行命令即可
INSTALL_K3S_SKIP_DOWNLOAD=true \K3S_TOKEN=qianyiosQianyios12345 \K3S_URL=https://192.168.48.101:6443  \INSTALL_K3S_REGISTRIES=&quot;https://registry.cn-hangzhou.aliyuncs.com,https://registry.aliyuncs.com/google_containers&quot; \k3s-install.sh - agent
这时候在Server可以查看node情况
kubectl get nodes

自行部署dashboard之后,查看他在哪个节点上，部署教程6.安装dashboard
https://192.168.48.200:30001/
现在不是有高可用的vip吗。那么正好可以用vip访问，端口不变

高可用模拟宕机测试
查看dashboard部署在哪个节点
kubectl get pods -A -l k8s-app=kubernetes-dashboard -o wide
我这里显示的是dashboard部署在Server2
那么我们就对Server2进行powerof关机，来模拟宕机看看dashboard能否被k3s自动调度到其他节点
但是我发现pod还在running的状态
[root@Server3 ~]# kubectl get pods -ANAMESPACE              NAME                                        READY   STATUS      RESTARTS   AGEkubernetes-dashboard   kubernetes-dashboard-668679b698-nlpqc       1/1     Running     0          15m[root@Server3 ~]# kubectl get nodesNAME      STATUS     ROLES                       AGE   VERSIONagent1    Ready      &lt;none&gt;                      35m   v1.24.2+k3s-server1   Ready      control-plane,etcd,master   36m   v1.24.2+k3s-server2   NotReady   control-plane,etcd,master   36m   v1.24.2+k3s-server3   Ready      control-plane,etcd,master   36m   v1.24.2+k3s-[root@Server3 ~]#

server2 已经被标记为 NotReady
说明 Kubernetes 已感知到它不可用（可能是关机、网络不通或 kubelet 崩溃等），但：

如果 Pod 的副本数是 1，Kubernetes 不会自动创建新的 Pod 。
默认的节点失联容忍时间较长（5分钟），所以即使节点 NotReady，也不会立刻触发 Pod 驱逐。


方案一 等待五分钟
经过漫长等待，dashboard的pod进行了重新分配

kubectl get pods -A -l k8s-app=kubernetes-dashboard -o wide
经过查看已经被调度到了Server3节点
结论：高可用实验，实验成功，且页面可以正常访问
方案二 手动删除 Pod 强制重建（推荐测试）
由于刚刚经过方案一的测试，被调度到了server3，所以这次对server3进行模拟宕机，然后手动删除pod
kubectl delete pod -n kubernetes-dashboard pod名字

经过手动删除，立马触发自动调度，已经被调度到了Server2节点
结论：高可用实验，实验成功，且页面可以正常访问
方案三 缩短节点失联容忍时间（适用于生产环境）
如果你希望 Kubernetes 更快地响应节点故障，可以在 K3s 启动参数中添加以下内容：
--node-monitor-grace-period=20s \--pod-eviction-timeout=30s
⚠️ 注意：这会影响整个集群的行为，适用于生产环境或需要快速故障恢复的场景。
安装dashboard
操作节点:[Server1]
sudo wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml &amp;&amp; \sudo sed -i &#x27;s/kubernetesui\/dashboard:v2.7.0/registry.cn-hangzhou.aliyuncs.com\/qianyios\/dashboard:v2.7.0/g&#x27; recommended.yaml sleep 3sudo sed -i &#x27;s/kubernetesui\/metrics-scraper:v1.0.8/registry.cn-hangzhou.aliyuncs.com\/qianyios\/metrics-scraper:v1.0.8/g&#x27; recommended.yaml sudo sed -i &#x27;/targetPort: 8443/a\      nodePort: 30001&#x27; recommended.yaml sudo sed -i &#x27;/nodePort: 30001/a\  type: NodePort&#x27; recommended.yaml
运行pod
kubectl apply -f recommended.yaml
创建token
#创建service account并绑定默认cluster-admin管理员群角色#创建用户kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard#用户授权kubectl create clusterrolebinding dashboard-admin \--clusterrole=cluster-admin \--serviceaccount=kubernetes-dashboard:dashboard-admin#临时获取用户Token（默认只有 30 分钟 ）kubectl create token dashboard-admin -n kubernetes-dashboard#永久获取用户Tokencat &lt;&lt;EOF | kubectl apply -f -apiVersion: v1kind: Secretmetadata:  name: dashboard-admin-token  namespace: kubernetes-dashboard  annotations:    kubernetes.io/service-account.name: dashboard-admintype: kubernetes.io/service-account-tokenEOFKUBECONFIG_FILE=&quot;dashboard-kubeconfig.yaml&quot;# 自动获取 API Server 地址APISERVER=$(kubectl config view --minify -o jsonpath=&#x27;&#123;.clusters[0].cluster.server&#125;&#x27;)# 自动获取 CA 证书CA_CERT=$(kubectl config view --raw -o jsonpath=&#x27;&#123;.clusters[0].cluster.certificate-authority-data&#125;&#x27;)# 自动从 Secret 获取 Token（你提到的正确方式）TOKEN=$(kubectl get secret dashboard-admin-token -n kubernetes-dashboard -o jsonpath=&#x27;&#123;.data.token&#125;&#x27; | base64 --decode)# 生成 kubeconfig 文件cat &lt;&lt;EOF &gt; $&#123;KUBECONFIG_FILE&#125;apiVersion: v1kind: Configclusters:  - name: kubernetes    cluster:      server: $&#123;APISERVER&#125;      certificate-authority-data: $&#123;CA_CERT&#125;users:  - name: dashboard-admin    user:      token: $&#123;TOKEN&#125;contexts:  - name: dashboard-context    context:      cluster: kubernetes      user: dashboard-admincurrent-context: dashboard-contextEOFecho &quot;✅ kubeconfig 文件已生成：$&#123;KUBECONFIG_FILE&#125;&quot;
这时候就会提示你
✅ kubeconfig 文件已生成：dashboard-kubeconfig.yaml
你就把这个文件上传到dashboard的kubeconfig就可以免密登入了

修改启动参数
如果你在安装的时候有些参数输入错了，或者想改，可以在这里改
首先，停止 K3s 服务以避免在更新过程中出现冲突：
sudo systemctl stop k3s
修改k3s启动参数
sudo vi /etc/systemd/system/k3s.service

假设你的–tls-san的高可用地址输入错了，要改成别的，你就改完，记得保存
然后删除旧证书
sudo rm -f /var/lib/rancher/k3s/server/tls/serving-kube-apiserver*sudo rm -f /var/lib/rancher/k3s/server/tls/server*
重启服务
sudo systemctl daemon-reloadsudo systemctl start k3s
卸载K3S
官方教程：Uninstalling K3s | K3s
卸载Server
要从服务器节点卸载 K3s，请运行：
/usr/local/bin/k3s-uninstall.sh
卸载Agent
要从代理节点卸载 K3s，请运行：
/usr/local/bin/k3s-agent-uninstall.sh
解决非root用户使用kubectl等命令显示无命令的办法
这时候运行查看节点命令，提示找不到命令
sudo kubectl get nodes
一看发现只有具体到指定路径才可以正常运行，并且用户和权限组都是root

这时候在普通用户查看visudo
sudo visudo

一看地址，他并没有/usr/local/bin的路径，所以普通用户是没办法继承root的路径的，所以你要设置普通用户默认的环境变量（生成环境，建议仔细斟酌要不要添加，不然就只能用绝对路径）
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

这时候再次运行k3s命令
sudo kubectl get nodessudo crictl images


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>OpenEuler</tag>
        <tag>K3s</tag>
      </tags>
  </entry>
  <entry>
    <title>广州商学院课程作业导航</title>
    <url>/posts/548777d4/</url>
    <content><![CDATA[
广州商学院课程作业导航




 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
  </entry>
  <entry>
    <title>实现私有Yum仓库</title>
    <url>/posts/f49cc7ae/</url>
    <content><![CDATA[
实现私有Yum仓库
架构图

每个系统的最后的路径都不一样，所以要看清，尽量跟大厂路径对齐，起始最重要的就是Packages和repodata，你看阿里云的路径，我们只要走到有repedata的文件夹下，就说明走对了，不用往下走了
主机拓扑



主机名
ip
os




yum server
192.168.48.128
Rocker8.9


client1
192.168.48.11
Centos Stream 8


client2
192.168.48.10
Centos 7



前情提要：所有要进行上传yum源的机子都要挂载光盘，也可以选择网络备份
自动挂载光盘
#自动挂载yum install autofs -ysystemctl enable --now autofssed -i &#x27;/^[[:space:]]*#.*misc.*\/etc\/auto.misc/ s/^#//&#x27; /etc/auto.mastersystemctl restart autofsls /misc/cd
部署yum server
操作节点：【yum server】
Rocky8
yum install -y httpdsystemctl disable --now firewalld.servicesystemctl enable --now httpd.service#自己看前面的教程实现rocky8的光盘自动挂载#将本地光盘中的内容CP到web目录中，给客户端使用mkdir -p /var/www/html/rockylinux/8/&#123;BaseOS,AppStream&#125;cp -r /misc/cd/BaseOS/* /var/www/html/rockylinux/8/BaseOScp -r /mnt/BaseOS/repodata /var/www/html/rockylinux/8/BaseOS/cp -r /misc/cd/AppStream/* /var/www/html/rockylinux/8/AppStreamcp -r /mnt/AppStream/repodata /var/www/html/rockylinux/8/AppStream/#这里可能有点慢，因为要拷贝的文件有点多
现在一些基本的文件都拷过去了访问网页就可以看见了
http://192.168.48.128/rockylinux/8/

假设我还有个extras源想拷过去呢？前面那个是走本地，这个可以走网络，这时候就可以用到yum仓同步工具
https://mirrors.aliyun.com/rockylinux/8/extras/x86_64/os/

#备份自己的源mkdir -p repo.bakmv /etc/yum.repos.d/* repo.bak/#这是私网yum server自己用的repocat &gt; /etc/yum.repos.d/qianyios.repo&lt;&lt;&quot;EOF2&quot;[AppStream]name=AppStreambaseurl=file:///var/www/html/rockylinux/8/AppStream/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1[BaseOS]name=BaseOSbaseurl=file:///var/www/html/rockylinux/8/BaseOS/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1[extras]name=extrasbaseurl=file:///var/www/html/rockylinux/8/extras/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1EOF2#这是公网用来同步的的repocat &gt; /etc/yum.repos.d/qianyios-external-rocky8.repo&lt;&lt;&quot;EOF2&quot;[AppStream-external-rocky8]name=AppStream-external-rocky8baseurl=https://mirrors.aliyun.com/rockylinux/8/AppStream/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1[BaseOS-external-rocky8]name=BaseOS-external-rocky8baseurl=https://mirrors.aliyun.com/rockylinux/8/BaseOS/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1[extras-external-rocky8]name=extras-external-rocky8baseurl=https://mirrors.aliyun.com/rockylinux/8/extras/x86_64/os/gpgkey=/etc/pki/rpm-gpg/RPM-GPG-KEY-rockyofficialgpgcheck=1enabled=1EOF2
#CentOS 8 dnf 工具集成 REPOID是那个repo里的[]里的名字dnf reposync --repoid=REPOID --download-metadata -p /path dnf reposync --help #查看帮助#CentOS 7 以前版本，reposync工具来自于yum-utils包reposync --repoid=REPOID --download-metadata -p /path
#创建好对应的路径，由于AppStream和BaseOS已经手动拉过去了，但是路径不对，我们就手动移一下cd /var/www/html/rockylinux/8mkdir -p AppStream/x86_64/os/mkdir -p BaseOS/x86_64/os/mv AppStream/&#123;Packages,repodata&#125; AppStream/x86_64/os/mv BaseOS/&#123;Packages,repodata&#125; BaseOS/x86_64/os/#开始同步，这里最后-p 路径的就不用加extrasmkdir -p /var/www/html/rockylinux/8/yum reposync --repoid=extras-external-rocky8 --download-metadata -p /var/www/html/rockylinux/8/#但是这个时候他的名字是extras-external-rocky8，所以你要把他下面的内容移动到extras去，还要注意有没有x86_64/os/mv /var/www/html/rockylinux/8/&#123;extras-external-rocky8,extras&#125;mkdir -p extras/x86_64/os/mv extras/&#123;Packages,repodata&#125; extras/x86_64/os/

这就是成果
测试自己是否能创建缓存成功
#用的是私有repo，记得把其他的repo移走[root@localhost 8]# yum clean all &amp;&amp; yum makecache75 个文件已删除AppStream                                                   410 MB/s | 8.7 MB     00:00BaseOS                                                      237 MB/s | 2.6 MB     00:00extras                                                      6.4 MB/s |  15 kB     00:00元数据缓存已建立。
Centos Strem 8
远程同步
操作节点：【Centos Strem 8】
从Centos Strem 8复制到yumserver，如果你没有centos stream 8的机子，那就直接选网络同步
#自己看前面的教程实现rocky8的光盘自动挂载#将本地光盘中的内容CP到yum server 的web目录中scp -r /misc/cd/BaseOS 192.168.48.128:/var/www/html/centos/8-stream/scp -r /misc/cd/AppStream 192.168.48.128:/var/www/html/centos/8-stream/
网络同步
操作节点：【yum server】
#公网cat &gt; /etc/yum.repos.d/qianyios-external--Centos-Strem-8.repo&lt;&lt;&quot;EOF2&quot;[AppStream-external-Centos-Strem-8]name=AppStream-external-Centos-Strem-8baseurl=https://mirrors.aliyun.com/centos/8-stream/AppStream/x86_64/os/gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Officialgpgcheck=1enabled=1[BaseOS-external-Centos-Strem-8]name=BaseOS-external-Centos-Strem-8baseurl=https://mirrors.aliyun.com/centos/8-stream/BaseOS/x86_64/os/gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Officialgpgcheck=1enabled=1[extras-external-Centos-Strem-8]name=extras-external-Centos-Strem-8baseurl=https://mirrors.aliyun.com/centos/8-stream/extras/x86_64/os/gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Officialgpgcheck=1enabled=1EOF2
#前面已经复制过了AppStream和BaseOS，这里就不做演示了,如果你手动之后还想网络同步，我的建议是删掉手动的文件夹再来拉去取网络的#AppStreamyum reposync --repoid=AppStream-external-Centos-Strem-8 --download-metadata -p /var/www/html/centos/8-stream/#BaseOSyum reposync --repoid=BaseOS-external-Centos-Strem-8 --download-metadata -p /var/www/html/centos/8-stream/#extrasyum reposync --repoid=extras-external-Centos-Strem-8 --download-metadata -p /var/www/html/centos/8-stream/#注意修改名字哦mv /var/www/html/centos/8-stream/&#123;AppStream-external-Centos-Strem-8,AppStream&#125;mv /var/www/html/centos/8-stream/&#123;BaseOS-external-Centos-Strem-8,BaseOS&#125;mv /var/www/html/centos/8-stream/&#123;extras-external-Centos-Strem-8,extras&#125;cd /var/www/html/centos/8-stream/extrasmv Packages x86_64/os/mv repodata x86_64/os/

centos7
手动的我就不写了一个意思，这里我就写网络的
#公网cat &gt; /etc/yum.repos.d/qianyios-external-centos7.repo&lt;&lt;&quot;EOF2&quot;[base-external-centos7]name=BaseOS-external-centos7baseurl=https://mirrors.aliyun.com/centos/7/os/x86_64gpgkey=https://mirrors.aliyun.com/centos/7/os/x86_64/RPM-GPG-KEY-CentOS-7gpgcheck=1enabled=1[extras-external-centos7]name=extras-external-centos7baseurl=https://mirrors.aliyun.com/centos/7/extras/x86_64/gpgkey=https://mirrors.aliyun.com/centos/7/os/x86_64/RPM-GPG-KEY-CentOS-7gpgcheck=1enabled=1EOF2
mkdir -p /var/www/html/centos/7/os/x86_64/#bashyum reposync --repoid=base-external-centos7 --download-metadata -p /var/www/html/centos/7/#extrasyum reposync --repoid=extras-external-centos7 --download-metadata -p /var/www/html/centos/7/#注意修改名字哦mv /var/www/html/centos/7/&#123;base-external-centos7,base&#125;cd /var/www/html/centos/7mv base os/x86_64/mv /var/www/html/centos/7/&#123;extras-external-centos7,extras&#125;cd /var/www/html/centos/7/extrasmv Packages x86_64/mv repodata x86_64/

客户端使用
操作节点：【Centos Stream 8】
#备份原有的repomkdir repo.bakmv /etc/yum.repos.d/* repo.bak/#公网cat &gt; /etc/yum.repos.d/qianyios-external-Centos-Strem-8.repo&lt;&lt;&quot;EOF2&quot;[AppStream-external-Centos-Strem-8]name=AppStream-external-Centos-Strem-8baseurl=http://192.168.48.128/centos/8-stream/AppStream/x86_64/os/gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialgpgcheck=1enabled=1[BaseOS-external-Centos-Strem-8]name=BaseOS-external-Centos-Strem-8baseurl=http://192.168.48.128/centos/8-stream/BaseOS/x86_64/os/gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialgpgcheck=1enabled=1[extras-external-Centos-Strem-8]name=extras-external-Centos-Strem-8baseurl=http://192.168.48.128/centos/8-stream/extras/x86_64/os/gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficialgpgcheck=1enabled=1EOF2yum clean all &amp;&amp; yum makecache#成功[root@qianyi ~]# yum clean all &amp;&amp; yum makecache                                             13 files removedAppStream-external-Centos-Strem-8                           205 MB/s | 7.9 MB     00:00BaseOS-external-Centos-Strem-8                              158 MB/s | 2.7 MB     00:00extras-external-Centos-Strem-8                              6.2 MB/s |  18 kB     00:00Metadata cache created.[root@qianyi ~]#
如果他报这个错，你要确保你的extras下的那个路径有没有repodata这个文件夹，或者看看路径对不对

操作节点：【centos7】
#备份原有的repomkdir repo.bakmv /etc/yum.repos.d/* repo.bak/cat &gt; /etc/yum.repos.d/qianyios-external-centos7.repo&lt;&lt;&quot;EOF2&quot;[base-external-centos7]name=BaseOS-external-centos7baseurl=http://192.168.48.128/centos/7/os/x86_64/gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7gpgcheck=1enabled=1[extras-external-centos7]name=extras-external-centos7baseurl=http://192.168.48.128/centos/7/extras/x86_64/gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7gpgcheck=1enabled=1EOF2yum clean all &amp;&amp; yum makecache#成功[root@localhost ~]# yum clean all &amp;&amp; yum makecacheLoaded plugins: fastestmirror, langpacksCleaning repos: base-external-centos7 extras-external-centos7Cleaning up list of fastest mirrorsOther repos take up 102 M of disk space (use --verbose for details)Loaded plugins: fastestmirror, langpacksDetermining fastest mirrorsbase-external-centos7                                                | 3.6 kB  00:00:00extras-external-centos7                                              | 2.9 kB  00:00:00(1/7): base-external-centos7/group_gz                                | 153 kB  00:00:00(2/7): base-external-centos7/filelists_db                            | 3.3 MB  00:00:00(3/7): base-external-centos7/other_db                                | 1.3 MB  00:00:00(4/7): base-external-centos7/primary_db                              | 3.3 MB  00:00:00(5/7): extras-external-centos7/primary_db                            | 253 kB  00:00:00(6/7): extras-external-centos7/filelists_db                          | 305 kB  00:00:00(7/7): extras-external-centos7/other_db                              | 154 kB  00:00:00Metadata Cache Created[root@localhost ~]#
总结
1.你要下那个源仓库，你就走到对应的路径，如果看见repodata文件夹，那就是这个路径了

2.如果你是本地测试，拉的文件太多很大，你终止了你可能拉不到repodata，所以你可以通过光盘里的scp过去yum server
3.万事都要确定好路径喔，如果repo写错了，你就看看他那个报错的路径下有没有repodata

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>Yum</tag>
      </tags>
  </entry>
  <entry>
    <title>实现单点Mycat读写分离</title>
    <url>/posts/c89451f8/</url>
    <content><![CDATA[
实现单点Mycat读写分离
下载链接1：Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz
下载链接2：Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz
如有下载不了请及时在评论区留言
架构图




主机名
ip
内存
硬盘




master
192.168.48.10
2G
100G


slave
192.168.48.11
2G
100G


mycat
192.168.48.128
&gt;=2G
100G


client
192.168.48.101
2G
100G



部署主从复制
安装mysql
操作节点：[master，slave]
这是我的二进制mysql安装脚本，适用于大部分的linux通用安装，如果你有自己的安排可以直接略过这个，自己安装mysql
wget https://blog.qianyios.top/file/mysql_install.shbash mysql_install.sh
配置master
1.修改配置文件
vim /etc/my.cnf##其他安装mysql的方法，你只需要确保有如下选项就行了[mysqld]server-id=10log-bin=/data/logbin/qylog
sever-id ：必须是整个集群里面唯一的，不能重复
log-bin:后续会在/data/logbin生成qylog.000001的二进制文件，你可以自定义路径和文件名不用加后缀
mkdir -p /data/logbin;chown -R mysql:mysql /data/logbinsystemctl restart mysqld
2.查看二进制文件的位置
mysql -uroot -p123456show master logs;(root@localhost) [(none)]&gt; show master logs;+--------------+-----------+-----------+| Log_name     | File_size | Encrypted |+--------------+-----------+-----------+| qylog.000001 |       157 | No        |+--------------+-----------+-----------+1 row in set (0.00 sec)#记住这个qylog.000001和157，主从复制要用到
3.创建传输账号
create user repluser@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27;;grant replication slave on *.* to repluser@&#x27;192.168.48.%&#x27;;
配置从节点
1.修改配置文件
#其他安装mysql的方法，你只需要确保有如下选项就行了[mysqld]server-id=11log-bin=/data/logbin/qylogread_only=ON #设置数据库只读，针对supper user无效#启动中继日志relay_log=/data/relaylog/relay-log #relay log的文件路径，默认值hostname-relay-binrelay_log_index=/data/relaylog/relay-log.index  #默认值hostname-relay-bin.index  
sever-id ：必须是整个集群里面唯一的，不能重复
log-bin:后续会在/data/logbin生成qylog.000001的二进制文件，你可以自定义路径和文件名不用加后缀
mkdir -p /data/logbin /data/relaylogchown -R mysql:mysql /data/logbin /data/relaylogsystemctl restart mysqld
启动复制线程
操作节点：[slave]
mysql -u root -p123456CHANGE MASTER TO MASTER_HOST=&#x27;192.168.48.10&#x27;, MASTER_USER=&#x27;repluser&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;qylog.000001&#x27;, MASTER_LOG_POS=157,get_master_public_key=1; start slave;show slave status\G;
确保有两个yes就行了

如果你想重置线程可以用以下命令
stop slave;reset slave;
有一个重要的点，因为二进制日志是记录你的操作的嘛，我们在开启二进制日志之后，不是在主节点创建了一个repluser用户吗，那这个操作肯定也被记录，然后这不是主从复制了吗，这里肯定，也会同步，也会运行，二进制日志本身就是一个sql文件，普通cat是看不了，你得用这个命令
[root@master ~]# mysqlbinlog -uroot -p123456 /data/logbin/qylog.000001 -v

所有既然主从复制了，那在从节点，应该也运行了这个二进制文件，就说明从节点也有这个账号
select host,user from mysql.user;

测试
接下来在主节点导入测试数据
全选复制粘贴退出mysql运行
cat &gt; hellodb.sql &lt;&lt;&quot;EOF&quot;CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hellodb` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `hellodb`;DROP TABLE IF EXISTS `classes`;CREATE TABLE `classes` (  `ClassID` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,  `Class` varchar(100) DEFAULT NULL,  `NumOfStu` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ClassID`)) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;LOCK TABLES `classes` WRITE;INSERT INTO `classes` VALUES(1,&#x27;Shaolin Pai&#x27;,10),(2,&#x27;Emei Pai&#x27;,7),(3,&#x27;QingCheng Pai&#x27;,11),(4,&#x27;Wudang Pai&#x27;,12),(5,&#x27;Riyue Shenjiao&#x27;,31),(6,&#x27;Lianshan Pai&#x27;,27),(7,&#x27;Ming Jiao&#x27;,27),(8,&#x27;Xiaoyao Pai&#x27;,15);UNLOCK TABLES;DROP TABLE IF EXISTS `coc`;CREATE TABLE `coc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `ClassID` tinyint(3) unsigned NOT NULL,  `CourseID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;LOCK TABLES `coc` WRITE;INSERT INTO `coc` VALUES (1,1,2),(2,1,5),(3,2,2),(4,2,6),(5,3,1),(6,3,7),(7,4,5),(8,4,2),(9,5,1),(10,5,9),(11,6,3),(12,6,4),(13,7,4),(14,7,3);UNLOCK TABLES;DROP TABLE IF EXISTS `courses`;CREATE TABLE `courses` (  `CourseID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Course` varchar(100) NOT NULL,  PRIMARY KEY (`CourseID`)) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;LOCK TABLES `courses` WRITE;/*!40000 ALTER TABLE `courses` DISABLE KEYS */;INSERT INTO `courses` VALUES (1,&#x27;Hamo Gong&#x27;),(2,&#x27;Kuihua Baodian&#x27;),(3,&#x27;Jinshe Jianfa&#x27;),(4,&#x27;Taiji Quan&#x27;),(5,&#x27;Daiyu Zanghua&#x27;),(6,&#x27;Weituo Zhang&#x27;),(7,&#x27;Dagou Bangfa&#x27;);/*!40000 ALTER TABLE `courses` ENABLE KEYS */;UNLOCK TABLES;DROP TABLE IF EXISTS `scores`;CREATE TABLE `scores` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `StuID` int(10) unsigned NOT NULL,  `CourseID` smallint(5) unsigned NOT NULL,  `Score` tinyint(3) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;LOCK TABLES `scores` WRITE;INSERT INTO `scores` VALUES (1,1,2,77),(2,1,6,93),(3,2,2,47),(4,2,5,97),(5,3,2,88),(6,3,6,75),(7,4,5,71),(8,4,2,89),(9,5,1,39),(10,5,7,63),(11,6,1,96),(12,7,1,86),(13,7,7,83),(14,8,4,57),(15,8,3,93);UNLOCK TABLES;DROP TABLE IF EXISTS `students`;CREATE TABLE `students` (  `StuID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(50) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) NOT NULL,  `ClassID` tinyint(3) unsigned DEFAULT NULL,  `TeacherID` int(10) unsigned DEFAULT NULL,  PRIMARY KEY (`StuID`)) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;LOCK TABLES `students` WRITE;INSERT INTO `students` VALUES (1,&#x27;Shi Zhongyu&#x27;,22,&#x27;M&#x27;,2,3),(2,&#x27;Shi Potian&#x27;,22,&#x27;M&#x27;,1,7),(3,&#x27;Xie Yanke&#x27;,53,&#x27;M&#x27;,2,16),(4,&#x27;Ding Dian&#x27;,32,&#x27;M&#x27;,4,4),(5,&#x27;Yu Yutong&#x27;,26,&#x27;M&#x27;,3,1),(6,&#x27;Shi Qing&#x27;,46,&#x27;M&#x27;,5,NULL),(7,&#x27;Xi Ren&#x27;,19,&#x27;F&#x27;,3,NULL),(8,&#x27;Lin Daiyu&#x27;,17,&#x27;F&#x27;,7,NULL),(9,&#x27;Ren Yingying&#x27;,20,&#x27;F&#x27;,6,NULL),(10,&#x27;Yue Lingshan&#x27;,19,&#x27;F&#x27;,3,NULL),(11,&#x27;Yuan Chengzhi&#x27;,23,&#x27;M&#x27;,6,NULL),(12,&#x27;Wen Qingqing&#x27;,19,&#x27;F&#x27;,1,NULL),(13,&#x27;Tian Boguang&#x27;,33,&#x27;M&#x27;,2,NULL),(14,&#x27;Lu Wushuang&#x27;,17,&#x27;F&#x27;,3,NULL),(15,&#x27;Duan Yu&#x27;,19,&#x27;M&#x27;,4,NULL),(16,&#x27;Xu Zhu&#x27;,21,&#x27;M&#x27;,1,NULL),(17,&#x27;Lin Chong&#x27;,25,&#x27;M&#x27;,4,NULL),(18,&#x27;Hua Rong&#x27;,23,&#x27;M&#x27;,7,NULL),(19,&#x27;Xue Baochai&#x27;,18,&#x27;F&#x27;,6,NULL),(20,&#x27;Diao Chan&#x27;,19,&#x27;F&#x27;,7,NULL),(21,&#x27;Huang Yueying&#x27;,22,&#x27;F&#x27;,6,NULL),(22,&#x27;Xiao Qiao&#x27;,20,&#x27;F&#x27;,1,NULL),(23,&#x27;Ma Chao&#x27;,23,&#x27;M&#x27;,4,NULL),(24,&#x27;Xu Xian&#x27;,27,&#x27;M&#x27;,NULL,NULL),(25,&#x27;Sun Dasheng&#x27;,100,&#x27;M&#x27;,NULL,NULL);UNLOCK TABLES;DROP TABLE IF EXISTS `teachers`;CREATE TABLE `teachers` (  `TID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(100) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) DEFAULT NULL,  PRIMARY KEY (`TID`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;LOCK TABLES `teachers` WRITE;INSERT INTO `teachers` VALUES (1,&#x27;Song Jiang&#x27;,45,&#x27;M&#x27;),(2,&#x27;Zhang Sanfeng&#x27;,94,&#x27;M&#x27;),(3,&#x27;Miejue Shitai&#x27;,77,&#x27;F&#x27;),(4,&#x27;Lin Chaoying&#x27;,93,&#x27;F&#x27;);UNLOCK TABLES;DROP TABLE IF EXISTS `toc`;CREATE TABLE `toc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `CourseID` smallint(5) unsigned DEFAULT NULL,  `TID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `toc` WRITE;UNLOCK TABLES;EOF
在主节点导入
mysql -uroot -p123456 &lt; hellodb.sqlmysql -uroot -p123456 hellodb -e &quot;show tables;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+-------------------+| Tables_in_hellodb |+-------------------+| classes           || coc               || courses           || scores            || students          || teachers          || toc               |+-------------------+mysql -uroot -p123456use hellodb;insert into teachers (name,age,gender)values(&quot;XIAOHU&quot;,18,&#x27;M&#x27;);select * from teachers;(root@localhost) [hellodb]&gt; select * from teachers;+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      |#这就是新加的数据+-----+---------------+-----+--------+
在从节点查看是否同步
mysql -uroot -p123456 hellodb -e &quot;use hellodb;select * from teachers;&quot;[root@slave ~]# mysql -uroot -p123456 hellodb -e &quot;use hellodb;select * from teachers;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+-----+---------------+-----+--------+| TID | Name          | Age | Gender |+-----+---------------+-----+--------+|   1 | Song Jiang    |  45 | M      ||   2 | Zhang Sanfeng |  94 | M      ||   3 | Miejue Shitai |  77 | F      ||   4 | Lin Chaoying  |  93 | F      ||   5 | XIAOHU        |  18 | M      |+-----+---------------+-----+--------+
至此主从复制成功同步
部署mycat
注意：这台机上不能用mysql等其他数据库
操作节点：[mycat]
安装jdk
wget https://alist.qianyios.top/d/%E6%B8%B8%E5%AE%A2/%E8%B1%86%E5%8C%85haha/%E8%BF%90%E7%BB%B4/mysql/%E5%AE%89%E8%A3%85%E5%8C%85/jdk-8u202-linux-x64.rpm?sign=1F6ZiF7m6XPKTiV2PiNEH2xIInIVrb2uHIm3TvyFXG0=:0mv &#x27;jdk-8u202-linux-x64.rpm?sign=1F6ZiF7m6XPKTiV2PiNEH2xIInIVrb2uHIm3TvyFXG0=:0&#x27; jdk-8u202-linux-x64.rpmrpm -ivh jdk-8u202-linux-x64.rpm
[root@mycat ~]# java -versionjava version &quot;1.8.0_202&quot;Java(TM) SE Runtime Environment (build 1.8.0_202-b08)Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)
下载安装mycat
wget https://alist.qianyios.top/d/%E6%B8%B8%E5%AE%A2/%E8%B1%86%E5%8C%85haha/%E8%BF%90%E7%BB%B4/mysql/%E5%AE%89%E8%A3%85%E5%8C%85/Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz?sign=T83V18vz0xSMy6INAGV9eAzETOL7c0gxQuZA5YYWlhw=:0mv &#x27;Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz?sign=T83V18vz0xSMy6INAGV9eAzETOL7c0gxQuZA5YYWlhw=:0&#x27; Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gzmkdir -p /appstar xf Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz -C /apps
mycat安装目录结构：

bin  mycat命令，启动、重启、停止等
catlet  catlet为Mycat的一个扩展功能
conf  Mycat 配置信息,重点关注
lib  Mycat引用的jar包，Mycat是java开发的
logs  日志文件，包括Mycat启动的日志和运行的日志
version.txt  mycat版本说明

logs目录:

wrapper.log mycat启动日志
mycat.log mycat详细工作日志

Mycat的配置文件都在conf目录里面，这里介绍几个常用的文件：

server.xml Mycat软件本身相关的配置文件，设置账号、参数等
schema.xml Mycat对应的物理数据库和数据库表的配置,读写分离、高可用、分布式策略定制、节点控制
rule.xml Mycat分片（分库分表）规则配置文件,记录分片规则列表、使用方法等

启动和连接
echo &#x27;PATH=/apps/mycat/bin:$PATH&#x27; &gt; /etc/profile.d/mycat.shsource /etc/profile.d/mycat.shmycat start#连接mycat：mysql -uroot -p123456 -h 127.0.0.1 -P8066exit
Mycat 主要配置文件说明
server.xml
存放Mycat软件本身相关的配置文件，比如：连接Mycat的用户，密码，数据库名称等
server.xml文件中配置的参数解释说明：



参数
说明




user
用户配置节点


name
客户端登录 MyCAT 的用户名，也就是客户端用来连接 Mycat 的用户名。


password
客户端登录 MyCAT 的密码


schemas
数据库名，这里会和 schema.xml 中的配置关联，多个用逗号分开，例如：db1,db2


privileges
配置用户针对表的增删改查的权限


readOnly
mycat 逻辑库所具有的权限。true 为只读，false 为读写都有，默认为 false



注意：

server.xml文件里登录mycat的用户名和密码可以任意定义，这个账号和密码是为客户机登录mycat时使用的账号信息
逻辑库名(如上面的TESTDB，也就是登录mycat后显示的库名，切换这个库之后，显示的就是代理的真实mysql数据库的表)要在schema.xml里面也定义，否则会导致mycat服务启动失败！
这里只定义了一个标签，所以把多余的都注释了。如果定义多个标签，即设置多个连接mycat的用户名和密码，那么就需要在schema.xml文件中定义多个对应的库！

schema.xml
是最主要的配置项，此文件关联mysql读写分离策略，读写分离、分库分表策略、分片节点都是在此文件中配置的.MyCat作为中间件，它只是一个代理，本身并不进行数据存储，需要连接后端的MySQL物理服务器，此文件就是用来连接MySQL服务器的
schema.xml文件中配置的参数解释说明：



参数
说明




schema
数据库设置，此数据库为逻辑数据库，name 与 server.xml 中的 schema 对应


dataNode
分片信息，也就是分库相关配置


dataHost
物理数据库，真正存储数据的数据库



配置说明
name属性唯一标识dataHost标签，供上层的标签使用。
maxCon属性指定每个读写实例连接池的最大连接。也就是说，标签内嵌套的writeHost、readHost标签都会使用这个属性的值来实例化出连接池的最大连接数
minCon属性指定每个读写实例连接池的最小连接，初始化连接池的大小
每个节点的属性逐一说明
schema:



属性
说明




name
逻辑数据库名，与 server.xml 中的 schema 对应


checkSQLschema
数据库前缀相关设置，这里为 false


sqlMaxLimit
SELECT 时默认的 LIMIT，避免查询全表



table



属性
说明




name
表名，物理数据库中表名


dataNode
表存储到哪些节点，多个节点用逗号分隔。节点为下文 dataNode 设置的 name


primaryKey
主键字段名，自动生成主键时需要设置


autoIncrement
是否自增


rule
分片规则名，具体规则下文 rule 详细介绍



dataNode



属性
说明




name
节点名，与 table 中的 dataNode 对应


datahost
物理数据库名，与 datahost 中的 name 对应


database
物理数据库中数据库名



dataHost



属性
说明




name
物理数据库名，与 dataNode 中的 dataHost 对应


balance
均衡负载的方式


writeType
写入方式


dbType
数据库类型


heartbeat
心跳检测语句，注意语句结尾的分号要加



schema.xml文件中有三点需要注意：balance=“1”，writeType=“0” ,switchType=“1”
schema.xml中的balance的取值决定了负载均衡对非事务内的读操作的处理。balance 属性负载均衡类型，目前的取值有 4 种：
balance=&quot;0&quot;：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上,即读请求仅发送到writeHost上
balance=&quot;1&quot;：一般用此模式，读请求随机分发到当前writeHost对应的readHost和standby的writeHost上。即全部的readHost与stand by writeHost 参与 select 语句的负载均衡，简单的说，当双主双从模式(M1 -&gt;S1 ， M2-&gt;S2，并且 M1 与 M2 互为主备)，正常情况下， M2,S1, S2 都参与 select 语句的负载均衡
balance=&quot;2&quot;：读请求随机分发到当前dataHost内所有的writeHost和readHost上。即所有读操作都随机的在writeHost、 readhost 上分发
balance=&quot;3&quot;：读请求随机分发到当前writeHost对应的readHost上。即所有读请求随机的分发到wiriterHost 对应的 readhost 执行, writerHost 不负担读压力，注意 balance=3 只在 1.4 及其以后版本有，1.3 没有
writeHost和readHost 标签
这两个标签都指定后端数据库的相关配置给mycat，用于实例化后端连接池。
唯一不同的是：writeHost指定写实例、readHost指定读实例，组合这些读写实例来满足系统的要求。
在一个dataHost内可以定义多个writeHost和readHost。但是，如果writeHost指定的后端数据库宕机，那么这个writeHost绑定的所有readHost都将不可用。另一方面，由于这个writeHost宕机系统会自动的检测到，并切换到备用的writeHost上去
注意：Mycat主从分离只是在读的时候做了处理，写入数据的时候，只会写入到writehost，需要通过mycat的主从复制将数据复制到readhost
修改server.xml文件配置Mycat的连接信息
vim /apps/mycat/conf/server.xml
        &lt;property name=&quot;processorBufferPoolType&quot;&gt;0&lt;/property&gt;#在上行下面添加下面的信息，端口3306        &lt;property name=&quot;serverPort&quot;&gt;3306&lt;/property&gt;        &lt;property name=&quot;managerPort&quot;&gt;9066&lt;/property&gt;        &lt;property name=&quot;idleTimeout&quot;&gt;300000&lt;/property&gt;        &lt;property name=&quot;authTimeout&quot;&gt;15000&lt;/property&gt;        &lt;property name=&quot;bindIp&quot;&gt;0.0.0.0&lt;/property&gt;        &lt;property name=&quot;dataNodeIdleCheckPeriod&quot;&gt;300000&lt;/property&gt;        &lt;property name=&quot;frontWriteQueueSize&quot;&gt;4096&lt;/property&gt;        &lt;property name=&quot;processors&quot;&gt;32&lt;/property&gt;                #再往下面翻翻，找到下面这行，用户名root，密码123456        &lt;user name=&quot;root&quot; defaultAccount=&quot;true&quot;&gt;        &lt;property name=&quot;password&quot;&gt;123456&lt;/property&gt;        &lt;property name=&quot;schemas&quot;&gt;TESTDB&lt;/property&gt;        #schemas对应的TESTDB 数据库要和后面要改的schema.xml相对应
这里填的是用户去连接的mysql，也就是说用户用mysql -uroot -p123465连的是mycat1的这个虚拟的TESTDB数据库，但是他映射的是后端的数据库，这个在下一步会讲到
修改schema.xml
#直接复制我的文件就行了，全选一键复制，看一下有什么信息要修改，修改后就可以复制了cat &gt; /apps/mycat/conf/schema.xml &lt;&lt;&quot;EOF&quot;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE mycat:schema SYSTEM &quot;schema.dtd&quot;&gt;&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt; &lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;hellodb&quot; /&gt; &lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; 			writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- 写的节点--&gt; &lt;writeHost host=&quot;host1&quot; url=&quot;192.168.48.10:3306&quot; user=&quot;qianyios&quot; password=&quot;123456&quot;&gt;      &lt;!-- 读的节点--&gt;     &lt;readHost host=&quot;host2&quot; url=&quot;192.168.48.11:3306&quot; user=&quot;qianyios&quot; password=&quot;123456&quot; /&gt; &lt;/writeHost&gt;  &lt;/dataHost&gt;&lt;/mycat:schema&gt;EOF

&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;dn1&quot;&gt; &lt;/schema&gt;这一行的dn1对应下面的这一行
&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;localhost1&quot; database=&quot;hellodb&quot; /&gt;
TESTDB是前面上一步修改server.xml提到的要和前面一一对应的虚拟数据库
hellodb是后端对应的数据库名，就是说，我后端有哪个数据库是想映射到mycat的，就写，我总不能说所有数据库都写都映射
&lt;dataHost name=&quot;localhost1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  			writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot; slaveThreshold=&quot;100&quot;&gt;
其中balance=&quot;1&quot;设置为1表示读写分离
 
&lt;writeHost host=&quot;host1&quot; url=&quot;192.168.48.10:3306&quot; user=&quot;qianyios&quot; password=&quot;123456&quot;&gt;

&lt;readHost host=&quot;host2&quot; url=&quot;192.168.48.11:3306&quot; user=&quot;qianyios&quot; password=&quot;123456&quot; /&gt;
这个qianyios用户等等后面会创建


#重启mycatmycat stopmycat start#查看端口状态[root@mycat ~]# ss -ntlpState      Recv-Q     Send-Q          Local Address:Port            Peer Address:Port     ProcessLISTEN     0          1                   127.0.0.1:32000                0.0.0.0:*         users:((&quot;java&quot;,pid=60546,fd=4))LISTEN     0          128                   0.0.0.0:22                   0.0.0.0:*         users:((&quot;sshd&quot;,pid=991,fd=7))LISTEN     0          2048                        *:9066#这个                *:*         users:((&quot;java&quot;,pid=60546,fd=179))LISTEN     0          50                          *:35183                      *:*         users:((&quot;java&quot;,pid=60546,fd=70))LISTEN     0          128                      [::]:22                      [::]:*         users:((&quot;sshd&quot;,pid=991,fd=8))LISTEN     0          50                          *:36743                      *:*         users:((&quot;java&quot;,pid=60546,fd=68))LISTEN     0          50                          *:1984                       *:*         users:((&quot;java&quot;,pid=60546,fd=69))LISTEN     0          2048                        *:3306#这个               *:*         users:((&quot;java&quot;,pid=60546,fd=183))[root@mycat ~]#
在master主节点导入测试的数据库
#全新复制运行即可，要退出mysql，在shell终端运行cat &gt; hellodb.sql &lt;&lt;&quot;EOF&quot;CREATE DATABASE /*!32312 IF NOT EXISTS*/ `hellodb` /*!40100 DEFAULT CHARACTER SET utf8 */;USE `hellodb`;DROP TABLE IF EXISTS `classes`;CREATE TABLE `classes` (  `ClassID` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,  `Class` varchar(100) DEFAULT NULL,  `NumOfStu` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ClassID`)) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;LOCK TABLES `classes` WRITE;INSERT INTO `classes` VALUES(1,&#x27;Shaolin Pai&#x27;,10),(2,&#x27;Emei Pai&#x27;,7),(3,&#x27;QingCheng Pai&#x27;,11),(4,&#x27;Wudang Pai&#x27;,12),(5,&#x27;Riyue Shenjiao&#x27;,31),(6,&#x27;Lianshan Pai&#x27;,27),(7,&#x27;Ming Jiao&#x27;,27),(8,&#x27;Xiaoyao Pai&#x27;,15);UNLOCK TABLES;DROP TABLE IF EXISTS `coc`;CREATE TABLE `coc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `ClassID` tinyint(3) unsigned NOT NULL,  `CourseID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;LOCK TABLES `coc` WRITE;INSERT INTO `coc` VALUES (1,1,2),(2,1,5),(3,2,2),(4,2,6),(5,3,1),(6,3,7),(7,4,5),(8,4,2),(9,5,1),(10,5,9),(11,6,3),(12,6,4),(13,7,4),(14,7,3);UNLOCK TABLES;DROP TABLE IF EXISTS `courses`;CREATE TABLE `courses` (  `CourseID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Course` varchar(100) NOT NULL,  PRIMARY KEY (`CourseID`)) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;LOCK TABLES `courses` WRITE;/*!40000 ALTER TABLE `courses` DISABLE KEYS */;INSERT INTO `courses` VALUES (1,&#x27;Hamo Gong&#x27;),(2,&#x27;Kuihua Baodian&#x27;),(3,&#x27;Jinshe Jianfa&#x27;),(4,&#x27;Taiji Quan&#x27;),(5,&#x27;Daiyu Zanghua&#x27;),(6,&#x27;Weituo Zhang&#x27;),(7,&#x27;Dagou Bangfa&#x27;);/*!40000 ALTER TABLE `courses` ENABLE KEYS */;UNLOCK TABLES;DROP TABLE IF EXISTS `scores`;CREATE TABLE `scores` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `StuID` int(10) unsigned NOT NULL,  `CourseID` smallint(5) unsigned NOT NULL,  `Score` tinyint(3) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;LOCK TABLES `scores` WRITE;INSERT INTO `scores` VALUES (1,1,2,77),(2,1,6,93),(3,2,2,47),(4,2,5,97),(5,3,2,88),(6,3,6,75),(7,4,5,71),(8,4,2,89),(9,5,1,39),(10,5,7,63),(11,6,1,96),(12,7,1,86),(13,7,7,83),(14,8,4,57),(15,8,3,93);UNLOCK TABLES;DROP TABLE IF EXISTS `students`;CREATE TABLE `students` (  `StuID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(50) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) NOT NULL,  `ClassID` tinyint(3) unsigned DEFAULT NULL,  `TeacherID` int(10) unsigned DEFAULT NULL,  PRIMARY KEY (`StuID`)) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;LOCK TABLES `students` WRITE;INSERT INTO `students` VALUES (1,&#x27;Shi Zhongyu&#x27;,22,&#x27;M&#x27;,2,3),(2,&#x27;Shi Potian&#x27;,22,&#x27;M&#x27;,1,7),(3,&#x27;Xie Yanke&#x27;,53,&#x27;M&#x27;,2,16),(4,&#x27;Ding Dian&#x27;,32,&#x27;M&#x27;,4,4),(5,&#x27;Yu Yutong&#x27;,26,&#x27;M&#x27;,3,1),(6,&#x27;Shi Qing&#x27;,46,&#x27;M&#x27;,5,NULL),(7,&#x27;Xi Ren&#x27;,19,&#x27;F&#x27;,3,NULL),(8,&#x27;Lin Daiyu&#x27;,17,&#x27;F&#x27;,7,NULL),(9,&#x27;Ren Yingying&#x27;,20,&#x27;F&#x27;,6,NULL),(10,&#x27;Yue Lingshan&#x27;,19,&#x27;F&#x27;,3,NULL),(11,&#x27;Yuan Chengzhi&#x27;,23,&#x27;M&#x27;,6,NULL),(12,&#x27;Wen Qingqing&#x27;,19,&#x27;F&#x27;,1,NULL),(13,&#x27;Tian Boguang&#x27;,33,&#x27;M&#x27;,2,NULL),(14,&#x27;Lu Wushuang&#x27;,17,&#x27;F&#x27;,3,NULL),(15,&#x27;Duan Yu&#x27;,19,&#x27;M&#x27;,4,NULL),(16,&#x27;Xu Zhu&#x27;,21,&#x27;M&#x27;,1,NULL),(17,&#x27;Lin Chong&#x27;,25,&#x27;M&#x27;,4,NULL),(18,&#x27;Hua Rong&#x27;,23,&#x27;M&#x27;,7,NULL),(19,&#x27;Xue Baochai&#x27;,18,&#x27;F&#x27;,6,NULL),(20,&#x27;Diao Chan&#x27;,19,&#x27;F&#x27;,7,NULL),(21,&#x27;Huang Yueying&#x27;,22,&#x27;F&#x27;,6,NULL),(22,&#x27;Xiao Qiao&#x27;,20,&#x27;F&#x27;,1,NULL),(23,&#x27;Ma Chao&#x27;,23,&#x27;M&#x27;,4,NULL),(24,&#x27;Xu Xian&#x27;,27,&#x27;M&#x27;,NULL,NULL),(25,&#x27;Sun Dasheng&#x27;,100,&#x27;M&#x27;,NULL,NULL);UNLOCK TABLES;DROP TABLE IF EXISTS `teachers`;CREATE TABLE `teachers` (  `TID` smallint(5) unsigned NOT NULL AUTO_INCREMENT,  `Name` varchar(100) NOT NULL,  `Age` tinyint(3) unsigned NOT NULL,  `Gender` enum(&#x27;F&#x27;,&#x27;M&#x27;) DEFAULT NULL,  PRIMARY KEY (`TID`)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;LOCK TABLES `teachers` WRITE;INSERT INTO `teachers` VALUES (1,&#x27;Song Jiang&#x27;,45,&#x27;M&#x27;),(2,&#x27;Zhang Sanfeng&#x27;,94,&#x27;M&#x27;),(3,&#x27;Miejue Shitai&#x27;,77,&#x27;F&#x27;),(4,&#x27;Lin Chaoying&#x27;,93,&#x27;F&#x27;);UNLOCK TABLES;DROP TABLE IF EXISTS `toc`;CREATE TABLE `toc` (  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,  `CourseID` smallint(5) unsigned DEFAULT NULL,  `TID` smallint(5) unsigned DEFAULT NULL,  PRIMARY KEY (`ID`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;LOCK TABLES `toc` WRITE;UNLOCK TABLES;EOF
#在主节点导入mysql -uroot -p123456 &lt; hellodb.sqlmysql -uroot -p123456 hellodb -e &quot;show tables;&quot;

在master节点创建用户并对mycat授权
mysql -uroot -p123456 -e &quot;create user &#x27;qianyios&#x27;@&#x27;192.168.48.%&#x27; identified by &#x27;123456&#x27; ;&quot;mysql -uroot -p123456 -e &quot;GRANT ALL PRIVILEGES ON *.* TO &#x27;qianyios&#x27;@&#x27;192.168.48.%&#x27;;&quot;mysql -uroot -p123456 -e&quot;flush privileges;&quot;
qianyios用来给mycat连接本数据库的的账号，映射到前端
在主节点创建好后，由于主从复制，在从节点是可以看得见的
select host,user from mysql.user

测试读写分离

客户端登入mycat
操作节点:[client]
mysql -u root -p123456 -h192.168.48.128
-h192.168.48.128要链接的是mycat的地址
登上了，但是看不了表

一查看报错
[root@mycat ~]# tail -f /apps/mycat/logs/*

can&#x27;t connect to mysql server ,errmsg:Client does not support authentication protocol requested by server; consider upgrading MySQL client
这是由于 MySQL 8 默认使用了新的认证协议 caching_sha2_password，而 MyCat 客户端可能不支持这种新的认证协议。以下是解决方法：
#在master主节点运行mysql -uroot -p123456 -e &quot;ALTER USER &#x27;qianyios&#x27;@&#x27;192.168.48.%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;&quot;mysql -uroot -p123456 -e &quot;FLUSH PRIVILEGES;&quot;
再次重新登入就可以连接了并查看表里
操作节点:[client]
mysql -u root -p123456 -h192.168.48.128use TESTDB;show tables;mysql&gt; show tables;+-------------------+| Tables_in_hellodb |+-------------------+| classes           || coc               || courses           || scores            || students          || teachers          || toc               |+-------------------+7 rows in set (0.00 sec)
验证读写分离
为了确保数据可观，这里要重启一下mycat
操作节点:[mycat]
9066是mycat的管理端口
mycat stop;mycat start;mysql -uroot -p123456 -P9066 -h127.0.0.1#查看读写分离状态信息show @@datasource;

目的读和写的信息数是0
开始测试
操作节点:[client]
mysql -uroot -p123456 -h 192.168.48.128 -P 3306#进行一次查询use TESTDB;select * from teachers;

回到mycat的状态栏

是不是读的操作就出来了，就是他走的是从节点
接下来验证写操作
操作节点:[client]
mysql&gt; insert into teachers(name,age,gender)values(&quot;xiaohu&quot;,25,&#x27;M&#x27;);Query OK, 1 row affected (0.05 sec)
回到mycat的状态栏

是不是一目了然，主节点有了写入的数据，从节点没有
至此读写分离部署成功
模拟从节点宕机
[root@slave ~]# systemctl stop mysqld
然后里面去客户端进行一次查询
use TESTDB;select * from teachers;

然后去mycat节点查看状态

这时候从节点宕机之后，客户端会出现几秒钟的查询不到的状态，然后mycat会把请求转向主节点
面试题
mycat是如何检查主从节点存活的
看我的操作，答案在最后
在主从两个节点的my.cnt添加这个
[mysqld]general_log#重启systemctl restart mysqld
general_log 是一个日志系统，用于记录所有由 MySQL 服务器接收到的连接和执行的 SQL 语句。这个日志对于监控数据库操作、分析性能问题、审计和故障排除非常有用。
[root@master ~]# tail -f /data/mysql/master.log

[root@slave ~]# tail -f /data/mysql/slave.log

解答：在mycat的/apps/mycat/conf/schema.xml的心跳机制里

mycat就会每10s发送一次select user()去监测主从节点状态

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据hadoop实验</title>
    <url>/posts/d721e715/</url>
    <content><![CDATA[
大数据hadoop实验
镜像下载：ubuntu-18.04.6-desktop-amd64.iso
大作业
下面两个文档，自己选一个，那个你会用你就用，替换逻辑是一样的
word文档：大作业文档
markdown文档：markdown文档
下载之后，打开按Ctrl+H进行替换内容
查找内容：student/202206150540/yanjiaxi
替换为：student/你的学号/你的名字
注意：前后没有斜杠
确定之后你就可以自己复制代码运行了
先给自己的虚拟机打快照，在做大作业

安装ubuntu系统



一路确定就行了

设置dhcp模式否则无法联网安装
#dhcp服务

然后开机，然后选择中文,然后按提示安装


然后就开始安装就行了,到后面重启之后，可能会遇到这个界面

解决办法

然后你再开机就行了
切换阿里云镜像源


等待更新缓存
到桌面后右键桌面空白处打开终端进行输入下面指令
一键安装vm-tools可以实现跨端复制粘贴
sudo apt-get install -y wgetsudo wget https://resource.qianyios.top/init.shsudo chmod +x init.shbash init.sh 
接下来重启等待软件生效之后，你就关机，这时候你要打个快照，以便后面做项目出错可以恢复，然后开机

创建hadoop用户
创建hadoop用户并且设置密码
sudo useradd -m hadoop -s /bin/bashsudo passwd hadoop

给hadoop用户添加sudo权限
sudo adduser hadoop sudo

这时候桌面右上角注销账号切换成hadoop

设置ssh免密
一键全部复制，然后粘贴回车就会自动进行免密

代码中有password=“123456”,记得改成你的hadoop用户的密码

sudo cat &gt;ssh.sh&lt;&lt;&quot;EOF&quot;#!/bin/bashsudo apt-get install openssh-server -ysudo systemctl disable ufw --now# 确保 PasswordAuthentication 设置为 yesecho &quot;正在更新 SSH 配置...&quot;sudo sed -i &#x27;s/^#*PasswordAuthentication.*/PasswordAuthentication yes/&#x27; /etc/ssh/sshd_configsudo systemctl restart ssh# 安装 sshpassecho &quot;正在安装 sshpass...&quot;sudo apt updatesudo apt install -y sshpass || &#123; echo &quot;安装 sshpass 失败&quot;; exit 1; &#125;echo &quot;sshpass 安装完成。&quot;# 创建 .ssh 目录并设置权限echo &quot;正在检查 .ssh 目录...&quot;if [ ! -d ~/.ssh ]; then    sudo mkdir -p ~/.sshfisudo chmod 700 ~/.sshsudo chown -R hadoop:hadoop ~/.ssh# 目标主机列表hosts=(&quot;localhost&quot;)# 密码password=&quot;123456&quot;# 生成 SSH 密钥对echo &quot;正在生成 SSH 密钥对...&quot;if [ ! -f ~/.ssh/id_rsa ]; then    ssh-keygen -t rsa -N &quot;&quot; -f ~/.ssh/id_rsa || &#123; echo &quot;生成 SSH 密钥对失败&quot;; exit 1; &#125;fichmod 600 ~/.ssh/id_rsachmod 644 ~/.ssh/id_rsa.pubecho &quot;SSH 密钥对已生成。&quot;# 循环遍历目标主机for host in &quot;$&#123;hosts[@]&#125;&quot;do    echo &quot;正在为 $host 配置免密登录...&quot;        # 确保目标主机的 .ssh 目录存在    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh&quot;        # 将公钥复制到目标主机    sshpass -p &quot;$password&quot; ssh-copy-id -i ~/.ssh/id_rsa.pub -o StrictHostKeyChecking=no &quot;$host&quot; || &#123; echo &quot;复制公钥到 $host 失败&quot;; exit 1; &#125;        # 验证免密登录是否成功    sshpass -p &quot;$password&quot; ssh -o StrictHostKeyChecking=no &quot;$host&quot; &quot;echo &#x27;免密登录成功&#x27;&quot; || &#123; echo &quot;验证免密登录失败&quot;; exit 1; &#125;doneecho &quot;所有配置已完成。&quot;EOF
运行脚本
bash ssh.sh
测试登入localhost是否可以实现无密码登入
ssh localhost

成功
安装java和hadoop
将两个文件复制到下载的目录去

然后在这个文件夹下，空白处右键，打开终端

确认一下当前文件夹是不是有这两个文件
ls

以下的全部复制运行
sudo mkdir /usr/lib/jvm#安装java8sudo tar -xf jdk-8u162-linux-x64.tar.gz  -C /usr/lib/jvmecho &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$JAVA_HOME/bin:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcjava -version#安装hadoop-3.1.3sudo tar -zxf hadoop-3.1.3.tar.gz -C /usr/localsudo mv /usr/local/hadoop-3.1.3/ /usr/local/hadoopecho &quot;export HADOOP_HOME=/usr/local/hadoop&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$HADOOP_HOME/bin/:\$HADOOP_HOME/sbin/:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcsudo chown -R hadoop /usr/local/hadoophadoop version

这里是作业要截图的地方



这时候关机打个快照，命名为基础
伪分布安装
编写cort-site.yaml文件
以下的全部复制运行
cat &gt; /usr/local/hadoop/etc/hadoop/core-site.xml&lt;&lt; &quot;EOF&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp&lt;/value&gt;        &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;fs.defaultFS&lt;/name&gt;        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;EOF
编写hdfs-site.xml
以下的全部复制运行
cat &gt;/usr/local/hadoop/etc/hadoop/hdfs-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;dfs.replication&lt;/name&gt;        &lt;value&gt;1&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/name&lt;/value&gt;    &lt;/property&gt;    &lt;property&gt;        &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;        &lt;value&gt;file:/usr/local/hadoop/tmp/dfs/data&lt;/value&gt;    &lt;/property&gt;&lt;/configuration&gt;EOF
启动hhdfs服务
hdfs初始化
这条命令只需要运行一次，以后都不要再运行了！！！！！！
这条命令只需要运行一次，以后都不要再运行了！！！！！！
这条命令只需要运行一次，以后都不要再运行了！！！！！！
hdfs namenode -format

出现这个说明初始化成功
添加hdfs yarn的环境变量
以下的全部复制运行
echo &quot;export HDFS_NAMENODE_USER=hadoop&quot; &gt;&gt; ~/.bashrcecho &quot;export HDFS_DATANODE_USER=hadoop&quot; &gt;&gt; ~/.bashrcecho &quot;export HDFS_SECONDARYNAMENODE_USER=hadoop&quot; &gt;&gt; ~/.bashrcecho &quot;export YARN_RESOURCEMANAGER_USER=hadoop&quot; &gt;&gt; ~/.bashrcecho &quot;export YARN_NODEMANAGER_USER=hadoop&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcecho &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.sh
#开启hadoop的命令start-all.sh#当你要关机的时候先运行下面的命令关掉hadoop先，再关机stop-all.sh

这里是作业要截图的地方


jps命令用来查看进程是否启动，以上是hadoop正常启动的进程，总共有6个
访问hadoop网页
看看你的ip
ip a

如果你这里没有ip说明你没有开启dhcp服务，自行回到最开始，找开启dhcp的方法，关机开启dhcp，然后开机就会有ip了

这里是作业要截图的地方

http://ip:9870
http://192.168.48.132:9870/

http://ip:8088

关机步骤
这时候关闭hadoop集群
stop-all.sh
然后关机打快照，命名伪分布
sudo poweroff
然后在这里打个快照，命名为伪分布安装成功，等你哪天机子坏了，你就可以恢复快照


严肃告知，别说我没提醒你，不要直接关机，也不要挂起虚拟机，否则你的虚拟机和hadoop坏了，你就重装吧


第一次实验
熟悉常用的Linux操作
1）cd命令：切换目录
（1） 切换到目录“/usr/local”
cd /usr/local
（2） 切换到当前目录的上一级目录
cd ..
（3） 切换到当前登录Linux系统的用户的自己的主文件夹
cd ~

2）ls命令：查看文件与目录
查看目录“/usr”下的所有文件和目录
cd /usrls -al

3）mkdir命令：新建目录
（1）进入“/tmp”目录，创建一个名为“a”的目录，并查看“/tmp”目录下已经存在哪些目录
cd /tmpmkdir als -al

（2）进入“/tmp”目录，创建目录“a1/a2/a3/a4”
cd /tmpmkdir -p a1/a2/a3/a4

4）rmdir命令：删除空的目录
（1）将上面创建的目录a（在“/tmp”目录下面）删除
（2）删除上面创建的目录“a1/a2/a3/a4” （在“/tmp”目录下面），然后查看“/tmp”目录下面存在哪些目录
cd /tmprmdir acd /tmprmdir -p a1/a2/a3/a4ls -al

5）cp命令：复制文件或目录
（1）将当前用户的主文件夹下的文件.bashrc复制到目录“/usr”下，并重命名为bashrc1
sudo cp ~/.bashrc /usr/bashrc1

（2）在目录“/tmp”下新建目录test，再把这个目录复制到“/usr”目录下
cd /tmpmkdir testsudo cp -r /tmp/test /usr

6）mv命令：移动文件与目录，或更名
（1）将“/usr”目录下的文件bashrc1移动到“/usr/test”目录下
sudo mv /usr/bashrc1 /usr/test
（2）将“/usr”目录下的test目录重命名为test2
sudo mv /usr/test /usr/test2

7）rm命令：移除文件或目录
（1）将“/usr/test2”目录下的bashrc1文件删除
sudo rm /usr/test2/bashrc1
（2）将“/usr”目录下的test2目录删除
sudo rm -r /usr/test2

8）cat命令：查看文件内容
查看当前用户主文件夹下的.bashrc文件内容
cat ~/.bashrc

9）tac命令：反向查看文件内容
反向查看当前用户主文件夹下的.bashrc文件的内容
tac ~/.bashrc

10）more命令：一页一页翻动查看
翻页查看当前用户主文件夹下的.bashrc文件的内容
more ~/.bashrc

11）head命令：取出前面几行
（1）查看当前用户主文件夹下.bashrc文件内容前20行
head -n 20 ~/.bashrc
（2）查看当前用户主文件夹下.bashrc文件内容，后面50行不显示，只显示前面几行
head -n -50 ~/.bashrc

12）tail命令：取出后面几行
（1）查看当前用户主文件夹下.bashrc文件内容最后20行
tail -n 20 ~/.bashrc
（2）查看当前用户主文件夹下.bashrc文件内容，并且只列出50行以后的数据
tail -n +50 ~/.bashrc

13）touch命令：修改文件时间或创建新文件
（1）在“/tmp”目录下创建一个空文件hello，并查看文件时间
cd /tmptouch hellols -l hello

（2）修改hello文件，将文件时间整为5天前
touch -d &quot;5 days ago&quot; hello

14）chown命令：修改文件所有者权限
将hello文件所有者改为root帐号，并查看属性
sudo chown root /tmp/hellols -l /tmp/hello

15）find命令：文件查找
找出主文件夹下文件名为.bashrc的文件
find ~ -name .bashrc

16）tar命令：压缩命令
（1）在根目录“/”下新建文件夹test，然后在根目录“/”下打包成test.tar.gz
sudo mkdir /testsudo tar -zcv -f /test.tar.gz test
（2）把上面的test.tar.gz压缩包，解压缩到“/tmp”目录
sudo tar -zxv -f /test.tar.gz -C /tmp

17）grep命令：查找字符串
从“～/.bashrc”文件中查找字符串’examples’
grep -n &#x27;examples&#x27; ~/.bashrc

18）配置环境变量
（1）请在“～/.bashrc”中设置，配置Java环境变量
echo &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$JAVA_HOME/bin:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcjava -version
（2）查看JAVA_HOME变量的值
echo $JAVA_HOME

熟悉常用的Hadoop操作
（1）使用hadoop用户登录Linux系统，启动Hadoop（Hadoop的安装目录为“/usr/local/hadoop”），为hadoop用户在HDFS中创建用户目录“/user/hadoop”
start-dfs.shhdfs dfs -mkdir -p /user/hadoop 

（2）接着在HDFS的目录“/user/hadoop”下，创建test文件夹，并查看文件列表
hdfs dfs -mkdir testhdfs dfs -ls .

（3）将Linux系统本地的“～/.bashrc”文件上传到HDFS的test文件夹中，并查看test
hdfs dfs -put ~/.bashrc testhdfs dfs -ls test

（4）将HDFS文件夹test复制到Linux系统本地文件系统的“/usr/local/hadoop”目录下
hdfs dfs -get test ./

（3.7.3）实验
安装eclipse
为了提高程序编写和调试效率，本教程采用Eclipse工具编写Java程序。
现在要执行的任务是：假设在目录hdfs://localhost:9000/user/hadoop下面有几个文件，分别是file1.txt、file2.txt、file3.txt、file4.abc和file5.abc，这里需要从该目录中过滤出所有后缀名不为.abc的文件，对过滤之后的文件进行读取，并将这些文件的内容合并到文件hdfs://localhost:9000/user/hadoop/merge.txt中。
要确保HDFS的/user/hadoop目录下已经存在file1.txt、file2.txt、file3.txt、file4.abc和file5.abc，每个文件里面有内容。这里，假设文件内容如下：
file1.txt的内容是： this is file1.txt
file2.txt的内容是： this is file2.txt
file3.txt的内容是： this is file3.txt
file4.abc的内容是： this is file4.abc
file5.abc的内容是： this is file5.abc

后面我会给命令，上面的内容就先看看

登入hadoop用户不多说了，启动hadoop集群
start-all.sh
下载eclipse安装包到ubuntu的下载目录,然后在空白处右键打开终端

sudo ls
sudo tar -zxvf eclipse-4.7.0-linux.gtk.x86_64.tar.gz -C /usr/local sudo chown -R hadoop /usr/local/eclipseecho &quot;export ECLIPSE_HOME=/usr/local/eclipse&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$ECLIPSE_HOME/:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrc
启动eclipse
eclipse
在Eclipse中创建项目
启动Eclipse。当Eclipse启动以后，会弹出如下图所示界面，提示设置工作空间（workspace）。


选择File--&gt;New--&gt;Java Project菜单，开始创建一个Java工程，会弹出如下图所示界面。在Project name后面输入工程名称HDFSExample，选中Use default location，让这个Java工程的所有文件都保存到/home/hadoop/workspace/HDFSExample目录下。在JRE这个选项卡中，可以选择当前的Linux系统中已经安装好的JDK，比如jdk1.8.0_162。然后，点击界面底部的Next&gt;按钮，进入下一步的设置。

为项目添加需要用到的JAR包
为了能够运行程序，我们有四个目录的jar包要添加到工程去

(1)/usr/local/hadoop/share/hadoop/common目录下的所有JAR包，包括
hadoop-common-3.1.3.jar、hadoop-kms-3.1.3.jar
hadoop-common-3.1.3-tests.jar、hadoop-nfs-3.1.3.jar
注意，不包括目录jdiff、lib、sources和webapps；

(2)/usr/local/hadoop/share/hadoop/common/lib目录下的所有JAR包；
(3)/usr/local/hadoop/share/hadoop/hdfs目录下的所有JAR包，注意，不包括目录jdiff、lib、sources和webapps；
(4)/usr/local/hadoop/share/hadoop/hdfs/lib目录下的所有JAR包。


以下我只演示第一种和第二种!!!!!!!!!
以下我只演示第一种和第二种!!!!!!!!!
以下我只演示第一种和第二种!!!!!!!!!
以下我只演示第一种和第二种!!!!!!!!!

第一种
/usr/local/hadoop/share/hadoop/common目录下的所有JAR包
点击Add External JARs…按钮，点击其他位置，自己看这个路径定位到这/usr/local/hadoop/share/hadoop/common,选择下面的四个包，然后点击ok

第二种
/usr/local/hadoop/share/hadoop/common/lib目录下的所有JAR包；


以下两个目录，我就不演示了，如果有文件夹被全选中，你就按住ctrl然后点击文件夹，就可以取消选中了，我们只添加所有后缀名为.jar的包
(3)/usr/local/hadoop/share/hadoop/hdfs目录下的所有JAR包，注意，不包括目录jdiff、lib、sources和webapps；
(4)/usr/local/hadoop/share/hadoop/hdfs/lib目录下的所有JAR包。

最后是这样的


编写Java应用程序

在该界面中，只需要在Name后面输入新建的Java类文件的名称，这里采用称MergeFile，其他都可以采用默认设置，然后，点击界面右下角Finish按钮。


把下面的代码直接写到MergeFile.java,全选复制粘贴，这就不多说了，然后记得Ctrl+S保存
import java.io.IOException;import java.io.PrintStream;import java.net.URI;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.*;/** * 过滤掉文件名满足特定条件的文件  */class MyPathFilter implements PathFilter &#123;     String reg = null;      MyPathFilter(String reg) &#123;          this.reg = reg;     &#125;     public boolean accept(Path path) &#123;        if (!(path.toString().matches(reg)))            return true;        return false;    &#125;&#125;/*** * 利用FSDataOutputStream和FSDataInputStream合并HDFS中的文件 */public class MergeFile &#123;    Path inputPath = null; //待合并的文件所在的目录的路径    Path outputPath = null; //输出文件的路径    public MergeFile(String input, String output) &#123;        this.inputPath = new Path(input);        this.outputPath = new Path(output);    &#125;    public void doMerge() throws IOException &#123;        Configuration conf = new Configuration();        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://localhost:9000&quot;);          conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);        FileSystem fsSource = FileSystem.get(URI.create(inputPath.toString()), conf);        FileSystem fsDst = FileSystem.get(URI.create(outputPath.toString()), conf);                //下面过滤掉输入目录中后缀为.abc的文件        FileStatus[] sourceStatus = fsSource.listStatus(inputPath,                new MyPathFilter(&quot;.*\\.abc&quot;));         FSDataOutputStream fsdos = fsDst.create(outputPath);        PrintStream ps = new PrintStream(System.out);        //下面分别读取过滤之后的每个文件的内容，并输出到同一个文件中        for (FileStatus sta : sourceStatus) &#123;            //下面打印后缀不为.abc的文件的路径、文件大小            System.out.print(&quot;路径：&quot; + sta.getPath() + &quot;    文件大小：&quot; + sta.getLen()                    + &quot;   权限：&quot; + sta.getPermission() + &quot;   内容：&quot;);            FSDataInputStream fsdis = fsSource.open(sta.getPath());            byte[] data = new byte[1024];            int read = -1;            while ((read = fsdis.read(data)) &gt; 0) &#123;                ps.write(data, 0, read);                fsdos.write(data, 0, read);            &#125;            fsdis.close();        &#125;        ps.close();        fsdos.close();    &#125;    public static void main(String[] args) throws IOException &#123;        MergeFile merge = new MergeFile(                &quot;hdfs://localhost:9000/user/hadoop/&quot;,                &quot;hdfs://localhost:9000/user/hadoop/merge.txt&quot;);        merge.doMerge();    &#125;&#125;
编译运行程序
在这里强调一下，如果你没启动hadoop自行启动，我早已在7.1告知启动了
编写测试文件
echo &quot;this is file1.txt&quot; &gt; file1.txtecho &quot;this is file2.txt&quot; &gt; file2.txtecho &quot;this is file3.txt&quot; &gt; file3.txtecho &quot;this is file4.abc&quot; &gt; file4.abcecho &quot;this is file5.abc&quot; &gt; file5.abchdfs dfs -mkdir -p /user/hadoophdfs dfs -put file1.txt /user/hadoop/hdfs dfs -put file2.txt /user/hadoop/hdfs dfs -put file3.txt /user/hadoop/hdfs dfs -put file4.abc /user/hadoop/hdfs dfs -put file5.abc /user/hadoop/hdfs dfs -ls /user/hadoop




最后验证是否成功
hdfs dfs -cat /user/hadoop/merge.txt

应用程序的部署
因为前面只是在eclipse运行java项目才会生成merge.txt，我们的目的是通过hadoop去执行这个java项目，所以我们要对工程打包
创建myapp目录
目的：用来存放hadoop应用程序目录
mkdir /usr/local/hadoop/myapp
开始打包程序

Launch configuration下拉选择MergeFile-HDFSExample
Export destination填写 /usr/local/hadoop/myapp/HDFSExample.jar



查看是否生成
ls /usr/local/hadoop/myapp

重新验证项目的运行
由于我们在eclipse测试过了项目，之前就在hdfs目录生成了/user/hadoop/merge.txt，为了验证刚刚打包的项目，我们要删掉这个/user/hadoop/merge.txt，等等重新运行项目
hdfs dfs -rm /user/hadoop/merge.txthadoop jar /usr/local/hadoop/myapp/HDFSExample.jarhdfs dfs -cat /user/hadoop/merge.txt


如果你没事了，要关机了就回到这里5.6 关机步骤,去执行关机
顺便把eclipse的窗口关掉

严肃告知，别说我没提醒你，不要直接关机，也不要挂起虚拟机，否则你的虚拟机和你的hadoop坏了，你就重装，如果你坏了你也可以恢复快照到伪分布安装成功，但是你只是要重新做这周的实验


练习文件
写入文件
import org.apache.hadoop.conf.Configuration;  import org.apache.hadoop.fs.FileSystem;import org.apache.hadoop.fs.FSDataOutputStream;import org.apache.hadoop.fs.Path; public class write &#123;            public static void main(String[] args) &#123;                 try &#123;                        Configuration conf = new Configuration();                          conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://localhost:9000&quot;);                        conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);                        FileSystem fs = FileSystem.get(conf);                        byte[] buff = &quot;Hello world&quot;.getBytes(); // 要写入的内容                        String filename = &quot;gcc-test&quot;; //要写入的文件名                        FSDataOutputStream os = fs.create(new Path(filename));                        os.write(buff,0,buff.length);                        System.out.println(&quot;Create:&quot;+ filename);                        os.close();                        fs.close();                &#125; catch (Exception e) &#123;                          e.printStackTrace();                  &#125;          &#125;  &#125;

hdfs dfs -ls /user/hadoophdfs dfs -cat /user/hadoop/gcc-test

判断文件是否存在
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FileSystem;import org.apache.hadoop.fs.Path; public class panduan &#123;        public static void main(String[] args) &#123;                    try &#123;                            String filename = &quot;gcc-test&quot;;                             Configuration conf = new Configuration();                            conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://localhost:9000&quot;);                            conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);                            FileSystem fs = FileSystem.get(conf);                            if(fs.exists(new Path(filename)))&#123;                                    System.out.println(&quot;文件存在&quot;);                            &#125;else&#123;                                    System.out.println(&quot;文件不存在&quot;);                            &#125;                            fs.close();                &#125; catch (Exception e) &#123;                        e.printStackTrace();                &#125;        &#125;&#125; 

读取文件
import java.io.BufferedReader;import java.io.InputStreamReader; import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.FileSystem;import org.apache.hadoop.fs.Path;import org.apache.hadoop.fs.FSDataInputStream; public class read &#123;        public static void main(String[] args) &#123;                try &#123;                        Configuration conf = new Configuration();                        conf.set(&quot;fs.defaultFS&quot;,&quot;hdfs://localhost:9000&quot;);                        conf.set(&quot;fs.hdfs.impl&quot;,&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;);                        FileSystem fs = FileSystem.get(conf);                        Path file = new Path(&quot;gcc-test&quot;);                         FSDataInputStream getIt = fs.open(file);                        BufferedReader d = new BufferedReader(new InputStreamReader(getIt));                        String content = d.readLine(); //读取文件一行                        System.out.println(content);                        d.close(); //关闭文件                        fs.close(); //关闭hdfs                &#125; catch (Exception e) &#123;                        e.printStackTrace();                &#125;        &#125;&#125;

第二次实验
编程实现以下指定功能，并利用Hadoop提供的Shell命令完成相同的任务。
① 向HDFS中上传任意文本文件，如果指定的文件在HDFS中已经存在，由用户指定是追加到原有文件末尾还是覆盖原有的文件。
shell
检查文件是否存在，可以使用如下命令:
echo &quot;gcc-text&quot; &gt; /home/hadoop/text.txthdfs dfs -put /home/hadoop/text.txt /user/hadoop/text.txthdfs dfs -test -e text.txtecho $?

返回 0 表示文件存在。
返回 1 表示文件不存在。
如果结果显示文件已经存在，则用户可以选择追加到原来文件末尾或者覆盖原来文件，具体命令如下：
echo &quot;gcc-local&quot; &gt; /home/hadoop/local.txt
local.txt 是本地文件的路径。
/text.txt 是 HDFS 中的文件路径。
#追加到原文件末尾hdfs dfs -appendToFile local.txt text.txthdfs dfs -cat text.txt#覆盖原来文件，第一种命令形式hdfs dfs -copyFromLocal -f  local.txt text.txthdfs dfs -cat text.txt#覆盖原来文件，第二种命令形式hdfs dfs -cp -f  file:///home/hadoop/local.txt text.txthdfs dfs -cat text.txt



实际上，也可以不用上述方式，而是采用如下命令来实现：
hdfs dfs -rm text.txthdfs dfs -put text.txt hdfs dfs -cat text.txtif $(hdfs dfs -test -e text.txt);then $(hdfs dfs -appendToFile local.txt text.txt);else $(hdfs dfs -copyFromLocal -f local.txt text.txt);fihdfs dfs -cat text.txt

Java

我这里只说一次，自己创建好HDFSApi.java后面的每个实验，都会覆盖前面一个实验的代码
你就不要手欠，去创建别的，你要是自己会也行
后面就不会再说了


import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 判断路径是否存在     */    public static boolean test(Configuration  conf, String path) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        return fs.exists(new Path(path));    &#125;    /**     * 复制文件到指定路径     * 若路径已存在，则进行覆盖     */    public static void  copyFromLocalFile(Configuration conf, String localFilePath, String  remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path localPath = new  Path(localFilePath);        Path remotePath = new  Path(remoteFilePath);        /* fs.copyFromLocalFile 第一个参数表示是否删除源文件，第二个参数表示是否覆盖 */        fs.copyFromLocalFile(false, true,  localPath, remotePath);        fs.close();    &#125;    /**     * 追加文件内容     */    public static void  appendToFile(Configuration conf, String localFilePath, String remoteFilePath)  throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        /* 创建一个文件读入流 */        FileInputStream in = new  FileInputStream(localFilePath);        /* 创建一个文件输出流，输出的内容将追加到文件末尾 */        FSDataOutputStream out =  fs.append(remotePath);        /* 读写文件内容 */        byte[] data = new byte[1024];        int read = -1;        while ( (read = in.read(data)) &gt; 0  ) &#123;            out.write(data,  0, read);        &#125;        out.close();        in.close();        fs.close();    &#125;    /**     * 主函数     */    public static void main(String[] args)  &#123;        Configuration conf = new  Configuration();        conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);        String localFilePath =  &quot;/home/hadoop/text.txt&quot;;     // 本地路径        String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS路径        String choice =  &quot;append&quot;;    // 若文件存在则追加到文件末尾//            String choice =  &quot;overwrite&quot;;    // 若文件存在则覆盖        try &#123;            /* 判断文件是否存在 */            Boolean fileExists =  false;            if (HDFSApi.test(conf,  remoteFilePath)) &#123;                fileExists = true;                System.out.println(remoteFilePath  + &quot; 已存在.&quot;);            &#125; else &#123;                System.out.println(remoteFilePath  + &quot; 不存在.&quot;);            &#125;            /* 进行处理 */            if ( !fileExists) &#123; // 文件不存在，则上传                HDFSApi.copyFromLocalFile(conf,  localFilePath, remoteFilePath);                System.out.println(localFilePath  + &quot; 已上传至 &quot; + remoteFilePath);            &#125; else if (  choice.equals(&quot;overwrite&quot;) ) &#123;     // 选择覆盖                HDFSApi.copyFromLocalFile(conf,  localFilePath, remoteFilePath);                System.out.println(localFilePath  + &quot; 已覆盖 &quot; + remoteFilePath);            &#125; else if (  choice.equals(&quot;append&quot;) ) &#123;    // 选择追加                HDFSApi.appendToFile(conf,  localFilePath, remoteFilePath);                System.out.println(localFilePath  + &quot; 已追加至 &quot; + remoteFilePath);            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;

验证
hdfs dfs -cat text.txt

② 从HDFS中下载指定文件，如果本地文件与要下载的文件名称相同，则自动对下载的文件重命名。
shell
ls | grep textif $(hdfs dfs -test -e  file:///home/hadoop/text.txt);then $(hdfs dfs -copyToLocal text.txt ./text2.txt); else $(hdfs dfs -copyToLocal text.txt ./text.txt); fils | grep text

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 下载文件到本地     * 判断本地路径是否已存在，若已存在，则自动进行重命名     */    public static void  copyToLocal(Configuration conf, String remoteFilePath, String localFilePath)  throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        File f = new File(localFilePath);        /* 如果文件名存在，自动重命名(在文件名后面加上 _0, _1  ...) */        if (f.exists()) &#123;               System.out.println(localFilePath  + &quot; 已存在.&quot;);               Integer  i = 0;               while  (true) &#123;                      f  = new File(localFilePath + &quot;_&quot; + i.toString());                      if  (!f.exists()) &#123;                             localFilePath  = localFilePath + &quot;_&quot; + i.toString();                             break;                      &#125;               &#125;               System.out.println(&quot;将重新命名为: &quot; +  localFilePath);        &#125;        // 下载文件到本地       Path localPath = new  Path(localFilePath);       fs.copyToLocalFile(remotePath,  localPath);       fs.close();    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String localFilePath =  &quot;/home/hadoop/text.txt&quot;;     // 本地路径              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS路径              try &#123;                     HDFSApi.copyToLocal(conf,  remoteFilePath, localFilePath);                     System.out.println(&quot;下载完成&quot;);              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

验证：
ls | grep text

③ 将HDFS中指定文件的内容输出到终端。
shell
hdfs dfs -cat text.txt

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 读取文件内容     */    public static void cat(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        FSDataInputStream in =  fs.open(remotePath);        BufferedReader d = new  BufferedReader(new InputStreamReader(in));        String line = null;        while ( (line = d.readLine()) != null  ) &#123;              System.out.println(line);        &#125;       d.close();       in.close();       fs.close();    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS路径               try &#123;                     System.out.println(&quot;读取文件: &quot; +  remoteFilePath);                     HDFSApi.cat(conf,  remoteFilePath);                     System.out.println(&quot;\n读取完成&quot;);              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

④ 显示HDFS中指定的文件读写权限、大小、创建时间、路径等信息。
shell
hdfs dfs -ls -h text.txt

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;import  java.text.SimpleDateFormat;public class HDFSApi &#123;    /**     * 显示指定文件的信息     */    public static void ls(Configuration conf,  String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        FileStatus[] fileStatuses =  fs.listStatus(remotePath);        for (FileStatus s : fileStatuses) &#123;               System.out.println(&quot;路径: &quot; +  s.getPath().toString());               System.out.println(&quot;权限: &quot; +  s.getPermission().toString());               System.out.println(&quot;大小: &quot; +  s.getLen());               /*  返回的是时间戳,转化为时间日期格式 */               Long  timeStamp = s.getModificationTime();               SimpleDateFormat  format =  new  SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);               String  date = format.format(timeStamp);                 System.out.println(&quot;时间: &quot; +  date);        &#125;        fs.close();    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS路径              try &#123;                     System.out.println(&quot;读取文件信息: &quot; +  remoteFilePath);                     HDFSApi.ls(conf,  remoteFilePath);                     System.out.println(&quot;\n读取完成&quot;);              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

⑤ 给定HDFS中某一个目录，输出该目录下的所有文件的读写权限、大小、创建时间、路径等信息，如果该文件是目录，则递归输出该目录下所有文件相关信息。
shell
hdfs dfs -ls -R -h /user/hadoop

别管我这里有什么文件，你能显示出来就行
Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;import  java.text.SimpleDateFormat;public class HDFSApi &#123;    /**     * 显示指定文件夹下所有文件的信息（递归）     */    public static void lsDir(Configuration  conf, String remoteDir) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path dirPath = new Path(remoteDir);        /* 递归获取目录下的所有文件 */         RemoteIterator&lt;LocatedFileStatus&gt; remoteIterator =  fs.listFiles(dirPath, true);        /* 输出每个文件的信息 */        while (remoteIterator.hasNext()) &#123;               FileStatus  s = remoteIterator.next();            System.out.println(&quot;路径: &quot; +  s.getPath().toString());            System.out.println(&quot;权限: &quot; +  s.getPermission().toString());            System.out.println(&quot;大小: &quot; +  s.getLen());               /*  返回的是时间戳,转化为时间日期格式 */               Long  timeStamp = s.getModificationTime();               SimpleDateFormat  format =  new  SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);               String  date = format.format(timeStamp);                 System.out.println(&quot;时间: &quot; +  date);               System.out.println();        &#125;        fs.close();    &#125;            /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteDir =  &quot;/user/hadoop&quot;;    // HDFS路径              try &#123;                     System.out.println(&quot;(递归)读取目录下所有文件的信息: &quot; +  remoteDir);                     HDFSApi.lsDir(conf,  remoteDir);                     System.out.println(&quot;读取完成&quot;);              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

⑥ 提供一个HDFS中的文件的路径，对该文件进行创建和删除操作。如果文件所在目录不存在，则自动创建目录。
shell
if $(hdfs dfs -test -d dir1/dir2);then $(hdfs dfs -touchz  dir1/dir2/filename);else $(hdfs dfs -mkdir -p dir1/dir2  &amp;&amp; hdfs dfs -touchz dir1/dir2/filename); fihdfs dfs -rm dir1/dir2/filename

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 判断路径是否存在     */    public static boolean test(Configuration  conf, String path) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        return fs.exists(new Path(path));    &#125;    /**     * 创建目录     */    public static boolean mkdir(Configuration  conf, String remoteDir) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path dirPath = new Path(remoteDir);        boolean result = fs.mkdirs(dirPath);        fs.close();        return result;    &#125;    /**     * 创建文件     */    public static void touchz(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        FSDataOutputStream outputStream =  fs.create(remotePath);        outputStream.close();        fs.close();    &#125;    /**     * 删除文件     */    public static boolean rm(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        boolean result =  fs.delete(remotePath, false);        fs.close();        return result;    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/input/text.txt&quot;;     // HDFS路径              String remoteDir =  &quot;/user/hadoop/input&quot;;    //  HDFS路径对应的目录                         try &#123;                     /* 判断路径是否存在，存在则删除，否则进行创建 */                     if ( HDFSApi.test(conf,  remoteFilePath) ) &#123;                            HDFSApi.rm(conf,  remoteFilePath); // 删除                            System.out.println(&quot;删除路径: &quot; +  remoteFilePath);                     &#125; else &#123;                            if (  !HDFSApi.test(conf, remoteDir) ) &#123; // 若目录不存在，则进行创建                                   HDFSApi.mkdir(conf,  remoteDir);                                   System.out.println(&quot;创建文件夹: &quot; +  remoteDir);                            &#125;                            HDFSApi.touchz(conf,  remoteFilePath);                            System.out.println(&quot;创建路径: &quot; +  remoteFilePath);                     &#125;              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

⑦ 提供一个HDFS的目录的路径，对该目录进行创建和删除操作。创建目录时，如果目录文件所在目录不存在则自动创建相应目录；删除目录时，由用户指定当该目录不为空时是否还删除该目录。
shell
hdfs dfs -mkdir -p dir1/dir2hdfs dfs -rmdir dir1/dir2#上述命令执行以后，如果目录非空，则会提示not empty，删除操作不会执行。如果要强制删除目录，可以使用如下命令：hdfs dfs -rm -R dir1/dir2

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 判断路径是否存在     */    public static boolean test(Configuration  conf, String path) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        return fs.exists(new Path(path));    &#125;    /**     * 判断目录是否为空     * true: 空，false: 非空     */    public static boolean  isDirEmpty(Configuration conf, String remoteDir) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path dirPath = new Path(remoteDir);         RemoteIterator&lt;LocatedFileStatus&gt; remoteIterator =  fs.listFiles(dirPath, true);        return !remoteIterator.hasNext();    &#125;          /**     * 创建目录     */    public static boolean mkdir(Configuration  conf, String remoteDir) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path dirPath = new Path(remoteDir);        boolean result = fs.mkdirs(dirPath);        fs.close();        return result;    &#125;    /**     * 删除目录     */    public static boolean rmDir(Configuration  conf, String remoteDir) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path dirPath = new Path(remoteDir);        /* 第二个参数表示是否递归删除所有文件 */        boolean result = fs.delete(dirPath,  true);        fs.close();        return result;    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteDir =  &quot;/user/hadoop/input&quot;;    //  HDFS目录              Boolean forceDelete =  false;  // 是否强制删除              try &#123;                     /* 判断目录是否存在，不存在则创建，存在则删除 */                     if ( !HDFSApi.test(conf,  remoteDir) ) &#123;                            HDFSApi.mkdir(conf,  remoteDir); // 创建目录                            System.out.println(&quot;创建目录: &quot; +  remoteDir);                     &#125; else &#123;                            if (  HDFSApi.isDirEmpty(conf, remoteDir) || forceDelete ) &#123; // 目录为空或强制删除                                   HDFSApi.rmDir(conf,  remoteDir);                                   System.out.println(&quot;删除目录: &quot; +  remoteDir);                            &#125; else  &#123; // 目录不为空                                   System.out.println(&quot;目录不为空，不删除: &quot; +  remoteDir);                            &#125;                     &#125;              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

⑧ 向HDFS中指定的文件追加内容，由用户指定将内容追加到原有文件的开头或结尾。
shell
rm -rf text.txthdfs dfs -appendToFile local.txt text.txthdfs dfs -get text.txtcat text.txt &gt;&gt; local.txthdfs dfs -copyFromLocal -f text.txt text.txthdfs dfs -cat text.txt

Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 判断路径是否存在     */    public static boolean test(Configuration  conf, String path) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        return fs.exists(new Path(path));    &#125;    /**     * 追加文本内容     */    public static void  appendContentToFile(Configuration conf, String content, String  remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        /* 创建一个文件输出流，输出的内容将追加到文件末尾 */        FSDataOutputStream out =  fs.append(remotePath);        out.write(content.getBytes());        out.close();        fs.close();&#125;    /**     * 追加文件内容     */    public static void  appendToFile(Configuration conf, String localFilePath, String remoteFilePath)  throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        /* 创建一个文件读入流 */        FileInputStream in = new  FileInputStream(localFilePath);        /* 创建一个文件输出流，输出的内容将追加到文件末尾 */        FSDataOutputStream out =  fs.append(remotePath);        /* 读写文件内容 */        byte[] data = new byte[1024];        int read = -1;        while ( (read = in.read(data)) &gt; 0  ) &#123;               out.write(data,  0, read);        &#125;        out.close();        in.close();        fs.close();    &#125;    /**     * 移动文件到本地     * 移动后，删除源文件     */    public static void  moveToLocalFile(Configuration conf, String remoteFilePath, String  localFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        Path localPath = new  Path(localFilePath);        fs.moveToLocalFile(remotePath,  localPath);    &#125;    /**     * 创建文件     */    public static void touchz(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        FSDataOutputStream outputStream =  fs.create(remotePath);        outputStream.close();        fs.close();    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS文件              String content = &quot;新追加的内容\n&quot;;              String choice =  &quot;after&quot;;         //追加到文件末尾//            String choice =  &quot;before&quot;;    // 追加到文件开头              try &#123;                     /* 判断文件是否存在 */                     if ( !HDFSApi.test(conf,  remoteFilePath) ) &#123;                            System.out.println(&quot;文件不存在: &quot; +  remoteFilePath);                     &#125; else &#123;                            if (  choice.equals(&quot;after&quot;) ) &#123; // 追加在文件末尾                                   HDFSApi.appendContentToFile(conf,  content, remoteFilePath);                                   System.out.println(&quot;已追加内容到文件末尾&quot; +  remoteFilePath);                            &#125; else if (  choice.equals(&quot;before&quot;) )  &#123;  // 追加到文件开头                                   /* 没有相应的api可以直接操作，因此先把文件移动到本地*//*创建一个新的HDFS，再按顺序追加内容 */                                   String  localTmpPath = &quot;/user/hadoop/tmp.txt&quot;;                                   // 移动到本地HDFSApi.moveToLocalFile(conf, remoteFilePath,  localTmpPath);   // 创建一个新文件                          HDFSApi.touchz(conf,  remoteFilePath);                     // 先写入新内容                          HDFSApi.appendContentToFile(conf,  content, remoteFilePath);                    // 再写入原来内容                           HDFSApi.appendToFile(conf,  localTmpPath, remoteFilePath);                            System.out.println(&quot;已追加内容到文件开头: &quot; +  remoteFilePath);                            &#125;                     &#125;              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

hdfs dfs -cat text.txt

⑨ 删除HDFS中指定的文件。
shell
rm text.txthdfs dfs -get text.txthdfs dfs -rm text.txt

hdfs dfs -put text.txt
Java
import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 删除文件     */    public static boolean rm(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        boolean result =  fs.delete(remotePath, false);        fs.close();        return result;    &#125;       /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS文件                       try &#123;                     if ( HDFSApi.rm(conf,  remoteFilePath) ) &#123;                            System.out.println(&quot;文件删除: &quot; +  remoteFilePath);                     &#125; else &#123;                            System.out.println(&quot;操作失败（文件不存在或删除失败）&quot;);                     &#125;              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

⑩ 在HDFS中将文件从源路径移动到目的路径。
shell
hdfs dfs -put text.txthdfs dfs -mv text.txt text2.txthdfs dfs -ls

hdfs dfs -put text.txt
Java
import  org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.*;import java.io.*;public class HDFSApi &#123;    /**     * 移动文件     */    public static boolean mv(Configuration  conf, String remoteFilePath, String remoteToFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path srcPath = new  Path(remoteFilePath);        Path dstPath = new  Path(remoteToFilePath);        boolean result = fs.rename(srcPath,  dstPath);        fs.close();        return result;    &#125;       /**        * 主函数        */       public static void main(String[] args) &#123;              Configuration conf = new Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;hdfs:///user/hadoop/text.txt&quot;;     // 源文件HDFS路径              String remoteToFilePath =  &quot;hdfs:///user/hadoop/new.txt&quot;;     // 目的HDFS路径              try &#123;                     if ( HDFSApi.mv(conf, remoteFilePath,  remoteToFilePath) ) &#123;                            System.out.println(&quot;将文件 &quot; +  remoteFilePath + &quot; 移动到 &quot; + remoteToFilePath);                     &#125; else &#123;                                   System.out.println(&quot;操作失败(源文件不存在或移动失败)&quot;);                     &#125;              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

hdfs dfs -ls | grep new

（2）编程实现一个类“MyFSDataInputStream”，该类继承“org.apache.hadoop.fs.FSDataInput Stream”，要求如下： 实现按行读取HDFS中指定文件的方法“readLine()”，如果读到文件末尾，则返回空，否则返回文件一行的文本。
shell
hdfs dfs -put text.txt
Java

自己创建好MyFSDataInputStream.java

import  org.apache.hadoop.conf.Configuration;import  org.apache.hadoop.fs.FSDataInputStream;import  org.apache.hadoop.fs.FileSystem;import  org.apache.hadoop.fs.Path;import  java.io.*;public  class MyFSDataInputStream extends FSDataInputStream &#123;       public MyFSDataInputStream(InputStream  in) &#123;              super(in);       &#125;       /**     * 实现按行读取     * 每次读入一个字符，遇到&quot;\n&quot;结束，返回一行内容     */       public static String  readline(BufferedReader br) throws IOException &#123;              char[] data = new char[1024];              int read = -1;              int off = 0; // 循环执行时，br 每次会从上一次读取结束的位置继续读取//因此该函数里，off 每次都从0开始              while ( (read = br.read(data,  off, 1)) != -1 ) &#123;                     if  (String.valueOf(data[off].equals(&quot;\n&quot;) ) &#123;                            off += 1;                            break;                     &#125;                     off += 1;              &#125;                        if (off &gt; 0) &#123;                     return  String.valueOf(data);              &#125; else &#123;                     return null;              &#125;       &#125;       /**     * 读取文件内容     */    public static void cat(Configuration  conf, String remoteFilePath) throws IOException &#123;        FileSystem fs = FileSystem.get(conf);        Path remotePath = new  Path(remoteFilePath);        FSDataInputStream in =  fs.open(remotePath);        BufferedReader br = new  BufferedReader(new InputStreamReader(in));        String line = null;        while ( (line =  MyFSDataInputStream.readline(br)) != null ) &#123;               System.out.println(line);        &#125;        br.close();        in.close();        fs.close();    &#125;          /**        * 主函数        */       public static void main(String[] args)  &#123;              Configuration conf = new  Configuration();    conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);              String remoteFilePath =  &quot;/user/hadoop/text.txt&quot;;     // HDFS路径              try &#123;                     MyFSDataInputStream.cat(conf,  remoteFilePath);              &#125; catch (Exception e) &#123;                     e.printStackTrace();              &#125;       &#125;&#125;

（3）查看Java帮助手册或其他资料，用“java.net.URL”和“org.apache.hadoop.fs.FsURLStream HandlerFactory”编程来输出HDFS中指定文件的文本到终端中。
Java
用回HDFSApi
import org.apache.hadoop.fs.*;import org.apache.hadoop.io.IOUtils;import java.io.*;import java.net.URL;public class HDFSApi &#123;    static &#123;        URL.setURLStreamHandlerFactory(new FsUrlStreamHandlerFactory());    &#125;    /**     * 主函数     */    public static void main(String[] args) throws Exception &#123;        // HDFS文件路径，需包含主机名和端口号        String remoteFilePath = &quot;hdfs://localhost:9000/user/hadoop/text.txt&quot;; // 修改为正确的HDFS URI        InputStream in = null;        try &#123;            /* 通过URL对象打开数据流，从中读取数据 */            in = new URL(remoteFilePath).openStream();            IOUtils.copyBytes(in, System.out, 4096, false); // 将数据输出到控制台        &#125; finally &#123;            IOUtils.closeStream(in); // 关闭输入流        &#125;    &#125;&#125;

Hbase安装(4.6.1)
这里有两个题，就是要交两个截图，我会注明
进hadoop用户

自行启动hadoop
安装hbase
sudo ls

sudo tar -xf hbase-2.5.4-bin.tar.gz -C /usr/local/sudo mv /usr/local/hbase-2.5.4 /usr/local/hbasesudo chown -R hadoop:hadoop /usr/local/hbaseecho &quot;export HBASE_HOME=/usr/local/hbase&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$PATH:\$HBASE_HOME/bin&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcsudo sed -i &quot;s/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar/CLASSPATH=\$&#123;CLASSPATH&#125;:\$JAVA_HOME\/lib\/tools.jar:\/usr\/local\/hbase\/lib\/*/g&quot; /usr/local/hbase/bin/hbaseecho &quot;export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_162&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_CLASSPATH=/usr/local/hbase/conf&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_MANAGES_ZK=true&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shecho &quot;export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=true&quot; &gt;&gt; $HBASE_HOME/conf/hbase-env.shcat &gt;$HBASE_HOME/conf/hbase-site.xml&lt;&lt;&quot;EOF&quot;&lt;configuration&gt;        &lt;property&gt;                &lt;name&gt;hbase.rootdir&lt;/name&gt;                &lt;value&gt;hdfs://localhost:9000/hbase&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;                &lt;value&gt;true&lt;/value&gt;        &lt;/property&gt;        &lt;property&gt;                &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;                &lt;value&gt;false&lt;/value&gt;        &lt;/property&gt;&lt;/configuration&gt;EOFhbase version

这个截图交到4.6.1开头第一个作业


启动hbase
开机顺序：一定是先启动hadoop（大）在启动hbase（小）
开机顺序：一定是先启动hadoop（大）在启动hbase（小）
开机顺序：一定是先启动hadoop（大）在启动hbase（小）
start-all.shstart-hbase.sh
然后输入jps,有以下三个个就安装成功

这是4.6.1里最下面的第二个作业截图


测试hbase
hbase shelllist

能运行没报错就行
退出hbase数据库用exit

访问hbase网页
http://ip:16010/

关闭hbase
关机顺序：先关habse(小)再关hadoop（大）
关机顺序：先关habse(小)再关hadoop（大）
关机顺序：先关habse(小)再关hadoop（大）
关机顺序：先关habse(小)再关hadoop（大）
不按操作来，机器坏了，自己重装吧
stop-hbase.shstop-all.shsudo poweroff
关机后自己打个habse的快照
（4.6.2）实验
启动eclipse
eclipse


新建项目
名为HBaseExample


现在有几个目录要添加注意了！！！
现在有几个目录要添加注意了！！！
现在有几个目录要添加注意了！！！
现在有几个目录要添加注意了！！！

/usr/local/hbase/lib下所有的jar包
/usr/local/hbase/lib/client-facing-thirdparty下所有的jar包




最后直接点击finish完成创建
新建class

然后在你创建的这个java文件输入，别运行
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes; import java.io.IOException;public class ExampleForHBase &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args)throws IOException&#123;        init();        createTable(&quot;student&quot;,new String[]&#123;&quot;score&quot;&#125;);        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;English&quot;,&quot;69&quot;);        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;Math&quot;,&quot;86&quot;);        insertData(&quot;student&quot;,&quot;zhangsan&quot;,&quot;score&quot;,&quot;Computer&quot;,&quot;77&quot;);        getData(&quot;student&quot;, &quot;zhangsan&quot;, &quot;score&quot;,&quot;English&quot;);        close();    &#125;     public static void init()&#123;        configuration  = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;,&quot;hdfs://localhost:9000/hbase&quot;);        try&#123;            connection = ConnectionFactory.createConnection(configuration);            admin = connection.getAdmin();        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125;    &#125;     public static void close()&#123;        try&#123;            if(admin != null)&#123;                admin.close();            &#125;            if(null != connection)&#123;                connection.close();            &#125;        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125;    &#125;     public static void createTable(String myTableName,String[] colFamily) throws IOException &#123;        TableName tableName = TableName.valueOf(myTableName);        if(admin.tableExists(tableName))&#123;            System.out.println(&quot;talbe is exists!&quot;);        &#125;else &#123;            TableDescriptorBuilder tableDescriptor = TableDescriptorBuilder.newBuilder(tableName);            for(String str:colFamily)&#123;                ColumnFamilyDescriptor family = ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build();                tableDescriptor.setColumnFamily(family);            &#125;            admin.createTable(tableDescriptor.build());        &#125;     &#125;     public static void insertData(String tableName,String rowKey,String colFamily,String col,String val) throws IOException &#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Put put = new Put(rowKey.getBytes());        put.addColumn(colFamily.getBytes(),col.getBytes(), val.getBytes());        table.put(put);        table.close();     &#125;     public static void getData(String tableName,String rowKey,String colFamily, String col)throws  IOException&#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Get get = new Get(rowKey.getBytes());        get.addColumn(colFamily.getBytes(),col.getBytes());        Result result = table.get(get);        System.out.println(new String(result.getValue(colFamily.getBytes(),col==null?null:col.getBytes())));        table.close();     &#125;&#125;
自行启动hadoop和hbase，不记得了回去翻记录，我有写启动顺序，别搞错了，搞错了就恢复快照吧，下面是关闭和启动的顺序
9.2 启动hbase
9.3 关闭hbase
没启动就不要做下面的内容！！！
没启动就不要做下面的内容！！！
没启动就不要做下面的内容！！！
没启动就不要做下面的内容！！！
运行代码

就会出现这样的结果

4.6.2实验要交的截图1


这时候进入hbase数据库查看有没有student表
hbase shell
这是进入hbase数据库的命令，我前面也有写后面不会再说了，记不住就自己找办法
listscan &#x27;student&#x27;

4.6.2实验要交的截图2


(4.8实验3)
如果这里你输入第一条和第二条命令就报错，自己找找原因，我不想说了

第一题
（1）编程实现以下指定功能，并用Hadoop提供的HBaseShell命令完成相同的任务。
①列出HBase所有表的相关信息，如表名、创建时间等。
shell
hbase shelllist

java
自己创建一个test.java,要在HBaseExample的项目下,后面一直都会用这个java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes;import java.util.List;import java.io.IOException;public class test &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args)throws IOException&#123;        init();        List&lt;TableDescriptor&gt;  tableDescriptors = admin.listTableDescriptors();        for(TableDescriptor tableDescriptor :  tableDescriptors)&#123;         TableName tableName =  tableDescriptor.getTableName();         System.out.println(&quot;Table:&quot; + tableName);        &#125;        close();    &#125;    public static void init() &#123;        configuration = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;, &quot;hbase://localhost:9000/hbase&quot;);        try &#123;            connection = ConnectionFactory.createConnection(configuration);            if (connection == null) &#123;                System.err.println(&quot;Failed to create HBase connection.&quot;);            &#125; else &#123;                System.out.println(&quot;HBase connection created successfully.&quot;);            &#125;            admin = connection.getAdmin();            if (admin == null) &#123;                System.err.println(&quot;Failed to get HBase Admin.&quot;);            &#125; else &#123;                System.out.println(&quot;HBase Admin initialized successfully.&quot;);            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;     public static void close()&#123;        try&#123;            if(admin != null)&#123;                admin.close();            &#125;            if(null != connection)&#123;                connection.close();            &#125;        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125;    &#125;     public static void createTable(String myTableName,String[] colFamily) throws IOException &#123;        TableName tableName = TableName.valueOf(myTableName);        if(admin.tableExists(tableName))&#123;            System.out.println(&quot;talbe is exists!&quot;);        &#125;else &#123;            TableDescriptorBuilder tableDescriptor = TableDescriptorBuilder.newBuilder(tableName);            for(String str:colFamily)&#123;                ColumnFamilyDescriptor family = ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build();                tableDescriptor.setColumnFamily(family);            &#125;            admin.createTable(tableDescriptor.build());        &#125;     &#125;     public static void insertData(String tableName,String rowKey,String colFamily,String col,String val) throws IOException &#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Put put = new Put(rowKey.getBytes());        put.addColumn(colFamily.getBytes(),col.getBytes(), val.getBytes());        table.put(put);        table.close();     &#125;     public static void getData(String tableName,String rowKey,String colFamily, String col)throws  IOException&#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Get get = new Get(rowKey.getBytes());        get.addColumn(colFamily.getBytes(),col.getBytes());        Result result = table.get(get);        System.out.println(new String(result.getValue(colFamily.getBytes(),col==null?null:col.getBytes())));        table.close();     &#125;&#125;

②在终端输出指定表的所有记录数据。
shell
scan &#x27;student&#x27;

java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes;import java.util.List;import java.io.IOException;public class test &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args) throws IOException &#123;    	  // 指定表名 &quot;student&quot; 并获取所有记录    	  String tableName = &quot;student&quot;;    	  getData(tableName);    	 &#125;    	 // 在终端打印出指定表的所有记录数据    	 public static void getData(String tableName) throws IOException &#123;    	  init(); // 初始化连接    	  Table table = connection.getTable(TableName.valueOf(tableName)); // 获取表对象    	  Scan scan = new Scan(); // 创建扫描器    	  ResultScanner scanner = table.getScanner(scan); // 获取扫描结果    	  System.out.println(&quot;表 &quot; + tableName + &quot; 的所有记录如下：&quot;);    	  for (Result result : scanner) &#123; // 遍历每一行数据    	printRecoder(result); // 打印每条记录的详情    	  &#125;    	  close(); // 关闭连接    	 &#125;    	 // 打印一条记录的详情    	 public static void printRecoder(Result result) throws IOException &#123;    	  for (Cell cell : result.rawCells()) &#123; // 遍历每个单元格    	System.out.print(&quot;行键: &quot; + new String(Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength())));    	System.out.print(&quot; 列簇: &quot; + new String(Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength())));    	System.out.print(&quot; 列: &quot; + new String(Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength())));    	System.out.print(&quot; 值: &quot; + new String(Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength())));    	System.out.println(&quot; 时间戳: &quot; + cell.getTimestamp());    	  &#125;    	 &#125;    public static void init() &#123;        configuration = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;, &quot;hbase://localhost:9000/hbase&quot;);        try &#123;            connection = ConnectionFactory.createConnection(configuration);            if (connection == null) &#123;                System.err.println(&quot;Failed to create HBase connection.&quot;);            &#125; else &#123;                System.out.println(&quot;HBase connection created successfully.&quot;);            &#125;            admin = connection.getAdmin();            if (admin == null) &#123;                System.err.println(&quot;Failed to get HBase Admin.&quot;);            &#125; else &#123;                System.out.println(&quot;HBase Admin initialized successfully.&quot;);            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;     public static void close()&#123;        try&#123;            if(admin != null)&#123;                admin.close();            &#125;            if(null != connection)&#123;                connection.close();            &#125;        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125;    &#125;     public static void createTable(String myTableName,String[] colFamily) throws IOException &#123;        TableName tableName = TableName.valueOf(myTableName);        if(admin.tableExists(tableName))&#123;            System.out.println(&quot;talbe is exists!&quot;);        &#125;else &#123;            TableDescriptorBuilder tableDescriptor = TableDescriptorBuilder.newBuilder(tableName);            for(String str:colFamily)&#123;                ColumnFamilyDescriptor family = ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build();                tableDescriptor.setColumnFamily(family);            &#125;            admin.createTable(tableDescriptor.build());        &#125;     &#125;     public static void insertData(String tableName,String rowKey,String colFamily,String col,String val) throws IOException &#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Put put = new Put(rowKey.getBytes());        put.addColumn(colFamily.getBytes(),col.getBytes(), val.getBytes());        table.put(put);        table.close();     &#125;     public static void getData(String tableName,String rowKey,String colFamily, String col)throws  IOException&#123;         Table table = connection.getTable(TableName.valueOf(tableName));        Get get = new Get(rowKey.getBytes());        get.addColumn(colFamily.getBytes(),col.getBytes());        Result result = table.get(get);        System.out.println(new String(result.getValue(colFamily.getBytes(),col==null?null:col.getBytes())));        table.close();     &#125;&#125;
运行结果如下

③向已经创建好的表添加和删除指定的列族或列。
shell
create &#x27;s1&#x27;,&#x27;score&#x27;put &#x27;s1&#x27;,&#x27;zhangsan&#x27;,&#x27;score:Math&#x27;,&#x27;69&#x27;delete &#x27;s1&#x27;,&#x27;zhangsan&#x27;,&#x27;score:Math&#x27;

JAVA
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes;import java.io.IOException;public class test &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args) throws IOException &#123;        init(); // 初始化连接        String tableName = &quot;s1&quot;; // 表名        String[] columnFamilies = &#123;&quot;score&quot;&#125;; // 列簇        String rowKey = &quot;zhangsan&quot;; // 行键        String colFamily = &quot;score&quot;; // 列簇        String col = &quot;Math&quot;; // 列名        String val = &quot;69&quot;; // 值        // 创建表        System.out.println(&quot;开始创建表...&quot;);        createTable(tableName, columnFamilies);        // 插入数据        System.out.println(&quot;开始插入数据...&quot;);        insertRow(tableName, rowKey, colFamily, col, val);        // 查询数据        System.out.println(&quot;验证插入的数据...&quot;);        getData(tableName, rowKey, colFamily, col);        // 删除数据        System.out.println(&quot;开始删除数据...&quot;);        deleteRow(tableName, rowKey, colFamily, col);        // 验证删除        System.out.println(&quot;验证删除后的数据...&quot;);        getData(tableName, rowKey, colFamily, col);        close(); // 关闭连接    &#125;    public static void init() &#123;        configuration = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;, &quot;hdfs://localhost:9000/hbase&quot;); // 注意这里用的是 hdfs        configuration.set(&quot;hbase.zookeeper.quorum&quot;, &quot;localhost&quot;); // 指定 zookeeper 地址        try &#123;            connection = ConnectionFactory.createConnection(configuration);            admin = connection.getAdmin();            System.out.println(&quot;HBase connection and Admin initialized successfully.&quot;);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    public static void close() &#123;        try &#123;            if (admin != null) &#123;                admin.close();            &#125;            if (connection != null) &#123;                connection.close();            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    public static void createTable(String myTableName, String[] colFamilies) throws IOException &#123;        TableName tableName = TableName.valueOf(myTableName);        if (admin.tableExists(tableName)) &#123;            System.out.println(&quot;表已存在！&quot;);        &#125; else &#123;            TableDescriptorBuilder tableDescriptor = TableDescriptorBuilder.newBuilder(tableName);            for (String cf : colFamilies) &#123;                ColumnFamilyDescriptor family =                        ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(cf)).build();                tableDescriptor.setColumnFamily(family);            &#125;            admin.createTable(tableDescriptor.build());            System.out.println(&quot;表 &quot; + myTableName + &quot; 创建成功！&quot;);        &#125;    &#125;    public static void insertRow(String tableName, String rowKey, String colFamily, String col, String val) throws IOException &#123;        Table table = connection.getTable(TableName.valueOf(tableName));        Put put = new Put(Bytes.toBytes(rowKey));        put.addColumn(Bytes.toBytes(colFamily), Bytes.toBytes(col), Bytes.toBytes(val));        table.put(put);        table.close();        System.out.println(&quot;数据插入成功！&quot;);    &#125;    public static void getData(String tableName, String rowKey, String colFamily, String col) throws IOException &#123;        Table table = connection.getTable(TableName.valueOf(tableName));        Get get = new Get(Bytes.toBytes(rowKey));        get.addColumn(Bytes.toBytes(colFamily), Bytes.toBytes(col));        Result result = table.get(get);        byte[] value = result.getValue(Bytes.toBytes(colFamily), Bytes.toBytes(col));        if (value != null) &#123;            System.out.println(&quot;获取到数据: &quot; + new String(value));        &#125; else &#123;            System.out.println(&quot;未找到数据。&quot;);        &#125;        table.close();    &#125;    public static void deleteRow(String tableName, String rowKey, String colFamily, String col) throws IOException &#123;        Table table = connection.getTable(TableName.valueOf(tableName));        Delete delete = new Delete(Bytes.toBytes(rowKey));        delete.addColumn(Bytes.toBytes(colFamily), Bytes.toBytes(col));        table.delete(delete);        table.close();        System.out.println(&quot;数据删除成功！&quot;);    &#125;&#125;


④清空指定表的所有记录数据。
shell
create &#x27;s1&#x27;,&#x27;score&#x27;put &#x27;s1&#x27;,&#x27;zhangsan&#x27;,&#x27;score:Math&#x27;,&#x27;69&#x27;truncate &#x27;s1&#x27;scan &#x27;s1&#x27;

put &#x27;s1&#x27;,&#x27;zhangsan&#x27;,&#x27;score:Math&#x27;,&#x27;69&#x27;
java
教材中的代码
clearRows() 方法缺了一个 关键点：

在删除表之后重新创建时，需要重新添加原来的列簇（否则建出来的表是空结构）。

所以我用新的
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.HBaseConfiguration;import org.apache.hadoop.hbase.TableName;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes;import java.io.IOException;public class test &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args) throws IOException &#123;        String tableName = &quot;s1&quot;; // 你要清空的表名        clearRows(tableName);    &#125;    // 初始化 HBase 连接    public static void init() throws IOException &#123;        configuration = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;, &quot;hdfs://localhost:9000/hbase&quot;);        configuration.set(&quot;hbase.zookeeper.quorum&quot;, &quot;localhost&quot;);        connection = ConnectionFactory.createConnection(configuration);        admin = connection.getAdmin();    &#125;    // 关闭 HBase 连接    public static void close() throws IOException &#123;        if (admin != null) admin.close();        if (connection != null) connection.close();    &#125;    // 清空指定表的所有数据，保留列簇结构    public static void clearRows(String tableNameStr) throws IOException &#123;        init(); // 初始化连接        TableName tableName = TableName.valueOf(tableNameStr);        if (!admin.tableExists(tableName)) &#123;            System.out.println(&quot;表不存在，无法清空！&quot;);            close();            return;        &#125;        // 获取原始表结构        TableDescriptor descriptor = admin.getDescriptor(tableName);        // 禁用表        if (!admin.isTableDisabled(tableName)) &#123;            admin.disableTable(tableName);        &#125;        // 删除表        admin.deleteTable(tableName);        // 重新创建表（使用原结构）        admin.createTable(descriptor);        System.out.println(&quot;表 [&quot; + tableNameStr + &quot;] 已清空（保留列簇结构）&quot;);        close(); // 关闭连接    &#125;&#125;

这时候再去查表


⑤统计表的行数。
shell
put &#x27;s1&#x27;,&#x27;zhangsan&#x27;,&#x27;score:Math&#x27;,&#x27;69&#x27;count  &#x27;s1&#x27;

java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.HBaseConfiguration;import org.apache.hadoop.hbase.TableName;import org.apache.hadoop.hbase.client.*;import java.io.IOException;public class test &#123;    public static Configuration configuration;    public static Connection connection;    public static Admin admin;    public static void main(String[] args) throws IOException &#123;        String tableName = &quot;s1&quot;; // 你要统计的表名        countRows(tableName);    &#125;    // 初始化 HBase 连接    public static void init() throws IOException &#123;        configuration = HBaseConfiguration.create();        configuration.set(&quot;hbase.rootdir&quot;, &quot;hdfs://localhost:9000/hbase&quot;);        configuration.set(&quot;hbase.zookeeper.quorum&quot;, &quot;localhost&quot;);        connection = ConnectionFactory.createConnection(configuration);        admin = connection.getAdmin();    &#125;    // 关闭 HBase 连接    public static void close() throws IOException &#123;        if (admin != null) admin.close();        if (connection != null) connection.close();    &#125;    // 统计表的行数    public static void countRows(String tableName) throws IOException &#123;        init(); // 初始化连接        Table table = connection.getTable(TableName.valueOf(tableName));        Scan scan = new Scan();        scan.setCaching(500); // 可选优化，加快扫描速度        ResultScanner scanner = table.getScanner(scan);        int num = 0;        for (Result result = scanner.next(); result != null; result = scanner.next()) &#123;            num++;        &#125;        System.out.println(&quot;表 [&quot; + tableName + &quot;] 的总行数为: &quot; + num);        scanner.close();        table.close(); // 关闭 Table 对象        close();       // 关闭连接    &#125;&#125;

第二题
（2）现有以下关系数据库中的表（见表4-21、表4-22和表4-23），要求将其转换为适合HBase存储的表并插入数据。
表4-21 学生（Student）表



学号（S_No）
姓名（S_Name）
性别（S_Sex）
年龄（S_Age）




2015001
Zhangsan
male
23


2015002
Mary
female
22


2015003
Lisi
male
24



表4-22 课程（Course）表



课程号（C_No）
课程名（C_Name）
学分（C_Credit）




123001
Math
2.0


123002
Computer Science
5.0


123003
English
3.0



表4-23  选课（SC）表



学号（SC_Sno）
课程号（SC_Cno）
成绩（SC_Score）




2015001
123001
86


2015001
123003
69


2015002
123002
77


2015002
123003
99


2015003
123001
98


2015003
123002
95



shell
disable &#x27;student&#x27;drop &#x27;student&#x27;
创建学生 student表
create &#x27;Student&#x27;,&#x27;S_No&#x27;,&#x27;S_Name&#x27;,&#x27;S_Sex&#x27;,&#x27;S_Age&#x27;put &#x27;Student&#x27;,&#x27;s001&#x27;,&#x27;S_No&#x27;,&#x27;2015001&#x27;put &#x27;Student&#x27;,&#x27;s001&#x27;,&#x27;S_Name&#x27;,&#x27;Zhangsan&#x27;put &#x27;Student&#x27;,&#x27;s001&#x27;,&#x27;S_Sex&#x27;,&#x27;male&#x27;put &#x27;Student&#x27;,&#x27;s001&#x27;,&#x27;S_Age&#x27;,&#x27;23&#x27;put &#x27;Student&#x27;,&#x27;s002&#x27;,&#x27;S_No&#x27;,&#x27;2015002&#x27;put &#x27;Student&#x27;,&#x27;s002&#x27;,&#x27;S_Name&#x27;,&#x27;Mary&#x27;put &#x27;Student&#x27;,&#x27;s002&#x27;,&#x27;S_Sex&#x27;,&#x27;female&#x27;put &#x27;Student&#x27;,&#x27;s002&#x27;,&#x27;S_Age&#x27;,&#x27;22&#x27;put &#x27;Student&#x27;,&#x27;s003&#x27;,&#x27;S_No&#x27;,&#x27;2015003&#x27;put &#x27;Student&#x27;,&#x27;s003&#x27;,&#x27;S_Name&#x27;,&#x27;Lisi&#x27;put &#x27;Student&#x27;,&#x27;s003&#x27;,&#x27;S_Sex&#x27;,&#x27;male&#x27;put &#x27;Student&#x27;,&#x27;s003&#x27;,&#x27;S_Age&#x27;,&#x27;24&#x27;

创建课程 Course 表
create &#x27;Course&#x27;,&#x27;C_No&#x27;,&#x27;C_Name&#x27;,&#x27;C_Credit&#x27;put &#x27;Course&#x27;,&#x27;c001&#x27;,&#x27;C_No&#x27;,&#x27;123001&#x27;put &#x27;Course&#x27;,&#x27;c001&#x27;,&#x27;C_Name&#x27;,&#x27;Math&#x27;put &#x27;Course&#x27;,&#x27;c001&#x27;,&#x27;C_Credit&#x27;,&#x27;2.0&#x27;put &#x27;Course&#x27;,&#x27;c002&#x27;,&#x27;C_No&#x27;,&#x27;123002&#x27;put &#x27;Course&#x27;,&#x27;c002&#x27;,&#x27;C_Name&#x27;,&#x27;Computer&#x27;put &#x27;Course&#x27;,&#x27;c002&#x27;,&#x27;C_Credit&#x27;,&#x27;5.0&#x27;put &#x27;Course&#x27;,&#x27;c003&#x27;,&#x27;C_No&#x27;,&#x27;123003&#x27;put &#x27;Course&#x27;,&#x27;c003&#x27;,&#x27;C_Name&#x27;,&#x27;English&#x27;put &#x27;Course&#x27;,&#x27;c003&#x27;,&#x27;C_Credit&#x27;,&#x27;3.0&#x27;

创建选课 SC 表
create &#x27;SC&#x27;,&#x27;SC_Sno&#x27;,&#x27;SC_Cno&#x27;,&#x27;SC_Score&#x27;put &#x27;SC&#x27;,&#x27;sc001&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015001&#x27;put &#x27;SC&#x27;,&#x27;sc001&#x27;,&#x27;SC_Cno&#x27;,&#x27;123001&#x27;put &#x27;SC&#x27;,&#x27;sc001&#x27;,&#x27;SC_Score&#x27;,&#x27;86&#x27;put &#x27;SC&#x27;,&#x27;sc002&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015001&#x27;put &#x27;SC&#x27;,&#x27;sc002&#x27;,&#x27;SC_Cno&#x27;,&#x27;123003&#x27;put &#x27;SC&#x27;,&#x27;sc002&#x27;,&#x27;SC_Score&#x27;,&#x27;69&#x27;put &#x27;SC&#x27;,&#x27;sc003&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015002&#x27;put &#x27;SC&#x27;,&#x27;sc003&#x27;,&#x27;SC_Cno&#x27;,&#x27;123002&#x27;put &#x27;SC&#x27;,&#x27;sc003&#x27;,&#x27;SC_Score&#x27;,&#x27;77&#x27;put &#x27;SC&#x27;,&#x27;sc004&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015002&#x27;put &#x27;SC&#x27;,&#x27;sc004&#x27;,&#x27;SC_Cno&#x27;,&#x27;123003&#x27;put &#x27;SC&#x27;,&#x27;sc004&#x27;,&#x27;SC_Score&#x27;,&#x27;99&#x27;put &#x27;SC&#x27;,&#x27;sc005&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015003&#x27;put &#x27;SC&#x27;,&#x27;sc005&#x27;,&#x27;SC_Cno&#x27;,&#x27;123001&#x27;put &#x27;SC&#x27;,&#x27;sc005&#x27;,&#x27;SC_Score&#x27;,&#x27;98&#x27;put &#x27;SC&#x27;,&#x27;sc006&#x27;,&#x27;SC_Sno&#x27;,&#x27;2015003&#x27;put &#x27;SC&#x27;,&#x27;sc006&#x27;,&#x27;SC_Cno&#x27;,&#x27;123002&#x27;put &#x27;SC&#x27;,&#x27;sc006&#x27;,&#x27;SC_Score&#x27;,&#x27;95&#x27;

验证
scan &#x27;Student&#x27;scan &#x27;Course&#x27;scan &#x27;SC&#x27;

disable &#x27;Student&#x27;drop &#x27;Student&#x27;disable &#x27;Course&#x27;drop &#x27;Course&#x27;disable &#x27;SC&#x27;drop &#x27;SC&#x27;
java
① createTable(String tableName, String[] fields)。
② addRecord(String tableName, String row, String[] fields, String[]values)。
③ scanColumn(String tableName, String column)。
④ modifyData(String tableName, String row, String column)。
⑤ deleteRow(String tableName, String row)。
import java.io.IOException;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.hbase.*;import org.apache.hadoop.hbase.client.*;import org.apache.hadoop.hbase.util.Bytes;public class test &#123;    static Connection connection;    static Admin admin;    public static void init() throws IOException &#123;        Configuration conf = HBaseConfiguration.create();        conf.set(&quot;hbase.zookeeper.quorum&quot;, &quot;localhost&quot;);        connection = ConnectionFactory.createConnection(conf);        admin = connection.getAdmin();    &#125;    public static void close() throws IOException &#123;        if (admin != null) admin.close();        if (connection != null) connection.close();    &#125;    public static void createTable(String tableName, String[] fields) throws IOException &#123;        init();        TableName tablename = TableName.valueOf(tableName);        if (admin.tableExists(tablename)) &#123;            System.out.println(&quot;表 &quot; + tableName + &quot; 已存在，正在删除...&quot;);            admin.disableTable(tablename);            admin.deleteTable(tablename);        &#125;        TableDescriptorBuilder tableDescriptor = TableDescriptorBuilder.newBuilder(tablename);        for (String str : fields) &#123;            tableDescriptor.setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(str)).build());        &#125;        admin.createTable(tableDescriptor.build());        System.out.println(&quot;表 &quot; + tableName + &quot; 创建成功&quot;);        close();    &#125;    public static void addRecord(String tableName, String row, String[] fields, String[] values) throws IOException &#123;        init();        Table table = connection.getTable(TableName.valueOf(tableName));        Put put = new Put(Bytes.toBytes(row));        for (int i = 0; i &lt; fields.length; i++) &#123;            String[] parts = fields[i].split(&quot;:&quot;);            put.addColumn(Bytes.toBytes(parts[0], Bytes.toBytes(parts[1], Bytes.toBytes(values[i]);        &#125;        table.put(put);        table.close();        close();    &#125;    public static void scanColumn(String tableName, String column) throws IOException &#123;        init();        Table table = connection.getTable(TableName.valueOf(tableName));        Scan scan = new Scan();        if (column.contains(&quot;:&quot;)) &#123;            String[] parts = column.split(&quot;:&quot;);            scan.addColumn(Bytes.toBytes(parts[0], Bytes.toBytes(parts[1]);        &#125; else &#123;            scan.addFamily(Bytes.toBytes(column));        &#125;        ResultScanner scanner = table.getScanner(scan);        for (Result result = scanner.next(); result != null; result = scanner.next()) &#123;            showCell(result);        &#125;        scanner.close();        table.close();        close();    &#125;    public static void showCell(Result result) &#123;        for (Cell cell : result.rawCells()) &#123;            System.out.println(&quot;RowName: &quot; + Bytes.toString(CellUtil.cloneRow(cell)));            System.out.println(&quot;Timestamp: &quot; + cell.getTimestamp());            System.out.println(&quot;ColumnFamily: &quot; + Bytes.toString(CellUtil.cloneFamily(cell)));            System.out.println(&quot;Column: &quot; + Bytes.toString(CellUtil.cloneQualifier(cell)));            System.out.println(&quot;Value: &quot; + Bytes.toString(CellUtil.cloneValue(cell)));            System.out.println(&quot;----------------------------------------&quot;);        &#125;    &#125;    public static void modifyData(String tableName, String row, String column, String val) throws IOException &#123;        init();        Table table = connection.getTable(TableName.valueOf(tableName));        String[] parts = column.split(&quot;:&quot;);        Put put = new Put(Bytes.toBytes(row));        put.addColumn(Bytes.toBytes(parts[0], Bytes.toBytes(parts[1], Bytes.toBytes(val));        table.put(put);        System.out.println(&quot;修改表 &quot; + tableName + &quot; 中 &quot; + row + &quot; 行的列 &quot; + column + &quot; 为 &quot; + val);        table.close();        close();    &#125;    public static void deleteRow(String tableName, String row) throws IOException &#123;        init();        Table table = connection.getTable(TableName.valueOf(tableName));        Delete delete = new Delete(Bytes.toBytes(row));        table.delete(delete);        System.out.println(&quot;删除表 &quot; + tableName + &quot; 中的行 &quot; + row);        table.close();        close();    &#125;    public static void main(String[] args) throws IOException &#123;        // Student 表        createTable(&quot;Student&quot;, new String[]&#123;&quot;S_No&quot;, &quot;S_Name&quot;, &quot;S_Sex&quot;, &quot;S_Age&quot;&#125;);        addRecord(&quot;Student&quot;, &quot;s001&quot;, new String[]&#123;&quot;S_No:S_No&quot;, &quot;S_Name:S_Name&quot;, &quot;S_Sex:S_Sex&quot;, &quot;S_Age:S_Age&quot;&#125;,                new String[]&#123;&quot;2015001&quot;, &quot;Zhangsan&quot;, &quot;male&quot;, &quot;23&quot;&#125;);        addRecord(&quot;Student&quot;, &quot;s002&quot;, new String[]&#123;&quot;S_No:S_No&quot;, &quot;S_Name:S_Name&quot;, &quot;S_Sex:S_Sex&quot;, &quot;S_Age:S_Age&quot;&#125;,                new String[]&#123;&quot;2015002&quot;, &quot;Mary&quot;, &quot;female&quot;, &quot;22&quot;&#125;);        addRecord(&quot;Student&quot;, &quot;s003&quot;, new String[]&#123;&quot;S_No:S_No&quot;, &quot;S_Name:S_Name&quot;, &quot;S_Sex:S_Sex&quot;, &quot;S_Age:S_Age&quot;&#125;,                new String[]&#123;&quot;2015003&quot;, &quot;Lisi&quot;, &quot;male&quot;, &quot;24&quot;&#125;);        System.out.println(&quot;Student 表插入数据成功&quot;);        // Course 表        createTable(&quot;Course&quot;, new String[]&#123;&quot;C_No&quot;, &quot;C_Name&quot;, &quot;C_Credit&quot;&#125;);        addRecord(&quot;Course&quot;, &quot;c001&quot;, new String[]&#123;&quot;C_No:C_No&quot;, &quot;C_Name:C_Name&quot;, &quot;C_Credit:C_Credit&quot;&#125;,                new String[]&#123;&quot;123001&quot;, &quot;Math&quot;, &quot;2.0&quot;&#125;);        addRecord(&quot;Course&quot;, &quot;c002&quot;, new String[]&#123;&quot;C_No:C_No&quot;, &quot;C_Name:C_Name&quot;, &quot;C_Credit:C_Credit&quot;&#125;,                new String[]&#123;&quot;123002&quot;, &quot;Computer&quot;, &quot;5.0&quot;&#125;);        addRecord(&quot;Course&quot;, &quot;c003&quot;, new String[]&#123;&quot;C_No:C_No&quot;, &quot;C_Name:C_Name&quot;, &quot;C_Credit:C_Credit&quot;&#125;,                new String[]&#123;&quot;123003&quot;, &quot;English&quot;, &quot;3.0&quot;&#125;);        System.out.println(&quot;Course 表插入数据成功&quot;);        // SC 表        createTable(&quot;SC&quot;, new String[]&#123;&quot;SC_Sno&quot;, &quot;SC_Cno&quot;, &quot;SC_Score&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc001&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015001&quot;, &quot;123001&quot;, &quot;86&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc002&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015001&quot;, &quot;123003&quot;, &quot;69&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc003&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015002&quot;, &quot;123002&quot;, &quot;77&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc004&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015002&quot;, &quot;123003&quot;, &quot;99&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc005&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015003&quot;, &quot;123001&quot;, &quot;98&quot;&#125;);        addRecord(&quot;SC&quot;, &quot;sc006&quot;, new String[]&#123;&quot;SC_Sno:SC_Sno&quot;, &quot;SC_Cno:SC_Cno&quot;, &quot;SC_Score:SC_Score&quot;&#125;,                new String[]&#123;&quot;2015003&quot;, &quot;123002&quot;, &quot;95&quot;&#125;);        System.out.println(&quot;SC 表插入数据成功&quot;);        // 示例输出        System.out.println(&quot;===== 浏览 Student 表的全部 S_Name 列族 =====&quot;);        scanColumn(&quot;Student&quot;, &quot;S_Name&quot;);        System.out.println(&quot;===== 修改 Student 表中 s002 的 S_Age 为 25 =====&quot;);        modifyData(&quot;Student&quot;, &quot;s002&quot;, &quot;S_Age:S_Age&quot;, &quot;25&quot;);        System.out.println(&quot;===== 删除 Student 表中的 s003 =====&quot;);        deleteRow(&quot;Student&quot;, &quot;s003&quot;);    &#125;&#125;

（7.5.5）
基础
自行开启hadoop集群和hbase
cdcat &gt; wordfile1.txt&lt;&lt;&quot;EOF&quot;I love SparkI love HadoopEOFcat &gt; wordfile2.txt&lt;&lt;&quot;EOF&quot;Hadoop is goodSpark is fastEOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put wordfile1.txt inputhdfs dfs -put wordfile2.txt input

在eclipse创建项目
启动eclipse
eclipse
创建项目
File-new-project
名字：WordCount

为了编写一个MapReduce程序，一般需要向Java工程中添加以下JAR包：
（1)/usr/local/hadoop/share/hadoop/common目录下的hadoop-common-3.1.3.jar和haoop-nfs-3.1.3.jar；
（2)/usr/local/hadoop/share/hadoop/common/lib目录下的所有JAR包；
（3)/usr/local/hadoop/share/hadoop/mapreduce目录下的所有JAR包，但是，不包括jdiff、lib-examples和sources目录.

添加完成就finish就行
编写Java应用程序
创建WordCount.java,自己看好，以后不会再说了

添加代码
import java.io.IOException;import java.util.Iterator;import java.util.StringTokenizer;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;public class WordCount &#123;    public WordCount() &#123;    &#125;     public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        String[] otherArgs = (new GenericOptionsParser(conf, args)).getRemainingArgs();        if(otherArgs.length &lt; 2) &#123;            System.err.println(&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;);            System.exit(2);        &#125;        Job job = Job.getInstance(conf, &quot;word count&quot;);        job.setJarByClass(WordCount.class);        job.setMapperClass(WordCount.TokenizerMapper.class);        job.setCombinerClass(WordCount.IntSumReducer.class);        job.setReducerClass(WordCount.IntSumReducer.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(IntWritable.class);         for(int i = 0; i &lt; otherArgs.length - 1; ++i) &#123;            FileInputFormat.addInputPath(job, new Path(otherArgs[i]);        &#125;        FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1]);        System.exit(job.waitForCompletion(true)?0:1);    &#125;    public static class TokenizerMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt; &#123;        private static final IntWritable one = new IntWritable(1);        private Text word = new Text();        public TokenizerMapper() &#123;        &#125;        public void map(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;            StringTokenizer itr = new StringTokenizer(value.toString());             while(itr.hasMoreTokens()) &#123;                this.word.set(itr.nextToken());                context.write(this.word, one);            &#125;        &#125;    &#125;public static class IntSumReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;        private IntWritable result = new IntWritable();        public IntSumReducer() &#123;        &#125;        public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException &#123;            int sum = 0;            IntWritable val;            for(Iterator i$ = values.iterator(); i$.hasNext(); sum += val.get()) &#123;                val = (IntWritable)i$.next();            &#125;            this.result.set(sum);            context.write(key, this.result);        &#125;    &#125;&#125;
运行一下


7.5.5截图1

编译打包程序
如果你没有myapp文件夹你就自己创建，我的是有的



选择WordCount项目
填写路径/usr/local/hadoop/myapp/WordCount.jar
然后finish
这时候会有弹窗，一路ok下来就行了
ll  /usr/local/hadoop/myapp

运行程序
hadoop jar /usr/local/hadoop/myapp/WordCount.jar input outputhdfs dfs -cat output/*



7.5.5 截图2和3

（7.3.4）
第四题
shell
cat &gt; avg.txt &lt;&lt;&quot;EOF&quot;math 80math 90english 70english 100EOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put avg.txt input
创建AverageCalculator.java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import java.io.IOException;public class AverageCalculator &#123;    public static class AvgMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; &#123;        private Text keyOut = new Text();        private IntWritable valOut = new IntWritable();        @Override        protected void map(LongWritable key, Text value, Context context)                throws IOException, InterruptedException &#123;            String[] parts = value.toString().split(&quot;\\s+&quot;);            if (parts.length == 2) &#123;                keyOut.set(parts[0];                valOut.set(Integer.parseInt(parts[1]);                context.write(keyOut, valOut);            &#125;        &#125;    &#125;    public static class AvgReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;        private IntWritable result = new IntWritable();        @Override        protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context)                throws IOException, InterruptedException &#123;            int sum = 0;            int count = 0;            for (IntWritable val : values) &#123;                sum += val.get();                count++;            &#125;            if (count != 0) &#123;                result.set(sum / count);                context.write(key, result);            &#125;        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        if (args.length != 2) &#123;            System.err.println(&quot;Usage: AverageCalculator &lt;input path&gt; &lt;output path&gt;&quot;);            System.exit(-1);        &#125;        Configuration conf = new Configuration();        Job job = Job.getInstance(conf, &quot;Average Calculator&quot;);        job.setJarByClass(AverageCalculator.class);        job.setMapperClass(AvgMapper.class);        job.setReducerClass(AvgReducer.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(IntWritable.class);        FileInputFormat.setInputPaths(job, new Path(args[0]);        FileOutputFormat.setOutputPath(job, new Path(args[1]);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
自己运行一下，不然下面打包程序出现不了，运行报错别管，运行就对了，别问
自己运行一下，不然下面打包程序出现不了，运行报错别管，运行就对了，别问
自己运行一下，不然下面打包程序出现不了，运行报错别管，运行就对了，别问
自己运行一下，不然下面打包程序出现不了，运行报错别管，运行就对了，别问
打包项目
这是打包java项目的路径教程，自己看，后面还会有各种java要打包，后面不会再说了


一路ok
hadoop jar /usr/local/hadoop/myapp/AverageCalculator.jar input outputhadoop dfs -cat output/*


这个是第四题的图片

第八题和第九题
cat &gt; maxmin.txt &lt;&lt;&quot;EOF&quot;23451267893456EOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put maxmin.txt input
创建MaxMinValue.java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import java.io.IOException;public class MaxMinValue &#123;    public static class MaxMinMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; &#123;        private IntWritable valueOut = new IntWritable();        @Override        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;            int num = Integer.parseInt(value.toString());            valueOut.set(num);            context.write(new Text(&quot;max&quot;), valueOut);            context.write(new Text(&quot;min&quot;), valueOut);        &#125;    &#125;    public static class MaxMinReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;        private IntWritable result = new IntWritable();        @Override        protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context)                throws IOException, InterruptedException &#123;            int finalValue = key.toString().equals(&quot;max&quot;) ? Integer.MIN_VALUE : Integer.MAX_VALUE;            for (IntWritable val : values) &#123;                if (key.toString().equals(&quot;max&quot;)) &#123;                    finalValue = Math.max(finalValue, val.get());                &#125; else if (key.toString().equals(&quot;min&quot;)) &#123;                    finalValue = Math.min(finalValue, val.get());                &#125;            &#125;            result.set(finalValue);            context.write(key, result);        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        Job job = Job.getInstance(conf, &quot;Max and Min Values&quot;);        job.setJarByClass(MaxMinValue.class);        job.setMapperClass(MaxMinMapper.class);        job.setReducerClass(MaxMinReducer.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(IntWritable.class);        FileInputFormat.setInputPaths(job, new Path(args[0]);        FileOutputFormat.setOutputPath(job, new Path(args[1]);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
然后自己打包程序，不会就去翻前面，前面有说

hadoop jar /usr/local/hadoop/myapp/MaxMinValue.jar input outputhadoop dfs -cat output/*


这个是第八题和第九题的图片

接下来的创建java打包程序不说了，自己翻前面的
第十题
cat &gt; SalesVolume.txt &lt;&lt;&quot;EOF&quot;2025-01-01 2002025-01-15 1502025-02-10 3002025-02-25 2502025-03-05 4002025-03-15 350EOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put SalesVolume.txt input
创建SalesByMonth.java
import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.LongWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import java.io.IOException;public class SalesByMonth &#123;    public static class SalesMapper extends Mapper&lt;LongWritable, Text, Text, IntWritable&gt; &#123;        private Text month = new Text();        private IntWritable salesAmount = new IntWritable();        @Override        protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException &#123;            String[] parts = value.toString().split(&quot;\\s+&quot;);            String date = parts[0];  // 日期格式为 YYYY-MM-DD            int amount = Integer.parseInt(parts[1];  // 销售金额            // 提取月份（格式为 YYYY-MM）            String yearMonth = date.substring(0, 7);            month.set(yearMonth);            salesAmount.set(amount);            context.write(month, salesAmount);        &#125;    &#125;    public static class SalesReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; &#123;        private IntWritable result = new IntWritable();        @Override        protected void reduce(Text key, Iterable&lt;IntWritable&gt; values, Context context)                throws IOException, InterruptedException &#123;            int totalSales = 0;            for (IntWritable val : values) &#123;                totalSales += val.get();            &#125;            result.set(totalSales);            context.write(key, result);        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        Job job = Job.getInstance(conf, &quot;Sales by Month&quot;);        job.setJarByClass(SalesByMonth.class);        job.setMapperClass(SalesMapper.class);        job.setReducerClass(SalesReducer.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(IntWritable.class);        FileInputFormat.setInputPaths(job, new Path(args[0]);        FileOutputFormat.setOutputPath(job, new Path(args[1]);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
自己打包程序，然后运行程序
hadoop jar /usr/local/hadoop/myapp/SalesByMonth.jar input outputhadoop dfs -cat output/*


这是第十题的图片

实验四
第一题
shell
1．编程实现文件合并和去重操作
shell
对于两个输入文件，即文件A和文件B，请编写MapReduce程序，对两个文件进行合并，并剔除其中重复的内容，得到一个新的输出文件C。下面是输入文件和输出文件的一个样例，以供参考。
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;20150101    x20150102    y20150103    x20150104    y20150105    z20150106    xEOFcat &gt;b.txt&lt;&lt;&quot;EOF&quot;20150101     y20150102     y20150103     x20150104     z20150105     yEOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt inputhdfs dfs -put b.txt input

创建Merge.java
import java.io.IOException;import java.util.StringTokenizer;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;public class Merge &#123;    /**     * 对A,B两个文件进行合并，并剔除其中重复的内容，得到一个新的输出文件C     */    // Mapper: 清理每行多余的空白，并作为 key 输出    public static class Map extends Mapper&lt;Object, Text, Text, Text&gt; &#123;        private Text outKey = new Text();        public void map(Object key, Text value, Context context) throws IOException, InterruptedException &#123;            String line = value.toString().trim(); // 去除首尾空格            StringTokenizer tokenizer = new StringTokenizer(line);            StringBuilder sb = new StringBuilder();            while (tokenizer.hasMoreTokens()) &#123;                sb.append(tokenizer.nextToken()).append(&quot; &quot;); // 用单空格连接            &#125;            if (sb.length() &gt; 0) sb.setLength(sb.length() - 1); // 去掉最后一个空格            outKey.set(sb.toString());            context.write(outKey, new Text(&quot;&quot;));        &#125;    &#125;    // Reducer: 每个 key 写出一次，达到去重目的    public static class Reduce extends Reducer&lt;Text, Text, Text, Text&gt; &#123;        public void reduce(Text key, Iterable&lt;Text&gt; values, Context context) throws IOException, InterruptedException &#123;            context.write(key, new Text(&quot;&quot;));        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        conf.set(&quot;fs.default.name&quot;, &quot;hdfs://localhost:9000&quot;);        String[] otherArgs = new String[]&#123;&quot;input&quot;, &quot;output&quot;&#125;;        if (otherArgs.length != 2) &#123;            System.err.println(&quot;Usage: Merge &lt;in&gt; &lt;out&gt;&quot;);            System.exit(2);        &#125;        Job job = Job.getInstance(conf, &quot;Merge and Deduplicate&quot;);        job.setJarByClass(Merge.class);        job.setMapperClass(Map.class);        job.setCombinerClass(Reduce.class);        job.setReducerClass(Reduce.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(Text.class);        FileInputFormat.addInputPath(job, new Path(otherArgs[0]);        FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]);        // 强制使用一个 reducer，确保全局去重        job.setNumReduceTasks(1);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
打包程序，然后运行
hadoop jar /usr/local/hadoop/myapp/Merge.jar input outputhadoop dfs -cat output/*

java
java
导入hdfs包


/usr/local/hadoop/share/hadoop/yarn/lib下的所有jar包
/usr/local/hadoop/share/hadoop/yarn下的所有jar包
/usr/local/hadoop/share/hadoop/hdfs下的这两个包也要添加

测试文件
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;20150101    x20150102    y20150103    x20150104    y20150105    z20150106    xEOFcat &gt;b.txt&lt;&lt;&quot;EOF&quot;20150101     y20150102     y20150103     x20150104     z20150105     yEOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt inputhdfs dfs -put b.txt input
更新Merge.java代码
import java.io.IOException;import java.util.StringTokenizer;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;public class Merge &#123;    /**     * 对A,B两个文件进行合并，并剔除其中重复的内容，得到一个新的输出文件C     */    // Mapper: 清理每行多余的空白，并作为 key 输出    public static class Map extends Mapper&lt;Object, Text, Text, Text&gt; &#123;        private Text outKey = new Text();        public void map(Object key, Text value, Context context) throws IOException, InterruptedException &#123;            String line = value.toString().trim(); // 去除首尾空格            StringTokenizer tokenizer = new StringTokenizer(line);            StringBuilder sb = new StringBuilder();            while (tokenizer.hasMoreTokens()) &#123;                sb.append(tokenizer.nextToken()).append(&quot; &quot;); // 用单空格连接            &#125;            if (sb.length() &gt; 0) sb.setLength(sb.length() - 1); // 去掉最后一个空格            outKey.set(sb.toString());            context.write(outKey, new Text(&quot;&quot;));        &#125;    &#125;    // Reducer: 每个 key 写出一次，达到去重目的    public static class Reduce extends Reducer&lt;Text, Text, Text, Text&gt; &#123;        public void reduce(Text key, Iterable&lt;Text&gt; values, Context context) throws IOException, InterruptedException &#123;            context.write(key, new Text(&quot;&quot;));        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        conf.set(&quot;fs.default.name&quot;, &quot;hdfs://localhost:9000&quot;);        // 写死输入输出路径        String inputPath = &quot;hdfs://localhost:9000/user/hadoop/input&quot;;        String outputPath = &quot;hdfs://localhost:9000/user/hadoop/output&quot;;        Job job = Job.getInstance(conf, &quot;Merge and Deduplicate&quot;);        job.setJarByClass(Merge.class);        job.setMapperClass(Map.class);        job.setCombinerClass(Reduce.class);        job.setReducerClass(Reduce.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(Text.class);        FileInputFormat.addInputPath(job, new Path(inputPath));        FileOutputFormat.setOutputPath(job, new Path(outputPath));        // 强制使用一个 reducer，确保全局去重        job.setNumReduceTasks(1);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;

查看结果
hadoop dfs -cat output/*

第二题
shell
2．编程实现对输入文件的排序
现在有多个输入文件，每个文件中的每行内容均为一个整数。要求读取所有文件中的整数，进行升序排列后，将其输出到一个新的文件中，输出的数据格式为每行两个整数，第一个整数为第二个整数的排序位次，第二个整数为原待排列的整数。下面是输入文件和输出文件的一个样例，以供参考。
shell
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;33371240EOFcat &gt;b.txt&lt;&lt;&quot;EOF&quot;416395EOFcat &gt;c.txt&lt;&lt;&quot;EOF&quot;14525EOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt inputhdfs dfs -put b.txt inputhdfs dfs -put c.txt input
创建MergeSort.java
import java.io.IOException;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Partitioner;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;public class MergeSort &#123;    /**     * @param args     * 输入多个文件，每个文件中的每行内容均为一个整数     * 输出到一个新的文件中，输出的数据格式为每行两个整数，第一个数字为第二个整数的排序位次，第二个整数为原待排列的整数     */    //map函数读取输入中的value，将其转化成IntWritable类型，最后作为输出key    public static class Map extends Mapper&lt;Object, Text, IntWritable, IntWritable&gt;&#123;        private static IntWritable data = new IntWritable();        public void map(Object key, Text value, Context context) throws IOException,InterruptedException&#123;            String text = value.toString();            data.set(Integer.parseInt(text));            context.write(data, new IntWritable(1));        &#125;    &#125;    //reduce函数将map输入的key复制到输出的value上，然后根据输入的value-list中元素的个数决定key的输出次数,定义一个全局变量line_num来代表key的位次    public static class Reduce extends Reducer&lt;IntWritable, IntWritable, IntWritable,  IntWritable&gt;&#123;        private static IntWritable line_num = new IntWritable(1);               public void reduce(IntWritable key, Iterable&lt;IntWritable&gt; values, Context  context) throws IOException,InterruptedException&#123;            for(IntWritable val : values)&#123;                 context.write(line_num, key);                line_num = new IntWritable(line_num.get() + 1);            &#125;        &#125;    &#125;    //自定义Partition函数，此函数根据输入数据的最大值和MapReduce框架中Partition的数量获取将输入数据按照大小分块的边界，然后根据输入数值和边界的关系返回对应的Partiton ID    public static class Partition extends Partitioner&lt;IntWritable, IntWritable&gt;&#123;        public int getPartition(IntWritable key, IntWritable value, int num_Partition)&#123;            int Maxnumber = 65223;//int型的最大数值            int bound = Maxnumber/num_Partition+1;            int keynumber = key.get();            for (int i = 0; i&lt;num_Partition; i++)&#123;                if(keynumber&lt;bound * (i+1) &amp;&amp; keynumber&gt;=bound * i)&#123;                    return i;                &#125;            &#125;            return -1;        &#125;    &#125;    public static  void main(String[] args) throws Exception&#123;         // TODO  Auto-generated method stub        Configuration  conf = new Configuration();               conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);        String[] otherArgs = new String[]&#123;&quot;input&quot;,&quot;output&quot;&#125;; /* 直接设置输入参数 */        if (otherArgs.length != 2) &#123;            System.err.println(&quot;Usage: wordcount &lt;in&gt;&lt;out&gt;&quot;);            System.exit(2);            &#125;               Job job = Job.getInstance(conf,&quot;Merge and sort&quot;);        job.setJarByClass(MergeSort.class);        job.setMapperClass(Map.class);         job.setReducerClass(Reduce.class);        job.setPartitionerClass(Partition.class);        job.setOutputKeyClass(IntWritable.class);         job.setOutputValueClass(IntWritable.class);         FileInputFormat.addInputPath(job, new Path(otherArgs[0]);        FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
自己打包项目
hadoop jar /usr/local/hadoop/myapp/MergeSort.jar input outputhadoop dfs -cat output/*

java
java
写入测试文件
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;33371240EOFcat &gt;b.txt&lt;&lt;&quot;EOF&quot;416395EOFcat &gt;c.txt&lt;&lt;&quot;EOF&quot;14525EOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt inputhdfs dfs -put b.txt inputhdfs dfs -put c.txt input
更新代码
MergeSort.java
import java.io.IOException;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Partitioner;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;public class MergeSort &#123;    /**     * @param args     * 输入多个文件，每个文件中的每行内容均为一个整数     * 输出到一个新的文件中，输出的数据格式为每行两个整数，     * 第一个数字为第二个整数的排序位次（从1开始），第二个整数为原待排列的整数     */    // Mapper：读取每行整数，作为 key 输出    public static class Map extends Mapper&lt;Object, Text, IntWritable, IntWritable&gt; &#123;        private static final IntWritable data = new IntWritable();        public void map(Object key, Text value, Context context) throws IOException, InterruptedException &#123;            String text = value.toString().trim();            if (!text.isEmpty()) &#123;                data.set(Integer.parseInt(text));                context.write(data, new IntWritable(1));            &#125;        &#125;    &#125;    // Reducer：根据 key 的顺序输出排名和对应的整数    public static class Reduce extends Reducer&lt;IntWritable, IntWritable, IntWritable, IntWritable&gt; &#123;        private static IntWritable line_num = new IntWritable(1);        public void reduce(IntWritable key, Iterable&lt;IntWritable&gt; values, Context context)                throws IOException, InterruptedException &#123;            for (IntWritable val : values) &#123;                context.write(line_num, key);                line_num = new IntWritable(line_num.get() + 1);            &#125;        &#125;    &#125;    // 自定义 Partitioner：按数值大小分块，提升并行效率    public static class Partition extends Partitioner&lt;IntWritable, IntWritable&gt; &#123;        public int getPartition(IntWritable key, IntWritable value, int num_Partition) &#123;            int Maxnumber = 65223; // 可以根据数据范围调整            int bound = Maxnumber / num_Partition + 1;            int keynumber = key.get();            for (int i = 0; i &lt; num_Partition; i++) &#123;                if (keynumber &lt; bound * (i + 1) &amp;&amp; keynumber &gt;= bound * i) &#123;                    return i;                &#125;            &#125;            return -1;        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        // 设置新的 fs.defaultFS，并设置本地执行模式        conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs://localhost:9000&quot;);        conf.set(&quot;mapreduce.framework.name&quot;, &quot;local&quot;);        conf.set(&quot;mapreduce.jobtracker.address&quot;, &quot;local&quot;);        // 写死输入输出路径        String inputPath = &quot;hdfs://localhost:9000/user/hadoop/input&quot;;        String outputPath = &quot;hdfs://localhost:9000/user/hadoop/output&quot;;        Job job = Job.getInstance(conf, &quot;Merge and Sort&quot;);        job.setJarByClass(MergeSort.class);        job.setMapperClass(Map.class);        job.setReducerClass(Reduce.class);        job.setPartitionerClass(Partition.class);        job.setOutputKeyClass(IntWritable.class);        job.setOutputValueClass(IntWritable.class);        FileInputFormat.addInputPath(job, new Path(inputPath));        FileOutputFormat.setOutputPath(job, new Path(outputPath));        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;

hadoop dfs -cat output/*

第三题
shell
3．对给定的表格进行信息挖掘
下面给出一个child-parent的表格，要求挖掘其中的父子关系，给出祖孙关系的表格。
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;child parentSteven LucySteven JackJone LucyJone JackLucy MaryLucy FrankJack AliceJack JesseDavid AliceDavid JessePhilip DavidPhilip AlmaMark DavidMark AlmaEOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt input
创建simple_data_mining.java
import java.io.IOException;import java.util.*;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.IntWritable;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;import org.apache.hadoop.util.GenericOptionsParser;public class simple_data_mining &#123;     public static int time = 0;    /**     * @param args      * 输入一个child-parent的表格     * 输出一个体现grandchild-grandparent关系的表格     */    //Map将输入文件按照空格分割成child和parent，然后正序输出一次作为右表，反序输出一次作为左表，需要注意的是在输出的value中必须加上左右表区别标志    public static class Map extends Mapper&lt;Object, Text, Text, Text&gt;&#123;        public void map(Object key, Text value, Context context) throws IOException,InterruptedException&#123;            String child_name = new String();            String parent_name = new String();            String relation_type = new String();            String line = value.toString();            int i = 0;            while(line.charAt(i)!= &#x27; &#x27;)&#123;                i++;            &#125;            String[] values = &#123;line.substring(0,i),line.substring(i+1)&#125;;             if(values[0].compareTo(&quot;child&quot;)!= 0)&#123;                child_name = values[0];                parent_name = values[1];                relation_type = &quot;1&quot;;//左右表区分标志                context.write(new Text(values[1], new Text(relation_type+&quot;+&quot;+child_name+&quot;+&quot;+parent_name));                //左表                relation_type = &quot;2&quot;;                context.write(new Text(values[0], new Text(relation_type+&quot;+&quot;+child_name+&quot;+&quot;+parent_name));                //右表            &#125;        &#125;    &#125;    public static class Reduce extends Reducer&lt;Text, Text, Text, Text&gt;&#123;        public void reduce(Text key, Iterable&lt;Text&gt; values,Context context) throws IOException,InterruptedException&#123;            if(time == 0)&#123;   //输出表头                context.write(new Text(&quot;grand_child&quot;), new Text(&quot;grand_parent&quot;));                time++;            &#125;            int grand_child_num = 0;             String grand_child[] = new String[10];            int grand_parent_num = 0;            String grand_parent[]= new String[10];            Iterator ite = values.iterator();            while(ite.hasNext())&#123;                String record = ite.next().toString();                int len = record.length();                int i = 2;                if(len == 0) continue;                char relation_type = record.charAt(0);                String child_name = new String();                String parent_name = new String();                //获取value-list中value的child                while(record.charAt(i)!= &#x27;+&#x27;)&#123;                   child_name = child_name + record.charAt(i);                   i++;                &#125;                i=i+1;                //获取value-list中value的parent                while(i&lt;len)&#123;                   parent_name = parent_name+record.charAt(i);                   i++;                &#125;                 //左表，取出child放入grand_child                if(relation_type  == &#x27;1&#x27;)&#123;                   grand_child[grand_child_num]  = child_name;                    grand_child_num++;                &#125;                else&#123;//右表，取出parent放入grand_parent                   grand_parent[grand_parent_num]  = parent_name;                   grand_parent_num++;                &#125;            &#125;             if(grand_parent_num != 0 &amp;&amp; grand_child_num != 0 )&#123;                for(int m = 0;m&lt;grand_child_num;m++)&#123;                  for(int n=0;n&lt;grand_parent_num;n++)&#123;                                                                        context.write(new  Text(grand_child[m], new Text(grand_parent[n]);                       //输出结果                   &#125;                &#125;             &#125;        &#125;     &#125;    public static void main(String[] args) throws Exception&#123;        //  TODO Auto-generated method stub         Configuration conf = new Configuration();               conf.set(&quot;fs.default.name&quot;,&quot;hdfs://localhost:9000&quot;);        String[] otherArgs = new String[]&#123;&quot;input&quot;,&quot;output&quot;&#125;; /* 直接设置输入参数 */        if (otherArgs.length != 2) &#123;            System.err.println(&quot;Usage: wordcount &lt;in&gt;&lt;out&gt;&quot;);            System.exit(2);            &#125;               Job job =  Job.getInstance(conf,&quot;Single table join&quot;);        job.setJarByClass(simple_data_mining.class);        job.setMapperClass(Map.class);         job.setReducerClass(Reduce.class);         job.setOutputKeyClass(Text.class);        job.setOutputValueClass(Text.class);        FileInputFormat.addInputPath(job, new Path(otherArgs[0]);        FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]);        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;
自己打包文件
hadoop jar /usr/local/hadoop/myapp/simple_data_mining.jar input outputhadoop dfs -cat output/*

java
java
更新测试文件
cat &gt;a.txt&lt;&lt;&quot;EOF&quot;child parentSteven LucySteven JackJone LucyJone JackLucy MaryLucy FrankJack AliceJack JesseDavid AliceDavid JessePhilip DavidPhilip AlmaMark DavidMark AlmaEOFhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputhdfs dfs -put a.txt input
更新simple_data_mining.java
import java.io.IOException;import java.util.*;import org.apache.hadoop.conf.Configuration;import org.apache.hadoop.fs.Path;import org.apache.hadoop.io.Text;import org.apache.hadoop.mapreduce.Job;import org.apache.hadoop.mapreduce.Mapper;import org.apache.hadoop.mapreduce.Reducer;import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;public class simple_data_mining &#123;    public static int time = 0; // 控制表头只输出一次    /**     * 输入：每行两个字段 child parent     * 输出：grand_child grand_parent     */    // Mapper：将每条记录正序和逆序分别输出，标识左表和右表    public static class Map extends Mapper&lt;Object, Text, Text, Text&gt; &#123;        public void map(Object key, Text value, Context context) throws IOException, InterruptedException &#123;            String line = value.toString().trim();            if (line.isEmpty() || line.startsWith(&quot;child&quot;)) return;            String[] parts = line.split(&quot;\\s+&quot;);            if (parts.length &lt; 2) return;            String child = parts[0];            String parent = parts[1];            // 左表输出：parent -&gt; left+child+parent            context.write(new Text(parent), new Text(&quot;1+&quot; + child + &quot;+&quot; + parent));            // 右表输出：child -&gt; right+child+parent            context.write(new Text(child), new Text(&quot;2+&quot; + child + &quot;+&quot; + parent));        &#125;    &#125;    // Reducer：将同一key下的左右表数据组合，找出所有祖孙关系    public static class Reduce extends Reducer&lt;Text, Text, Text, Text&gt; &#123;        public void reduce(Text key, Iterable&lt;Text&gt; values, Context context)                throws IOException, InterruptedException &#123;            List&lt;String&gt; leftList = new ArrayList&lt;&gt;();            List&lt;String&gt; rightList = new ArrayList&lt;&gt;();            for (Text val : values) &#123;                String record = val.toString();                if (record.isEmpty()) continue;                char relationType = record.charAt(0);                String[] fields = record.substring(2).split(&quot;\\+&quot;);                if (fields.length &lt; 2) continue;                String child = fields[0];                String parent = fields[1];                if (relationType == &#x27;1&#x27;) &#123;                    leftList.add(child); // 左表：child 是孙子                &#125; else &#123;                    rightList.add(parent); // 右表：parent 是祖父                &#125;            &#125;            // 输出所有可能的祖孙组合            if (time == 0) &#123;                context.write(new Text(&quot;grand_child&quot;), new Text(&quot;grand_parent&quot;));                time++;            &#125;            for (String lc : leftList) &#123;                for (String rp : rightList) &#123;                    context.write(new Text(lc), new Text(rp));                &#125;            &#125;        &#125;    &#125;    public static void main(String[] args) throws Exception &#123;        Configuration conf = new Configuration();        // 设置新的 fs.defaultFS，并设置本地执行模式        conf.set(&quot;fs.defaultFS&quot;, &quot;hdfs://localhost:9000&quot;);        conf.set(&quot;mapreduce.framework.name&quot;, &quot;local&quot;);        conf.set(&quot;mapreduce.jobtracker.address&quot;, &quot;local&quot;);        // 写死输入输出路径        String inputPath = &quot;hdfs://localhost:9000/user/hadoop/input&quot;;        String outputPath = &quot;hdfs://localhost:9000/user/hadoop/output&quot;;        Job job = Job.getInstance(conf, &quot;Simple Data Mining - Grandchild to Grandparent&quot;);        job.setJarByClass(simple_data_mining.class);        job.setMapperClass(Map.class);        job.setReducerClass(Reduce.class);        job.setOutputKeyClass(Text.class);        job.setOutputValueClass(Text.class);        FileInputFormat.addInputPath(job, new Path(inputPath));        FileOutputFormat.setOutputPath(job, new Path(outputPath));        System.exit(job.waitForCompletion(true) ? 0 : 1);    &#125;&#125;

hadoop dfs -cat output/*

Hive

就在下载页面空白处，右键打开终端
sudo ls

sudo tar -xf apache-hive-3.1.3-bin.tar.gzsudo mv apache-hive-3.1.3-bin /usr/local/hiveecho &quot;export HIVE_HOME=/usr/local/hive&quot; &gt;&gt; ~/.bashrcecho &quot;export PATH=\$HIVE_HOME/bin:\$PATH&quot; &gt;&gt; ~/.bashrcsource ~/.bashrcsudo tee /usr/local/hive/conf/hive-site.xml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;&lt;configuration&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;    &lt;value&gt;jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true&amp;amp;useSSL=false&lt;/value&gt;    &lt;description&gt;JDBC connect string for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;    &lt;description&gt;Driver class name for a JDBC metastore&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;    &lt;value&gt;hive&lt;/value&gt;    &lt;description&gt;username to use against metastore database&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;    &lt;value&gt;hive&lt;/value&gt;    &lt;description&gt;password to use against metastore database&lt;/description&gt;  &lt;/property&gt;  &lt;property&gt;    &lt;name&gt;hive.exec.mode.local.auto&lt;/name&gt;    &lt;value&gt;true&lt;/value&gt;  &lt;/property&gt;&lt;/configuration&gt;EOFsudo mv mysql-connector-java-5.1.46.tar&#123;\(2\).gz,.gz&#125;sudo tar -xf mysql-connector-java-5.1.46*.tar.gzsudo mv mysql-connector-java-5.1.46/mysql-connector-java-5.1.46.jar /usr/local/hive/lib/sudo chown hadoop:hadoop /usr/local/hive/lib/mysql-connector-java-5.1.46.jarsudo chmod 644 /usr/local/hive/lib/mysql-connector-java-5.1.46.jar
安装mysql
sudo apt remove mariadb* -y#上面报错不用管sudo apt install -y net-tools wget mysql-serversudo systemctl enable --now mysql
进入mysql初始化
sudo mysql_secure_installation
下面开始要手动输入了，输入yes或no
下面开始要手动输入了，输入yes或no
下面开始要手动输入了，输入yes或no
下面开始要手动输入了，输入yes或no
1. Press y|Y for Yes, any other key for No:   noPlease set the password for root here.New password:                 输入密码123456Re-enter new password:        输入密码123456....2. Remove anonymous users?  :   yes....3.Disallow root login remotely?  : no....4.Remove test database and access to it?: yes ....5.Reload privilege tables now? : yes
登入数据库床创建用户
cdsudo mysql -uroot -p123456UNINSTALL PLUGIN validate_password;create database hive;grant all on *.* to hive@localhost identified by &#x27;hive&#x27;;flush privileges; exitsudo sed -i &#x27;s/^bind-address\s*=\s*127.0.0.1/bind-address = 0.0.0.0/&#x27; /etc/mysql/mysql.conf.d/mysqld.cnfsudo sed -i &#x27;s/^mysqlx-bind-address\s*=\s*127.0.0.1/mysqlx-bind-address = 0.0.0.0/&#x27; /etc/mysql/mysql.conf.d/mysqld.cnfsudo systemctl restart mysql

升级元数据
sudo rm -rf /usr/local/hive/lib/guava*.jarsudo cp /usr/local/hadoop/share/hadoop/common/lib/guava-*.jar /usr/local/hive/lib/sudo cp /home/hadoop/下载/mysql-connector-java-5.1.46.tar* /usr/local/hive/lib/sudo cp /home/hadoop/Downloads/mysql-connector-java-5.1.46.tar* /usr/local/hive/lib/start-all.sh#hive初始化，这个命令只需要运行一次schematool -dbType mysql -initSchema

这个是成功的意思
启动hive，要启动hadoop
hiveshow databases;exit;

这个图片交到9.9去
实验五

自己启动hadoop，在下载文件夹空白处右键
sudo mv data ../cdls | grep data

启动hive
hive
（1）创建内部表 stocks
表A-6 stocks表结构



col_name
data_type




exchange
string


symbol
string


ymd
string


price_open
float


price_high
float


price_low
float


price_close
float


volume
int


price_adj_close
float



create table if not exists stocks(`exchange` string,`symbol` string,`ymd` string,`price_open` float,`price_high` float,`price_low` float,`price_close` float,`volume` int,`price_adj_close` float)row format delimited fields terminated by &#x27;,&#x27;;

（2）创建一个外部分区表dividends（分区字段为exchange和symbol）
表A-7 dividends表结构



col_name
data_type




ymd
string


dividend
float


exchange
string


symbol
string



create external table if not exists dividends(`ymd` string,`dividend` float)partitioned by(`exchange` string ,`symbol` string)row format delimited fields terminated by &#x27;,&#x27;;

（3）从stocks.csv文件向stocks表中导入数据。
load data local inpath &#x27;/home/hadoop/data/stocks/stocks.csv&#x27; overwrite into table stocks;

（4） 创建一个未分区的外部表dividends_unpartitioned，并从dividends.csv向其中导入数据，表结构如表A-8所示。
​    表A-8 dividends_unpartitioned表结构



col_name
data_type




ymd
string


dividend
float


exchange
string


symbol
string



create external table if not exists dividends_unpartitioned(`exchange` string ,`symbol` string,`ymd` string,`dividend` float)row format delimited fields terminated by &#x27;,&#x27;;load data local inpath &#x27;/home/hadoop/data/dividends/dividends.csv&#x27; overwrite into table dividends_unpartitioned;

（5）通过对dividends_unpartitioned的查询语句，利用Hive自动分区特性向分区表dividends各个分区中插入对应数据。
set hive.exec.dynamic.partition=true;set hive.exec.dynamic.partition.mode=nonstrict;set hive.exec.max.dynamic.partitions.pernode=1000;insert overwrite table dividends partition(`exchange`,`symbol`) select `ymd`,`dividend`,`exchange`,`symbol` from dividends_unpartitioned;
运行一分钟，有点慢

（6）查询IBM公司(symbol=IBM)从2000年起所有支付股息的交易日(dividends表中有对应记录)的收盘价(price_close)。
select s.ymd,s.symbol,s.price_closefrom stocks s LEFT SEMI JOIN dividends dON s.ymd=d.ymd and s.symbol=d.symbolwhere s.symbol=&#x27;IBM&#x27; and year(ymd)&gt;=2000;

（7）查询苹果公司(symbol=AAPL)2008年10月每个交易日的涨跌情况，涨显示rise，跌显示fall,不变显示unchange。
select ymd,case    when price_close-price_open&gt;0 then &#x27;rise&#x27;    when price_close-price_open&lt;0 then &#x27;fall&#x27;    else &#x27;unchanged&#x27;end as situationfrom stockswhere symbol=&#x27;AAPL&#x27; and substring(ymd,0,7)=&#x27;2008-10&#x27;;

（8）查询stocks表中收盘价(price_close)比开盘价(price_open)高得最多的那条记录的交易所(exchange)、股票代码(symbol)、日期(ymd)、收盘价、开盘价及二者差价。
select `exchange`,symbol,ymd,price_close-price_open as `diff`from(    select *    from stocks    order by price_close-price_open desc    limit 1)t;

（9）从stocks表中查询苹果公司（symbol=AAPL）年平均调整后收盘价(price_adj_close) 大于50美元的年份及年平均调整后收盘价。
select    year(ymd) as `year`,    avg(price_adj_close) as avg_price from stockswhere `exchange`=&#x27;NASDAQ&#x27; and symbol=&#x27;AAPL&#x27;group by year(ymd)having avg_price &gt; 50;

（10）查询每年年平均调整后收盘价(price_adj_close)前三名的公司的股票代码及年平均调整后收盘价。
SET mapreduce.job.reduces=2;select t2.year, t2.symbol, t2.avg_pricefrom (    select *,           row_number() over (partition by year order by avg_price desc) as rn    from (        select            year(ymd) as year,            symbol,            avg(price_adj_close) as avg_price        from stocks        group by year(ymd), symbol    ) t1) t2where t2.rn &lt;= 3;

(9.9.3)
1.利用mapreduce实现词频统计
sudo ls &amp;&amp; start-all.sh
cdhdfs dfs -rm -r inputhdfs dfs -rm -r outputhdfs dfs -mkdir inputrm -rf inputmkdir inputecho &quot;hello world&quot; &gt; input/file1.txtecho &quot;hello hadoop&quot; &gt; input/file2.txthdfs dfs -put input/* input/hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount input outputhdfs dfs -cat output/*

2.利用hive实现词频统计
hive
create table docs(line string);load data inpath &#x27;file:///home/hadoop/input&#x27; overwrite into table docs;create table word_count as select word, count(1) as count from(select explode(split(line,&#x27; &#x27;))as word from docs) wgroup by wordorder by word;
对文本进行“分词 + 炸裂”，得到所有单词列表
SELECT explode(split(line, &#x27; &#x27;)) AS word FROM docs;

对单词进行分组并计数
SELECT word, COUNT(*) AS countFROM (  SELECT explode(split(line, &#x27; &#x27;)) AS word FROM docs) wGROUP BY word;


三张图片都交到9.9.3

]]></content>
  </entry>
  <entry>
    <title>工学云自动签到</title>
    <url>/posts/53959/</url>
    <content><![CDATA[
工学云自动签到
前情提要
原作者项目：Rockytkg/AutoMoGuDingCheckIn: 工学云自动打卡，支持多用户、自定义地区、周报、日报、月报，支持免服务器运行
帮作者点一下右上角的star（星星）

仅供学习交流测试！您必须在下载或Fork此源码的24小时内删除所有内容！！
1、请务必认真阅读此文档后继续！
2、本项目开源&amp;免费，所有开发均仅限于学习交流，禁止用于任何商业用途。
3、如基于或参考此项目进行二次开发，请注明原作者并使用GPL2.0许可证开源
4、使用本项目对自己账号有一定的风险，在这里本站不承担任何责任和后果，所有危险后果自负，一切由使用者本人负责（到这里如果介意了可以退出本站，不用继续看了）

  效果呈现


使用教程
环境

Python 3.10+
pip（Python 包管理器）

服务器部署（可以先用虚拟机测试）
测试机centos，openeuler
#设置pip国内镜像源mkdir ~/.pipcat &gt;~/.pip/pip.conf &lt;&lt; &quot;EOF&quot;[global]index-url = http://mirrors.aliyun.com/pypi/simple/ [install]trusted-host=mirrors.aliyun.comEOF#安装python3yum install -y python3.11 python3.11-pipsudo rm /usr/bin/pythonsudo ln -s /usr/bin/python3.11 /usr/bin/pythonpython3 -m pip install --upgrade pip
拉取代码
#安装git yum install -y git#在root目录下执行cd /root#拉取代码(这个拉取不了就用下面国内镜像拉取)git clone https://github.com/Rockytkg/AutoMoGuDingCheckIn.git AutoMoGuDingCheckIn#国内镜像拉取git clone https://github.site/Rockytkg/AutoMoGuDingCheckIn.git AutoMoGuDingCheckIn
配置个人信息
vim AutoMoGuDingCheckIn/user/example.json
设置个人信息

设置邮箱发送


收件邮箱一定要是QQ邮箱

例子：我用的发件邮箱是网易的，收件邮箱一定要是QQ邮箱不然最后的微信邮件提醒，你操作不了&#123;    &quot;type&quot;: &quot;SMTP&quot;,    &quot;enabled&quot;: true,    &quot;host&quot;: &quot;Smtp.163.com&quot;,    &quot;port&quot;: 465,    &quot;username&quot;: &quot;xxxxxx@163.com&quot;,      &quot;password&quot;: &quot;网易授权码，按照下面教程获取&quot;,    &quot;from&quot;: &quot;严千屹&quot;,    &quot;to&quot;: &quot;xxxxx@qq.com&quot;   #一定要是qq邮箱&#125;
那个smtp密码是授权码，不是邮箱密码，我用的是网易的
网易邮箱（126/163）：授权码获取攻略_网易邮箱授权码-CSDN博客
自行获取就行了
发件邮箱要是想用其他邮箱类似操作获取授权码就行，但是收件邮箱一定要是QQ邮箱
填好之后，这就是一个人的信息了
多用户配置,有多个人，你就看下面，没有就略过
下载这个配置文件：example.json
修改信息之后，更改文件名（随意），任何运行脚本即可。

最后再运行代码，会帮你自动设置计划任务，自动打卡
cd /root/AutoMoGuDingCheckIn/ &amp;&amp; chmod +x setup.shbash setup.sh
按照他的指示操作，进行设置打卡时间就行了，这样他会按照你的时间，每天进行打卡，比如说你设置的事实8,17  那么他就会每天早上8点（上班），下午17点（下班）进行打卡

无服务器部署
Github 工作流（免服务器部署）
参见 Wiki
切记不要将配置文件上传到公开仓库，否则会造成信息泄露。请使用环境变量！！！，已经泄露请立刻修改工学云密码！！！
微信邮件推送
微信搜索QQ邮件提醒

绑定好邮箱

这样，等每一次打卡之后，就会邮件推送，然后就是下面这样的


 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <tags>
        <tag>工学云</tag>
      </tags>
  </entry>
  <entry>
    <title>运维必备工具安装</title>
    <url>/posts/1b1a13ed/</url>
    <content><![CDATA[
运维必备工具安装
系统测试：OpenEuler24.03LTS，Centos 8 stream
理论上不限制系统，其他系统可对一些命令自行做修改即可
Nginx（RPM安装）
资料来源：Nginx入门笔记 | 严千屹博客
官方文档：nginx：Linux 软件包
截止2025年4月20日目前：nginx最新版本：1.26.3

centos7或centos8
sudo yum install -y tar gcc make pcre pcre-devel zlib zlib-devel openssl openssl-develsudo yum install yum-utils -y#添加nginx源sudo cat &gt;/etc/yum.repos.d/nginx.repo &lt;&lt; &quot;EOF&quot;[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueEOFsudo yum install nginx -ysudo systemctl enable nginx --nownginx -v
因为没有适配openeuler的版本，这里直接用centos8的来代替，兼容的没关系，你可以根据你的系统去自行替换
原本是$releasever的，但是没有openeuler的版本直接用8来代替也就是centos8，openeuler兼容centos
sudo yum install -y tar gcc make pcre pcre-devel zlib zlib-devel openssl openssl-develsudo cat &gt;/etc/yum.repos.d/nginx.repo &lt;&lt; &quot;EOF&quot;[nginx-stable]name=nginx stable repo#baseurl=http://nginx.org/packages/centos/$releasever/$basearch/baseurl=http://nginx.org/packages/centos/8/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repo#baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/baseurl=http://nginx.org/packages/mainline/centos/8/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=trueEOFsudo yum install nginx -ysudo systemctl enable nginx --nownginx -v
Docker
截止2025年4月20日目前：
docker-compose最新版2.35.1 版
docker-ce最新版：Docker 文档 26.1.3
centos7或centos8
sudo curl -L &quot;https://qygit.qianyisky.cn/https://github.com/docker/compose/releases/download/v2.35.1/docker-compose-linux-x86_64&quot; -o /usr/local/bin/docker-compose#卸载旧版本sudo yum -y remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum remove docker-ce docker-ce-cli containerd.io docker-compose docker-machine docker-swarm -ysudo rm /etc/yum.repos.d/docker-ce.reposudo rm -rf /var/lib/dockersudo yum install -y yum-utils device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo yum install docker-ce -ysudo systemctl enable --now dockersudo chmod +x /usr/local/bin/docker-composesudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,    &quot;https://docker.qianyios.top&quot;,    &quot;https://ghcr.nju.edu.cn&quot;,    &quot;https://k8s.nju.edu.cn&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart dockerdocker-compose --versiondocker version
openeuler
sudo curl -L &quot;https://qygit.qianyisky.cn/https://github.com/docker/compose/releases/download/v2.35.1/docker-compose-linux-x86_64&quot; -o /usr/local/bin/docker-compose#卸载旧版本sudo yum -y remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-enginesudo yum remove docker-ce docker-ce-cli containerd.io docker-compose docker-machine docker-swarm -ysudo rm /etc/yum.repos.d/docker-ce.reposudo rm -rf /var/lib/dockersudo yum install -y device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.reposudo sed -i &#x27;s/\$releasever/8/g&#x27; /etc/yum.repos.d/docker-ce.reposudo yum install docker-ce docker-ce-cli containerd.io -ysudo systemctl enable --now dockersudo chmod +x /usr/local/bin/docker-composesudo tee /etc/docker/daemon.json &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [    &quot;https://docker.xuanyuan.me&quot;,    &quot;https://docker.m.daocloud.io&quot;,    &quot;https://docker.1ms.run&quot;,    &quot;https://docker.1panel.live&quot;,    &quot;https://registry.cn-hangzhou.aliyuncs.com&quot;,    &quot;https://docker.qianyios.top&quot;,    &quot;https://ghcr.nju.edu.cn&quot;,    &quot;https://k8s.nju.edu.cn&quot;  ],  &quot;max-concurrent-downloads&quot;: 10,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-level&quot;: &quot;warn&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;3&quot;  &#125;,  &quot;data-root&quot;: &quot;/var/lib/docker&quot;&#125;EOFsystemctl daemon-reloadsystemctl restart dockerdocker-compose --versiondocker version
PHP(RPM)
截止2025年4月20日目前：PHP最新版8.4.6
centos 8 stream
默认安装最新版8.3.19
yum update -yyum install yum-utils -yrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpmyum install -y php php-fpm php-cli php-common php-devel php-gd php-pdo php-mbstring php-bcmath php-xml php-process php-intl php-soap php-ldap php-opcache 
openeuler24.03lts
欧拉系统有自己的仓库,默认安装最新版8.3.19
yum update -yyum install -y php php-fpm php-cli php-common php-devel php-gd php-pdo php-mbstring php-bcmath php-xml php-process php-intl php-soap php-ldap php-opcache php -v
Mysql LTS
截止2025年4月20日目前：Mysql LTS最新版8.4.5
资料来源：Linux安装Mysql8.4.2 LTS | 严千屹博客


这是在root目录下,自行去到root目录，你也可以自己定义路径
注意：如果需要搭载php使用，需要安装php7.2，因为rpm -ivh mysql-community-libs-compat是php的依赖。；如果不安装php，则无需安装php7.2的依赖。
这里就演示需要php，版本7.2以上，安装教程
centos 8 stream,openeuler
mkdir mysql-installtar -xvf mysql-8.4*.rpm-bundle.tar -C mysql-installcd mysql-install# 卸载 mariadb 相关的包yum remove mariadb mariadb-config mariadb-libs -y# 如果之前安装过 MySQL 社区版，也需要一并移除yum remove mysql-community-common mysql-community-icu-data-files mysql-community-client-plugins mysql-community-libs mysql-community-client mysql-community-server mysql-community-libs-compat -y# 最好按照以下顺序按照，不然会报错#全局的依赖（common）rpm -ivh mysql-community-common-8.4.5-1.el8.x86_64.rpmrpm -ivh mysql-community-icu-data-files-8.4.5-1.el8.x86_64.rpmrpm -ivh mysql-community-client-plugins-8.4.5-1.el8.x86_64.rpmrpm -ivh mysql-community-libs-8.4.5-1.el8.x86_64.rpmrpm -ivh mysql-community-client-8.4.5-1.el8.x86_64.rpmrpm -ivh mysql-community-server-8.4.5-1.el8.x86_64.rpm#php依赖文件rpm -ivh mysql-community-libs-compat-8.4.5-1.el8.x86_64.rpmsystemctl enable mysqld --nowmysqlpasswd=$(awk &#x27;/temporary password/ &#123;print $NF&#125;&#x27; /var/log/mysqld.log)mysql -u root -p&quot;$mysqlpasswd&quot;#Qianyios@007是修改后的密码ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Qianyios@007&#x27;;FLUSH PRIVILEGES;exitmysql -uroot -pQianyios@007
例子1：可以设置123456为密码
mysql -uroot -pQianyios@007ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Qianyios@007&#x27;;SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;SET GLOBAL validate_password.policy = LOW;SET GLOBAL validate_password.length = 6;ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;FLUSH PRIVILEGES;exitmysql -uroot -p123456
containerd
sudo yum install -y yum-utilssudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo yum clean all &amp;&amp; yum makecachesudo yum install -y containerd.iosudo mkdir -p /etc/containerd/certs.d/docker.iosudo mkdir -p /etc/containerd/certs.d/registry.k8s.iosudo mkdir -p /etc/containerd/certs.d/k8s.gcr.iosudo mkdir -p /etc/containerd/certs.d/ghcr.iosudo mkdir -p /etc/containerd/certs.d/gcr.iosudo mkdir -p /etc/containerd/certs.d/quay.iosudo mkdir -p /etc/containerd/certs.d/registry-1.docker.iosudo tee /etc/containerd/certs.d/docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://docker.io&quot; [host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry-1.docker.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://registry-1.docker.io&quot;[host.&quot;https://registry.cn-hangzhou.aliyuncs.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.xuanyuan.me&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1ms.run&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.1panel.live&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://docker.qianyios.top/&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;][host.&quot;https://reg-mirror.giniu.com&quot;]   capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/k8s.gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://k8s.gcr.io&quot;[host.&quot;https://registry.aliyuncs.com/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/ghcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://ghcr.io&quot;[host.&quot;https://ghcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/gcr.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://gcr.io&quot;[host.&quot;https://gcr.m.daocloud.io/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/registry.k8s.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;registry.k8s.io&quot;[host.&quot;k8s.m.daocloud.io&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;, &quot;push&quot;][host.&quot;https://registry.aliyuncs.com/v2/google_containers&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo tee /etc/containerd/certs.d/quay.io/hosts.toml &gt; /dev/null &lt;&lt;&#x27;EOF&#x27;server = &quot;https://quay.io&quot;[host.&quot;https://quay.tencentcloudcr.com/&quot;]  capabilities = [&quot;pull&quot;, &quot;resolve&quot;]EOFsudo sh -c &#x27;containerd config default &gt; /etc/containerd/config.toml&#x27;sudo sed -i &#x27;s#sandbox_image = &quot;registry.k8s.io/pause:.*&quot;#sandbox_image = &quot;registry.aliyuncs.com/google_containers/pause:3.10&quot;#&#x27; /etc/containerd/config.tomlsudo sed -i &#x27;s/SystemdCgroup = false/SystemdCgroup = true/g&#x27; /etc/containerd/config.tomlsed -i &#x27;/\[plugins\.&quot;io\.containerd\.grpc\.v1\.cri&quot;\.registry\]/!b;n;s/config_path = &quot;&quot;/config_path = &quot;\/etc\/containerd\/certs.d&quot;/&#x27; /etc/containerd/config.toml# 重启 containerd 服务sudo systemctl daemon-reloadsudo systemctl restart containerd.servicesudo ctr image ls
系统更换Yum源办法
阿里网站：repo安装包下载_开源镜像站-阿里云 (aliyun.com)
Centos Stream 8
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/wget -O /etc/yum.repos.d/CentOS-Stream-AppStream.repo https://mirrors.aliyun.com/repo/centos-stream/8/CentOS-Stream-AppStream.repowget -O /etc/yum.repos.d/CentOS-Stream-BaseOS.repo https://mirrors.aliyun.com/repo/centos-stream/8/CentOS-Stream-BaseOS.repodnf clean all &amp;&amp; dnf makecache
Centos 7
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/wget -O /etc/yum.repos.d/Centos-7.repo https://mirrors.aliyun.com/repo/Centos-7.repoyum clean all &amp;&amp; yum makecache
Centos 8
mkdir repo.bakmv /etc/yum.repos.d/* repo.bak/curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repoyum clean all &amp;&amp; yum makecache
Rocky 系列
sed -e &#x27;s|^mirrorlist=|#mirrorlist=|g&#x27; \    -e &#x27;s|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27; \    -e&#x27;s|^#baseurl=http://mirrors.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g&#x27; \    -i.bak \    /etc/yum.repos.d/Rocky-*.repoyum clean all &amp;&amp; yum makecache
运维脚本（更新ing）
wget https://blog.qianyios.top/file/qy-yunwei.shbash qy-yunwei.sh

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Centos 8</tag>
        <tag>Docker</tag>
        <tag>Centos 7</tag>
        <tag>OpenEuler</tag>
        <tag>Mysql</tag>
        <tag>Nginx</tag>
        <tag>Php</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络技术课程综合实验</title>
    <url>/posts/f5e08620/</url>
    <content><![CDATA[
计算机网络技术课程综合实验
空拓扑下载：空拓扑
前情提要
自行安装ensp软件，结合教程来安装
华为ensp模拟器安装教程 | 严千屹博客
打开显示端口

简单说一下一些常识
1.用户视图&lt;Huawei&gt;： - 这是登录后的初始界面，在这里可以执行一些基本信息查看和简单的命令。
2.系统视图：[Huawei] - 输入system-view或者sys进入此模式，用于全局性的设备配置。
3.接口视图：[Huawei-GigabitEthernet0/0/1] - 使用interface或int命令进入特定接口进行配置。
4.协议视图：[Huawei-ospf-1] - 对应于路由协议等高级功能的配置。

以后的每一步实验都会从&lt;Huawei&gt;开始，如果你是系统视图，自行输入q退回用户试图

基础配置
要求：
1、给6个路由器AR1到AR6，6个交换机LSW1到LSW6全部改好设备名字，设备名称修改为自己名字首字母缩写+设备名。比如最左边的AR1路由器，学生名字为张三，则设备名称改为 yjxAR1

2、给第一行的AR1、AR2、AR3、AR4、AR5共5个路由器的接口，配置好IP地址。在网络拓扑图明确给出来的，按图示的配置。没有明确给出来的，则统一默认规则：左右并排连接的，左边接口最后1个字节配1，右边接口配2； 上下连接的，下边接口配1，上边接口配2.

如果刚开始是&lt;Huawei&gt;也叫用户视图就可以直接输入下面的指令，如果是[Huawei]也叫系统视图，要输入一个quit或q进行退出。这样是为了方便统一大家的输入，我们全部退回到用户视图，这样就可以全部输入指令了

以下简写的命令，回到前情提要自己看
路由器配置

主机位没有明确给出来的，则统一默认规则：左右并排连接的，左边接口最后1个字节配1，右边接口配2； 上下连接的，下边接口配1，上边接口配2.

yjxAR1
syssysname yjxAR1int g0/0/2ip address 10.1.3.2 30qint g0/0/1ip address 10.1.1.2 30qint g0/0/0ip address 10.1.2.2 30qint g4/0/0ip address 10.12.100.10 24qq
复制全部，粘贴全部一步到位

yjxAR2
syssysname yjxAR2int g0/0/0ip address 10.12.100.20 24qint s4/0/0ip address 23.1.1.1 24qq

yjxAR3
syssysname yjxAR3int s4/0/0ip address 23.1.1.2 24qint g0/0/0ip address 34.1.1.1 30qq

yjxAR4
syssysname yjxAR4int g0/0/0ip address 34.1.1.2 30qint g0/0/1ip address 45.1.1.1 30qq

yjxAR5
un te mosyssysname yjxAR5int g0/0/0ip address 45.1.1.2 30q

3、重要提醒：所有网络设备的配置，记得最后用save命令保存。否则软件关闭后将不保留。

pc配置静态ip
4、给网络拓扑图最底下的PC，按图配置好静态IP地址。










AR路由表展示





第二周
配置vlan
开启LSW1、LSW3、LSW4，关闭LSW2避免形成环路，配置VLAN库，配置交换机端口属性，配置交换机端口归属哪些VLAN
yjxLSW3
syssysname yjxLSW3#配置VLAN库vlan batch 10 20#配置交换机端口属性int g0/0/1port link-type accessint g0/0/2port link-type accessint g0/0/5port link-type accessint g0/0/3port link-type trunk#配置交换机端口归属哪些VLAN或哪些VLAN能通过int g0/0/1port default vlan 10int g0/0/2port default vlan 20int g0/0/5port default vlan 10int g0/0/3port trunk allow-pass vlan 10 20 #查看配置信息display vlan

yjxLSW4
un te mosyssysname yjxLSW4vlan batch 10 20int g0/0/1port link-type accessint g0/0/2port link-type accessint g0/0/3port link-type trunkint g0/0/1port default vlan 10int g0/0/2port default vlan 20int g0/0/3port trunk allow-pass vlan 10 20display vlan

配置网关
在LSW1交换机上，配置VLAN的虚拟接口SVI，配置SVI的IP地址，从而实现各VLAN的连通。一般配置VLAN接口，是在核心交换机上，本拓扑图即为LSW1。PC1到PC4补充上对应的网关，即SVI的IP地址
在yjxLSW1配置网关
yjxLSW1
un te mosyssysname yjxLSW1vlan batch 10 20int vlan 10ip address 192.168.1.254 24int vlan 20ip address 192.168.2.254 24dis ip int br

最后LSW1,3,4全部退回到用户视图，保存
save
给pc1-pc4配置网关

第三周
开启这两台机

配置链路聚合
yjxLSW1
un te mosyssysname yjxLSW1int Eth-Trunk 1port link-type trunkport trunk allow-pass vlan 10 20int Eth-Trunk 1mode lacp-staticmax active-linknumber 2trunkport g0/0/3trunkport g0/0/4trunkport g0/0/6
yjxLSW2
un te mosyssysname yjxLSW2int Eth-Trunk 1port link-type trunkport trunk allow-pass vlan 10 20int Eth-Trunk 1mode lacp-staticmax active-linknumber 2trunkport g0/0/3trunkport g0/0/4trunkport g0/0/6
两个交换机一起打
dis eth-trunk

当连接GE0/0/3的线路出现问题时，会自动切换到使用GE0/0/4和GE0/0/6端口的线路。
在此实验中，手工将GE0/0/3的线路删除，再显示链路聚合的状态信息
右键线路删除，注意如果3口还在说明你删错了，连回来


你测试完记得加回来

然后保存关机

第四周
本实验通过配置动态路由RIP协议，实现内网全网互通。
删除三条链路聚合的线，并且开起圈内的机子

开启内网的所有设备：R1、LSW1、LSW2、LSW3、LSW4，Serve1及内网PC。为避免环路影响，本次实验将连接LSW1与LSW2的聚合链路（即心跳线）先删除断开。
任务1
配置LSW1、LSW2、LSW3、LSW4的VLAN库，端口属性，端口归属。其中
yjxLSW1的VLAN库有VLAN 10，VLAN 20，VLAN 110
un te mosysvlan 110dis vlan

yjxLSW2的VLAN库有VLAN 10，VLAN 20，VLAN 120
un te mosysvlan 120dis vlan

yjxLSW3的VLAN库有VLAN 10，VLAN 20 （之前已配置）

yjxLSW4的VLAN库有VLAN 10，VLAN 20 （之前已配置）

yjxLSW1中，GE0/0/1口和GE0/0/2口为Trunk口，允许VLAN 10和VLAN 20通过
GE0/0/5口为Access口，归属VLAN 110
Eth-Trunk1为Trunk口，允许VLAN 10和VLAN 20通过（之前已配置）
un te mosysvlan batch 10 20int g0/0/1port link-type trunkport trunk allow-pass vlan 10 20int g0/0/2port link-type trunkport trunk allow-pass vlan 10 20int g0/0/5port link-type accessport default vlan 110dis vlan

yjxLSW2中，GE0/0/1口和GE0/0/2口为Trunk口，允许VLAN 10和VLAN 20通过
GE0/0/5口为Access口，归属VLAN 120
Eth-Trunk1为Trunk口，允许VLAN 10和VLAN 20通过
un te mosysvlan batch 10 20int g0/0/1port link-type trunkport trunk allow-pass vlan 10 20int g0/0/2port link-type trunkport trunk allow-pass vlan 10 20int g0/0/5port link-type accessport default vlan 120dis vlan

yjxLSW3中，GE0/0/3口和GE0/0/4口为Trunk口，允许VLAN 10和VLAN 20通过（3口之前已配置）
GE0/0/1口和GE0/0/5口为Access口，归属VLAN 10（之前已配置）
GE0/0/2口为Access口，归属VLAN 20（之前已配置）
un te mosysint g0/0/4port link-type trunkport trunk allow-pass vlan 10 20dis vlan

yjxLSW4中，GE0/0/3口和GE0/0/4口为Trunk口，允许VLAN 10和VLAN 20通过（3口之前已配置）
GE0/0/1口为Access口，归属VLAN 10（之前已配置）
GE0/0/2口为Access口，归属VLAN 20（之前已配置）
un te mosysint g0/0/4port link-type trunkport trunk allow-pass vlan 10 20dis vlan

任务2
给AR1路由器的4个端口配置IP地址；给LSW1的VLAN10、VLAN20、VLAN110配置IP地址；给LSW2的VLAN10、VLAN、VLAN120配置IP地址。遵行未明确指示的情况下，IP地址最后一个字节：左边为1，右边为2；下面为1，上面为2。
yjxAR1
un te mosyssysname yjxAR1int g0/0/2ip address 10.1.3.2 30int g0/0/1ip address 10.1.1.2 30int g0/0/0ip address 10.1.2.2 30int g4/0/0ip address 10.12.100.10 24dis ip in br

yjxLSW1
un te mosysint vlan 10ip address 192.168.1.253 24int vlan 20ip address 192.168.2.253 24int vlan 110ip address 10.1.1.1 30dis ip in br

yjxLSW2
un te mosysint vlan 10ip address 192.168.1.252 24int vlan 20ip address 192.168.2.252 24int vlan 120ip address 10.1.2.1 30dis ip in br

任务3
给AR1、LSW1、LSW2配置使用动态路由协议RIPv2，
server1配置IP地址10.1.3.1  网关10.1.3.2
处于VLAN 10的PC手动切换网关为 1.253或者1.252
处于VLAN 20的PC手动切换网关为 2.253或者2.252
配置完成后，内网全网互相能Ping通，通过显示路由表信息确定结果。


要点保存哈

配置rip协议
yjxAR1
配置AR1路由器使用RIP协议，如果直接按照拓扑图给的网络地址配置，如此命令[yjxAR1-rip-1]network 10.1.1.0将会提示出错
原因是Error: The network address is invalid, and the specified address must be major-net address without any subnets.
错误：网络地址无效，指定的地址必须是主网地址，不能包含任何子网。
sysrip 1version 2network 10.0.0.0
yjxLSW1
sysrip 1version 2network 10.0.0.0network 192.168.1.0network 192.168.2.0
yjxLSW2
sysrip 1version 2network 10.0.0.0network 192.168.1.0network 192.168.2.0
yjxAR1
dis ip rou

yjxLSW1
dis ip rou

yjxLSW2
dis ip rou

测试互通
pc1 ping pc3和pc4

pc1 ping client1和pc2

pc1 ping yjxAR1和server

pc2 ping yjxAR1和server

pc3 ping yjxAR1和server

pc4 ping yjxAR1和server

配置保存，给你所有的交换机路由器输入save，这里就不多说了
第五周
开这几台

目的：给LSW1和LSW2配置VRRP，给VLAN 10和VLAN 20配置不同的虚拟路由备份组，既有主备备份功能，又有负载分担功能。

可以还很清晰的看出，两个区域的pc走的是各自的网关
yjxLSW1
sysun in enint vlan 10vrrp vrid 10 virtual-ip 192.168.1.254vrrp vrid 10 priority 120vrrp vrid 10 preempt-mode time delay 20int vlan 20vrrp vrid 20 virtual-ip 192.168.2.254vrrp vrid 20 preempt-mode time delay 20
yjxLSW2
sysun in enint vlan 10vrrp vrid 10 virtual-ip 192.168.1.254vrrp vrid 10 preempt-mode time delay 20int vlan 20vrrp vrid 20 virtual-ip 192.168.2.254vrrp vrid 20 priority 120vrrp vrid 20 preempt-mode time delay 20
yjxLSW1
display vrrp interface Vlanif 10display vrrp interface Vlanif 20

yjxLSW2
display vrrp interface Vlanif 10display vrrp interface Vlanif 20

所有PC修改网关，记得点击应用和保存

验证pc

实验可知通过配置vrrp实现yjxLSW1和yjxLSW2之间构建虚拟ip，也就是虚拟网关，然后pc设置这个虚拟网关，达到负载均衡，且有主备-备份功能。就是原本有两个网关的，192.168.1.253和192.168.2.252,如果yjxLSW1和yjxLSW2之间一台挂了，就没办法与服务器通信了，这时候通过vrrp构建虚拟ip192.168.1.254和192.168.2.254实现了主备容灾
然后给yjxLSW1和yjxLSW2进行save保存
第六周

开这几台
任务1：使用display stp brief 命令查看LSW1、LSW2、LSW3、LSW4交换机各端口在生成树中的角色。画出处于工作状态的生成树的结构图，提示：保留根端口和指定端口即可得到。
任务2：给LSW1与LSW2的3根连线（心跳线）接上，再使用display stp brief 命令查看LSW1、LSW2、LSW3、LSW4交换机各端口在生成树中的角色。画出处于工作状态的生成树的结构图，提示：保留根端口和指定端口即可得到。
dis stp br

任务3：配置多生成树协议(MSTP)。实例1的根桥为LSW1，备份根桥为LSW2；实例2的根桥为LSW2，备份根桥为LSW1。将VLAN 10映射到实例1；将VLAN 20映射到实例2。最后查看实例0、实例1、实例2各自工作状态中构成的生成树。方法：查看各交换机各实例各端口的角色，保留根端口和指定端口即可得到。

yjxLSW1
region-name yanjiaxi改成你的名字
sysun in enstp mode mstpstp region-configurationregion-name yanjiaxiinstance 1 vlan 10instance 2 vlan 20active region-configurationstp instance 1 root primarystp instance 2 root secondary
yjxLSW2
region-name yanjiaxi改成你的名字
sysun in enstp region-configurationregion-name yanjiaxiinstance 1 vlan 10instance 2 vlan 20active region-configurationstp instance 1 root secondarystp instance 2 root primary
yjxLSW3
region-name yanjiaxi改成你的名字
sysun in enstp region-configurationregion-name yanjiaxiinstance 1 vlan 10instance 2 vlan 20active region-configuration
yjxLSW4
region-name yanjiaxi改成你的名字
sysun in enstp region-configurationregion-name yanjiaxiinstance 1 vlan 10instance 2 vlan 20active region-configuration
yjxLSW1
display stp region-configuration

dis stp br

四个交换机保存配置
第七周
开这几台

任务1：网络拓扑图中，AR2为出口路由器，AR1与AR2之间的网络属于内网。配置AR2使用RIP协议公告与AR1相连的网段，注意不要公告外网。
yjxAR2
sysun in enrip 1version 2network 10.0.0.0
pc1  ping 10.12.100.20

任务2：AR2上配置SSH服务端，AR1上配置SSH客户端
说明：AAA为3A认证，即：认证(Authentication)；授权(Authorization)；计帐(Accounting)。
yjxAR2
#生成本地密钥对，SSH需要使用密钥对进行加密通信sysun in enrsa local-key-pair create

ssh040是我的学号，自己改
stelnet server enableaaalocal-user ssh040 password cipher 123456local-user ssh040 privilege level 15local-user ssh040 service-type ssh#这里用all和password可以，用其他两种不可以。因为如果使用密钥验证，需要在PC机上生成密钥对，并将公钥拷贝至网络设备。ssh user ssh040 authentication-type password   #配置VTY接口，VTY接口用于管理远程登录。配置VTY接口支持SSH协议：user-interface vty 0 4authentication-mode aaaprotocol inbound ssh
yjxAR1
sysun in enssh client first-time enable stelnet 10.12.100.20#输入用户名，然后按两次y，然后输入密码

在AR1登入之后变成AR2就行
最后两个路由器保存配置
第八周
开这几台

任务1： 在LSW1与LSW2分别配置默认路由指向AR1,AR1配置默认路由指向AR2,AR2配置默认路由指向AR3。
yjxAR1
sysun in enip route-static 0.0.0.0 0 10.12.100.20
yjxLSW1
sysun in enip route-static 0.0.0.0 0 10.1.1.2
yjxLSW2
sysun in enip route-static 0.0.0.0 0 10.1.2.2
yjxAR2
sysun in enip route-static 0.0.0.0 0 23.1.1.2
任务2：在AR2配置静态NAT,把服务器Server1 10.1.3.1映射为公网的23.1.1.5，用于公网能访问。
未配置前先测试，AR1路由器、Server1都无法Ping通外网

同理 Server1不能Ping通23.1.1.2
yjxAR2
配置静态NAT映射：将内网IP地址映射到外网IP地址
sysun in ennat static global 23.1.1.5 inside 10.1.3.1interface Serial 4/0/0nat static enable 
配置后再测试，AR1路由器与外网是不通的，但是Server1能Ping通外网
ping 23.1.1.2
ping 23.1.1.5

sysun in endisplay nat static 

任务3：配置PAT把内网IP映射到端口S4/0/0，实现内网能够访问外网。
未配置前，先测试
ping 23.1.1.2

同理 PC1不能Ping通23.1.1.2
配置ACL
yjxAR2
sysun in enacl number 2000rule 0 permit source 192.168.1.0 0.0.0.255rule 1 permit source 192.168.2.0 0.0.0.255
配置NAT Outbound
yjxAR2
在外网接口上应用ACL，并启用NAT Outbound功能。
interface Serial 4/0/0nat outbound 2000
配置后，AR1路由器是不能访问外网的，表明内网与外网是分隔开的。但是PC机已经能访问外网，表明NAT配置成功。
ping 23.1.1.2

但是： PC1能Ping通23.1.1.2

yjxAR2
display acl 2000display nat outbound

任务4：用Server1对AR3的Serial4/0/0口进行Ping测试，抓包査看NAT地址是否转换成功？
在AR2的Serial4/0/0口上抓取的Ping包如下：



AR3  ping 23.1.1.5
在AR1的GE4/0/0口或者AR2的GE0/0/0口，抓取的Ping包如下：
两个接口二选一，然后抓包，不会打开就去看前面…
AR3  ping 23.1.1.5

最后所有配置过的交换机路由器保存
第九周

任务0：掌握单臂路由的原理，配置方法以及应用场合。配置前：测试不同VLAN的连通情况，例如PC7与PC8的连通情况。

任务1：在交换机LSW6上配置VLAN，VLAN库有VLAN50与VLAN60。GE0/0/1口为Trunk口，GE0/0/2与GE0/0/3为Access口。
yjxLSW6
syssysname yjxLSW6un in envlan batch 50 60interface GigabitEthernet 0/0/1port link-type trunk port trunk allow-pass vlan 50 60interface GigabitEthernet 0/0/2port link-type access port default vlan 50interface GigabitEthernet 0/0/3port link-type access port default vlan 60
任务2：在路由器AR5上配置子接口，子接口通过使用802.1q协议与对应的VLAN进行识别绑定，给子接口配置IP地址。此地址作为对应VLAN网段的网关。
yjxAR5
sysun in enint g0/0/2.5dot1q termination vid 50ip add 192.168.8.1 24arp broadcast enableint g0/0/2.6dot1q termination vid 60ip add 192.168.9.1 24arp broadcast enable

自己保存配置
第十周

任务1：参考上一周的单臂路由实验，在交换机LSW5一侧的网络，配置单臂路由。
1）在交换机LSW5上配置VLAN，VLAN库有VLAN30与VLAN40。GE0/0/1口为Trunk口，GE0/0/2、GE0/0/3与GE0/0/5为Access口。同时配置端口加入到相应的VLAN中。
yjxLSW5
syssysname yjxLSW5un in envlan batch 30 40interface GigabitEthernet 0/0/1port link-type trunk port trunk allow-pass vlan 30 40interface GigabitEthernet 0/0/2	port link-type access port default vlan 30interface GigabitEthernet 0/0/3port link-type access port default vlan 40interface GigabitEthernet 0/0/5	port link-type access port default vlan 40
2）在AR5上配置单臂路由，在路由器AR5上配置子接口，子接口通过使用802.1q协议与对应的VLAN进行识别绑定，给子接口配置IP地址。此地址作为对应VLAN网段的网关。
yjxAR5
sysun in eninterface GigabitEthernet 0/0/1.30dot1q termination vid 30ip address 172.16.1.254 24arp broadcast enable interface GigabitEthernet 0/0/1.40dot1q termination vid 40ip address 172.16.2.254 24arp broadcast enable 
任务2：在AR5路由器上配置DHCP服务。
AR5

启用 DHCP 功能 ，全局启用 DHCP 服务：

sysdhcp enable 

配置 DHCP 地址池，为每个 VLAN 创建 DHCP 地址池，配置网关、DNS 和 IP 地址范围
配置 VLAN30 的 DHCP 地址池

ip pool vlan30network 172.16.1.0 mask 24 gateway-list 172.16.1.254dns-list 8.8.8.8 ip pool vlan40network 172.16.2.0 mask 255.255.255.0gateway-list 172.16.2.254dns-list 8.8.8.8excluded-ip-address 172.16.2.2
#excluded-ip-address 172.16.2.2   //此处排除的IP，是留给终端Client2

在子接口上启用 DHCP 服务，在每个子接口上启用 DHCP 服务，选择使用全局地址池

interface GigabitEthernet 0/0/1.30dhcp select globalinterface GigabitEthernet 0/0/1.40dhcp select global 
任务3： 在LSW5交换机上配置DHCP Snooping功能      // snoop v. 监听、监控
yjxLSW5
1）在LSW5交换机上开启全局DHCP 以及DHCP Snooping
sysdhcp enabledhcp snooping enable

2）LSW5交换机GE0/0/1、GE0/0/2、GE0/0/3接口开启 dhcp snooping，此时默认情况下接口为非信任接口，只能发送DHCP请求包，无法接收DHCP应答包
interface GigabitEthernet 0/0/1dhcp snooping enable interface GigabitEthernet 0/0/2dhcp snooping enable interface GigabitEthernet 0/0/3dhcp snooping enable
PC 先执行PC&gt;ipconfig /release，再执行PC&gt;ipconfig /renew发现无法获取到IP地址。




3）配置交换机GE0/0/1口为信任接口
interface GigabitEthernet 0/0/1dhcp snooping trusted 

PC5   执行PC&gt;ipconfig /renew发现现在可以获取到IP地址。


4）查看确认dhcp snooping的配置
yjxLSW5
display dhcp snooping configuration 

测试pc5  ping 其他机子

然后交换机，路由器保存配置
第十一周
开AR3和AR2就行
任务一
任务1：在AR3路由器上配置PPP认证，AR3为认证方，AR2为被认证方。
yjxAR3

在AR3路由器的Serial 4/0/0口配置PPP认证的方式为PAP

sysun in eninterface Serial 4/0/0ppp authentication-mode papq

在AR3路由器的aaa视图下，创建用户R2，服务类型为ppp。

aaalocal-user R2 password cipher 123456local-user R2 service-type pppq

检查AR2路由器的接口状态，特别留意Serial4/0/0口的物理状态和协议状态。

yjxAR2
display ip interface brief


在AR3路由器上，重启Serial4/0/0口。

yjxAR3
sysun in eninterface Serial 4/0/0shutdownundo shutdown

再次检查AR2路由器的接口状态，特别留意Serial4/0/0口的物理状态和协议状态。

yjxAR2
display ip interface brief

观察结果 ：AR2与AR3无法正常通信，链路物理状态正常，但链路层协议状态不正常，Ping命令无法通过。这是因为PPP链路上的PAP认证未通过，需要在被认证方AR2上配置相关PAP认证参数。

在AR2上的S4/0/0接口下，使用PPP pap local-user命令配置本端被对端以PAP方式验证时本地发送的PAP用户名和密码。

yjxAR2
sysun in eninterface Serial 4/0/0ppp pap local-user R2 password cipher 123456

配置完成后，等待20秒以上，再次查看链路状态并测试连通性。特别留意Serial4/0/0口的物理状态和协议状态。

yjxAR2
display ip interface brief
输出示例：

任务二
任务2：网络管理员发现网络频繁遭受攻击，因为PAP认证的密码为明文的，密码经常被盗用，遂将PPP认证的方式由PAP改为CHAP。
1）首先，删除原有的PAP认证配置
yjxAR3
interface Serial 4/0/0undo ppp authentication-mode
yjxAR2
interface Serial 4/0/0undo ppp pap local-user
2）再重新配置CHAP认证配置
yjxAR3
interface Serial 4/0/0ppp authentication-mode chap
保留继续使用任务1 在aaa视图下配置的用户名R1与密码。此时可不用重复配置。
3）在AR3路由器上，重启Serial4/0/0口。
yjxAR3
interface Serial 4/0/0shutdownundo shutdown
4）检查AR2路由器的接口状态，特别留意Serial4/0/0口的物理状态和协议状态。
yjxAR2
display ip interface brief
可以观察到，现在AR2与AR3无法正常通信，链路物理状态正常，但是链路层协议状态不正常，用Ping命令将无法Ping通。这是因为此时PPP链路上的CHAP认证未通过，现在仅仅配置了认证方设备AR3，还需要在被认证方AR2上配置相关CHAP认证参数。

5)在AR2上的S4/0/0接口下，使用PPP chap 命令配置本端被对端以CHAP方式验证时本地发送的用户名和密码。
yjxAR2
interface Serial 4/0/0ppp chap user R2ppp chap password cipher 123456
配置完成后，等待20秒以上
6)再次查看链路状态并测试连通性。特别留意Serial4/0/0口的物理状态和协议状态。
yjxAR2
display ip interface brief

两个路由器保存配置
第十二周
全开
任务1：对网段 AR2-AR3、AR3-AR4、AR4-AR5 配置 OSPF 路由协议实现互通
yjxAR2 配置
出口路由器需要配置默认路由指向互联网
sysun in enip route-static 0.0.0.0 0.0.0.0 23.1.1.2
yjxAR3 配置
sysun in enospf 1area 0network 23.1.1.0 0.0.0.255network 34.1.1.0 0.0.0.3
yjxAR4 配置
sysun in enospf 1area 0network 34.1.1.0 0.0.0.3network 45.1.1.0 0.0.0.3
yjxAR5 配置
sysun in enospf 1area 0network 45.1.1.0 0.0.0.3
检查各路由器配置
sysun in endis ip rou



任务2：对网段 AR3-AR6 配置 OSPF 路由协议进行通告网段，并划分到区域 1
yjxAR3 配置
sysun in eninterface GigabitEthernet 0/0/1ip address 36.1.1.2 30ospf 1area 1network 36.1.1.0 0.0.0.3
yjxAR6 配置
sysun in ensysname yjxAR6interface GigabitEthernet 0/0/0ip address 36.1.1.1 30interface GigabitEthernet 0/0/1ip address 10.10.2.2 30ospf 1area 1network 36.1.1.0 0.0.0.3
检查AR5能否学习到area1的路由
sysun in endis ip rou

任务3：AR3 与 AR6 之间配置 OSPF 认证
在 AR3、AR6 之间配置 OSPF的接口认证，认证模式为 MD5 认证。测试认证前后网络的连通性。AR3 和 AR6 的配置完全一样。同一网段的接口认证模式和口令必须相同，不同网段可以不同。缺省情况下，OSPF接口没有配置认证方式。建议配置认证方式，否则系统可能不安全。
yjxAR3 配置
sysun in eninterface GigabitEthernet 0/0/1ospf authentication-mode md5 1 cipher jwkshutdownundo shutdown
yjxAR6 配置
sysun in eninterface GigabitEthernet 0/0/0ospf authentication-mode md5 1 cipher jwk
测试与外网互通
AR6和pc1  ping   AR5
ping 45.1.1.2


保存配置，涉及啥路由器自己保存
第十三周
全开
任务 0: 理解 NAT 配置相关知识(不用做)

nat outbound —— 配置源 NAT (SNAT)，用于内网用户访问外网（通常结合 ACL 或地址池使用）。
nat server —— 配置目的 NAT（端口映射），允许外网访问内网服务器（如 Web、FTP 等）。
nat static —— 配置静态 NAT（一对一映射），将公网 IP 直接映射到内网 IP，双向可达。

[zsAR6-GigabitEthernet0/0/0]nat ?    outbound      Specify net address translation    server        Specify NAT server    static        Specify static NAT
注意事项
接口类型:nat outbound 和natserver 需配置在连接公网的接口。
ACL 控制:建议用 ACL限制 natserver 的访问来源，避免暴露内网服务。
ALG 兼容性:FTP、SIP 等协议依赖 ALG，若异常可尝试 nat alg ftp disable 关闭调试
优先级:nat static&gt;na tserver&gt;nat outbound，冲突时按优先级生效。
任务 1: 配置路由器端口与服务器的 IP 地址

AR6 路由器补齐全端口 IP 地址 GE0/0/1 的 IP 地址为 10.10.2.2

yjxAR6
int g0/0/1ip address 10.10.2.2 30

Server2 配上 IP 地址：10.10.2.1 255.255.255.252 关联对端路由器端口地址 10.10.2.2

Server2

任务 2: 在 AR5 和 AR6 配置 PAT 把内网 IP 映射到路由器的外网端口 GE0/0/0，实现内网能够访问外网。

配置访问控制列表（ACL）

yjxAR6
sysun in enacl 2000rule 0 permit source 10.10.20.0 0.0.0.3

启用 NAT Outbound 功能，并关联相应的 ACL

yjxAR6
int g0/0/0nat outbound 2000

配置模块 2 的出口路由器 AR5

yjxAR5
sysun in enacl 2000rule 0 permit source 192.168.8.0 0.0.0.255rule 2 permit source 192.168.9.0 0.0.0.255rule 3 permit source 172.16.1.0 0.0.0.255rule 4 permit source 172.16.2.0 0.0.0.255int g0/0/0nat outbound 2000
pc5  ping  （pc8 ，AR2，ar6）

任务 3: Server2 开启 HTTP、FTP 服务。模块二的客户端可以获取到 Server2 的共享文件。
1.配置端口映射
yjxAR6
int g0/0/0nat server protocol tcp global current-interface ftp inside 10.10.2.1 ftp输入ynat server protocol tcp global current-interface www inside 10.10.2.1 www输入y
2.启用 FTP 协议依赖的 NAT ALG
yjxAR6
qnat alg ftp enable
在服务器 Server2 上将 HttpServer和 FtpServer 启动，目录文件夹放入文件。 然后在模块 2中，用客户端进行 HTTP 和 FTP 的访问测试。
在你电脑找个位置创建一个文件夹和测试文件

在server2开启两个服务


在client2进行测试


ar5和ar6进行保存
第十四周
任务 1:配置访问控制列表ACL，只允许client2可以访问服务器server 2，拒绝其它网络访问
1)在路由器 AR6 配置 ACL,只允许来自网段 45.1.1.0,也就是 AR4-AR5 网段的数据流量通过应用在GE0/0/0口，在这里是作为流量人口inbound方向，在这里注意，应用在路由器不同的接口(端口)，需要根据数据流量的流动方向，来判断此接口的流量方向是流入inbound还是流出 outbound.
yjxAR6
sysun in enacl number 3000rule 5 permit tcp source 45.1.1.0 0.0.0.3 destination 36.1.1.0 0.0.0.3rule 10 deny tcprule 15 permit ipinterface GigabitEthernet 0/0/0traffic-filter inbound acl 3000
2)在路由器 AR5配置 ACL,只允许源IP为 172.16.2.2的终端访问目标IP为36.1.1.1的终端
yjxAR5
sysun in enacl number 3000rule 5 permit tcp source 172.16.2.2 0 destination 36.1.1.1 0rule 10 deny tcp destination 36.1.1.1 0rule 15 permit ipinterface GigabitEthernet 0/0/1traffic-filter inbound acl 3000interface GigabitEthernet 0/0/2traffic-filter inbound acl 3000
测试client2可以访问server2
自己开启server2的服务


测试client1访问


测试更改pc7为client3，看看是否可访问server2
把pc7删除更换为clien3，然后配置好ip地址，然后pc8进行ping  client3

测试clent3能否访问server2


ar6和ar5  save

 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>ensp</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程师备考笔记</title>
    <url>/posts/2c5e9e22/</url>
    <content><![CDATA[
网络工程师备考笔记
计算机网络概论
早期的计算机网络是面向终端的计算机网络，在这种网络中主要存在的是终端和中心计算机进行通信。计算机网络:计算机技术与通信技术的结合。
计算机网络的分类
1.通信子网和资源子网：
通信子网:通信节点(集线器、交换机、路由器等)和通信链路(电话线、同轴电缆、无线电线路,卫星线路、微波中继线路和光纤缆线)。
用户资源子网:PC、服务器等

3.LAN MAN WAN

按地域范围，可分为局域网(LAN)、城域网(MAN)和广域网(WAN)3 类。
按所采用网络协议的不同，可分为TCP/IP 网络、SPX/IPX网络等。
按交换方式，可分为电路交换网、分组交换网、报文交换等。



按通信介质，可分为有线网和无线网。
按网络控制方式，可分为集中式和分布式。


我国互联网的发展

计算机网络的应用



案例分析题
某仓储企业网络拓扑结构如图1-1所示，该企业占地500亩。有五层办公楼1栋，大型仓库10栋。每栋仓库内、外部配置视频监控16台，共计安装视频监控160台，SwitchA、服务器、防火墙、管理机、Router A等设备部署在企业办公楼一层的数据机房中，Switch B部署在办公楼一层配线间作为一层的接入设备，Switch C和Switch D分别部署在仓库1和仓库2，各仓库的交换机与Switch A相连。办公楼的其他楼层的交换机以及其他仓库的交换机的网络接入方式与图1-1中Switch B、SwitchC、SwitchD接入方式相同，不再单独在图1-1上标示。
若接入的IPC采用1080P的图像传输质量传输数据，SwitchC、Switch A选用百兆交换机是否满足带宽要求，请说明理由。


OSI和TCP/IP参考模型
前情提要
为什么要进行网络分层？

OSI参考模型:CPU/内存/硬盘/显卡/主板等标准化
某一层所做的改动不会影响到其他的层，利于设计、开发和故障排除。
通过定义在模型的每一层实现功能，鼓励产业的标准化。
通过网络组件的标准化，允许多个供应商协同进行开发。
允许各种类型的网络硬件和软件互相通信，无缝融合。
促进网络技术快速迭代，降低成本
OSI参考模型
七层的详细知识点可以跳转：2.6 OSI协议集
物理层(PI):确定物理设备接口，提供点一点的二进制位流传输的物理链路。
数据链路层(DLL):利用差错处理技术，提供高可靠的点到点传输的数据链路
网络层(NL):利用逻辑寻址;路由选择，实现用户数据的传输。
传输层(TL):提供可靠或者不可靠的端到端传输。
会话层(SL):为通信双方指定通信方式，并创建、注销会话
表示层(PL):数据和信息的语法转换内码，数据压缩解压、加密解密
应用层(AL):各种应用程序、协议

TCP/IP参考模型


TCP/IP参考模型对应协议

OSI与TCP/IP模型对&amp;协议层次

例题


在OSI参考模型中，实现端到端的应答、分组排序和流量控制功能的协议层是©。
A.数据链路层 B.网络层 C.传输层 D.会话层


在OSI参考模型中，(B)在物理线路上提供可靠的数据传输服务。


​    A.物理层 B.数据链路层 C.网络层 D.传输层
【解析】本题非常容易误选D，一定要学会区分
简单理解:物理链路之上是数据链路层，OSI模型的数据链路层有很多可靠性保障机制。
深入理解:数据链路层与传输层的区别,比如有3个节点是1-2-3,1到3是端到端，可靠性通过传输层协议保障，1到2或者2到3是物理链路，可靠性通过数据链路层保障，那么这题明显问的是物理链路上的可靠性。

数据封装与解封过程分析
数据封装（从上往下）

数据解封（从下往上）

例子：

例题

在ISO OSI/RM中，(1)实现数据压缩功能。在OSI参考模型中，数据链路层处理的数据单位是(2)。

(1)A.应用层 B.表示层 C.会话层 D.网络层
(2)A.比特 B.帧 C.分组  D.报文
答案：B;B


在OSI参考模型中，传输层上传输的数据单位是(D)。
A.比特  B.帧  C.分组  D.报文



数据通信基础
信道特性
概念

通信的目的就是传递信息。
通信中产生和发送信息的一端叫信源，接收信息的一端叫信宿，信源和信宿之间的通信线路称为信道。
信道带宽

码元和码元速率

码元（N或信号状态）:一个数字脉冲称为一个码元(可理解为时钟周期的信号)
码元速率:单位时间内信道传送的码元个数。如果码元宽度(脉冲周期)为T，则码元速率(波特率)为B=1/T，单位是波特 Baud。
一个码元携带信息量n(位)与码元种类数(N)的关系 n=log2N。
奈奎斯特定理
要理解，慢慢理解很重要！
奈奎斯特定理:在一个理想的(没有噪声环境)信道中，若信道带宽为W，最大码元速率为B=2W(Baud)。
极限数据速率为R=Blog2N=2Wlog2N。(N表示码元种类数)
方便理解示意：（以下码元用包裹表示，以下都用简单的语言描述）
码元速率（B）= 每秒发送包裹个数,概念要记住（码元速率:单位时间内信道传送的码元个数）
数据速率 = 每秒发送包裹重量
⬇️
每秒发送包裹重量® = 每秒发送包裹个数(B) * 每个包裹重量(n)
⬇️
数据速率® = 码元速率(B) * 每个码元携带信息量(n)
下面针对上面的图解：

香农定理
香农定理:在一个噪声信道的极限数据速率和带宽之间的关系。    C(也叫信道容量)
极限数据速率公式为:C=Wlog2(1+S/N)
分贝与信噪比关系:dB=10log10S/N
其中W为带宽，S为信号平均功率，N为噪声平均功率，S/N为信噪比。
考试一般不会直接给你信噪比，会给你dB
例题：
dB=10，S/N=10
dB=30，S/N=1000  （书上的例题）
带宽/码元速率/数据速率关系梳理

误码率

例题：





信道延迟
本节注意：这里做题不可套用前面提到的奈奎斯特定理和香浓定理等

信道延迟的计算

例题：







卫星信道延迟



传输介质
概念
要记住： 无线电波:500kHz-1000Mhz   微波:300MHZ-300GHz


例题：

同轴电缆

通常把表示数字信号的方波所固有的频带称为基带，这种电缆也叫基带同轴电缆，直接传输方波信号称为基带传输。
宽带同轴电缆:用于传输模拟信号
宽带系统的优点是传输距离远，可达几十干米，而且可同时提供多个信道。然而和基带系统相比，它的技术更复杂，需要专门的射频技术人员安装和维护，宽带系统的接口设备也更昂贵
模拟信号比数字脉冲受噪声和衰减的影响更小，可以传播更远的距离，甚至达到100km。
双绞线
缠绕目的：降低信号干扰的程度



光纤






跳线和尾纤

例题





数据编码
曼切斯特编码
曼彻斯特编码能从数据信号波形中提取同步信号。

差分曼切斯特编码

两种曼切斯特编号特点
曼码和差分曼码是典型的双相码，双相码要求每一位都有一个电平转换，一高一低，必须翻转。
曼码和差分曼码具有自定时和检测错误的功能。
两种曼彻斯特编码优点:将时钟和数据包含在信号数据流中，也称自同步码。
编码效率低:编码效率都是50%
两种曼码数据速率是码元速率的一半，当数据传输速率为100Mbps时，码元速率为200M baud。
这里的高亮句子很重要
其他编码
没特殊说明。只要看见以太网就是10M

例题






数字调制技术










脉冲编码调制PCM
本节注意：这里做题不可套用前面提到的奈奎斯特定理和香浓定理等

这里有个小知识点，为什么语音最高频率是4kHz，所以取样频率是8kHz,前面有提到:
根据奈奎斯特采样定理，为了无失真地重建一个连续时间信号，采样频率(8K)必须至少是信号最高频率(4K)的两倍。这个最低的采样频率被称为奈奎斯特频率（8K）。


为什么这里不用前面提到的奈奎斯特定理和香农定理,因为这两个定理算的是极限值,而这里不是算极限值的哇


通信和交换方式
数据通信方式

按通信方向分




通信方式
消息传递方式
应用实例




单工通信
单向一条信道
无线电广播、电视广播


半双工通信
双向一天信道
对讲机


全双工通信
两条信道
实时电话通信



单工通信:信息只能在一个方向传送，发送方不能接收，接收方不能发送(电视/广播)
半双工通信:通信的双方可以交替发送和接收信息，但不能同时接收或发送(对讲机/Wi-Fi/Hub)
全双工通信:通信双方可同时进行双向的信息传送(电话/交换机)

按同步方式分





数据交换方式

关键词：电路交换，报文交换，分组交换，数据报，虚电路





多路复用技术
多路复用技术
多路复用技术是把多个低速信道组合成一个高速信道的技术
光纤入户:上网、电视、电话。

这种技术要用到两个设备：

频分复用（FDM）
在一条传输介质上使用多个频率不同的模拟载波信号进行多路传输，通过不同的频率来区分不同的业务

时分复用（TDM）
以信道的传输时间作为分割对象(划分时间片)来实现的复用，并且可以根据时间片是否固定分配，分为同步时分复用技术和统计时分复用技术。
同步时分复用

统计时分复用

E1和T1
同步时分复用技术的应用（下面有考点）

波分复用（WDM）





同步数字系列
​             SONET/SDH多路复用的速率（时分复用）

考点
考法1：

考法2：



名称
技术原理
载波速率
子信道
传送一帧的时间
每秒钟传多少个帧
子信道数据速率




E1载波
同步时分复用
2.048Mbps
32个
125μs
8000b/s（1b/125μs=8000）
64kbps (8bit*8000)


T1载波
同步时分复用
1.544Mbps
24个
125μs
8000b/s（1b/125μs=8000）
56kbps (7bit*8000)



例题





海明码纠错码
差错控制

奇偶校验



海明码


海明码原理

海明码编码⭐️


例题





CRC循环冗余校验码
末尾加入CRC循环冗余校验码能检错不能纠错，广泛用于网络通信和磁盘存储。
以下我们采用例题来了解：
1.采用CRC进行差错校验，生成多项式为G(X)=X4+X+1，信息码字为10111，则计算出CRC校验码是()。
A.0000 B.0100 C.0010 D.1100
解：
1.判断校验位数:生成多项式的最高次方是几，校验位就是几位。4位检验位
因为G(X)=X4+X+1 中 x4有最高次方是4，那么到时候算出来的CRC校验码也会是四位
一般选项会出现不固定数字的校验码，这时候你就要看，最高次方，排除不符合的选项
2.组合被除数  信息码字+检验位   ==101110000
第一步看出有多少位校验位就在信息码字后补多少个0
3.寻找除数==提取多项式的系数

4.用第二步的结果，除以第三步的结果(异或运算) 余数就是CRC校验码，余数不够位，前面补0


例题



章节总结


局域网
局域网技术概论
结构

早期组网使用集线器组网，现在都是交换机，现在真正应用广泛的是树形和混合型

传统局域网是分组广播式网络，这是与分组交换式的广域网的主要区别
CSMA/CD
CSMA基本原理:发送数据之前，先监听信道上是否有人在发送。若有，说明信道正忙，否则说明信道是空闲的，然后根据预定的策略决定:
(1)若信道空闲，是否立即发送。
(2)若信道忙，是否继续监听
如果连续发生16次碰撞后，认为网络繁忙或故障，不再尝试发送。
CSMA三种监听算法

(1)非坚持型监听算法:后退随机时间由于随机时延后退，从而减少了冲突的概率。问题是因为后退而使信道闲置一段时间，这使信道的利用率降低，而且增加了发送时延
(21-坚持型监听算法:继续监听，不等待有利于抢占信道，减少信道空闲时间。但是，多个站同时都在监听信道时必然会发生冲突。冲突概率和利用率都高(双高)
(3)P-坚持型监听算法:若信道空闲，以概率P发送，以概率(1-P)延迟一个时间单位，P大小可调整。


冲突检测原理CD
载波监听只能减小冲突的概率,不能完全避免冲突。当两个帧发生冲突后，若继续发送，将会浪费网络带宽。为了改进带宽利用率，发送站应采取边发边听的冲突检测方法，即
(1)发送期间同时接收，并把接收的数据与站中存储的数据进行比较。
(2)若比较结果一致，说明没有冲突，重复(1)。
(3)若比较结果不一致，说明发生了冲突，立即停止发送,并发送一个简短的干扰信号(Jamming)使所有站都停止发送。
(4)发送Jamming信号后，等待一段随机长的时间，重新监听，再试着发送。



对总线型、星型和树型拓扑访问控制协议是CSMA/CD(Carrier Sense Multiple Access/ColisionDetection，载波侦听多路访问/冲突检测)


带冲突检测的监听算法把浪费带宽的时间减少到检测冲突的时间。







二进制指数退避算法

例题：






最小帧长计算





以太网帧
以太网硬件地址（MAC地址，不是帧哦）的位数是48位。例如：00:1A:2B:3C:4D:5E
前面7+1字节用于时钟同步，不算入帧长。
数据46-1500字节，不够至少填充到46字节。
校验位4字节，CRC循环冗余校验 32位。
最小帧长64字节:6+6+2+46+4=64    （从目的地址开始往后算）
最大帧长1518字节:6+6+2+1500+4=1518.   （从目的地址开始往后算）

考法：
1.简单直白的问你，最大帧长和最小帧长是多少
2.问你确认帧是多少，最小的64字节，最大1518字节
3.以太网最大利用率=1500/1518   最小利用率=46/64   就传输的数据除以最大的帧长
以太网报文封装

1.以太网报头是

2.在MTU里，最小字节是20+20+6字节，因为数据段（MTU段）是最小是46字节
扩展知识：
IP报头和TCP报头各自最大的字节都是60字节，标准是20字节
例题：






以太网物理层规范
以下所有的表格都要记住
802.3以太网(10M)

快速以太网802.3u(100M)



干兆以太网(1000M)

编码总结
关键字：8B/10B,4D-PAM5,64B,66B,MLT-3,8B/6T





万兆以太网802.3ae(10G)




VLAN
Vlan基础
虚拟局域网(Virtual Local Area Netwok，VLAN)
根据管理功能、组织机构或应用类型对交换局域网进行分段而形成的逻辑网络。
不同VLAN通信必须经过三层设备:路由器(考点最多)、三层交换机、防火墙等。

冲突域和广播域:
一个中继器和集线器是一个冲突域
网桥/交换机的一个接口为一个冲突域
一个VLAN为一个广播域，交换机默认所有接口都在VLAN 1
路由一个接口就是广播域

冲突域

广播域

例题：

交换机VLAN划分
静态划分VLAN:基于交换机端口。
动态划分VLAN:基于MAC地址、基于策略、基于网络层协议、基于网络层地址。

vlan划分配置
简单了解一下，后面还会讲

VLAN作用
(1)控制网络流量。一个VLAN 内部的通信(包括广播通信)不会转发到其他VLAN 中去，从而有助于控制广播风暴，减小冲突域，提高网络带宽的利用率。
(2)提高网络的安全性。可以通过配置VLAN 之间的路由来提供广播过滤、安全和流量控制等功能。
不同VLAN 之间的通信受到限制，提高了企业网络的安全性。
(3)灵活的网络管理。VLAN 机制使得工作组可以突破地理位置的限制而根据管理功能来划分。如果根据MAC 地址划分VLAN，用户可以在任何地方接入交换网络，实现移动办公。
802.1Q标签
802.1Q 标签字段，重点掌握PRI和VID。
PRI(3 位):Priority表示优先级，提供0~7共8个优先级，当有多个帧等待发送时，按优先级顺序发送数据包。
VID(12 位):即VLAN 标识符，最多可以表示212=4096个VLAN，其中VID0用于识别优先级,VID 4095 保留未用，所以最多可配置4094个VLAN（1-4094）。默认管理VLAN是1,不能删除。
交换机添加和删除VLAN标签的过程由专用硬件自动实现，处理速度很快，不会引入太大的延迟。
从用户角度看，数据源产生标准的以太帧，目标接收的也是标准的以太帧，VLAN标记对用户是透明的。
以下是在以太网帧的基础上加了一个标签段
最小帧长54字节

交换机端口类型
Access接口:只能传送单个VLAN数据，一般用于连接PC/摄像头等终端。
Trunk接口:能传送多个VLAN数据，一般用于交换机之间互联。
Hybrid接口:混合接口，包含access和trunk属性。
QinQ:双层标签，一般用于运营商城域网。

例题




生成树协议STP
生成树背景


二层环路问题-广播风暴

网络中若存在二层环路，一旦出现广播数据帧，这些数据帧将被交换机不断泛洪，造成广播风暴。
广播风暴对网络危害非常大，将严重消耗设备CPU资源及网络带宽，需要格外注意。
广播风暴现象:网络慢、接口指示灯高速闪烁、CPU使用率高、CLI卡顿、远程管理卡或登录不上
例题

二层环路问题-MAC表震荡


STP基本概念
采用生成树(Spanning-tree)技术，能够在网络中存在二层环路时，通过逻辑阻塞(Block)特定端口，从而打破环路，并且在网络出现拓扑变更时及时收敛，保障网络余性。

当出现网络故障时
在网络出现拓扑变更时及时收敛，保障网络冗余性

网桥ID(Bridge ID)
桥ID一共8个字节，由2个字节优先级和6个字节的MAC地址构成。(ip地址32位是4个字节，1字节=8bit)
桥优先级默认为32768，可以手工修改。
MAC地址为交换机背板MAC.

路径开销(Path Cost)
路径开销是一个端口量，是STP/RSTP协议用于选择链路的参考值。
端口路径开销的默认值及取值范围由选定的路径开销算法决定，路径开销与端口带宽成反比。
华为设备路径开销标准有:802.1d-1998、802.1t及私有的legacy，默认为802.1t标准。

STP选举操作⭐️
1.确定一个根桥(Root Bridge)【选优先级和MAC地址最小的网桥】
2.确定其他网桥的根端口(Root Port)【非根桥的端口到根桥最近的端口】
3.每个段选择一个指定端口(Designated Port)【先选指定桥，指定桥上为指定端口】
4.选出非指定端口(NonDesignated Port)

【选举第一步】
1.确定一个根桥(Root Bridge)【选优先级和MAC地址最小的网桥】
首先比较优先级，其次再是mac地址，两者都是越小越优先
图中优先级都一样，但是sw1的mac地址最小，所以他是根桥
【BPDU】:是运行STP的交换机之间交换的信息帧。 BPDU内包含了STP所需的路径和优先权信息，STP便利用这些信息来确定根桥以及到根桥的路径。

【选举第二步】
2.确定其他网桥的根端口(Root Port)【非根桥的端口到根桥最近的端口】

【选举第三步】
3.每个段选择一个指定端口(Designated Port)【先选指定桥，指定桥上为指定端口】

【选举第四步】
4.选出非指定端口(NonDesignated Port)

STP案例分析



几种生成树协议
生成树协议     802.1d   STP(慢，拓扑收敛需要30-50s)
快速生成树协议 802.1W   RSTP(快，6s内完成收敛)
多生成树协议   802.1    SMSTP(实现多个VLAN负载均衡)
例题









城域网基础
(1)E-LAN技术是802.1Q的VLAN帧标记，双层标记，打了两层VLAN标签，这种技术被定义为IEEE802.1ad，也称为QinQ技术。
QinQ实际是把用户VLAN嵌套在运营商城域以太网VLAN中传送
(2)IEEE802.1ah，也称为PBB，也叫MAC-IN-MAC技术。



章节总结

无线通信网
移动通讯与4G/5G
介绍

中国移动、中国联通、中国电信的移动通信制式
TD-LTE-Aavanced是我国自主知识产权的4G标准

移动通信技术标准

4G标准

4G关键技术
4G关键技术包括:OFDMA(Orthogonal Frequency Division Multiple Access)、MIMO (MultipleInput Multiple Output)、软件无线电(Software Defined Radio,SDR)技术、VoIP (Voice overInternet Protocol)技术等

OFDMA

MIMO

软件无线电SDR

Voip

5G
5G应用场景

5G两种组网模式（NSA/SA）

5G关键技术
5G关键技术包括:超密集异构无线网络、大规模输入输出(MIMO)、毫米波通信、软件定义网络和网络功能虚拟化。
超密集异构无线网络:相对于4G网络，5G使用较高的频谱，覆盖范围相对较小，需要密集部署宏基站、微基站和室分等不同架构的网络满足覆盖需求
大规模输入输出(MIMO):5G沿用了4G网络的多进多出技术(MultipleInput MultipleOutput,MIMO)，能有效提升网络带宽。
毫米波通信:毫米波小基站可以增强高速环境下用户的网络体验，提升网络的组网灵活性。
SDN和NFV:SDN技术实现控制层面和数据层面分离，提升网络灵活性、可管理性和扩展性。NFV技术可以实现软件和硬件解耦，比如传统网络需要购买防火墙、入侵检测、防病毒等硬件安全设备NFV实现网络功能虚拟化后，只需要购买标准服务器，然后虚拟出多台虚拟机，可以在虚拟机上运行软件的虚拟防火墙(vFW)、虚拟机入侵检测(VIPS)和虚拟防病毒(VAV)，从而大幅降低网络的建设和维护成本，
例题







CDMA计算
原理
CDMA系统为不同用户分配码片，根据计算正交值来判断是否接收数据和接收的数据是多少
正交结果为1，表示发送数据1
正交结果为-1，表示发送数据为0
正交结果为0，表示未向该终端发送数据。


WLAN通信技术
无线网主要使用三种通信技术:红外线、扩展频谱(扩频)和窄带微波技术。
扩展频谱通信:将信号散步到更宽的带宽上以减少发送阻塞和干扰的机会，有利于保密。
扩频技术就是用伪随机序列对代表数据的模拟信号进行调制
WLAN主要使用扩展频谱技术:频率跳动扩频FHSS(蓝牙)和直接序列扩展频谱DSSS(Wi-Fi)。

直接序列扩展频谱DSSS：信号源中的每一位用称为码片的N个位来传输。
频率跳动扩频FHSS是在传输过程中反复转换频率

例题



WLAN频谱与信道
wlan网络分类
WLAN网络可以分为三类:基础无线网络、Ad Hoc网络和分布式无线系统。
基础无线网络(Infrastructure Networking):用户通过无线接入点AP接入
特殊网络(Ad Hoc Networking):用于军用自组网或寝室局域网联机游戏。
分布式无线系统:通过AC控制大量AP组成的无线网络。

ISM频段

不重叠信道🌟

世界分布的2.4g和5g频道


信道重用与AP部署




802.11技术标准对比


🌟
1.Wi-Fi标准的工作频段。
2.4GHZ:802.11、802.11b和802.119
5GHz:802.11a和802.11ac
2.4GHZ+5GHz:802.11n和802.11ax
2.非重看信道数量。2.4GHz频段包含13个信道，有3个不重合信道，常用信道为1、6和11，不重合信道间隔5个信道。
3.不同802.11标准的最大速率。比如，802.11n最大支持600Mbps，802.11ax速率可达9600Mbps。
WIFI7(802.11be)


例题












802.11 MAC层
802.11 MAC子层定义了3种访问控制机制:CSMA/CA(支持竞争访问)，RTS/CTS和点协调功能(支持无竞争访问)。
CSMA/CA核心原理:发送数据前先检测信道是否使用，若信道空闲，则等待一段随机时间后，发送数据。所有终端都遵守这个规则，故这个算法对参与竞争的终端是公平的，按先来先服务的顺序获得发送机会
RTS/CTS信道预约:发送前先打报告，其他终端记录信道占用时间。
PCF点协调功能:由AP集中轮询所有终端，将发送权限轮流交给各个终端，类似令牌，拿到令牌的终端可以发送数据，没有令牌的终端则等待。点协调功能比DCF分布式协调优先级更高。(无争用)

三种帧间间隔
DIFS(分布式协调IFS):最长的IFS，优先级最低，用于异步帧竞争访问的时延
PIFS(点协调IFS):中等长度的IFS，优先级居中，在PCF操作中使用。
SIFS(短IFS):最短的IFS，优先级最高,用于需要立即响应的操作(确认ACK)
帧间间隔用途

例题




移动AD Hoc网络
802.11定义AD Hoc网络是由无线移动节点组成的对等网，无需网络基础设施的支持，每个节点既是主机，又是路由器，是一种MANNET(Mobile Ad Hoc Network)网络。
Ad Hoc是拉丁语，具有”即兴，临时”的意思。

MANET网络特点（选择题）
网络拓扑结构动态变化的，不能使用传统路由协议（RIP,OSPF,BGP）。
无线信道提供的带宽较小，信号衰落和噪声干扰的影响却很大。
无线终端携带的电源能量有限。
容易招致网络窃听、欺骗、拒绝服务等恶意攻击的威胁。
MANET路由协议

例题




WLAN安全技术
wlan安全机制

wep和wpa扩展

例题







无线个人网
蓝牙和zigbee技术

Zigbee设备

Zigbee底层技术

例题




网络互联

广域网技术
公共交换电话网

X.25

帧中继FR

例题

ISDN和ATM

例题




ipv4
ip报文格式
IHL字段是一个4位的字段，它的单位是4字节（或者说32位）。IHL字段的值表示的是IPv4头部的长度，以4字节为单位。这意味着：

最小值：IHL字段的最小值是5，这意味着IPv4头部的最小长度是5个4字节，即20字节。
最大值：IHL字段的最大值是15，这意味着IPv4头部的最大长度是15个4字节，即60字节。

版本号:0100
分片偏移是8字节的倍数，在下面讲ip分片的时候会用到
IP负载也就是除开报头的数据部分最大为65535-20=65515






ip分片与计算
关键词：偏移，MF，片偏移
IP报文最大65535字节，而以太网MTU为1500字节
相当于货轮能载重65535，而火车载重1500，那么必须把货轮上的货物分装给多个火车运输。

例题

类比解析
原题：一个IP数据报文长度为3000字节(包括首部长度)，要经过一个MTU为1500字节的网络传输。此时需将原始数据报切分为3片进行传输，请将每个数据报分片的总长度、数据长度、MF标志和片偏移填入答题纸对应表格中。
类比翻译:一个大型集装箱，货物+集装箱=3000斤,现在要用小型集装箱进行分装,每个小型集装箱自身重量+货物重量=1500斤,已知大型集装箱和小型集装箱重量都是20斤,问:可以用几个小型集装箱进行分装?每个小集装箱的货物分别是多少斤?

例题







IP分类与特殊ip地址
关键词：A类、B类、C类、D类、E类

特殊ipv4地址


0.0.0.0
主机端:DHCP分配过程中，用0.0.0.0表示本机，比如主机DHCPDiscover广播报文源目地址和端口是0.0.0.0:68-&gt;255.255.255.255:67.
服务器端:0.0.0.0本机所有IPv4地址，如果某主机有两个IP地址，该主机一个服务监听的地址是0.0.0.0，那么通过两个IP地址都能够访问该服务。
路由:0.0.0.0表示默认路由，即当路由表中没有找到完全匹配路由的时候所对应的路由。


255.255.255.255
受限广播地址，表示3层广播的目标地址，在同一个广播域范围内所有主机都会接收这个包，广播域的范围可变，跟子网划分相关。


169.254.0.0/16
使用DHCP自动获取IP地址，当DHCP服务器发生故障，或响应时间超时系统会为你分配这样一个地址，不能正常上网。


127.0.0.0/8(127.0.0.1-127.255.255.255)
本地环回地址，能ping通127地址，证明TCP/IP协议栈正常。


RFC1918私有IP地址IPv4地址空间中有一部分特殊的地址，成为私有IP地址，私有IP地址不能直接访问公网(Internet)的IP，只能在本地使用，
A类:10.0.0.0/8(10.0.0.1-10.255.255.255)1个A类网络
B类:172.16.0.0/12(172.16.0.1-172.31.255.255)16个B类网络
C类:192.168.0.0/16(192.168.0.1-192.168.255.255)256个C


常见组播


224.0.0.1 所有主机
224.0.0.2 所有路由器
224.0.0.5 所有运行OSPF的路由器
224.0.0.6 DR和BDR的组播接收地址
224.0.0.9 RIPv2组播更新地址
224.0.0.18 VRRP组播地址
例题






ipv6
IPV6改进

IPV6报文格式

版本（4位）：用0110表示IPv6。
通信类型/流量等级（8位）：用于区分不同的IP分组，相当于IPv4中服务类型字段。
流标签（20位）：标识某些需要特别处理的分组。
负载长度（16位）：表示除了IPv6固定头部40个字节之外的负载长度，扩展头包含在负载长度之中。
下一头部（8位）：指明下一个头部类型，可能是IPv6扩展头部或高层协议(tcp,udp)的头部。
跳数限制（8位）：用于检测路由循环，类似IPV4的TTL。
源地址（128位）：发送节点的地址。
目标地址（128位）：接收节点的地址。
IPV6最大负载长度=固定40字节加+65535=65575
IPV6扩展头部



下一头部编号
下一头部类型
解释




0
Hop-by-Hop Options Header
逐跳选项：这些信息由沿途各个路由器处理


6
TCP (Upper Layer)
该IPv6报文的上层封装是TCP


17
UDP (Upper Layer)
该IPv6报文的上层封装是UDP


43
Routing Header
路由选择头：给出一个路由器地址列表，类似于IPv4的松散源路由和路由记录


44
Fragment Header
分段：处理数据报的分段问题


50
Encapsulating Security Payload
ESP：封装安全载荷，跟IPSec类似


51
Authentication Header
AH：认证头，跟IPSec类似


60
Destination Options
目标选项：选项中的信息由目标节点检查处理



IPV6相关协议
关键词：RIPng、OSPFv3、BGP4+

例题






IPV6地址
IPV6地址基础
IPv6地址128位，采用冒号分隔的十六进制数(8组)表示。
例如:8000:0000:0000:0000:0123:4567:89AB:CDEF
​      ①   ②   ③   ④    ⑤   ⑥   ⑦   ⑧
书写规则：
每个字段前面的0可以省去，例如0123可以简写为123.
一个或多个全0字段，可以用一对冒号“::”代替
有效0位不可以简写，双冒号只能出现一次。
以上地址可简写为 8000::123:4567:89AB:CDEF
IPv4兼容地址可以写为 ∷192.168.10.1
ipv6地址书写
合法写法

12AB:0000:0000:CD30:0000:0000:0000:0000/60
12AB::CD30:0:0:0:0/60
12AB:0:0:CD30::/60

非法写法

12AB:0:0:CD3/60（在16位的字段中可以省掉前面的0，但不能省掉后面的0）（省略了后面的0，缺项了以及CD30的最后一个0）
12AB::CD3/60（这种表示可展开为12AB:0000:0000:0000:0000:0000:0000:0CD3）
12AB::CD30/60（这种表示可展开为12AB:0000:0000:0000:0000:0000:0000:CD30）

IPV6地址分类
单播地址

可聚合全球单播地址：这种地址在全球范围内有效，相当于IPv4公用地址（前缀为001）。
链路本地地址：用于同一链路的相邻节点间的通信（前缀为1111111010），结合MAC地址自动生成。
站点本地地址：相当于IPv4中的私网地址（前缀为1111111011）。
助记：1聚2链3站（1[01]聚2[10]恋3[11]占有）最后两位二进制

组播地址

IPv6中没有广播地址，广播功能被组播代替。
IPv6组播地址的格式前缀为1111 1111，即FF00开头。

任意播地址

表示一组接口的标识符，通常是路由距离最近的接口。
任意播地址不能用作源地址，而只能作为目标地址。
任意播地址不能指定给IPv6主机，只能指定给IPv6路由器。

特殊地址对比（IPV4  VS  IPV6）



IPv4地址
IPv6地址




点分十进制表示
带冒号的十六进制表示，0可以压缩


分为A、B、C、D、E  5类
不分类


组播地址224.0.0.0/4
组播地址FF00::/8


广播地址（主机部分全为1）
任意播（限于子网内部）


默认地址0.0.0.0
不确定地址::


回环地址127.0.0.1
回环地址::1


公共地址
可聚合全球单播地址 FP(前缀)=001


私有地址10.0.0.0/8127.16.0.0/12,192.168.0.0/16
站点本地地址 FEC0::/48


自动专用IP地址169.254.0.0/16
链路本地地址 FE80::/48


-
☆6to4隧道地址 2002::/16



例题：








过度技术
双栈技术:同时运行IPv4和IPv6。
隧道技术:解决IPv6节点之间通过IPv4网络进行通信。
翻译技术:解决纯IPv6节点与纯IPv4节点之间通进行通信。
隧道技术

地址翻译技术
NAT-PT(Network Address Trannslation-Protocol Translator )
实现纯IPv6节点与纯IPv4节点间的通信。
静态NAT-PT 1:1
动态NAT-PT M:N
基于端口NAPT-PT M:1



总结
IPv6报文格式:每个字段作用(跳数限制)
IPv6地址:128位，冒号十六进制法
简写规则:每段中无效零位可以省略，连续一段或多段零可以用::代替，但::只能出现一次。
地址分类:单播/组播/任意播，三类单播:1聚2恋3占有:
过渡技术
隧道技术:解决IPv6节点之间通过IPv4网络进行通信。
双栈技术:同时运行IPv4和IPv6。
翻译技术:解决纯IPv6节点与纯IPv4节点之间通进行通信
ARP与RARP协议
ARP（Address Resolution Protocol，地址解析协议）是将IP地址解析为以太网MAC地址（物理地址）的协议。
RARP分组的格式与ARP分组基本一致。RARP为逆地址解析协议，作用与ARP相反，用于将MAC地址转换为IP地址。










以下是详细解释
上图展示主机A进行arp请求主机B的过程
以下涉及图片来源：【ARP地址解析协议】CSDN博客

1）主机A首先会查询自身的ARP缓存表，是否存在目标ARP缓存条目。
有缓存条目则直接通信。无，则需发送ARP请求报文，来获取对方的mac地址。以广播的形式发送。

二层头部中，目标mac地址全F填充（FF-FF-FF-FF-FF），在该广播域范围内所有主机都会收到该ARP请求报文。（以便于正确的主机能收到该报文）
​    三层头部中，目标mac地址未知，为了保证报文的完整性，全0填充（00-00-00-00-00）。（告诉对方pc1，未知你的mac地址）


2）由于主机A已经将自己的源IP、源mac地址发送给主机B，主机B收到后，把主机A的IP、MAC对应信息填入自己的ARP缓存中(ARP学习)，会将自身ip、自身mac填充，以单播的形式响应（ARP REPLY）。


3）当主机A收到响应后，剥离二层头部，将三层头部中的源IP地址、源Mac地址的映射关系，记录在自己的ARP缓存表中。（此时，双方都有对方的ARP条目，可以正常通信了。）

为了防止ARP缓存表项过大，每个ARP条目隐藏运行一个1200s的定时器，如果在此时间内收到该条易的报产则刷新该表项，如果没收到，则清空该条目
ARP缓存表的条目不是一直缓存在里面的，会隔一段时间进行刷新，或者将长时间不进行通信的条目清除掉。
免费arp

ARP代理

总结：

例题







ICMP和ICMPv6
ICMP
ICMP(Internet Control Message Protocol,Internet控制报文协议),协议号为1,封装在IP报文中，用来传递差错、控制、查询等信息，典型应用ping/tracert依赖ICMP报文。
ICMP报文类型与代码

ICMP应用-ping

Echo Request和Echo Reply分别用来查询和响应某些信息，进行差错检测。
ICMP应用-tracert
tracert（traceroute）是一个常用的网络工具，用于追踪分析数据包在网络中传输时经过的路径，并输出到达目标地址的延迟情况和节点信息。

例题









ICMPv6
ICMPv6报文分为两类:差错报文和信息报文

ICMPv6差错报文应用-Path MTU发现

ICMPV6信息报文应用-Ping

NDP
IPv6邻居发现协议(Neighbor Discovery Protocol,简称NDP或ND)定义了5种类型的信息，包括路由器宣告、路由器请求、路由重定向、邻居请求和邻居宣告，具体如下功能:
路由器发现:发现链路上的路由器，获得路由器通告的信息。
无状态自动配置:通过路由器通告的地址前缀，终端自动生成IPv6地址。
重复地址检测:获得地址后，进行地址重复检测，确保地址不存在冲突。
地址解析:请求目的网络地址对应的数据链路层地址，类似IPv4的ARP
邻居状态跟踪:通过NDP发现链路上的邻居并跟踪邻居状态。
前缀重编址:路由器对所通告的地址前缀进行灵活设置，实现网络重编址。
重定向:告知其他设备，到达目标网络的更优下一跳。
NDP报文类型及功能

IPV6地址自动配置的分类
无状态地址自动配置、有状态地址自动配置


例题：

IP组播技术与MPLS
组播技术

组播网络架构

例题：

MPLS

例题：


TCP和UDP协议
TCP和UDP介绍
传输层主要两个传输协议，分别是TCP和UDP
(1)TCP是面向连接的，一般用于传输数据量比较少，且对可靠性要求高的应用。[文件]
(2)UDP是一种不可靠的、无连接的协议。用于传输数据量大，可靠性要求不高但要求速度快的场景【音视频】


例题：


TCP报文格式
TCP头部最大可以扩展到60字节



例题：



TCP伪首部
TCP伪首部本质是IP头的一部分，包含源目IP地址，协议号、TCP报头和用户数据，主要用于TCP校验 和计算。

UDP报文格式
UDP的最大负载也就是除开报头的数据（65527B），报文总长度16位

与TCP相比，做了很大精简，省略诸多控制字段。
例题





TCP三次握手和四次挥手
ACK=0表示第一次初始化报文


tcp四次挥手断开连接

例题







TCP序列号及确认号（控制报文）

TCP序列号及确认号（数据报文）

例题



流量控制和拥塞控制
流量控制:为了防止发送方发送速度过快,导致接收方处理不过来，造成丢包重传，浪费网络资源。
TCP流量控制机制:可变大小的滑动窗口

TCP滑动窗口机制

5分钟了解滑动窗口协议-[iiiiiF呀]
这个博主讲的很细，非常ok
TCP拥塞控制
有了流量控制，可以调节发送端和接收端的节奏，为什么还要有拥塞控制?
流量控制:在AB两个端点进行。
拥塞控制:在AB和所有网络节点中进行。


快重传快恢复


例题：









重点协议端口号总结

源端口随机分配，目标端口使用知名端口。
应用客户端使用的源端口一般为系统中未使用的且大于1024
目的端口号为服务器端应用服务器的进程，如telnet为23
主流网络协议魔力图


例题








路由协议
路由表
什么是路由
当路由器(或其他三层设备)收到一个IP数据包时，会查看数据包的IP头部中的目的IP地址，并在路由表中进行查找，在匹配到最优的路由后，将数据包扔给该路由所指出接口或者下一跳。

路由器工作原理
建立并维护路由表RIB.
直连路由:路由器本地接口所在网段，
静态路由:手工配置的路由条目，
动态路由:路由器之间通过动态路由协议学习到的路由
根据路由表进行数据转发
查看路由表




路由协议或路由种类
相应路由的优先级




DIRECT
0


OSPF
10


IS-IS
15


STATIC
60


RIP
100


OSPF AS E
150


OSPF NSSA
150


IBGP
255


EBGP
255



迭代路由

IP路由查找的最长匹配原则


例题：




静态路由和默认路由
众所周知：不同网段之间是无法通信的，10网段想去到R2或R3怎么办呢


静态路由配置
静态路由的配置(关联下一跳IP的方式 ) 90%都会用这个方式来配置
[Router]ip route-static 网络号 掩码 下一跳IP地址
静态路由的配置(关联出接口的方式)
[Router]ip route-static 网络号 掩码 出接囗
静态路由的配置(关联出接口和下一跳IP的方式 )
[Router] ip route-static 网络号 掩码 出接囗 下一跳IP地址
配置示例

子网掩码可以选择255.255.255.0也可以选择24,不仅限于24掩码，就是其他掩码也可以适用

#去往100网段[R1] ip route-static 192.168.100.0 255.255.255.0 192.168.12.2
#去往200网段[R1] ip route-static 192.168.200.0 24 192.168.13.2

默认路由


静态路由与默认路由特点

静态路由
配置简单
手工配置，可控性高
节省网络带宽
网络大，工作量大，比如配置1000条静态路由
网络故障，无法响应拓扑动态变化


默认路由
默认路由是一种特殊的静态路由，走投无路的选择
配置简单，简化管理
降低路由 CPU、内存资源
用处:网络出口路由器/防火墙/核心交换机

等价路由和浮动路由

例题：


路由协议分类
路由协议分类方式:按距离矢量和链路状态分类、按内部网关和外部网关协议
距离矢量路由协议一般基于Bellman-Ford算法，链路状态路由协议基于Dijkstra算法(也叫SPF最短路径优先算法)

例题：



RIP
RIP(Routing Information Protocol,路由信息协议)
内部网关协议，距离矢量路由协议。
华为设备上路由优先级为100。
计算跳数:最大15跳，16跳不可达，一般用于小型网络。
几个时钟:30s周期性更新路由表、180s无更新表示不存在、300s删除路由表。
支持等价负载均衡和链路冗余，使用UDP 520端口。
RIPv2支持自动路由汇总

RIPv1与RIPv2对比★非常重要要记忆

距离矢量路由协议

距离矢量路由协议特点

RIP路由的度量值
RIP以跳数作为度量值，虽然简单，但事实上不科学，如下图


路由的优先级,越小越优先

RIP防环机制 简单理解一下就行，不用背，大厂都删了
①最大跳数:当一个路由条目发送出去会自加1跳，跳数最大为16跳，意味着不可达。
②水平分割:一条路由信息不会发送给信息的来源。
③反向毒化的水平分割:把从邻居学习到的路由信息设为16跳，再发送给那个邻居
④抑制定时器和触发更新也可以防止环路。
例题：




OSPF
OSPF(Open Shortest Path First，开放式最短路径优先协议)是目前应用最广泛的路由协议。
OSPF是一种内部网关协议IGP，也是链路状态路由协议，支持VLSM，通过带宽计算最佳路径，采用Dijkstra算法(也叫SPF最短路径算法)
华为设备OSPF协议优先级Internal10，External150(import-route)
支持在ABR/ASBR手工路由汇总，不支持自动汇总。
OSPF特点

HELLO定时器


DR与BDR的作用




LSA

例题：


OSPF Cost
OSPF使用Cost“开销”作为路由度量值。
OSPF接口cost=100M/接口带宽，其中100M为OSPF参考带宽(reference-bandwidth)，可修改。
每一个激活OSPF的接口都有一个cost值。
一条OSPF路由的cost由该路由从起源 一路到达本地的所有入接口cost值的总和。

OSPF区域概念
所有非骨干区域必须与骨干区域直连。

OSPF路由器角色

区域内路由器IR     Internal Router
区域边界路由器ABR  Area Border Router
骨干路由器BR       Backbone Router
AS边界路由器ASBR   AS Boundary Router
总结
触发式更新、分层路由，支持大型网络。
Area 0.0.0.0或者Area 0来表示骨干区域，不是区域1
点对点网络上每10秒发送一次hello，在NBMA网络每30秒发送一次，Deadtime为hello时间4倍。
OSPF系统内几个特殊组播地址:
224.0.0.1-在本地子网的所有主机。
224.0.0.2-在本地子网的所有路由器,
224.0.0.5-运行OSPF协议的路由器。
224.0.0.6-OSPF指定/备用指定路由器DR/BDR.
224.0.0.9-RIPv2路由器
224.0.0.18 VRRP（虚拟路由器冗余协议）
目标地址224.0.0.5指所有路由器，用于发现建立邻居、还用于选出区域内的指定路由器DR和备份指定路由器BDR(DR/BDR组播地址是224.0.0.6)
例题：








OSPF和RIP的区别
(1)RIP使用距离矢量算法，通过学习其他路由器发送的路由表信息，生成路由表。OSPF首先获取全网的拓扑信息，然后利用SPF最短路径优先(也叫Diikstra)算法，生成路由表。
(2)RIP一般适用于小型网络，OSPF适用于中大型网络。
(3)RIP和OSPF都是动态路由协议，可以根据拓扑变化，更新路由表。RIP配置简单，功能也相对简单，收敛速度慢，容易形成环路。OSPF支持层次化组网、网络优化、等价负载均衡、报文加密等功能。
BGP
BGP(Border Gateway Protocol,边界网关协议)外部网关协议,用于不同自治系统AS之间，寻找最佳路由。

BGP四个报文

BGP选路规则
最重要的时候2,3,4,5,6

丢弃下一跳不可达的路由。
优选Preference_Value最高的路由（私有属性，仅本地有效）。
优选Local_Preference最高的路由。
优选手动聚合 &gt; 自动聚合 &gt; network &gt; import &gt; 从对等体学到的。
优选AS_Path最短的路由。
起源类型IGP &gt; EGP &gt; Incomplete。
对于来自同一AS的路由，优选MED最小的。
优选从EBGP学来的路由（EBGP &gt; IBGP）。
优选AS内部IGP的Metric最小的路由。
优选Cluster_List最短的路由。
优选Originator_ID最小的路由。
优选Router_ID最小的路由器发布的路由。
优选IP地址最小的邻居学来的路由。


ISIS


例题











要分两种情况AA是配ospf之后，DD是配OSPF之前，具体看下面的router-id选举规则





internet应用
远程登入

例题


文件传输协议
关键词：ftp，tftp

例题


电子邮件协议
关键词：pop3，smtp，imap

例题




超文本传输协议HTP

网页访问过程

例题：


P2P应用





网络互联设备
总结

中继器与集线器


集线器工作原理


就是因为会出现对所有接口进行泛洪，这样所有的终端都会收到数据，会造成数据泄露
网桥与交换机

交换机工作原理（交换机寻址）








例题

路由器与三层交换机
路由器

三层交换机


例题


路由器跟三层交换机有什么区别 ?
典型园区网拓扑结构

对比

多层交换机和网关设备
网关是互连网络中操作在OSI传输层之上的设施。
网关的主要功能:
·(1)连接网络层之上执行不同协议的子网，组成异构型的互联网。
·(2)网关能对互不兼容的高层协议进行转换。
·(3)为了实现异构型设备之间的通信，网关要对不同传输层、会话层、表示层、应用层协议进行翻译和转换。


SDN可编程交换机

网络演进总结

子网划分专题VLSM  CIDR
IP地址基础



网络掩码（子网掩码）

三类地址

子网划分VLSM


子网划分原理-网络位向主机位借位(分饼)

考点
考点1:已知子网数量，进行子网划分


考点2:已知子网主机数量，进行子网划分

考点3:掩码转换

例题：



考点4:掩码作用位置与地址块计算




考点5:应用型子网划分













无类域间路由CIDR






IPv6子网划分


要点：

2024年5月案例分析试题一







网络安全
网络安全基础
网络安全威胁类型
(1)窃听:例如搭线窃听、安装通信监视器和读取网上的信息等。
(2)假冒:当一个实体假扮成另一个实体进行网络活动时就发生了假冒。
(3)流量分析:对网上信息流观察和分析推断出网上传输的有用信息。
(4)重放攻击:重复发送一份报文或报文的一部分，以便产生一个被授权效果。
(解决办法：随机数、时间戳)

(5)数据完整性破坏:有意或无意地修改或破坏信息系统，或者在非授权和不能监测的方式下对数据进行
(6)分布式拒绝服务DDoS:当一个授权实体不能获得应有的对网络资源的访问或紧急操作被延迟时，就发生了拒绝服务。DDoS是对传统DoS攻击的发展，黑客控制海量肉鸡发起。SYN-Flooding、HTTP-Flood/CC
(7)恶意软件：恶意软件指任何故意设计会损害计算机或信息系统的文件或程序包括木马病毒、流氓软件、间谍软件、勒索病毒等，这些恶意软件将自己伪装成合法文件从而绕过检测。
(8)web攻击： 包括:跨站脚本(XSS)攻击、SQL注入攻击、跨站域请求伪造(CSRF)攻击、WebShell攻击以及利用软件漏洞进行的攻击。
(9)高级可持续（APT）攻击：APT攻击是多种常见网络攻击手段/技术的组合，通过间接迂回方式，渗透进组织内部系统潜伏起来，持续不断地收集攻击目标相关的各种信息，其潜伏和收集信息时间可能会长达数年，当条件成熟时，伺机而动，达到攻击目的。这类攻击一般是有组织有预谋的，攻击目标一般为国家和政府部门的核心信息系统，一旦对这些系统造成破坏，对国家安全、社会秩序、经济活动会造成非常大的影响。
网络攻击分类
被动攻击：嗅探、窃听、流量分析，最难被检测，重点是预防，主要手段是加密
主动攻击：假冒、重放、数据完整性破坏、分布式拒绝服务DDoS、恶意软件、web攻击、高级可持续（APT）攻击等，重点是检测而不是预防，手段有防火墙、IDS
网络安全防范技术
网络安全措施： 数据加密、数字签名、身份认证、防火墙、特征过滤等。
(1)数据加密。
(2)数字签名：用来验证数据或程序的完整性。
(3)身份认证：认证用户的合法性，例如密码技术、利用人体生理特征(如指纹)进行识别、智能 IC卡、数字证书等。
(4)防火墙：防火墙是位于两个网络之间的屏障，进行访问控制。
(5)入侵检测和阻断：对网络流量或应用访问进行攻击特征匹配和过滤，阻断非法攻击，常见设备有 入侵防护系统 (IPS)、Web  应用防火墙 (WAF)  等。
(6)访问控制：在骨干网络设备或者服务器配置访问控制策略，允许或者拒绝某些源对目标的访问， 实现网络安全防护。
(7)行为审计。对网络行为或者用户操作进行审计，阻断非法操作或者高危操作行为，常见设备：数据库审计系统、堡垒机、上网行为管理系统等。
等级保护




网络信息安全法律与政策

例题






CC攻击日志

DDoS攻击和CC攻击





DDoS攻击VS CC攻击







来源
危害
协议
变种


CC攻击
真实IP
业务故障、或者业务可用  但用户隐私等被窃取
HTTP
较多


DDoS攻击
伪造IP
流量打满，业务彻底不可 用
TCP/UDP/IP
较少






信息加密技术
密码学基本概念
信息安全的核心是密码技术，研究数据加密的科学叫作密码学(Cryptography)。
现代密码理论的一个根本性原则Kerckhoffs原则:密码体制的安全性不依赖于算法的保密，而仅仅依赖于密钥的保密。
不论窃听者获取了多少密文，如果密文中没有足够的信息可以确定出对应的明文，则这种密码体制是无条件安全的，或称为理论上不可破解的。
在无任何限制的条件下，目前几乎所有的密码体制都不是理论上不可破解的。能否破解给定的密码取决于使用的计算资源。
经典加密技术
经典加密技术主要有3种:
(1)替换加密(Substitutkm)。用一个字母替换另一个字母，例如Caesar密码(D替换a, E替换b等)。这种方法保留了明文的顺序，可根据自然语言的统计特性(例如字母出现的频率)破译。
(2)换位加密(Transposition).按照一定的规律重排字母的顺序。(3)一次性填充(One-TimePad)。把明文变为位串(例如用ASCII编码)，选择一个等长的随机位串作为密钥，对二者进行按位异或得到密文。
现代加密技术
现代密码体制使用的基本方法仍然是替换和换位，但是采用更加复杂的加密算法和简单的密钥，而且增加了对付主动攻击的手段。例如加入随机的冗余信息，以防止制造假消息;加入时间控制信息，以防止旧消息重放。
替换和换位可以用简单的电路来实现
私钥密码/对称密码体制
私钥密码又称对称密码，该体制的特点是加密和解密使用相同的密钥。消息的收发双方必须事先通过安全渠道交换密钥。
·优点:加解密速度快、密文紧凑、使用长密钥时的难破解。
·缺点:密钥分配问题、密钥管理问题、无法认证源。
常见的对称密钥加密算法如下:DES、3DES、AES、RC4/5、IDEA。

以下这个表格要背！



算法
解释
特点




DES
Data Encryption Standard，数据加密标准，分组加密算法，采用移位+替换，速度快，密钥易产生。
分组长度64位，密钥长度64位，有效密钥长度是56位


3DES
三重DES（TDEA），使用DES对明文进行“加密-解密-加密”操作。加密：K1加密→K2解密→K3加密解密：K3解密→K2加密→K1解密一般K1和K3是相同的密钥。
密钥长度112位


IDEA
International Data Encryption Algorithm，国际数据加密算法，分组加密算法。设计思想：混合使用来自不同代数群中的运算。
明文和密文分组都是64位，密钥长度为128位，用于PGP


AES
分组加密算法Advanced Encryption Standard，高级加密标准。可以通过硬件实现，速度快，像3DES一样安全。
分组长度128位，支持128，192和256位三种密钥长度


RC4/5
流加密算法，用于WIFI。加密速度快，可达到DES的10倍。
分组和密钥长度都可变



例题



公钥密码/非对称密码
公钥密码又称为非对称加密，就是对数据加密和解密的密钥是不同的。
·优点:密钥分发方便、密钥保管量少、支持数字签名
·缺点:加密速度慢(计算量大，不适合加密大数据)、数据膨胀率高
每个实体有两个密钥:公钥公开，私钥自己保存
·公钥加密，私钥解密，可实现保密通信
·私钥加密，公钥解密，可实现数字签名
常见的非对称加密算法如下:
·RSA:512位(或1024位)密钥，计算量极大，难破解。
·Elgamal、ECC(椭圆曲线算法)、背包算法、Rabin、DH等。

密码分类

例题

混合密码
混合密码:发送方用对称密钥加密需要发送的消息，再用接收方的公钥加密对称密钥，然后一起发送给接收方;接收方先用自己的私钥解密得到对称密钥，然后用对称密钥解密得到明文

国产加密算法（SM）系列
《中华人民共和国密码法》密码分为核心密码、普通密码和商用密码，实行分类管理
核心密码、普通密码用于保护国家秘密信息，属于国家秘密，由密码管理部门依法实行严格统一管理。
商用密码用于保护不属于国家秘密的信息，公民、法人可用。
国产密码算法:是指由国家密码研究相关机构自主研发，具有相关知识产权的商用密码算法，目前已经公布的国产密码算法如下:



算法名称
算法特征描述




SM1
对称加密，分组长度和密钥长度都为128比特


SM2
非对称加密，用于公钥加密算法、密钥交换协议、数字签名算法椭圆曲线问题ECC算法、摘要算法）


SM3
杂凑算法（哈希），分组512位，输出杂凑值长度为256位


SM4
对称加密，分组长度和密钥长度都为128比特


SM9
标识密码算法，支持公钥加密、密钥交换、数字签名等安全功能



2非3哈9标识，14成双对


例题






Hash哈希算法
HASH函数，又称为杂凑函数、散列函数，它能够将任意长度的信息转换成固定长度的哈希值（数字摘要），并且任意不同消息或文件所生成的哈希值是不一样的。
h表示hash函数，则h满足下列条件：
（1）h的输入可以是任意长度的消息或文件M。
（2）h的输出的长度是固定的。
（3）给定h和M，计算h（M）是容易的。
（4）给定h的描述，找两个不同的消息M1和M2，使得h（M1）=h（M2）是计算上不可行的。
哈希函数特性：不可逆性（单向）、无碰撞性、雪崩效应。
常见的Hash算法有：
（1）MD5算法：以512位数据块为单位来处理输入，产生128位的信息摘要。常用于文件校验。
（2）SHA算法：以512位数据块为单位来处理输入，产生160位的哈希值，具有比MD5更强的安全性。
（3）SM3国产算法：消息分组长度为512比特，输出256位摘要。
HASH应用-1.文件完整性校验
重要文件确保无损坏等之后生成hash值1，将文件发送给对方，他自己再生成hash值2两个值如果相等，这发送给对方的文件无损坏

HASH应用-2.账号密码存储

明文存储，无安全防护




用户名
密码




test
123456




哈希存储（Rainbow Table Attack，彩虹表攻击）




用户名
密码




test
e10adc3949ba59abbe56e057f20f883e




（盐+哈希）存储（彩虹表攻击失效）




用户名
盐
密码




test
2026-2-20 20:08:23
d8e423a9d5eb97da9e2d58cd57b92808



HASH应用-3.用户身份认证
增加一个随机数R做哈希 MAC=Hash(密码+R)
需要双方预先知道这个R
MAC:消除中间人攻击，源认证+完整性校验
张三发起认证，服务端检查有张三返回一个随机数R，客户端将自己输入的密码和随机数R合在一起生成hash值（MAC），发回给服务端，然后相同操作，进行对比，如果相同，则对比成功

例题




数字签名

签名方用自己的私钥进行签名，对方收到后，用签名方的公钥进行验证。
数字签名算法（公钥加密算法）：RSA、Rabin、ELGamal签名体制和DSS标准。
数据签名是用于确认发送者身份和消息完整性的一个加密消息摘要，具有如下特点：

（1）数字签名是可信的。
（2）数字签名不可伪造。
（3）数字签名不能重新使用。
（4）签名文件是不能改变的。
（5）数字签名不能抵赖。
（6）接收者能够核实发送者身份。



数字签名过程：常用的签名算法是RSA，采用发送者私钥签名，接收方收到数据后，采用发送者的公钥进行验证。可以直接对明文进行签名，由于明文文件可能很大，这种签名方案效率低。所以也可以先由明文生成Hash(比如MD5生成128位)，再对Hash值进行签名，效率更高。







数字证书与CA
为什么需要数字证书

数字证书类比

PKI体系结构
关键词：pki、ca、RA、证书发布系统、crl库

例题






证书链
如果用户数量很多，通常由多个CA，每个CA为一部分用户发行和签署证书。
如果有两个CA，X1和X2，假设用户A从CA机构X1获得了证书，用户B从X2获得证书，如果两个证书发放机构X1和X2彼此间安全交换了公钥，彼此信任，那么他们的证书可以形成证书链。

A通过一个证书链来获取B的公钥，证书链表示为:X1《X2》X2《B》
B也能通过相反的证书链来获取A的公开密钥:X2《X1》X1《A》





虚拟专用网
虚拟专用网基础
虚拟专用网(Virtual Private Network)

一种建立在公网上的，由某一组织或某一群用户专用的通信网络
二层:L2TP和PPTP(基于PPP)  （数据链路层）
三层:IPSec和GRE    （网络层）
四层:SSL/TLS       （传输层）

其中L2TP和GRE不是加密技术
实现虚拟专用网关键技术
隧道技术(Tuneling)
加解密技术(Encryption&amp;Decryption)
密钥管理技术(Key Management)
身份认证技术(Authentication)
VPN分类：根据应用场景

VPN分类：根据VPN实现层次

二层隧道协议

PPP协议可以在点对点链路上传输多种上层协议的数据包，有校验位。

二层隧道协议有PPTP和L2TP，都是把数据封装在PPP帧中在因特网上传输。
PPP认证方式：PAP和CHAP
PAP:两次握手验证协议，口令以明文传送，被验证方首先发起请求。
CHAP:三次握手，认证过程不传送认证口令，传送HMAC散列值。

例题



IPSec基础
IPSec(IP Security)是IETF定义的一组协议，用于增强IP网络的安全性。
IPSec协议集提供如下安全服务:
数据完整性(Data Integrity )
认证(Autentication )
保密性(Confidentiality)
应用透明安全性(Application-transparent Security)
IPSec原理
IPSec功能分为三类:认证头(AH)、封装安全负荷(ESP)、Internet密钥交换协议(IKE)
``认证头(AH):提供数据完整性和数据源认证，但不提供数据保密服务，实现算法有MD5、SHA.
封装安全负荷(ESP):提供数据加密功能，加密算法有DES、3DES、AES等。
Internet密钥交换协议(IKE):用于生成和分发在ESP和AH中使用的密钥。

IPSec两种封装模式
关键词：原始模式，传输模式，隧道模式

传输模式效率高，隧道模式更安全
GRE虚拟专网

例题











应用层安全协议
SSL/TLS

HTTPS与S-HTTP





SET和PGP




S/MIME
安全多用途互联网邮件扩展协议(Security/Multipurpose Internet Mail Extensions,S/MIME)提供电子邮件安全服务
S/MIME采用MD5生成数字指纹，利用RSA进行数字签名，并采用3DES加密数字签名
不要混淆MIME和S/MIME，MIME不具备安全功能。
kerberos和PKI








防火墙与入侵检测
防火墙
防火墙可以实现内部网络信任网络与外部不可信任网络(Internet)之间或是内部网络不同区域隔离与访问控制。
教材防火墙功能:访问控制、NAT、路由、VLAN、链路聚合、网络监控等，不包含应用层功能。
防火墙模式:路由模式、透明模式和混合模式。

透明/网桥模式：防火墙相当于二层交换机，无需配置IP地址。
路由模式：防火墙具有三层功能，需要配置IP地址，可以做NAT。
混合模式：根据需求，可以同时以透明模式和路由模式工作。


防火墙区域划分
根据网络的安全信任程度和需要保护的对象，人为划分若干安全区域，包括
本地区域(Local):防火墙本身。
信任区域(Trust):内部安全网络，如内部文件服务器、数据库服务器。
非信任区域(Untrust):外部网络，比如互联网。
军事缓冲区域(DMZ):内部网络和外部网络之间的网络，常放置公共服务设备，向外提供信息服务。

例题












入侵检测（IDS）


华为交换机端口镜像配置
将交换机网口GigabitEthernet1/0/2的流量镜像到部署Snort的网口GigabitEthernet1/0/1上。
进入系统模式
system-view 
定义索引号为1的观察端口g1/0/1
observe-port 1 interface gigabitethernet 1/0/1`
进入流量采集接口
interface gigabitethernet 1/0/2 
将g1/0/2入方向的流量镜像到g1/0/1
port-mirroring to observe-port 1 inbound
入侵检测分类
按信息来源分:HIDS、NIDS、DIDS(主机/网络/分布式)。
按响应方式分:实时检测和非实时检测。
按数据分析技术和处理方式分:异常检测、误用检测和混合检测。


异常检测:建立并不断更新和维护系统正常行为的轮廓，定义报警值，超过阈值则报警能够检测从未出现的攻击，但误报率高。


误用检测:对已知的入侵行为特征进行提取，形成入侵式库，匹配则进行报警。已知入侵检测准确率高，对于未知入侵检测准确率低，高度依赖特征库
检测技术:专家系统和模式匹配。


入侵防御系统（IPS）

入侵防御系统IPS vS 入侵检测系统IDS  （案例分析一行2分）
部署位置不同:IPS一般串行部署，IDS一般旁路部署
入侵响应能力不同:IPS能检测入侵，并能阻断，IDS只能检测记录日志，发出警报




网络安全防护系统
Web应用防火墙
Web应用防火墙(Web Application Firewal,WAF)是一种用于HTTP应用的防火墙，工作在应用层可以更深入地检测Web流量，通过匹配Web攻击特征库，发现攻击并阻断。
Web攻击:SQL注入、XSS、反序列化、远程命令执行、文件上传、Webshell。
WAF功能：
(1)Web攻击防护，通过特征匹配阻断SQL注入、跨站脚本攻击、Web扫描等攻击行为。
(2)Web登录攻击防护，包括暴力破解防护、撞库防护、弱口令防护等。
(3)漏洞利用防护，包括反序列化漏洞利用、远程命令执行利用等其他软件漏洞利用攻击防护
(4)Web恶意行为防护，包括恶意注册防护、高频交易防护、薅羊毛行为防护、短信验证码滥刷防护等.
(5)恶意流量防护，包括CC攻击防护、人机识别、TCP Flood攻击防护等
漏洞扫描

统一威胁管理UTM和下一代防火墙NGFW

数据库审计

态势感知

分钟级联动防护-全网协同

华为沙箱-全面领先的未知文件检测机制


运维安全管理与审计系统(堡垒机)

蜜罐

例题






网络操作系统与应用服务器
Windows Server 2016

国产操作系统




UOS Linux网络配置
关键词：ifcfg-ens

关键词：nmcli



关键词：ifconfig

关键词：route

关键词：ip


关键词：netstat





UOS Linux文件和目录管理
文件管理

文件类型

例题：

文件权限


例题：


13个Linux基础命令







UOS Linux用户和组管理



例题：


UOS Linux防火墙配置
防火墙类型

firewalld

iptables的四表五链


语法格式



nftables






例题：







Web应用服务配置
web服务软件






例题：




DHCP
工作原理

DHCP租期更新

DHCP报文格式

Option 43 应用举例

华为DHCP option43配置

DHCP常规配置，为AP分配IP地址。

[DHCP-HW] dhcp enable
[DHCP-HW] ip pool huawei
[DHCP-HW-ip-pool-huawei] network 192.168.100.0 255.255.255.0
[DHCP-HW-ip-pool-huawei] gateway-list 192.168.100.1

配置Option 43，使AP能够获得AC的IP地址，假设AC的IP地址是10.10.10.1。

[DHCP-HW-ip-pool-huawei] option 43 sub-option 3 ascii 10.10.10.1
dhcp server option 43 sub-option 1 hex c0a86401
dhcp server option 43 sub-option 2 ip-address 192.168.100.1
dhcp server option 43 sub-option 3 ascii 192.168.100.1
DHCP分配固定ip地址

DHCP中继（DHCP Relay）

DHCP Relay 工作原理

配置举例

[R1]interface GigabitEthernet0/0/0[R1-GigabitEthernet0/0/0]ip address DHCP-alloc[R1-GigabitEthernet0/0/0]quit[R2]DHCP server group HW[R2-DHCP-server-group-HW]DHCP-server 10.1.1.2[R2-DHCP-server-group-HW]quit[R2]interface GigabitEthernet 0/0/1[R2-GigabitEthernet0/0/1]ip address 10.1.1.124[R2-GigabitEthernet0/0/1]quit[R2]interface GigabitEthernet 0/0/0[R2-GigabitEthernet0/0/0]ip address 192.168.1.124[R2-GigabitEthernet0/0/0]DHCP select relay[R2-GigabitEthernet0/0/0]DHCP relay server-select HW[R2-GigabitEthernet0/0/0]quit
DHCP Snooping防止私接DHCP服务器

DHCP Snooping配置
DHCP Snooping配置
1.开启DHCP功能，所有接口默认为 untrusted
[Huawei] dhcp enable
2.开启DHCP snooping功能
[Huawei] dhcp snooping enable
[Huawei]int GigabitEthernet0/0/1
3.接口下开启DHCP Snooping功能
[Huawei-GigabitEthernet0/0/1]dhcp snooping enable
4.把接口g0/0/1设置为信任接口
[Huawei-GigabitEthernet0/0/1]dhcp snooping trusted
例题：








DNS
DNS作用:把域名转换成IP地址。
DNS/DHCP服务器必须为静态IP地址，而Web/FTP均可为动态IP
Linux系统中提供DNS服务的组件为 bind，主配置文件为named.conf
诊断域名系统基础结构的信息和查看DNS服务器的IP地址命令是:nslookup.
DNS记录类型

DNS查询过程

DNS查询方式
递归查询:域名服务器帮助用户进行名字解析，并返回最后的结果。【老好人】
迭代查询:域名服务器进行迭代访问，反复多次，直到最后找到结果。【踢皮球】

例题





组网技术
交换机基础
交换机分类

其他分类方式


华为横向虎拟化 CSS+iStack
框式交换机堆叠多用于网络核心层或汇聚层，而盒式交换机堆叠一般用于汇聚层或接入层。

多台设备堆叠和集群


堆叠的优势

堆叠的劣势

(1)堆叠技术优点:
①逻辑上变为一台设备，简化网络管理;
②提升系统可靠性，避免单点故障;
③配合链路聚合等技术，防止接口被生成树阻塞，提升链路利用率。
堆叠技术缺点:
①堆叠是私有协议，不支持跨厂商设备堆叠;
②系统升级会造成业务中断;
③多台设备堆叠，只有一个主控处于工作状态，存在资源浪费。
堆叠的三种角色

交换机性能参数


例题





路由器基础
路由器接口
广域网WAN端口和局域网LAN端口。
RJ45端口:常规以太网电口。
以太网光口:GBIC/SFP/SFP+/QSFP+/SFP28.
AUI端口:用于令牌环或总线型以太网接口。
Serial串口:用于连接DDN、帧中继、X.25、PSTN等网络。
ISDN BRI/PRI端口:ISDN线路互联。BRI:144K,PRI:2.048M
SDH POS接口:155M/622M/2.5G/10G。
设备管理方式

例题：



网络管理
网络管理基础
网络管理体系结构
网络管理五大功能域:故障管理、配置管理、计费管理、性能管理和安全管理。
助记:“安配能计障’
故障管理:尽快发现故障，找出故障原因，以便采取补救措施。
网络监控系统体系结构
代理与监视器两种通信方式:轮询和事件报告

轮询时间与管理设备数量


例题：



网络管理协议五大标准
ISO制定:CMIS/CMIP公共管理信息服务规范。
基于TCP/IP:简单网络管理协议SNMPv1、SNMPv2、SNMPv3。
基于局域网:远程监控网络RMON-1和RMON-2。
IEEE制定:基于物理层和数据链路层CMOL。
ITU-T:电信网络管理标准TMN。
例题：

RMON


SNMP和RMON区别

例题：

SNMP
SNMP-2个服务2个端口5个报文（225）


SNMP协议的操作-5个报文


例题：






SNMP版本对比




例题：




管理数据库MIB-2

例题

网络管理命令
网络诊断命令 ipconfig


故障诊断 ping traceroute

ARP命令

Netstat


route和nslookup

例题：



网络故障排除工具
网络故障排查工具


display显示认证失败原因




双绞线测试工具
多功能网络寻线仪/测线仪


光纤测试工具-红光笔

光纤熔接机


光纤测试工具-光功率计


光模块功率
华三40G光模块输出光功率/接收光功率


光纤测试工具-光时域反射仪OTDR


光功率计和光时域反射仪OTDR原理对比

例题：






网络故障诊断与排查



网络规划和设计
综合布线



注意线缆长度的限制






例题：
















网络分析与设计
网络规划设计模型



网络设计的约束因素


网络流量分析


例题：







技术评价

例题：

网络结构与功能
局域网结构类型

单核心局域网特点

双核心局域网特点

环形局域网结构

环形局域网结构特点

层次化网络设计/三层组网架构

层次局域网结构特点

三层组网架构

例题：

层次化网络模型优点

层次化网络模型原则

例题：





网络冗余设计


例题：


广域网接入技术

接入和终结设备

PON接入

其他接入技术
关键词：MSTP

例题：






存储与RAID技术专题
存储基础
存储系统层次结构
存储体系结构如下图，分为寄存器、高速缓冲存储器、主存储器和外存储器

存储介质

HDD机械硬盘与SSD固态硬盘

例题：








传统RAID技术
RAID定义
RAID(Redundant Array of Independent Disks)即独立磁盘冗余阵列，RAID技术将多个单独的物理硬盘以不同的方式组合成一个逻辑硬盘，从而提高了硬盘的读写性能和数据安全性。

RAID数据组织及存取方式

RAID热备与重构

RAID基本概念-逻辑卷

常用RAID技术-RAID O和RAID 1

常用RAID技术-RAID 3和RAID 5

常用RAID技术-RAID 6

RAID组合-RAID 10和RAID 50

常用RAID技术对比

例题：



RAID2.0技术
RAID故障自检自愈，保证系统可靠性

RAID2.0技术优势


网络存储体系DAS/NAS/SAN

DAS起源

FC SAN起源（由DAS到FC SAN）

IP SAN起源(由FC SAN到IP SAN)

NAS起源(网络数据共享与交换需求)

几种存储对比


例题：


分布式存储/超融合

分布式存储组成与特点

数据备份策略

例题：

数据备份网络架构

数据备份网络架构:Server-Free

例题：








二层协议专题
HDLC
HDLC高级数据链路控制


HDLC帧结构
HDLC帧格式及控制字段


例题：








PPP/L2TP/PPTP
7.6.1 虚拟专用网基础
以太网帧格式
4.5以太网帧
VLAN扩展技术
端口隔离技术

技术背景
vlan聚合

Super-VLAN/Aggregate-vlan



QinQ
由于VLAN的VID范围是[0,4095](212=4096),而QinQ技术要打上两层VLAN所以他的范围是4096*4096，224位可以表示出1600万个网络

基本QinQ
基于端口，比如说经过G0/0/1的端口的所有流量我都给你打上100的标签
缺点：无法细化流量，太简单粗暴

灵活QinQ
对经过这个端口的流量，假设你是10标签的流量就给打上100的标签，假设你是20标签的流量，就给你打上两百的标签
也可以基于很多方式进行分类看下图红色注释

QinQ在园区网络中的应用

QinQ配置举例-基本QinQ

QinQ配置举例-灵活QinQ

VxLan
传统网络面临的问题

VxLAN报文格式

例题：
VNI用来表示不同用户的字段。224位可以表示出1600万个网络















三层封装协议专题
ipv4和ipv6
6.2 IPV4
6.3 IPV6



6.2.2 ip分片与计算


6.2.2 ip分片与计算

ARP
6.4 ARP与RARP协议
ARP泛洪攻击




ARP欺骗






传输层封装协议TCP和UDP
5.7 TCP和UDP协议






路由协议基础RIP OSPF BGP ISIS
5.8 路由协议



路由综合配置专题
园区路由规划






动态路由配置








路由引入和路由策略





应用层协议DHCP SNMP DNS
5.7.4 重点协议端口号总结
dhcp
7.8 DHCP







snmp
9.2 SNMP
DNS
7.4 DNS
ip子网划分专题
[5.11 子网划分专题VLSM  CIDR](#子网划分专题VLSM  CIDR)
计算专题突破
补充知识的进制转换
补充知识的内存数量计算
3.3 二进制指数退避算法
2.1.4 奈奎斯特定理
2.1.5 香农定理
2.6 PCM
2.4 数据编码
2.2 信道延迟
2.10 CRC循环冗余校验码
计算机组成原理
进制转换
十进制：

十进制是Decimal，简写为D
以 0b 或 0B 作为前缀
都是以0-9这九个数字组成。
如:12,34,345等数字

二进制：

二进制是Binary，简写为B
由0和1两个数字组成。
10001等
二进制权表展开如下




27
26
25
24
23
22
21
20




128
64
32
16
8
4
2
1



八进制：

八进制是Octal，简写为O
由0-7数字组成，为了区分与其他进制的数字区别，开头都是以0开始。
如八进制0127

十六进制：

十六进制为Hexadecimal，简写为H
表示方式为0x或0X开头
计数到F后，再增加1个，就进位。
由0-9和A-F组成，英文字母A，B，C，D，E，F分别表示数字10～15。
如十六进制0xA87




1
2
3
4
5
6
7
8
9
A
B
C
D
E
F




1
2
3
4
5
6
7
8
9
10
11
12
13
14
15



整数转换
十进制转二进制

十进制转二进制的原理：十进制数除以2，余数为权位上的数，得到商继续除以2，直到商为0终止，然后反向取余数。

例如：(87)10转（1010111）2




十进制转八、十六进制的原理：跟十转二原理一样，十进制数除以8或16，余数为权位上的数，得到商继续除以8或16，直到商为0终止，然后反向取余数。

例如：(763)10转（1373）8或(2FB)16



二进制转换十进制
方法：把二进制数按权展开、相加即得十进制数。
如（1001）2转（9）10
1001从右往左表示如下



1
0
0
1




23
22
21
20


8
4
2
1



也就是  1*23+0*22+0*21+1*20=9
如(17)8转(15)10  展开2*81+7*80=15
如(1AB)16转(427)10  A对应10，B对应11  展开式 1*162+A*161+B*160=16*16+10*16+11*1=427
二进制转八进制、十六进制
如(10101110)2转(256)8

如(1110101110)2转(256)16

八进制和十六进制要转二进制倒推即可
小数转换
十进制转二进制
方法：十进制小数转换成二进制小数采用“乘2取整，顺序输出”
（0.125）10转(0.001）2
0.125*2=0.25  取0   向
0.25*2=0.5    取0   下
0.5*2=1       取1   取
也就是（0.001）2
二进制转十进制
(0.001）2转（0.125）10
0*($\frac{1}{2}$​)      即乘以2的负一次方
0*($\frac{1}{4}$)      即乘以2的负二次方
1*($\frac{1}{8}$)      即乘以2的负三次方
($\frac{1}{2}$)+($\frac{1}{4}$)+($\frac{1}{8}$)=0.125
二进制转换成十六进制
(0.101）2转（0.125）16
0.101  补4合1  小数部分从左往右补4位，缺的补0
0.1010   然后从右往左补（十六进制1248秘诀）
8421   相加得10且对应的是A
最后结果是(0.A)16
进制转换应用

例题：

带宽与存储计算
位(bit):网络数据传输的最小单位。
字节(byte):由8个bit组成，存储空间的最小单位。1byte=1B=8bit=8b
时间领域：1s = 103ms = 106us = 109ns
存储领域：1K=1024,即1KB=1024B,1MB=1024KB=1024 ✕ 1024B=210 ✕ 210B=220B
网络领域：1k=1000,即1kb/s=1000b/s,1Mb/s=1000kb/s=106b/s
​         1Gb = 103Mb = 106kb = 109b
其他单位:1G=1024M，1T=1024G，1P=1024T(存储单位是B字节)
例题：




计算机硬件架构
计算机硬件系统是冯诺依曼设计的体系结构，由运算器、控制器、存储器、输入/输出设备(I/O)五大部件组成,运算器和控制器组成中央处理器(CPU)






指令集RISC和CISC




存储分类与应用
存储器分类
计算机存储器分为:寄存器、Cache(高速缓冲存储器)、主存储器(内存)、辅助存储器( 硬盘)。
从下往上，速度越来越快，容量越来越小，成本越来越高,











存储芯片数量计算
内存芯片数量计算




输入输出I/O






原码，反码和补码
计算机只识别和处理二进制，而对于数据又分为有符号数据和无符号数据
有符号数据是指有正负之分的数据(如-10或+8)，无符号数据是没有正负之分的，如ASCI字符。
而原码，反码，补码是计算机存储有符号数据的编码方式。
在计算机中用一个数的最高位表示符号位，正数为0，负数为1。




正数
负数




原码
最高位添加符号位0
最高位添加符号位1


反码
最高位添加符号位0
保持其原码符号位不变，其余数值按位取反


补码
最高位添加符号位0
先保持器原码符号位不变，数值按位取反，然后再加1



一般八位二进制数




正数
数值
负数
数值




原码
00001001
9
10001001
-9


反码
00001001
9
11110110
-9


补码
00001001
9
11110111
-9



若某证书的16位补码为FFFFH（H表示十六进制），则该数的十进制的值位（）
F    F     F     F
展开补码如下
1111  1111  1111  1111
符号位不变，其余按位取反
1000  0000  0000  0000
最后一位加一
1000  0000  0000  0001
结论：对于负数来说：补码求原码就是补码按位取反然后最后一位加1
逻辑运算
逻辑运算只有两个布尔值：

0 ，表示假值（False）。
1 ，表示真值（True）。




逻辑运算
运算规则
常见运算符




与
有 0 为 0，全 1 为 1（有一个假全假）
“×”、“·”、“∧”


或
有 1 为 1，全 0 为 0（有一个真全真）
“＋”、“∨”


非
1 为 0，0 为 1（非黑即白，相反）
“¬”、“!”、“—”


同或
相同为 1，不同为 0
“⊙”


异或
不同为 1，相同为 0
“⊕”




例题：X,Y都是逻辑变量，与逻辑表达式X+!XY等价的是（D）
A.X+!Y   B.!X+!Y  C.!XX+Y  D.X+Y
解：可以假设x=0,y=0,以及x=1,y=1等如下




x=0,y=0
x=0,y=1
x=1,y=0
x=1,y=1




X+!XY
0+1*0=0
1
1
1


A.X+!Y
1
0
1
1


B.!X+!Y
1
1
1
0


C.!XX+Y
1
1
0
1


D.X+Y
0
1
1
1



操作系统
操作系统基础
操作系统5大功能进程管理、存储管理、文件管理、设备管理、作业管理。
PC和服务器端操作系统分类:Windows、Unix、Linux(开源)
国产操作系统:UOS、麒麟、中科方德、深度、红旗。【都是基于Linux开发)】
移动操作系统:IOS(苹果)、安卓(Android)和鸿蒙(HarmonyOs)





进程和线程

区别总结

图类对比





资源互斥
进程死锁


位示图计算



管理方法
说明
特点




位图法
用一个向量描述整个磁盘，每一位表示一个物理块的状态
易于寻找空闲块，适合各种文件分配法，本身小，可放于主存


链接法
使用链表将空闲块组织起来
适合各种文件分配法


索引法
将空闲块作为一个文件，并采用索引技术
适合各种文件分配法



位示图




0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15




0
1
1
0
0
0
1
1
1
0
1
0
1
1
1
1
0


1
0
0
0
1
1
1
1
1
1
0
0
0
0
1
1
1


2
1
1
1
1
0
0
0
1
1
1
1
1
0
0
0
0


3


















…


















15



















我们的磁盘空间都划分了很多个块，每个块都有一个标识，要么为0要么为1，若为1则表示已经被使用，反之未使用



内存页面转换




文件目录
Windows C:\windows\system32\test.txt 以某个盘符为根。
Linux: /etc/test.txt 只有一个根目录。
绝对路径:完整访问路径。
相对路径:从当今路径出发的访问路径，调用速度快。


软件工程
软件工程基础
软件危机:随着软件复杂度提升，开发成本、软件质量、生产效率等问题。
软件工程:为了消除软件危机，以工程学思路进行软件开发，即软件工程。
软件工程三个要素：
方法:完成软件工程项目的技术手段。
工具:支持软件的开发、管理、文档生成。
过程:支持软件开发的各个环节控制、管理。

信息系统生命周期模型


软件生命周期



软件开发模型
典型的软件生命周期模型
·1.瀑布模型
·2.螺旋模型
·3.迭代模型
·4.V模型
·5.原型化模型
·6.敏捷方法
瀑布模型

瀑布模型的优缺点


螺旋模型


迭代模型

增量模型

V模型

原型化模型

敏捷开发模型

不同软件生命周期模型优缺点对比




软件开发方法
信息系统开发方法

面向对象的开发方法


原型化方法


面向服务的方法

开发方法对比（掌握）





软件开发语言





软件测试













标准化知识产权
标准化知识
我国标准的级别






知识产权
知识产权保护相关法律



知识产权保护期限



知识产权归属

侵权判断





 特别声明
千屹博客旗下的所有文章，是通过本人课堂学习和课外自学所精心整理的知识巨著难免会有出错的地方如果细心的你发现了小失误，可以在下方评论区告诉我，或者私信我！非常感谢大家的热烈支持！

]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
